
obj_mmc/avr_mmc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  0000b618  0000b6cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b618  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001f6a  008001de  008001de  0000b7aa  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000b7aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000002a  00000000  00000000  0000b7ad  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b7d8  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000003a8  00000000  00000000  0000b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000c1e4  00000000  00000000  0000bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001977  00000000  00000000  00017da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00012779  00000000  00000000  0001971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00001054  00000000  00000000  0002be94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000e72  00000000  00000000  0002cee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000e64b  00000000  00000000  0002dd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000003e0  00000000  00000000  0003c3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__ctors_end>
       4:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
       8:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
       c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      10:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      14:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      18:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      1c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      20:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      24:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      28:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      2c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      30:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      34:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      38:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      3c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      40:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__vector_16>
      44:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      48:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      4c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      50:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__vector_20>
      54:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_21>
      58:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      5c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      60:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      64:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      68:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      6c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      70:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      74:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      78:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      7c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      80:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      84:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>
      88:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__bad_interrupt>

0000008c <__c.0>:
      8c:	72 63 3d 25 75 20 46 52 5f 25 53 0a 00              rc=%u FR_%S..

00000099 <str.1>:
      99:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
      a9:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
      b9:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
      c9:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
      d9:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
      e9:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
      f9:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
     109:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
     119:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
     129:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
     139:	45 4f 55 54 00 4c 4f 43 4b 45 44 00 4e 4f 54 5f     EOUT.LOCKED.NOT_
     149:	45 4e 4f 55 47 48 5f 43 4f 52 45 00 54 4f 4f 5f     ENOUGH_CORE.TOO_
     159:	4d 41 4e 59 5f 4f 50 45 4e 5f 46 49 4c 45 53 00     MANY_OPEN_FILES.
	...

0000016a <__c.2>:
     16a:	20 25 30 32 58 00                                    %02X.

00000170 <__c.3>:
     170:	25 30 38 6c 58 3a 00                                %08lX:.

00000177 <__c.4>:
     177:	5b 44 69 73 6b 20 63 6f 6e 74 6f 72 6c 73 5d 0a     [Disk contorls].
     187:	20 64 69 20 3c 70 64 23 3e 20 2d 20 49 6e 69 74      di <pd#> - Init
     197:	69 61 6c 69 7a 65 20 64 69 73 6b 0a 20 64 64 20     ialize disk. dd 
     1a7:	5b 3c 70 64 23 3e 20 3c 73 65 63 74 3e 5d 20 2d     [<pd#> <sect>] -
     1b7:	20 44 75 6d 70 20 61 20 73 65 63 72 74 6f 72 0a      Dump a secrtor.
     1c7:	20 64 73 20 3c 70 64 23 3e 20 2d 20 53 68 6f 77      ds <pd#> - Show
     1d7:	20 64 69 73 6b 20 73 74 61 74 75 73 0a 20 64 63      disk status. dc
     1e7:	73 20 3c 70 64 23 3e 20 2d 20 69 6f 63 74 6c 28     s <pd#> - ioctl(
     1f7:	43 54 52 4c 5f 53 59 4e 43 29 0a 5b 42 75 66 66     CTRL_SYNC).[Buff
     207:	65 72 20 63 6f 6e 74 72 6f 6c 73 5d 0a 20 62 64     er controls]. bd
     217:	20 3c 6f 66 73 3e 20 2d 20 44 75 6d 70 20 77 6f      <ofs> - Dump wo
     227:	72 6b 69 6e 67 20 62 75 66 66 65 72 0a 20 62 65     rking buffer. be
     237:	20 3c 6f 66 73 3e 20 5b 3c 64 61 74 61 3e 5d 20      <ofs> [<data>] 
     247:	2e 2e 2e 20 2d 20 45 64 69 74 20 77 6f 72 6b 69     ... - Edit worki
     257:	6e 67 20 62 75 66 66 65 72 0a 20 62 72 20 3c 70     ng buffer. br <p
     267:	64 23 3e 20 3c 73 65 63 74 3e 20 5b 3c 6e 75 6d     d#> <sect> [<num
     277:	3e 5d 20 2d 20 52 65 61 64 20 64 69 73 6b 20 69     >] - Read disk i
     287:	6e 74 6f 20 77 6f 72 6b 69 6e 67 20 62 75 66 66     nto working buff
     297:	65 72 0a 20 62 77 20 3c 70 64 23 3e 20 3c 73 65     er. bw <pd#> <se
     2a7:	63 74 3e 20 5b 3c 6e 75 6d 3e 5d 20 2d 20 57 72     ct> [<num>] - Wr
     2b7:	69 74 65 20 77 6f 72 6b 69 6e 67 20 62 75 66 66     ite working buff
     2c7:	65 72 20 69 6e 74 6f 20 64 69 73 6b 0a 20 62 66     er into disk. bf
     2d7:	20 3c 76 61 6c 3e 20 2d 20 46 69 6c 6c 20 77 6f      <val> - Fill wo
     2e7:	72 6b 69 6e 67 20 62 75 66 66 65 72 0a 20 62 6c     rking buffer. bl
     2f7:	20 3c 6c 65 6e 3e 20 2d 20 53 65 74 20 72 65 61      <len> - Set rea
     307:	64 2f 77 72 69 74 65 20 6c 65 6e 67 74 68 20 66     d/write length f
     317:	6f 72 20 66 72 2f 66 77 20 63 6f 6d 6d 61 6e 64     or fr/fw command
     327:	0a 5b 46 69 6c 65 73 79 73 74 65 6d 20 63 6f 6e     .[Filesystem con
     337:	74 72 6f 6c 73 5d 0a 20 66 69 20 3c 6c 64 23 3e     trols]. fi <ld#>
     347:	20 5b 3c 6d 6f 75 6e 74 3e 5d 20 2d 20 46 6f 72      [<mount>] - For
     357:	63 65 20 69 6e 69 74 69 61 6c 69 7a 65 64 20 74     ce initialized t
     367:	68 65 20 76 6f 6c 75 6d 65 0a 20 66 73 20 5b 3c     he volume. fs [<
     377:	70 61 74 68 3e 5d 20 2d 20 53 68 6f 77 20 76 6f     path>] - Show vo
     387:	6c 75 6d 65 20 73 74 61 74 75 73 0a 20 66 6c 20     lume status. fl 
     397:	5b 3c 70 61 74 68 3e 5d 20 2d 20 53 68 6f 77 20     [<path>] - Show 
     3a7:	61 20 64 69 72 65 63 74 6f 72 79 0a 20 66 6f 20     a directory. fo 
     3b7:	3c 6d 6f 64 65 3e 20 3c 66 69 6c 65 3e 20 2d 20     <mode> <file> - 
     3c7:	4f 70 65 6e 20 61 20 66 69 6c 65 0a 20 66 63 20     Open a file. fc 
     3d7:	2d 20 43 6c 6f 73 65 20 74 68 65 20 66 69 6c 65     - Close the file
     3e7:	0a 20 66 65 20 3c 6f 66 73 3e 20 2d 20 4d 6f 76     . fe <ofs> - Mov
     3f7:	65 20 66 70 20 69 6e 20 6e 6f 72 6d 61 6c 20 73     e fp in normal s
     407:	65 65 6b 0a 20 66 68 20 3c 66 73 7a 3e 20 3c 6f     eek. fh <fsz> <o
     417:	70 74 3e 20 2d 20 41 6c 6c 6f 63 61 74 65 20 61     pt> - Allocate a
     427:	20 63 6f 6e 74 69 67 75 6f 75 73 20 62 6c 6f 63      contiguous bloc
     437:	6b 20 74 6f 20 74 68 65 20 66 69 6c 65 0a 20 66     k to the file. f
     447:	64 20 3c 6c 65 6e 3e 20 2d 20 52 65 61 64 20 61     d <len> - Read a
     457:	6e 64 20 64 75 6d 70 20 74 68 65 20 66 69 6c 65     nd dump the file
     467:	0a 20 66 72 20 3c 6c 65 6e 3e 20 2d 20 52 65 61     . fr <len> - Rea
     477:	64 20 74 68 65 20 66 69 6c 65 0a 20 66 77 20 3c     d the file. fw <
     487:	6c 65 6e 3e 20 3c 76 61 6c 3e 20 2d 20 57 72 69     len> <val> - Wri
     497:	74 65 20 74 6f 20 74 68 65 20 66 69 6c 65 0a 20     te to the file. 
     4a7:	66 6e 20 3c 6f 72 67 20 6e 61 6d 65 3e 20 3c 6e     fn <org name> <n
     4b7:	65 77 20 6e 61 6d 65 3e 20 2d 20 52 65 6e 61 6d     ew name> - Renam
     4c7:	65 20 61 6e 20 6f 62 6a 65 63 74 0a 20 66 75 20     e an object. fu 
     4d7:	3c 6f 62 6a 20 6e 61 6d 65 3e 20 2d 20 55 6e 6c     <obj name> - Unl
     4e7:	69 6e 6b 20 61 6e 20 6f 62 6a 65 63 74 0a 20 66     ink an object. f
     4f7:	76 20 2d 20 54 72 75 6e 63 61 74 65 20 74 68 65     v - Truncate the
     507:	20 66 69 6c 65 20 61 74 20 63 75 72 72 65 6e 74      file at current
     517:	20 66 70 0a 20 66 6b 20 3c 64 69 72 20 6e 61 6d      fp. fk <dir nam
     527:	65 3e 20 2d 20 43 72 65 61 74 65 20 61 20 64 69     e> - Create a di
     537:	72 65 63 74 6f 72 79 0a 20 66 61 20 3c 61 74 72     rectory. fa <atr
     547:	72 3e 20 3c 6d 61 73 6b 3e 20 3c 6f 62 6a 65 63     r> <mask> <objec
     557:	74 20 6e 61 6d 65 3e 20 2d 20 43 68 61 6e 67 65     t name> - Change
     567:	20 6f 62 6a 65 63 74 20 61 74 74 72 69 62 75 74      object attribut
     577:	65 0a 20 66 74 20 3c 79 65 61 72 3e 20 3c 6d 6f     e. ft <year> <mo
     587:	6e 74 68 3e 20 3c 64 61 79 3e 20 3c 68 6f 75 72     nth> <day> <hour
     597:	3e 20 3c 6d 69 6e 3e 20 3c 73 65 63 3e 20 3c 6f     > <min> <sec> <o
     5a7:	62 6a 65 63 74 20 6e 61 6d 65 3e 20 2d 20 43 68     bject name> - Ch
     5b7:	61 6e 67 65 20 74 69 6d 65 73 74 61 6d 70 20 6f     ange timestamp o
     5c7:	66 20 61 6e 20 6f 62 6a 65 63 74 0a 20 66 78 20     f an object. fx 
     5d7:	3c 73 72 63 20 66 69 6c 65 3e 20 3c 64 73 74 20     <src file> <dst 
     5e7:	66 69 6c 65 3e 20 2d 20 43 6f 70 79 20 61 20 66     file> - Copy a f
     5f7:	69 6c 65 0a 20 66 67 20 3c 70 61 74 68 3e 20 2d     ile. fg <path> -
     607:	20 43 68 61 6e 67 65 20 63 75 72 72 65 6e 74 20      Change current 
     617:	64 69 72 65 63 74 6f 72 79 0a 20 66 6a 20 3c 70     directory. fj <p
     627:	61 74 68 3e 20 2d 20 43 68 61 6e 67 65 20 63 75     ath> - Change cu
     637:	72 72 65 6e 74 20 64 72 69 76 65 0a 20 66 71 20     rrent drive. fq 
     647:	2d 20 53 68 6f 77 20 63 75 72 72 65 6e 74 20 64     - Show current d
     657:	69 72 65 63 74 6f 72 79 0a 20 66 6d 20 3c 6c 64     irectory. fm <ld
     667:	23 3e 20 5b 3c 66 73 20 74 79 70 65 3e 20 5b 3c     #> [<fs type> [<
     677:	61 75 20 73 69 7a 65 3e 20 5b 3c 61 6c 69 67 6e     au size> [<align
     687:	3e 20 5b 3c 4e 20 66 61 74 73 3e 20 5b 3c 4e 20     > [<N fats> [<N 
     697:	72 6f 6f 74 3e 5d 5d 5d 5d 5d 20 2d 20 43 72 65     root>]]]]] - Cre
     6a7:	61 74 65 20 46 41 54 20 76 6f 6c 75 6d 65 0a 5b     ate FAT volume.[
     6b7:	4d 69 73 63 20 63 6f 6d 6d 61 6e 64 73 5d 0a 20     Misc commands]. 
     6c7:	70 20 3c 77 61 76 66 69 6c 65 3e 20 2d 20 50 6c     p <wavfile> - Pl
     6d7:	61 79 20 52 49 46 46 2d 57 41 56 45 20 66 69 6c     ay RIFF-WAVE fil
     6e7:	65 0a 20 74 20 5b 3c 79 65 61 72 3e 20 3c 6d 6f     e. t [<year> <mo
     6f7:	6e 74 68 3e 20 3c 6d 64 61 79 3e 20 3c 68 6f 75     nth> <mday> <hou
     707:	72 3e 20 3c 6d 69 6e 3e 20 3c 73 65 63 3e 5d 20     r> <min> <sec>] 
     717:	2d 20 53 65 74 2f 53 68 6f 77 20 63 75 72 72 65     - Set/Show curre
     727:	6e 74 20 74 69 6d 65 0a 0a 00                       nt time...

00000731 <__c.5>:
     731:	25 75 2f 25 75 2f 25 75 20 25 30 32 75 3a 25 30     %u/%u/%u %02u:%0
     741:	32 75 3a 25 30 32 75 0a 00                          2u:%02u..

0000074a <__c.6>:
     74a:	25 73 0a 00                                         %s..

0000074e <__c.7>:
     74e:	0a 25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65     .%lu bytes copie
     75e:	64 20 61 74 20 25 6c 75 20 62 79 74 65 73 2f 73     d at %lu bytes/s
     76e:	65 63 2e 0a 00                                      ec...

00000773 <__c.8>:
     773:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 00                 .Copying....

0000077f <__c.9>:
     77f:	0a 43 72 65 61 74 69 6e 67 20 22 25 73 22 00        .Creating "%s".

0000078e <__c.10>:
     78e:	4f 70 65 6e 69 6e 67 20 22 25 73 22 00              Opening "%s".

0000079b <__c.11>:
     79b:	25 6c 75 20 62 79 74 65 73 20 77 72 69 74 74 65     %lu bytes writte
     7ab:	6e 20 61 74 20 25 6c 75 20 62 79 74 65 73 2f 73     n at %lu bytes/s
     7bb:	65 63 2e 0a 00                                      ec...

000007c0 <__c.12>:
     7c0:	25 6c 75 20 62 79 74 65 73 20 72 65 61 64 20 61     %lu bytes read a
     7d0:	74 20 25 6c 75 20 62 79 74 65 73 2f 73 65 63 2e     t %lu bytes/sec.
     7e0:	0a 00                                               ..

000007e2 <__c.13>:
     7e2:	66 70 74 72 20 3d 20 25 6c 75 28 30 78 25 6c 58     fptr = %lu(0x%lX
     7f2:	29 0a 00                                            )..

000007f5 <__c.14>:
     7f5:	2c 20 25 31 30 6c 75 4b 69 42 20 66 72 65 65 0a     , %10luKiB free.
	...

00000806 <__c.15>:
     806:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     816:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     826:	75 20 44 69 72 28 73 29 00                          u Dir(s).

0000082f <__c.16>:
     82f:	25 63 25 63 25 63 25 63 25 63 20 25 75 2f 25 30     %c%c%c%c%c %u/%0
     83f:	32 75 2f 25 30 32 75 20 25 30 32 75 3a 25 30 32     2u/%02u %02u:%02
     84f:	75 20 25 39 6c 75 20 20 25 73 0a 00                 u %9lu  %s..

0000085b <__c.17>:
     85b:	0d 25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62     .%u files, %lu b
     86b:	79 74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73     ytes..%u folders
     87b:	2e 0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64     ..%lu KB total d
     88b:	69 73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b     isk space..%lu K
     89b:	42 20 61 76 61 69 6c 61 62 6c 65 2e 0a 00           B available...

000008a9 <__c.18>:
     8a9:	2e 2e 2e 00                                         ....

000008ad <__c.19>:
     8ad:	56 6f 6c 75 6d 65 20 53 2f 4e 20 69 73 20 25 30     Volume S/N is %0
     8bd:	34 58 2d 25 30 34 58 0a 00                          4X-%04X..

000008c6 <__c.20>:
     8c6:	4e 6f 20 76 6f 6c 75 6d 65 20 6c 61 62 65 6c 0a     No volume label.
	...

000008d7 <__c.21>:
     8d7:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 69 73 20 25     Volume name is %
     8e7:	73 0a 00                                            s..

000008ea <__c.22>:
     8ea:	46 41 54 20 74 79 70 65 20 3d 20 25 73 0a 42 79     FAT type = %s.By
     8fa:	74 65 73 2f 43 6c 75 73 74 65 72 20 3d 20 25 6c     tes/Cluster = %l
     90a:	75 0a 4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73     u.Number of FATs
     91a:	20 3d 20 25 75 0a 52 6f 6f 74 20 44 49 52 20 65      = %u.Root DIR e
     92a:	6e 74 72 69 65 73 20 3d 20 25 75 0a 53 65 63 74     ntries = %u.Sect
     93a:	6f 72 73 2f 46 41 54 20 3d 20 25 6c 75 0a 4e 75     ors/FAT = %lu.Nu
     94a:	6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65 72 73     mber of clusters
     95a:	20 3d 20 25 6c 75 0a 56 6f 6c 75 6d 65 20 73 74      = %lu.Volume st
     96a:	61 72 74 20 28 6c 62 61 29 20 3d 20 25 6c 75 0a     art (lba) = %lu.
     97a:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     98a:	3d 20 25 6c 75 0a 44 49 52 20 73 74 61 72 74 20     = %lu.DIR start 
     99a:	28 6c 62 61 2c 63 6c 75 73 74 6f 72 29 20 3d 20     (lba,clustor) = 
     9aa:	25 6c 75 0a 44 61 74 61 20 73 74 61 72 74 20 28     %lu.Data start (
     9ba:	6c 62 61 29 20 3d 20 25 6c 75 0a 0a 00              lba) = %lu...

000009c7 <__c.24>:
     9c7:	25 75 3a 00                                         %u:.

000009cb <__c.25>:
     9cb:	52 2f 57 20 6c 65 6e 67 74 68 20 3d 20 25 75 0a     R/W length = %u.
	...

000009dc <__c.26>:
     9dc:	72 63 3d 25 75 0a 00                                rc=%u..

000009e3 <__c.27>:
     9e3:	72 63 3d 25 75 0a 00                                rc=%u..

000009ea <__c.28>:
     9ea:	3f 3f 3f 0a 00                                      ???..

000009ef <__c.29>:
     9ef:	25 30 34 58 20 25 30 32 58 2d 00                    %04X %02X-.

000009fa <__c.30>:
     9fa:	72 63 3d 25 64 0a 00                                rc=%d..

00000a01 <__c.31>:
     a01:	53 2f 4e 3a 20 25 73 0a 00                          S/N: %s..

00000a0a <__c.32>:
     a0a:	4d 6f 64 65 6c 3a 20 25 73 0a 00                    Model: %s..

00000a15 <__c.33>:
     a15:	53 44 20 53 74 61 74 75 73 3a 0a 00                 SD Status:..

00000a21 <__c.34>:
     a21:	4f 43 52 3a 0a 00                                   OCR:..

00000a27 <__c.35>:
     a27:	43 49 44 3a 0a 00                                   CID:..

00000a2d <__c.36>:
     a2d:	43 53 44 3a 0a 00                                   CSD:..

00000a33 <__c.37>:
     a33:	43 61 72 64 20 74 79 70 65 3a 20 25 75 0a 00        Card type: %u..

00000a42 <__c.38>:
     a42:	45 72 61 73 65 20 62 6c 6f 63 6b 3a 20 25 6c 75     Erase block: %lu
     a52:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00000a5c <__c.39>:
     a5c:	44 72 69 76 65 20 73 69 7a 65 3a 20 25 6c 75 20     Drive size: %lu 
     a6c:	73 65 63 74 6f 72 73 0a 00                          sectors..

00000a75 <__c.40>:
     a75:	72 63 3d 25 64 0a 00                                rc=%d..

00000a7c <__c.41>:
     a7c:	53 65 63 74 6f 72 3a 25 6c 75 0a 00                 Sector:%lu..

00000a88 <__c.42>:
     a88:	72 63 3d 25 64 0a 00                                rc=%d..

00000a8f <__c.43>:
     a8f:	52 54 43 20 69 73 20 6e 6f 74 20 61 76 61 69 6c     RTC is not avail
     a9f:	61 62 6c 65 2e 0a 00                                able...

00000aa6 <__c.44>:
     aa6:	43 75 72 72 65 6e 74 20 74 69 6d 65 3a 20 25 75     Current time: %u
     ab6:	2f 25 75 2f 25 75 20 25 30 32 75 3a 25 30 32 75     /%u/%u %02u:%02u
     ac6:	3a 25 30 32 75 0a 00                                :%02u..

00000acd <__c.45>:
     acd:	4d 4d 43 20 3d 3d 3e 20 25 75 0a 00                 MMC ==> %u..

00000ad9 <__c.46>:
     ad9:	4c 46 4e 3d 25 53 2c 20 43 50 3d 25 75 0a 00        LFN=%S, CP=%u..

00000ae8 <__c.47>:
     ae8:	45 6e 61 62 6c 65 64 00                             Enabled.

00000af0 <__c.48>:
     af0:	0a 46 61 74 46 73 20 4d 6f 64 75 6c 65 20 54 65     .FatFs Module Te
     b00:	73 74 20 4d 6f 6e 69 74 6f 72 0a 00                 st Monitor..

00000b0c <cvt2.0>:
     b0c:	7d 1d 01 00 63 2c 00 1e 96 01 a0 1e 5a 01 00 1f     }...c,......Z...
     b1c:	08 06 10 1f 06 06 20 1f 08 06 30 1f 08 06 40 1f     ...... ...0...@.
     b2c:	06 06 51 1f 07 00 59 1f 52 1f 5b 1f 54 1f 5d 1f     ..Q...Y.R.[.T.].
     b3c:	56 1f 5f 1f 60 1f 08 06 70 1f 0e 00 ba 1f bb 1f     V._.`...p.......
     b4c:	c8 1f c9 1f ca 1f cb 1f da 1f db 1f f8 1f f9 1f     ................
     b5c:	ea 1f eb 1f fa 1f fb 1f 80 1f 08 06 90 1f 08 06     ................
     b6c:	a0 1f 08 06 b0 1f 04 00 b8 1f b9 1f b2 1f bc 1f     ................
     b7c:	cc 1f 01 00 c3 1f d0 1f 02 06 e0 1f 02 06 e5 1f     ................
     b8c:	01 00 ec 1f f2 1f 01 00 fc 1f 4e 21 01 00 32 21     ..........N!..2!
     b9c:	70 21 10 02 84 21 01 00 83 21 d0 24 1a 05 30 2c     p!...!...!.$..0,
     bac:	2f 04 60 2c 02 01 67 2c 06 01 75 2c 02 01 80 2c     /.`,..g,..u,...,
     bbc:	64 01 00 2d 26 08 41 ff 1a 03 00 00                 d..-&.A.....

00000bc8 <cvt1.1>:
     bc8:	61 00 1a 03 e0 00 17 03 f8 00 07 03 ff 00 01 00     a...............
     bd8:	78 01 00 01 30 01 32 01 06 01 39 01 10 01 4a 01     x...0.2...9...J.
     be8:	2e 01 79 01 06 01 80 01 4d 00 43 02 81 01 82 01     ..y.....M.C.....
     bf8:	82 01 84 01 84 01 86 01 87 01 87 01 89 01 8a 01     ................
     c08:	8b 01 8b 01 8d 01 8e 01 8f 01 90 01 91 01 91 01     ................
     c18:	93 01 94 01 f6 01 96 01 97 01 98 01 98 01 3d 02     ..............=.
     c28:	9b 01 9c 01 9d 01 20 02 9f 01 a0 01 a0 01 a2 01     ...... .........
     c38:	a2 01 a4 01 a4 01 a6 01 a7 01 a7 01 a9 01 aa 01     ................
     c48:	ab 01 ac 01 ac 01 ae 01 af 01 af 01 b1 01 b2 01     ................
     c58:	b3 01 b3 01 b5 01 b5 01 b7 01 b8 01 b8 01 ba 01     ................
     c68:	bb 01 bc 01 bc 01 be 01 f7 01 c0 01 c1 01 c2 01     ................
     c78:	c3 01 c4 01 c5 01 c4 01 c7 01 c8 01 c7 01 ca 01     ................
     c88:	cb 01 ca 01 cd 01 10 01 dd 01 01 00 8e 01 de 01     ................
     c98:	12 01 f3 01 03 00 f1 01 f4 01 f4 01 f8 01 28 01     ..............(.
     ca8:	22 02 12 01 3a 02 09 00 65 2c 3b 02 3b 02 3d 02     "...:...e,;.;.=.
     cb8:	66 2c 3f 02 40 02 41 02 41 02 46 02 0a 01 53 02     f,?.@.A.A.F...S.
     cc8:	40 00 81 01 86 01 55 02 89 01 8a 01 58 02 8f 01     @.....U.....X...
     cd8:	5a 02 90 01 5c 02 5d 02 5e 02 5f 02 93 01 61 02     Z...\.].^._...a.
     ce8:	62 02 94 01 64 02 65 02 66 02 67 02 97 01 96 01     b...d.e.f.g.....
     cf8:	6a 02 62 2c 6c 02 6d 02 6e 02 9c 01 70 02 71 02     j.b,l.m.n...p.q.
     d08:	9d 01 73 02 74 02 9f 01 76 02 77 02 78 02 79 02     ..s.t...v.w.x.y.
     d18:	7a 02 7b 02 7c 02 64 2c 7e 02 7f 02 a6 01 81 02     z.{.|.d,~.......
     d28:	82 02 a9 01 84 02 85 02 86 02 87 02 ae 01 44 02     ..............D.
     d38:	b1 01 b2 01 45 02 8d 02 8e 02 8f 02 90 02 91 02     ....E...........
     d48:	b7 01 7b 03 03 00 fd 03 fe 03 ff 03 ac 03 04 00     ..{.............
     d58:	86 03 88 03 89 03 8a 03 b1 03 11 03 c2 03 02 00     ................
     d68:	a3 03 a3 03 c4 03 08 03 cc 03 03 00 8c 03 8e 03     ................
     d78:	8f 03 d8 03 18 01 f2 03 0a 00 f9 03 f3 03 f4 03     ................
     d88:	f5 03 f6 03 f7 03 f7 03 f9 03 fa 03 fa 03 30 04     ..............0.
     d98:	20 03 50 04 10 07 60 04 22 01 8a 04 36 01 c1 04      .P...`."...6...
     da8:	0e 01 cf 04 01 00 c0 04 d0 04 44 01 61 05 26 04     ..........D.a.&.
	...

00000dba <Tbl>:
     dba:	c7 00 fc 00 e9 00 e2 00 e4 00 e0 00 e5 00 e7 00     ................
     dca:	ea 00 eb 00 e8 00 ef 00 ee 00 ec 00 c4 00 c5 00     ................
     dda:	c9 00 e6 00 c6 00 f4 00 f6 00 f2 00 fb 00 f9 00     ................
     dea:	ff 00 d6 00 dc 00 a2 00 a3 00 a5 00 a7 20 92 01     ............. ..
     dfa:	e1 00 ed 00 f3 00 fa 00 f1 00 d1 00 aa 00 ba 00     ................
     e0a:	bf 00 10 23 ac 00 bd 00 bc 00 a1 00 ab 00 bb 00     ...#............
     e1a:	91 25 92 25 93 25 02 25 24 25 61 25 62 25 56 25     .%.%.%.%$%a%b%V%
     e2a:	55 25 63 25 51 25 57 25 5d 25 5c 25 5b 25 10 25     U%c%Q%W%]%\%[%.%
     e3a:	14 25 34 25 2c 25 1c 25 00 25 3c 25 5e 25 5f 25     .%4%,%.%.%<%^%_%
     e4a:	5a 25 54 25 69 25 66 25 60 25 50 25 6c 25 67 25     Z%T%i%f%`%P%l%g%
     e5a:	68 25 64 25 65 25 59 25 58 25 52 25 53 25 6b 25     h%d%e%Y%X%R%S%k%
     e6a:	6a 25 18 25 0c 25 88 25 84 25 8c 25 90 25 80 25     j%.%.%.%.%.%.%.%
     e7a:	b1 03 df 00 93 03 c0 03 a3 03 c3 03 b5 00 c4 03     ................
     e8a:	a6 03 98 03 a9 03 b4 03 1e 22 c6 03 b5 03 29 22     ........."....)"
     e9a:	61 22 b1 00 65 22 64 22 20 23 21 23 f7 00 48 22     a"..e"d" #!#..H"
     eaa:	b0 00 19 22 b7 00 1a 22 7f 20 b2 00 a0 25 a0 00     ..."...". ...%..

00000eba <__ctors_end>:
     eba:	11 24       	eor	r1, r1
     ebc:	1f be       	out	0x3f, r1	; 63
     ebe:	cf ef       	ldi	r28, 0xFF	; 255
     ec0:	d0 e4       	ldi	r29, 0x40	; 64
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	cd bf       	out	0x3d, r28	; 61

00000ec6 <__do_copy_data>:
#else
#ifdef L_copy_data
	.section .init4,"ax",@progbits
DEFUN __do_copy_data
#if defined(__AVR_HAVE_ELPMX__)
	ldi	r17, hi8(__data_end)
     ec6:	11 e0       	ldi	r17, 0x01	; 1
	ldi	r26, lo8(__data_start)
     ec8:	a0 e0       	ldi	r26, 0x00	; 0
	ldi	r27, hi8(__data_start)
     eca:	b1 e0       	ldi	r27, 0x01	; 1
	ldi	r30, lo8(__data_load_start)
     ecc:	e8 e1       	ldi	r30, 0x18	; 24
	ldi	r31, hi8(__data_load_start)
     ece:	f6 eb       	ldi	r31, 0xB6	; 182
	ldi	r16, hh8(__data_load_start)
     ed0:	00 e0       	ldi	r16, 0x00	; 0
	out	__RAMPZ__, r16
     ed2:	0b bf       	out	0x3b, r16	; 59
	rjmp	.L__do_copy_data_start
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <__do_copy_data+0x14>
.L__do_copy_data_loop:
	elpm	r0, Z+
     ed6:	07 90       	elpm	r0, Z+
	st	X+, r0
     ed8:	0d 92       	st	X+, r0
.L__do_copy_data_start:
	cpi	r26, lo8(__data_end)
     eda:	ae 3d       	cpi	r26, 0xDE	; 222
	cpc	r27, r17
     edc:	b1 07       	cpc	r27, r17
	brne	.L__do_copy_data_loop
     ede:	d9 f7       	brne	.-10     	; 0xed6 <__do_copy_data+0x10>

00000ee0 <__do_clear_bss>:
/* __do_clear_bss is only necessary if there is anything in .bss section.  */

#ifdef L_clear_bss
	.section .init4,"ax",@progbits
DEFUN __do_clear_bss
	ldi	r18, hi8(__bss_end)
     ee0:	21 e2       	ldi	r18, 0x21	; 33
	ldi	r26, lo8(__bss_start)
     ee2:	ae ed       	ldi	r26, 0xDE	; 222
	ldi	r27, hi8(__bss_start)
     ee4:	b1 e0       	ldi	r27, 0x01	; 1
	rjmp	.do_clear_bss_start
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <.do_clear_bss_start>

00000ee8 <.do_clear_bss_loop>:
.do_clear_bss_loop:
	st	X+, __zero_reg__
     ee8:	1d 92       	st	X+, r1

00000eea <.do_clear_bss_start>:
.do_clear_bss_start:
	cpi	r26, lo8(__bss_end)
     eea:	a8 34       	cpi	r26, 0x48	; 72
	cpc	r27, r18
     eec:	b2 07       	cpc	r27, r18
	brne	.do_clear_bss_loop
     eee:	e1 f7       	brne	.-8      	; 0xee8 <.do_clear_bss_loop>
     ef0:	0e 94 81 4c 	call	0x9902	; 0x9902 <main>
     ef4:	0c 94 e3 5a 	jmp	0xb5c6	; 0xb5c6 <_exit>

00000ef8 <__bad_interrupt>:
     ef8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000efc <xputc>:

.func xputc
.global xputc
xputc:
#if CR_CRLF
	cpi	r24, 10		;LF --> CRLF
     efc:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
     efe:	19 f4       	brne	.+6      	; 0xf06 <xputc+0xa>
	ldi	r24, 13		;
     f00:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
     f02:	01 d0       	rcall	.+2      	; 0xf06 <xputc+0xa>
	ldi	r24, 10		;/
     f04:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
     f06:	ff 93       	push	r31
	push	ZL
     f08:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     f0a:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__bss_start>
	lds	ZH, xfunc_out+1	;/
     f0e:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__bss_start+0x1>
	sbiw	ZL, 0		;Skip if null
     f12:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     f14:	09 f0       	breq	.+2      	; 0xf18 <xputc+0x1c>
	icall
     f16:	09 95       	icall
2:	pop	ZL
     f18:	ef 91       	pop	r30
	pop	ZH
     f1a:	ff 91       	pop	r31
	ret
     f1c:	08 95       	ret

00000f1e <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     f1e:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     f20:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     f22:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     f24:	11 f0       	breq	.+4      	; 0xf2a <xputs+0xc>
	rcall	xputc
     f26:	ea df       	rcall	.-44     	; 0xefc <xputc>
	rjmp	1b
     f28:	fb cf       	rjmp	.-10     	; 0xf20 <xputs+0x2>
2:	ret
     f2a:	08 95       	ret

00000f2c <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     f2c:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     f2e:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     f30:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     f32:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     f34:	0c c0       	rjmp	.+24     	; 0xf4e <xitoa+0x22>
	neg	r20		;
     f36:	41 95       	neg	r20
	sbrs	r25, 7		;
     f38:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     f3a:	09 c0       	rjmp	.+18     	; 0xf4e <xitoa+0x22>
	ldi	r30, '-'	;
     f3c:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     f3e:	60 95       	com	r22
	com	r23		;
     f40:	70 95       	com	r23
	com	r24		;
     f42:	80 95       	com	r24
	com	r25		;
     f44:	90 95       	com	r25
	adc	r22, r1		;
     f46:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     f48:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     f4a:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     f4c:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     f4e:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <xitoa+0x2a>
	neg	r18		;
     f52:	21 95       	neg	r18
	ldi	r19, '0'	;/
     f54:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     f56:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     f58:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     f5a:	66 0f       	add	r22, r22
	rol	r23		;
     f5c:	77 1f       	adc	r23, r23
	rol	r24		;
     f5e:	88 1f       	adc	r24, r24
	rol	r25		;
     f60:	99 1f       	adc	r25, r25
	rol	r26		;
     f62:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     f64:	a4 17       	cp	r26, r20
	brcs	3f		;
     f66:	10 f0       	brcs	.+4      	; 0xf6c <xitoa+0x40>
	sub	r26, r20	;
     f68:	a4 1b       	sub	r26, r20
	inc	r22		;
     f6a:	63 95       	inc	r22
3:	dec	r21		;
     f6c:	5a 95       	dec	r21
	brne	2b		;/
     f6e:	a9 f7       	brne	.-22     	; 0xf5a <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     f70:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     f72:	08 f0       	brcs	.+2      	; 0xf76 <xitoa+0x4a>
	subi	r26, -7		;
     f74:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     f76:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     f78:	af 93       	push	r26
	inc	r31		;/
     f7a:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     f7c:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     f7e:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     f80:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     f82:	91 05       	cpc	r25, r1
	brne	1b		;/
     f84:	41 f7       	brne	.-48     	; 0xf56 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     f86:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     f88:	11 f4       	brne	.+4      	; 0xf8e <xitoa+0x62>
	push	r30		;
     f8a:	ef 93       	push	r30
	inc	r31		;/
     f8c:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     f8e:	f2 17       	cp	r31, r18
	brcc	6f		;
     f90:	18 f4       	brcc	.+6      	; 0xf98 <xitoa+0x6c>
	push	r19		;
     f92:	3f 93       	push	r19
	inc	r31		;
     f94:	f3 95       	inc	r31
	rjmp	5b		;/
     f96:	fb cf       	rjmp	.-10     	; 0xf8e <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     f98:	8f 91       	pop	r24
	rcall	xputc		;
     f9a:	b0 df       	rcall	.-160    	; 0xefc <xputc>
	dec	r31		;
     f9c:	fa 95       	dec	r31
	brne	6b		;/
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <xitoa+0x6c>

	ret
     fa0:	08 95       	ret

00000fa2 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     fa2:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     fa4:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     fa6:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     fa8:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     faa:	21 f0       	breq	.+8      	; 0xfb4 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     fac:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     fae:	19 f0       	breq	.+6      	; 0xfb6 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     fb0:	a5 df       	rcall	.-182    	; 0xefc <xputc>
	rjmp	0b		;/
     fb2:	f9 cf       	rjmp	.-14     	; 0xfa6 <xvprintf+0x4>
90:	ret
     fb4:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     fb6:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     fb8:	e8 94       	clt
	_LPMI	r21		;Get flags
     fba:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     fbc:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     fbe:	c1 f3       	breq	.-16     	; 0xfb0 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     fc0:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <xvprintf+0x26>
	set			;/
     fc4:	68 94       	set
22:	_LPMI	r21		;Get width
     fc6:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     fc8:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     fca:	48 f4       	brcc	.+18     	; 0xfde <xvprintf+0x3c>
	subi	r21, '0'	;
     fcc:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     fce:	90 f3       	brcs	.-28     	; 0xfb4 <xvprintf+0x12>
	lsl	r18		;
     fd0:	22 0f       	add	r18, r18
	mov	r0, r18		;
     fd2:	02 2e       	mov	r0, r18
	lsl	r18		;
     fd4:	22 0f       	add	r18, r18
	lsl	r18		;
     fd6:	22 0f       	add	r18, r18
	add	r18, r0		;
     fd8:	20 0d       	add	r18, r0
	add	r18, r21	;
     fda:	25 0f       	add	r18, r21
	rjmp	22b		;/
     fdc:	f4 cf       	rjmp	.-24     	; 0xfc6 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     fde:	0e f4       	brtc	.+2      	; 0xfe2 <xvprintf+0x40>
	neg	r18		;
     fe0:	21 95       	neg	r18
25:	ld	r24, Y+		;
     fe2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     fe4:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     fe6:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     fe8:	19 f3       	breq	.-58     	; 0xfb0 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     fea:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     fec:	29 f1       	breq	.+74     	; 0x1038 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     fee:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     ff0:	59 f1       	breq	.+86     	; 0x1048 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     ff2:	bc 01       	movw	r22, r24
	clr	r24		;
     ff4:	88 27       	eor	r24, r24
	clr	r25		;
     ff6:	99 27       	eor	r25, r25
	clt			;/
     ff8:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     ffa:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     ffc:	21 f4       	brne	.+8      	; 0x1006 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ffe:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    1000:	99 91       	ld	r25, Y+
	set			;
    1002:	68 94       	set
	_LPMI	r21		;/
    1004:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    1006:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    1008:	39 f4       	brne	.+14     	; 0x1018 <xvprintf+0x76>
	ldi	r20, -10	;
    100a:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    100c:	7e f0       	brts	.+30     	; 0x102c <xvprintf+0x8a>
	sbrs	r23, 7		;
    100e:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    1010:	0d c0       	rjmp	.+26     	; 0x102c <xvprintf+0x8a>
	ldi	r24, -1		;
    1012:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    1014:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    1016:	0a c0       	rjmp	.+20     	; 0x102c <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    1018:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    101a:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    101c:	39 f0       	breq	.+14     	; 0x102c <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    101e:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    1020:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    1022:	21 f0       	breq	.+8      	; 0x102c <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    1024:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    1026:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    1028:	09 f0       	breq	.+2      	; 0x102c <xvprintf+0x8a>
	ret			;abort
    102a:	08 95       	ret
40:	push	ZH		;Output the value
    102c:	ff 93       	push	r31
	push	ZL		;
    102e:	ef 93       	push	r30
	rcall	xitoa		;
    1030:	7d df       	rcall	.-262    	; 0xf2c <xitoa>
42:	pop	ZL		;
    1032:	ef 91       	pop	r30
	pop	ZH		;
    1034:	ff 91       	pop	r31
	rjmp	0b		;/
    1036:	b7 cf       	rjmp	.-146    	; 0xfa6 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    1038:	ff 93       	push	r31
	push	ZL
    103a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    103c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    103e:	81 91       	ld	r24, Z+
	cpi	r24, 0
    1040:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    1042:	b9 f3       	breq	.-18     	; 0x1032 <xvprintf+0x90>
	rcall	xputc
    1044:	5b df       	rcall	.-330    	; 0xefc <xputc>
	rjmp	51b
    1046:	fb cf       	rjmp	.-10     	; 0x103e <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    1048:	ff 93       	push	r31
	push	ZL
    104a:	ef 93       	push	r30
	rcall	xputs
    104c:	68 df       	rcall	.-304    	; 0xf1e <xputs>
	rjmp	42b
    104e:	f1 cf       	rjmp	.-30     	; 0x1032 <xvprintf+0x90>

00001050 <xprintf>:


.func xprintf
.global xprintf
xprintf:
	push	YH
    1050:	df 93       	push	r29
	push	YL
    1052:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    1054:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1056:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    1058:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    105a:	a3 df       	rcall	.-186    	; 0xfa2 <xvprintf>
	pop	YL
    105c:	cf 91       	pop	r28
	pop	YH
    105e:	df 91       	pop	r29
	ret
    1060:	08 95       	ret

00001062 <putram>:

#if USE_XSPRINTF

.func xsprintf
putram:
	_MOVW	ZH,ZL, r15,r14
    1062:	f7 01       	movw	r30, r14
	st	Z+, r24
    1064:	81 93       	st	Z+, r24
	_MOVW	r15,r14, ZH,ZL
    1066:	7f 01       	movw	r14, r30
	ret
    1068:	08 95       	ret

0000106a <xsprintf>:
.global xsprintf
xsprintf:
	push	YH
    106a:	df 93       	push	r29
	push	YL
    106c:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    106e:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1070:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    1072:	25 96       	adiw	r28, 0x05	; 5
	lds	ZL, xfunc_out+0	;Save registered output function
    1074:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__bss_start>
	lds	ZH, xfunc_out+1	;
    1078:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__bss_start+0x1>
	push	ZL		;
    107c:	ef 93       	push	r30
	push	ZH		;/
    107e:	ff 93       	push	r31
	ldi	ZL, lo8(pm(putram));Set local output function
    1080:	e1 e3       	ldi	r30, 0x31	; 49
	ldi	ZH, hi8(pm(putram));
    1082:	f8 e0       	ldi	r31, 0x08	; 8
	sts	xfunc_out+0, ZL	;
    1084:	e0 93 de 01 	sts	0x01DE, r30	; 0x8001de <__bss_start>
	sts	xfunc_out+1, ZH	;/
    1088:	f0 93 df 01 	sts	0x01DF, r31	; 0x8001df <__bss_start+0x1>
	push	r15		;Initialize pointer to string buffer
    108c:	ff 92       	push	r15
	push	r14		;
    108e:	ef 92       	push	r14
	ld	r14, Y+		;
    1090:	e9 90       	ld	r14, Y+
	ld	r15, Y+		;/
    1092:	f9 90       	ld	r15, Y+
	rcall	xvprintf
    1094:	86 df       	rcall	.-244    	; 0xfa2 <xvprintf>
	_MOVW	ZH,ZL, r15,r14	;Terminate string
    1096:	f7 01       	movw	r30, r14
	st	Z, r1		;
    1098:	10 82       	st	Z, r1
	pop	r14		;
    109a:	ef 90       	pop	r14
	pop	r15		;/
    109c:	ff 90       	pop	r15
	pop	ZH		;Restore registered output function
    109e:	ff 91       	pop	r31
	pop	ZL		;
    10a0:	ef 91       	pop	r30
	sts	xfunc_out+0, ZL	;
    10a2:	e0 93 de 01 	sts	0x01DE, r30	; 0x8001de <__bss_start>
	sts	xfunc_out+1, ZH	;/
    10a6:	f0 93 df 01 	sts	0x01DF, r31	; 0x8001df <__bss_start+0x1>
	pop	YL
    10aa:	cf 91       	pop	r28
	pop	YH
    10ac:	df 91       	pop	r29
	ret
    10ae:	08 95       	ret

000010b0 <xatoi>:

#if USE_XATOI
.func xatoi
.global xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    10b0:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    10b2:	dc 01       	movw	r26, r24
	ld	ZL, X+
    10b4:	ed 91       	ld	r30, X+
	ld	ZH, X+
    10b6:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    10b8:	22 27       	eor	r18, r18
	clr	r19		;
    10ba:	33 27       	eor	r19, r19
	clr	r20		;
    10bc:	44 27       	eor	r20, r20
	clr	r21		;/
    10be:	55 27       	eor	r21, r21
	clt			;T = 0;
    10c0:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    10c2:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    10c6:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    10c8:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    10ca:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    10cc:	e1 f3       	breq	.-8      	; 0x10c6 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    10ce:	a8 f1       	brcs	.+106    	; 0x113a <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    10d0:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <xatoi+0x28>
	set			; continue;
    10d4:	68 94       	set
	rjmp	40b		;}
    10d6:	f7 cf       	rjmp	.-18     	; 0x10c6 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    10d8:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    10da:	78 f5       	brcc	.+94     	; 0x113a <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    10dc:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    10de:	68 f1       	brcs	.+90     	; 0x113a <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    10e0:	71 f4       	brne	.+28     	; 0x10fe <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    10e2:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    10e4:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    10e6:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    10e8:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    10ea:	48 f1       	brcs	.+82     	; 0x113e <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    10ec:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    10f0:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    10f4:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    10f6:	19 f4       	brne	.+6      	; 0x10fe <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    10f8:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    10fa:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    10fc:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    10fe:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    1100:	f0 f0       	brcs	.+60     	; 0x113e <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    1102:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    1104:	08 f0       	brcs	.+2      	; 0x1108 <xatoi+0x58>
	subi	r22, 0x20	;/
    1106:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    1108:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    110a:	b8 f0       	brcs	.+46     	; 0x113a <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    110c:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    110e:	18 f0       	brcs	.+6      	; 0x1116 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    1110:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    1112:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    1114:	90 f0       	brcs	.+36     	; 0x113a <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    1116:	69 17       	cp	r22, r25
	brcc	70f		;/
    1118:	80 f4       	brcc	.+32     	; 0x113a <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    111a:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    111c:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    111e:	08 f4       	brcc	.+2      	; 0x1122 <xatoi+0x72>
	add	r23, r25	;
    1120:	79 0f       	add	r23, r25
62:	lsr	r23		;
    1122:	76 95       	lsr	r23
	ror	r21		;
    1124:	57 95       	ror	r21
	ror	r20		;
    1126:	47 95       	ror	r20
	ror	r19		;
    1128:	37 95       	ror	r19
	ror	r18		;
    112a:	27 95       	ror	r18
	dec	r24		;
    112c:	8a 95       	dec	r24
	brne	61b		;/
    112e:	b9 f7       	brne	.-18     	; 0x111e <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    1130:	26 0f       	add	r18, r22
	adc	r19, r24	;
    1132:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    1134:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    1136:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    1138:	e0 cf       	rjmp	.-64     	; 0x10fa <xatoi+0x4a>

70:	ldi	r24, 0
    113a:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <xatoi+0x90>
80:	ldi	r24, 1
    113e:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    1140:	4e f4       	brtc	.+18     	; 0x1154 <xatoi+0xa4>
	clr	r22
    1142:	66 27       	eor	r22, r22
	com	r18
    1144:	20 95       	com	r18
	com	r19
    1146:	30 95       	com	r19
	com	r20
    1148:	40 95       	com	r20
	com	r21
    114a:	50 95       	com	r21
	adc	r18, r22
    114c:	26 1f       	adc	r18, r22
	adc	r19, r22
    114e:	36 1f       	adc	r19, r22
	adc	r20, r22
    1150:	46 1f       	adc	r20, r22
	adc	r21, r22
    1152:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    1154:	fe 93       	st	-X, r31
	st	-X, ZL
    1156:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    1158:	d0 01       	movw	r26, r0
	st	X+, r18
    115a:	2d 93       	st	X+, r18
	st	X+, r19
    115c:	3d 93       	st	X+, r19
	st	X+, r20
    115e:	4d 93       	st	X+, r20
	st	X+, r21
    1160:	5d 93       	st	X+, r21
	clr	r1
    1162:	11 24       	eor	r1, r1
	ret
    1164:	08 95       	ret

00001166 <put_rc>:



static
void put_rc (FRESULT rc)
{
    1166:	9c 01       	movw	r18, r24
		"DENIED\0EXIST\0INVALID_OBJECT\0WRITE_PROTECTED\0INVALID_DRIVE\0"
		"NOT_ENABLED\0NO_FILE_SYSTEM\0MKFS_ABORTED\0TIMEOUT\0LOCKED\0"
		"NOT_ENOUGH_CORE\0TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	89 e9       	ldi	r24, 0x99	; 153
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	42 17       	cp	r20, r18
    1172:	53 07       	cpc	r21, r19
    1174:	89 f4       	brne	.+34     	; 0x1198 <put_rc+0x32>
		while(pgm_read_byte_near(p++));
	}
	xprintf(PSTR("rc=%u FR_%S\n"), rc, p);
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	3f 93       	push	r19
    117c:	2f 93       	push	r18
    117e:	8c e8       	ldi	r24, 0x8C	; 140
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9f 93       	push	r25
    1184:	8f 93       	push	r24
    1186:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	08 95       	ret
	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    1198:	fc 01       	movw	r30, r24
    119a:	64 91       	lpm	r22, Z
    119c:	66 23       	and	r22, r22
    119e:	59 f3       	breq	.-42     	; 0x1176 <put_rc+0x10>
		while(pgm_read_byte_near(p++));
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	fc 01       	movw	r30, r24
    11a4:	31 97       	sbiw	r30, 0x01	; 1
    11a6:	e4 91       	lpm	r30, Z
    11a8:	e1 11       	cpse	r30, r1
    11aa:	fa cf       	rjmp	.-12     	; 0x11a0 <put_rc+0x3a>
	for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    11ac:	4f 5f       	subi	r20, 0xFF	; 255
    11ae:	5f 4f       	sbci	r21, 0xFF	; 255
    11b0:	df cf       	rjmp	.-66     	; 0x1170 <put_rc+0xa>

000011b2 <put_dump>:
{
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	ef ed       	ldi	r30, 0xDF	; 223
    11b8:	f8 e0       	ldi	r31, 0x08	; 8
    11ba:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__prologue_saves__+0x14>
    11be:	f8 2e       	mov	r15, r24
    11c0:	09 2f       	mov	r16, r25
    11c2:	12 2f       	mov	r17, r18
	xprintf(PSTR("%08lX:"), ofs);
    11c4:	7f 93       	push	r23
    11c6:	6f 93       	push	r22
    11c8:	5f 93       	push	r21
    11ca:	4f 93       	push	r20
    11cc:	80 e7       	ldi	r24, 0x70	; 112
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	9f 93       	push	r25
    11d2:	8f 93       	push	r24
    11d4:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
	for(i = 0; i < cnt; i++)
    11d8:	cf 2d       	mov	r28, r15
    11da:	d0 2f       	mov	r29, r16
    11dc:	7e 01       	movw	r14, r28
    11de:	e1 0e       	add	r14, r17
    11e0:	f1 1c       	adc	r15, r1
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	8e 01       	movw	r16, r28
		xprintf(PSTR(" %02X"), buff[i]);
    11f0:	8a e6       	ldi	r24, 0x6A	; 106
    11f2:	c8 2e       	mov	r12, r24
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	d8 2e       	mov	r13, r24
	for(i = 0; i < cnt; i++)
    11f8:	0e 15       	cp	r16, r14
    11fa:	1f 05       	cpc	r17, r15
    11fc:	71 f4       	brne	.+28     	; 0x121a <put_dump+0x68>
	xputc(' ');
    11fe:	80 e2       	ldi	r24, 0x20	; 32
		xputc((buff[i] >= ' ' && buff[i] <= '~') ? buff[i] : '.');
    1200:	0e 94 7e 07 	call	0xefc	; 0xefc <xputc>
	for(i = 0; i < cnt; i++)
    1204:	ce 15       	cp	r28, r14
    1206:	df 05       	cpc	r29, r15
    1208:	b1 f4       	brne	.+44     	; 0x1236 <put_dump+0x84>
	xputc('\n');
    120a:	8a e0       	ldi	r24, 0x0A	; 10
    120c:	0e 94 7e 07 	call	0xefc	; 0xefc <xputc>
}
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	e8 e0       	ldi	r30, 0x08	; 8
    1216:	0c 94 5a 5a 	jmp	0xb4b4	; 0xb4b4 <__epilogue_restores__+0x14>
		xprintf(PSTR(" %02X"), buff[i]);
    121a:	f8 01       	movw	r30, r16
    121c:	81 91       	ld	r24, Z+
    121e:	8f 01       	movw	r16, r30
    1220:	1f 92       	push	r1
    1222:	8f 93       	push	r24
    1224:	df 92       	push	r13
    1226:	cf 92       	push	r12
    1228:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	e1 cf       	rjmp	.-62     	; 0x11f8 <put_dump+0x46>
		xputc((buff[i] >= ' ' && buff[i] <= '~') ? buff[i] : '.');
    1236:	89 91       	ld	r24, Y+
    1238:	90 ee       	ldi	r25, 0xE0	; 224
    123a:	98 0f       	add	r25, r24
    123c:	9f 35       	cpi	r25, 0x5F	; 95
    123e:	00 f3       	brcs	.-64     	; 0x1200 <put_dump+0x4e>
    1240:	8e e2       	ldi	r24, 0x2E	; 46
    1242:	de cf       	rjmp	.-68     	; 0x1200 <put_dump+0x4e>

00001244 <scan_files.constprop.0>:
FRESULT scan_files (
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	c4 54       	subi	r28, 0x44	; 68
    125c:	d1 09       	sbc	r29, r1
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
	fr = f_opendir(&dirs, path);
    1268:	63 e5       	ldi	r22, 0x53	; 83
    126a:	7c e0       	ldi	r23, 0x0C	; 12
    126c:	8e 01       	movw	r16, r28
    126e:	0f 5f       	subi	r16, 0xFF	; 255
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	c8 01       	movw	r24, r16
    1274:	0e 94 f7 3f 	call	0x7fee	; 0x7fee <f_opendir>
    1278:	9c 01       	movw	r18, r24
	if (fr == FR_OK) {
    127a:	e0 2e       	mov	r14, r16
    127c:	d1 2e       	mov	r13, r17
				i = strlen(path);
    127e:	03 e5       	ldi	r16, 0x53	; 83
    1280:	1c e0       	ldi	r17, 0x0C	; 12
				path[i] = '/'; strcpy(path+i+1, Finfo.fname);
    1282:	8f e2       	ldi	r24, 0x2F	; 47
    1284:	f8 2e       	mov	r15, r24
	if (fr == FR_OK) {
    1286:	21 15       	cp	r18, r1
    1288:	31 05       	cpc	r19, r1
    128a:	a9 f1       	breq	.+106    	; 0x12f6 <scan_files.constprop.0+0xb2>
}
    128c:	c9 01       	movw	r24, r18
    128e:	cc 5b       	subi	r28, 0xBC	; 188
    1290:	df 4f       	sbci	r29, 0xFF	; 255
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	08 95       	ret
			if (Finfo.fattrib & AM_DIR) {
    12b0:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Finfo+0xc>
    12b4:	84 ff       	sbrs	r24, 4
    12b6:	2d c0       	rjmp	.+90     	; 0x1312 <scan_files.constprop.0+0xce>
				AccDirs++;
    12b8:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <AccDirs>
    12bc:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <AccDirs+0x1>
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <AccDirs+0x1>
    12c6:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <AccDirs>
				i = strlen(path);
    12ca:	f8 01       	movw	r30, r16
    12cc:	01 90       	ld	r0, Z+
    12ce:	00 20       	and	r0, r0
    12d0:	e9 f7       	brne	.-6      	; 0x12cc <scan_files.constprop.0+0x88>
    12d2:	cf 01       	movw	r24, r30
				path[i] = '/'; strcpy(path+i+1, Finfo.fname);
    12d4:	9f 01       	movw	r18, r30
    12d6:	21 50       	subi	r18, 0x01	; 1
    12d8:	31 09       	sbc	r19, r1
    12da:	59 01       	movw	r10, r18
    12dc:	f9 01       	movw	r30, r18
    12de:	f0 82       	st	Z, r15
    12e0:	65 e0       	ldi	r22, 0x05	; 5
    12e2:	72 e0       	ldi	r23, 0x02	; 2
    12e4:	0e 94 dc 5a 	call	0xb5b8	; 0xb5b8 <strcpy>
				fr = scan_files(path);
    12e8:	0e 94 22 09 	call	0x1244	; 0x1244 <scan_files.constprop.0>
    12ec:	9c 01       	movw	r18, r24
				path[i] = 0;
    12ee:	f5 01       	movw	r30, r10
    12f0:	10 82       	st	Z, r1
				if (fr != FR_OK) break;
    12f2:	89 2b       	or	r24, r25
    12f4:	59 f6       	brne	.-106    	; 0x128c <scan_files.constprop.0+0x48>
		while (((fr = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
    12f6:	6b ee       	ldi	r22, 0xEB	; 235
    12f8:	71 e0       	ldi	r23, 0x01	; 1
    12fa:	8e 2d       	mov	r24, r14
    12fc:	9d 2d       	mov	r25, r13
    12fe:	0e 94 97 40 	call	0x812e	; 0x812e <f_readdir>
    1302:	9c 01       	movw	r18, r24
    1304:	89 2b       	or	r24, r25
    1306:	11 f6       	brne	.-124    	; 0x128c <scan_files.constprop.0+0x48>
    1308:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Finfo+0x1a>
    130c:	81 11       	cpse	r24, r1
    130e:	d0 cf       	rjmp	.-96     	; 0x12b0 <scan_files.constprop.0+0x6c>
    1310:	bd cf       	rjmp	.-134    	; 0x128c <scan_files.constprop.0+0x48>
				AccFiles++;
    1312:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <AccFiles>
    1316:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <AccFiles+0x1>
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <AccFiles+0x1>
    1320:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <AccFiles>
				AccSize += Finfo.fsize;
    1324:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <AccSize>
    1328:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <AccSize+0x1>
    132c:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <AccSize+0x2>
    1330:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <AccSize+0x3>
    1334:	40 91 eb 01 	lds	r20, 0x01EB	; 0x8001eb <Finfo>
    1338:	50 91 ec 01 	lds	r21, 0x01EC	; 0x8001ec <Finfo+0x1>
    133c:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <Finfo+0x2>
    1340:	70 91 ee 01 	lds	r23, 0x01EE	; 0x8001ee <Finfo+0x3>
    1344:	84 0f       	add	r24, r20
    1346:	95 1f       	adc	r25, r21
    1348:	a6 1f       	adc	r26, r22
    134a:	b7 1f       	adc	r27, r23
    134c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <AccSize>
    1350:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <AccSize+0x1>
    1354:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <AccSize+0x2>
    1358:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <AccSize+0x3>
    135c:	cc cf       	rjmp	.-104    	; 0x12f6 <scan_files.constprop.0+0xb2>

0000135e <get_line.constprop.0>:
void get_line (char *buff, int len)
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	8c 01       	movw	r16, r24
	int i = 0;
    136c:	d0 e0       	ldi	r29, 0x00	; 0
    136e:	c0 e0       	ldi	r28, 0x00	; 0
		c = uart_getc();
    1370:	0e 94 ad 0a 	call	0x155a	; 0x155a <uart_getc>
		if (c == '\r') break;
    1374:	8d 30       	cpi	r24, 0x0D	; 13
    1376:	c1 f0       	breq	.+48     	; 0x13a8 <get_line.constprop.0+0x4a>
		if ((c == '\b') && i) {
    1378:	88 30       	cpi	r24, 0x08	; 8
    137a:	31 f4       	brne	.+12     	; 0x1388 <get_line.constprop.0+0x2a>
    137c:	20 97       	sbiw	r28, 0x00	; 0
    137e:	c1 f3       	breq	.-16     	; 0x1370 <get_line.constprop.0+0x12>
			i--;
    1380:	21 97       	sbiw	r28, 0x01	; 1
			uart_putc(c);
    1382:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <uart_putc>
			continue;
    1386:	f4 cf       	rjmp	.-24     	; 0x1370 <get_line.constprop.0+0x12>
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
    1388:	80 32       	cpi	r24, 0x20	; 32
    138a:	90 f3       	brcs	.-28     	; 0x1370 <get_line.constprop.0+0x12>
    138c:	c7 37       	cpi	r28, 0x77	; 119
    138e:	d1 05       	cpc	r29, r1
    1390:	7c f7       	brge	.-34     	; 0x1370 <get_line.constprop.0+0x12>
			buff[i++] = c;
    1392:	7e 01       	movw	r14, r28
    1394:	9f ef       	ldi	r25, 0xFF	; 255
    1396:	e9 1a       	sub	r14, r25
    1398:	f9 0a       	sbc	r15, r25
    139a:	c0 0f       	add	r28, r16
    139c:	d1 1f       	adc	r29, r17
    139e:	88 83       	st	Y, r24
			xputc(c);
    13a0:	0e 94 7e 07 	call	0xefc	; 0xefc <xputc>
			buff[i++] = c;
    13a4:	e7 01       	movw	r28, r14
    13a6:	e4 cf       	rjmp	.-56     	; 0x1370 <get_line.constprop.0+0x12>
	buff[i] = 0;
    13a8:	c0 0f       	add	r28, r16
    13aa:	d1 1f       	adc	r29, r17
    13ac:	18 82       	st	Y, r1
	xputc('\n');
    13ae:	8a e0       	ldi	r24, 0x0A	; 10
    13b0:	0e 94 7e 07 	call	0xefc	; 0xefc <xputc>
}
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	e6 e0       	ldi	r30, 0x06	; 6
    13ba:	0c 94 5c 5a 	jmp	0xb4b8	; 0xb4b8 <__epilogue_restores__+0x18>

000013be <get_fattime>:
{
    13be:	ac e0       	ldi	r26, 0x0C	; 12
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 ee       	ldi	r30, 0xE5	; 229
    13c4:	f9 e0       	ldi	r31, 0x09	; 9
    13c6:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
	if (!RtcOk) return 0;
    13ca:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RtcOk>
    13ce:	88 23       	and	r24, r24
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <get_fattime+0x16>
    13d2:	51 c0       	rjmp	.+162    	; 0x1476 <get_fattime+0xb8>
	rtc_gettime(&rtc);
    13d4:	ce 01       	movw	r24, r28
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	0e 94 cd 11 	call	0x239a	; 0x239a <rtc_gettime>
			| ((DWORD)rtc.month << 21)
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	a0 e0       	ldi	r26, 0x00	; 0
    13e4:	25 e1       	ldi	r18, 0x15	; 21
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	aa 1f       	adc	r26, r26
    13ec:	bb 1f       	adc	r27, r27
    13ee:	2a 95       	dec	r18
    13f0:	d1 f7       	brne	.-12     	; 0x13e6 <get_fattime+0x28>
			| ((DWORD)rtc.mday << 16)
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
			| ((DWORD)rtc.sec >> 1);
    13f4:	a2 2b       	or	r26, r18
			| ((DWORD)rtc.hour << 11)
    13f6:	4e 81       	ldd	r20, Y+6	; 0x06
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	3b e0       	ldi	r19, 0x0B	; 11
    1400:	44 0f       	add	r20, r20
    1402:	55 1f       	adc	r21, r21
    1404:	66 1f       	adc	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	3a 95       	dec	r19
    140a:	d1 f7       	brne	.-12     	; 0x1400 <get_fattime+0x42>
			| ((DWORD)rtc.sec >> 1);
    140c:	84 2b       	or	r24, r20
    140e:	95 2b       	or	r25, r21
    1410:	a6 2b       	or	r26, r22
    1412:	b7 2b       	or	r27, r23
			| ((DWORD)rtc.min << 5)
    1414:	4f 81       	ldd	r20, Y+7	; 0x07
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	e5 e0       	ldi	r30, 0x05	; 5
    141e:	44 0f       	add	r20, r20
    1420:	55 1f       	adc	r21, r21
    1422:	66 1f       	adc	r22, r22
    1424:	77 1f       	adc	r23, r23
    1426:	ea 95       	dec	r30
    1428:	d1 f7       	brne	.-12     	; 0x141e <get_fattime+0x60>
			| ((DWORD)rtc.sec >> 1);
    142a:	84 2b       	or	r24, r20
    142c:	95 2b       	or	r25, r21
    142e:	a6 2b       	or	r26, r22
    1430:	b7 2b       	or	r27, r23
    1432:	28 85       	ldd	r18, Y+8	; 0x08
    1434:	26 95       	lsr	r18
    1436:	82 2b       	or	r24, r18
	return	  ((DWORD)(rtc.year - 1980) << 25)
    1438:	49 81       	ldd	r20, Y+1	; 0x01
    143a:	5a 81       	ldd	r21, Y+2	; 0x02
    143c:	4c 5b       	subi	r20, 0xBC	; 188
    143e:	57 40       	sbci	r21, 0x07	; 7
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	f9 e1       	ldi	r31, 0x19	; 25
    1446:	44 0f       	add	r20, r20
    1448:	55 1f       	adc	r21, r21
    144a:	66 1f       	adc	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	fa 95       	dec	r31
    1450:	d1 f7       	brne	.-12     	; 0x1446 <get_fattime+0x88>
			| ((DWORD)rtc.sec >> 1);
    1452:	8c 01       	movw	r16, r24
    1454:	9d 01       	movw	r18, r26
    1456:	04 2b       	or	r16, r20
    1458:	15 2b       	or	r17, r21
    145a:	26 2b       	or	r18, r22
    145c:	37 2b       	or	r19, r23
    145e:	09 87       	std	Y+9, r16	; 0x09
    1460:	1a 87       	std	Y+10, r17	; 0x0a
    1462:	2b 87       	std	Y+11, r18	; 0x0b
    1464:	3c 87       	std	Y+12, r19	; 0x0c
}
    1466:	69 85       	ldd	r22, Y+9	; 0x09
    1468:	7a 85       	ldd	r23, Y+10	; 0x0a
    146a:	8b 85       	ldd	r24, Y+11	; 0x0b
    146c:	9c 85       	ldd	r25, Y+12	; 0x0c
    146e:	2c 96       	adiw	r28, 0x0c	; 12
    1470:	e4 e0       	ldi	r30, 0x04	; 4
    1472:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>
	if (!RtcOk) return 0;
    1476:	19 86       	std	Y+9, r1	; 0x09
    1478:	1a 86       	std	Y+10, r1	; 0x0a
    147a:	1b 86       	std	Y+11, r1	; 0x0b
    147c:	1c 86       	std	Y+12, r1	; 0x0c
    147e:	f3 cf       	rjmp	.-26     	; 0x1466 <get_fattime+0xa8>

00001480 <__vector_16>:
{
    1480:	1f 92       	push	r1
    1482:	0f 92       	push	r0
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	0f 92       	push	r0
    1488:	11 24       	eor	r1, r1
    148a:	0b b6       	in	r0, 0x3b	; 59
    148c:	0f 92       	push	r0
    148e:	2f 93       	push	r18
    1490:	3f 93       	push	r19
    1492:	4f 93       	push	r20
    1494:	5f 93       	push	r21
    1496:	6f 93       	push	r22
    1498:	7f 93       	push	r23
    149a:	8f 93       	push	r24
    149c:	9f 93       	push	r25
    149e:	af 93       	push	r26
    14a0:	bf 93       	push	r27
    14a2:	ef 93       	push	r30
    14a4:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
    14a6:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <Timer>
    14aa:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <Timer+0x1>
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <Timer+0x1>
    14b4:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <Timer>
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
    14b8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <disk_timerproc>
}
    14bc:	ff 91       	pop	r31
    14be:	ef 91       	pop	r30
    14c0:	bf 91       	pop	r27
    14c2:	af 91       	pop	r26
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	7f 91       	pop	r23
    14ca:	6f 91       	pop	r22
    14cc:	5f 91       	pop	r21
    14ce:	4f 91       	pop	r20
    14d0:	3f 91       	pop	r19
    14d2:	2f 91       	pop	r18
    14d4:	0f 90       	pop	r0
    14d6:	0b be       	out	0x3b, r0	; 59
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	0f 90       	pop	r0
    14de:	1f 90       	pop	r1
    14e0:	18 95       	reti

000014e2 <uart_init>:


/* Initialize UART */

void uart_init (uint32_t bps)
{
    14e2:	a4 e0       	ldi	r26, 0x04	; 4
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e7 e7       	ldi	r30, 0x77	; 119
    14e8:	fa e0       	ldi	r31, 0x0A	; 10
    14ea:	0c 94 44 5a 	jmp	0xb488	; 0xb488 <__prologue_saves__+0x20>
    14ee:	69 83       	std	Y+1, r22	; 0x01
    14f0:	7a 83       	std	Y+2, r23	; 0x02
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t n;


	UCSR0B = 0;
    14f6:	e1 ec       	ldi	r30, 0xC1	; 193
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	10 82       	st	Z, r1

	RxFifo.ct = 0; RxFifo.ri = 0; RxFifo.wi = 0;
    14fc:	e3 e5       	ldi	r30, 0x53	; 83
    14fe:	fc e1       	ldi	r31, 0x1C	; 28
    1500:	15 82       	std	Z+5, r1	; 0x05
    1502:	14 82       	std	Z+4, r1	; 0x04
    1504:	13 82       	std	Z+3, r1	; 0x03
    1506:	12 82       	std	Z+2, r1	; 0x02
    1508:	11 82       	std	Z+1, r1	; 0x01
    150a:	10 82       	st	Z, r1
	TxFifo.ct = 0; TxFifo.ri = 0; TxFifo.wi = 0;
    150c:	e9 e9       	ldi	r30, 0x99	; 153
    150e:	fc e1       	ldi	r31, 0x1C	; 28
    1510:	15 82       	std	Z+5, r1	; 0x05
    1512:	14 82       	std	Z+4, r1	; 0x04
    1514:	13 82       	std	Z+3, r1	; 0x03
    1516:	12 82       	std	Z+2, r1	; 0x02
    1518:	11 82       	std	Z+1, r1	; 0x01
    151a:	10 82       	st	Z, r1

	n = F_CPU / bps / 8;
    151c:	60 ea       	ldi	r22, 0xA0	; 160
    151e:	75 e2       	ldi	r23, 0x25	; 37
    1520:	86 e2       	ldi	r24, 0x26	; 38
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	29 81       	ldd	r18, Y+1	; 0x01
    1526:	3a 81       	ldd	r19, Y+2	; 0x02
    1528:	4b 81       	ldd	r20, Y+3	; 0x03
    152a:	5c 81       	ldd	r21, Y+4	; 0x04
    152c:	0e 94 80 59 	call	0xb300	; 0xb300 <__udivmodsi4>
	UBRR0L = (n >> 1) + (n & 1) - 1;
    1530:	82 2f       	mov	r24, r18
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	81 50       	subi	r24, 0x01	; 1
    1536:	36 95       	lsr	r19
    1538:	27 95       	ror	r18
    153a:	82 0f       	add	r24, r18
    153c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = _BV(RXEN0)|_BV(RXCIE0)|_BV(TXEN0);
    1540:	88 e9       	ldi	r24, 0x98	; 152
    1542:	e1 ec       	ldi	r30, 0xC1	; 193
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 83       	st	Z, r24
}
    1548:	24 96       	adiw	r28, 0x04	; 4
    154a:	e2 e0       	ldi	r30, 0x02	; 2
    154c:	0c 94 60 5a 	jmp	0xb4c0	; 0xb4c0 <__epilogue_restores__+0x20>

00001550 <uart_test>:

/* Get a received character */

uint16_t uart_test (void)
{
	return RxFifo.ct;
    1550:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <RxFifo+0x4>
    1554:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <RxFifo+0x5>
}
    1558:	08 95       	ret

0000155a <uart_getc>:
uint8_t uart_getc (void)
{
	uint8_t d, i;


	while (RxFifo.ct == 0) ;
    155a:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <RxFifo+0x4>
    155e:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <RxFifo+0x5>
    1562:	89 2b       	or	r24, r25
    1564:	d1 f3       	breq	.-12     	; 0x155a <uart_getc>

	i = RxFifo.ri;
    1566:	20 91 55 1c 	lds	r18, 0x1C55	; 0x801c55 <RxFifo+0x2>
    156a:	30 91 56 1c 	lds	r19, 0x1C56	; 0x801c56 <RxFifo+0x3>
	d = RxFifo.buff[i];
    156e:	33 27       	eor	r19, r19
    1570:	f9 01       	movw	r30, r18
    1572:	ed 5a       	subi	r30, 0xAD	; 173
    1574:	f3 4e       	sbci	r31, 0xE3	; 227
    1576:	86 81       	ldd	r24, Z+6	; 0x06
	cli();
    1578:	f8 94       	cli
	RxFifo.ct--;
    157a:	40 91 57 1c 	lds	r20, 0x1C57	; 0x801c57 <RxFifo+0x4>
    157e:	50 91 58 1c 	lds	r21, 0x1C58	; 0x801c58 <RxFifo+0x5>
    1582:	41 50       	subi	r20, 0x01	; 1
    1584:	51 09       	sbc	r21, r1
    1586:	50 93 58 1c 	sts	0x1C58, r21	; 0x801c58 <RxFifo+0x5>
    158a:	40 93 57 1c 	sts	0x1C57, r20	; 0x801c57 <RxFifo+0x4>
	sei();
    158e:	78 94       	sei
	RxFifo.ri = (i + 1) % sizeof RxFifo.buff;
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	2f 73       	andi	r18, 0x3F	; 63
    1596:	33 27       	eor	r19, r19
    1598:	30 93 56 1c 	sts	0x1C56, r19	; 0x801c56 <RxFifo+0x3>
    159c:	20 93 55 1c 	sts	0x1C55, r18	; 0x801c55 <RxFifo+0x2>

	return d;
}
    15a0:	08 95       	ret

000015a2 <uart_putc>:
void uart_putc (uint8_t d)
{
	uint8_t i;


	while (TxFifo.ct >= sizeof TxFifo.buff) ;
    15a2:	20 91 9d 1c 	lds	r18, 0x1C9D	; 0x801c9d <TxFifo+0x4>
    15a6:	30 91 9e 1c 	lds	r19, 0x1C9E	; 0x801c9e <TxFifo+0x5>
    15aa:	20 34       	cpi	r18, 0x40	; 64
    15ac:	31 05       	cpc	r19, r1
    15ae:	c8 f7       	brcc	.-14     	; 0x15a2 <uart_putc>

	i = TxFifo.wi;
    15b0:	20 91 99 1c 	lds	r18, 0x1C99	; 0x801c99 <TxFifo>
    15b4:	30 91 9a 1c 	lds	r19, 0x1C9A	; 0x801c9a <TxFifo+0x1>
	TxFifo.buff[i] = d;
    15b8:	33 27       	eor	r19, r19
    15ba:	f9 01       	movw	r30, r18
    15bc:	e7 56       	subi	r30, 0x67	; 103
    15be:	f3 4e       	sbci	r31, 0xE3	; 227
    15c0:	86 83       	std	Z+6, r24	; 0x06
	cli();
    15c2:	f8 94       	cli
	TxFifo.ct++;
    15c4:	80 91 9d 1c 	lds	r24, 0x1C9D	; 0x801c9d <TxFifo+0x4>
    15c8:	90 91 9e 1c 	lds	r25, 0x1C9E	; 0x801c9e <TxFifo+0x5>
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	90 93 9e 1c 	sts	0x1C9E, r25	; 0x801c9e <TxFifo+0x5>
    15d2:	80 93 9d 1c 	sts	0x1C9D, r24	; 0x801c9d <TxFifo+0x4>
	UCSR0B = _BV(RXEN0)|_BV(RXCIE0)|_BV(TXEN0)|_BV(UDRIE0);
    15d6:	88 eb       	ldi	r24, 0xB8	; 184
    15d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	sei();
    15dc:	78 94       	sei
	TxFifo.wi = (i + 1) % sizeof TxFifo.buff;
    15de:	2f 5f       	subi	r18, 0xFF	; 255
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	2f 73       	andi	r18, 0x3F	; 63
    15e4:	33 27       	eor	r19, r19
    15e6:	30 93 9a 1c 	sts	0x1C9A, r19	; 0x801c9a <TxFifo+0x1>
    15ea:	20 93 99 1c 	sts	0x1C99, r18	; 0x801c99 <TxFifo>
}
    15ee:	08 95       	ret

000015f0 <__vector_20>:


/* UART RXC interrupt */

ISR(USART0_RX_vect)
{
    15f0:	2f 93       	push	r18
    15f2:	2f b7       	in	r18, 0x3f	; 63
    15f4:	2f 93       	push	r18
    15f6:	2b b7       	in	r18, 0x3b	; 59
    15f8:	2f 93       	push	r18
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR0;
    1602:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	n = RxFifo.ct;
    1606:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <RxFifo+0x4>
    160a:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <RxFifo+0x5>
	if (n < sizeof RxFifo.buff) {
    160e:	80 34       	cpi	r24, 0x40	; 64
    1610:	b0 f4       	brcc	.+44     	; 0x163e <__vector_20+0x4e>
		RxFifo.ct = ++n;
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	90 93 58 1c 	sts	0x1C58, r25	; 0x801c58 <RxFifo+0x5>
    161a:	80 93 57 1c 	sts	0x1C57, r24	; 0x801c57 <RxFifo+0x4>
		i = RxFifo.wi;
    161e:	80 91 53 1c 	lds	r24, 0x1C53	; 0x801c53 <RxFifo>
    1622:	90 91 54 1c 	lds	r25, 0x1C54	; 0x801c54 <RxFifo+0x1>
		RxFifo.buff[i] = d;
    1626:	99 27       	eor	r25, r25
    1628:	fc 01       	movw	r30, r24
    162a:	ed 5a       	subi	r30, 0xAD	; 173
    162c:	f3 4e       	sbci	r31, 0xE3	; 227
    162e:	26 83       	std	Z+6, r18	; 0x06
		RxFifo.wi = (i + 1) % sizeof RxFifo.buff;
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	8f 73       	andi	r24, 0x3F	; 63
    1634:	99 27       	eor	r25, r25
    1636:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <RxFifo+0x1>
    163a:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <RxFifo>
	}
}
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	2f 91       	pop	r18
    1648:	2b bf       	out	0x3b, r18	; 59
    164a:	2f 91       	pop	r18
    164c:	2f bf       	out	0x3f, r18	; 63
    164e:	2f 91       	pop	r18
    1650:	18 95       	reti

00001652 <__vector_21>:


/* UART UDRE interrupt */

ISR(USART0_UDRE_vect)
{
    1652:	1f 92       	push	r1
    1654:	1f b6       	in	r1, 0x3f	; 63
    1656:	1f 92       	push	r1
    1658:	11 24       	eor	r1, r1
    165a:	2f 93       	push	r18
    165c:	2b b7       	in	r18, 0x3b	; 59
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31
	uint8_t n, i;


	n = TxFifo.ct;
    166a:	20 91 9d 1c 	lds	r18, 0x1C9D	; 0x801c9d <TxFifo+0x4>
    166e:	30 91 9e 1c 	lds	r19, 0x1C9E	; 0x801c9e <TxFifo+0x5>
	if (n) {
    1672:	21 11       	cpse	r18, r1
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <__vector_21+0x42>
		TxFifo.ct = --n;
		i = TxFifo.ri;
		UDR0 = TxFifo.buff[i];
		TxFifo.ri = (i + 1) % sizeof TxFifo.buff;
	}
	if (n == 0) UCSR0B = _BV(RXEN0)|_BV(RXCIE0)|_BV(TXEN0);
    1676:	88 e9       	ldi	r24, 0x98	; 152
    1678:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	3f 91       	pop	r19
    1686:	2f 91       	pop	r18
    1688:	2b bf       	out	0x3b, r18	; 59
    168a:	2f 91       	pop	r18
    168c:	1f 90       	pop	r1
    168e:	1f be       	out	0x3f, r1	; 63
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti
		TxFifo.ct = --n;
    1694:	21 50       	subi	r18, 0x01	; 1
    1696:	82 2f       	mov	r24, r18
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	90 93 9e 1c 	sts	0x1C9E, r25	; 0x801c9e <TxFifo+0x5>
    169e:	80 93 9d 1c 	sts	0x1C9D, r24	; 0x801c9d <TxFifo+0x4>
		i = TxFifo.ri;
    16a2:	80 91 9b 1c 	lds	r24, 0x1C9B	; 0x801c9b <TxFifo+0x2>
    16a6:	90 91 9c 1c 	lds	r25, 0x1C9C	; 0x801c9c <TxFifo+0x3>
		UDR0 = TxFifo.buff[i];
    16aa:	99 27       	eor	r25, r25
    16ac:	fc 01       	movw	r30, r24
    16ae:	e7 56       	subi	r30, 0x67	; 103
    16b0:	f3 4e       	sbci	r31, 0xE3	; 227
    16b2:	36 81       	ldd	r19, Z+6	; 0x06
    16b4:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		TxFifo.ri = (i + 1) % sizeof TxFifo.buff;
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	8f 73       	andi	r24, 0x3F	; 63
    16bc:	99 27       	eor	r25, r25
    16be:	90 93 9c 1c 	sts	0x1C9C, r25	; 0x801c9c <TxFifo+0x3>
    16c2:	80 93 9b 1c 	sts	0x1C9B, r24	; 0x801c9b <TxFifo+0x2>
	if (n == 0) UCSR0B = _BV(RXEN0)|_BV(RXCIE0)|_BV(TXEN0);
    16c6:	21 11       	cpse	r18, r1
    16c8:	d9 cf       	rjmp	.-78     	; 0x167c <__vector_21+0x2a>
    16ca:	d5 cf       	rjmp	.-86     	; 0x1676 <__vector_21+0x24>

000016cc <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <disk_status+0xa>
	case DRV_CFC :
		return cf_disk_status();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_status();
    16d0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <mmc_disk_status>
    16d4:	08 95       	ret
#endif
	}
	return STA_NOINIT;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
}
    16d8:	08 95       	ret

000016da <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	19 f4       	brne	.+6      	; 0x16e4 <disk_initialize+0xa>
	case DRV_CFC :
		return cf_disk_initialize();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_initialize();
    16de:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <mmc_disk_initialize>
    16e2:	08 95       	ret
#endif
	}
	return STA_NOINIT;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
}
    16e6:	08 95       	ret

000016e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	e8 2f       	mov	r30, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	ba 01       	movw	r22, r20
    16f2:	a9 01       	movw	r20, r18
    16f4:	98 01       	movw	r18, r16
	switch (pdrv) {
    16f6:	e1 30       	cpi	r30, 0x01	; 1
    16f8:	29 f4       	brne	.+10     	; 0x1704 <disk_read+0x1c>
	case DRV_CFC :
		return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
    16fa:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <mmc_disk_read>
#endif
	}
	return RES_PARERR;
}
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret
	return RES_PARERR;
    1704:	84 e0       	ldi	r24, 0x04	; 4
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	fa cf       	rjmp	.-12     	; 0x16fe <disk_read+0x16>

0000170a <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	e8 2f       	mov	r30, r24
    1710:	cb 01       	movw	r24, r22
    1712:	ba 01       	movw	r22, r20
    1714:	a9 01       	movw	r20, r18
    1716:	98 01       	movw	r18, r16
	switch (pdrv) {
    1718:	e1 30       	cpi	r30, 0x01	; 1
    171a:	29 f4       	brne	.+10     	; 0x1726 <disk_write+0x1c>
	case DRV_CFC :
		return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
    171c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <mmc_disk_write>
#endif
	}
	return RES_PARERR;
}
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret
	return RES_PARERR;
    1726:	84 e0       	ldi	r24, 0x04	; 4
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	fa cf       	rjmp	.-12     	; 0x1720 <disk_write+0x16>

0000172c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    172c:	98 2f       	mov	r25, r24
    172e:	86 2f       	mov	r24, r22
    1730:	ba 01       	movw	r22, r20
	switch (pdrv) {
    1732:	91 30       	cpi	r25, 0x01	; 1
    1734:	19 f4       	brne	.+6      	; 0x173c <disk_ioctl+0x10>
	case DRV_CFC :
		return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
    1736:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <mmc_disk_ioctl>
    173a:	08 95       	ret
#endif
	}
	return RES_PARERR;
    173c:	84 e0       	ldi	r24, 0x04	; 4
    173e:	90 e0       	ldi	r25, 0x00	; 0
}
    1740:	08 95       	ret

00001742 <disk_timerproc>:
{
#ifdef DRV_CFC
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
    1742:	0e 94 b9 10 	call	0x2172	; 0x2172 <mmc_disk_timerproc>
#endif
}
    1746:	08 95       	ret

00001748 <power_off>:
}


static void power_off (void)
{
	UCSR1C = 0;	/* Disable USART-SPI function */
    1748:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>

	/* Configure MOSI/SCLK/CS control (PD5-4-3 = hi-z) */
	DDRD &= ~(_BV(5)|_BV(4)|_BV(3)); PORTD &= ~(_BV(5)|_BV(4)|_BV(3)); 
    174c:	8a b1       	in	r24, 0x0a	; 10
    174e:	87 7c       	andi	r24, 0xC7	; 199
    1750:	8a b9       	out	0x0a, r24	; 10
    1752:	8b b1       	in	r24, 0x0b	; 11
    1754:	87 7c       	andi	r24, 0xC7	; 199
    1756:	8b b9       	out	0x0b, r24	; 11

	/* Remove this block if socket power control is not supported */
	{
		PORTB |= _BV(4);				/* Socket power off (PB4 = high) */
    1758:	2c 9a       	sbi	0x05, 4	; 5
	}
}
    175a:	08 95       	ret

0000175c <xchg_spi>:
/* Exchange a byte */
static BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	UDR1 = dat;
    175c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	loop_until_bit_is_set(UCSR1A, RXC1);
    1760:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1764:	87 ff       	sbrs	r24, 7
    1766:	fc cf       	rjmp	.-8      	; 0x1760 <xchg_spi+0x4>
	return UDR1;
    1768:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
}
    176c:	08 95       	ret

0000176e <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    176e:	5d 9a       	sbi	0x0b, 5	; 11
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
}
    1776:	08 95       	ret

00001778 <rcvr_datablock>:

static int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ec 01       	movw	r28, r24
    1782:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    1784:	84 e1       	ldi	r24, 0x14	; 20
    1786:	80 93 e2 1c 	sts	0x1CE2, r24	; 0x801ce2 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    178a:	8f ef       	ldi	r24, 0xFF	; 255
    178c:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    1790:	8f 3f       	cpi	r24, 0xFF	; 255
    1792:	39 f4       	brne	.+14     	; 0x17a2 <rcvr_datablock+0x2a>
    1794:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
    1798:	81 11       	cpse	r24, r1
    179a:	f7 cf       	rjmp	.-18     	; 0x178a <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	39 c0       	rjmp	.+114    	; 0x1814 <rcvr_datablock+0x9c>
    17a2:	8e 3f       	cpi	r24, 0xFE	; 254
    17a4:	d9 f7       	brne	.-10     	; 0x179c <rcvr_datablock+0x24>
	UDR1 = 0xFF;
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	loop_until_bit_is_set(UCSR1A, UDRE1); UDR1 = 0xFF;
    17ac:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    17b0:	85 ff       	sbrs	r24, 5
    17b2:	fc cf       	rjmp	.-8      	; 0x17ac <rcvr_datablock+0x34>
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    17ba:	c8 01       	movw	r24, r16
    17bc:	3c 2f       	mov	r19, r28
    17be:	2d 2f       	mov	r18, r29
		*p++ = UDR1; UDR1 = 0xFF;
    17c0:	4f ef       	ldi	r20, 0xFF	; 255
		loop_until_bit_is_set(UCSR1A, UDRE1);
    17c2:	50 91 c8 00 	lds	r21, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    17c6:	55 ff       	sbrs	r21, 5
    17c8:	fc cf       	rjmp	.-8      	; 0x17c2 <rcvr_datablock+0x4a>
		*p++ = UDR1; UDR1 = 0xFF;
    17ca:	e3 2f       	mov	r30, r19
    17cc:	f2 2f       	mov	r31, r18
    17ce:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    17d2:	21 93       	st	Z+, r18
    17d4:	40 93 ce 00 	sts	0x00CE, r20	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	} while (--cnt);
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	91 05       	cpc	r25, r1
    17de:	f9 f4       	brne	.+62     	; 0x181e <rcvr_datablock+0xa6>
    17e0:	03 50       	subi	r16, 0x03	; 3
    17e2:	11 09       	sbc	r17, r1
    17e4:	c0 0f       	add	r28, r16
    17e6:	d1 1f       	adc	r29, r17
	loop_until_bit_is_set(UCSR1A, RXC1); *p++ = UDR1;
    17e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    17ec:	87 ff       	sbrs	r24, 7
    17ee:	fc cf       	rjmp	.-8      	; 0x17e8 <rcvr_datablock+0x70>
    17f0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    17f4:	89 83       	std	Y+1, r24	; 0x01
	loop_until_bit_is_set(UCSR1A, RXC1); *p++ = UDR1;
    17f6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    17fa:	87 ff       	sbrs	r24, 7
    17fc:	fc cf       	rjmp	.-8      	; 0x17f6 <rcvr_datablock+0x7e>
    17fe:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1802:	8a 83       	std	Y+2, r24	; 0x02

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	xchg_spi(0xFF);
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0

	return 1;						/* Return with success */
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret
		*p++ = UDR1; UDR1 = 0xFF;
    181e:	3e 2f       	mov	r19, r30
    1820:	2f 2f       	mov	r18, r31
    1822:	cf cf       	rjmp	.-98     	; 0x17c2 <rcvr_datablock+0x4a>

00001824 <wait_ready.constprop.0>:
	cli(); Timer2 = wt; sei();
    1824:	f8 94       	cli
    1826:	82 e3       	ldi	r24, 0x32	; 50
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	90 93 e1 1c 	sts	0x1CE1, r25	; 0x801ce1 <Timer2+0x1>
    182e:	80 93 e0 1c 	sts	0x1CE0, r24	; 0x801ce0 <Timer2>
    1832:	78 94       	sei
		d = xchg_spi(0xFF);
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
		cli(); wt = Timer2; sei();
    183a:	f8 94       	cli
    183c:	20 91 e0 1c 	lds	r18, 0x1CE0	; 0x801ce0 <Timer2>
    1840:	30 91 e1 1c 	lds	r19, 0x1CE1	; 0x801ce1 <Timer2+0x1>
    1844:	78 94       	sei
	} while (d != 0xFF && wt);
    1846:	8f 3f       	cpi	r24, 0xFF	; 255
    1848:	11 f0       	breq	.+4      	; 0x184e <wait_ready.constprop.0+0x2a>
    184a:	23 2b       	or	r18, r19
    184c:	99 f7       	brne	.-26     	; 0x1834 <wait_ready.constprop.0+0x10>
	return (d == 0xFF) ? 1 : 0;
    184e:	21 e0       	ldi	r18, 0x01	; 1
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	8f 3f       	cpi	r24, 0xFF	; 255
    1854:	11 f0       	breq	.+4      	; 0x185a <wait_ready.constprop.0+0x36>
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	20 e0       	ldi	r18, 0x00	; 0
}
    185a:	c9 01       	movw	r24, r18
    185c:	08 95       	ret

0000185e <select>:
{
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
	CS_LOW();		/* Set CS# low */
    1862:	5d 98       	cbi	0x0b, 5	; 11
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    186a:	0e 94 12 0c 	call	0x1824	; 0x1824 <wait_ready.constprop.0>
    186e:	ec 01       	movw	r28, r24
    1870:	89 2b       	or	r24, r25
    1872:	31 f4       	brne	.+12     	; 0x1880 <select+0x22>
	deselect();
    1874:	0e 94 b7 0b 	call	0x176e	; 0x176e <deselect>
}
    1878:	ce 01       	movw	r24, r28
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    1880:	c1 e0       	ldi	r28, 0x01	; 1
    1882:	d0 e0       	ldi	r29, 0x00	; 0
    1884:	f9 cf       	rjmp	.-14     	; 0x1878 <select+0x1a>

00001886 <send_cmd>:

static BYTE send_cmd (	/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	c8 2f       	mov	r28, r24
    1892:	d4 2f       	mov	r29, r20
    1894:	15 2f       	mov	r17, r21
    1896:	06 2f       	mov	r16, r22
    1898:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    189a:	87 ff       	sbrs	r24, 7
    189c:	09 c0       	rjmp	.+18     	; 0x18b0 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	ba 01       	movw	r22, r20
    18a4:	87 e3       	ldi	r24, 0x37	; 55
    18a6:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
		if (res > 1) return res;
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	48 f5       	brcc	.+82     	; 0x1900 <send_cmd+0x7a>
		cmd &= 0x7F;
    18ae:	cf 77       	andi	r28, 0x7F	; 127
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    18b0:	cc 30       	cpi	r28, 0x0C	; 12
    18b2:	59 f5       	brne	.+86     	; 0x190a <send_cmd+0x84>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    18b4:	8c 2f       	mov	r24, r28
    18b6:	80 64       	ori	r24, 0x40	; 64
    18b8:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    18bc:	8f 2d       	mov	r24, r15
    18be:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    18c2:	80 2f       	mov	r24, r16
    18c4:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    18c8:	81 2f       	mov	r24, r17
    18ca:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    18ce:	8d 2f       	mov	r24, r29
    18d0:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    18d4:	85 e9       	ldi	r24, 0x95	; 149
    18d6:	cc 23       	and	r28, r28
    18d8:	21 f0       	breq	.+8      	; 0x18e2 <send_cmd+0x5c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    18da:	87 e8       	ldi	r24, 0x87	; 135
    18dc:	c8 30       	cpi	r28, 0x08	; 8
    18de:	09 f0       	breq	.+2      	; 0x18e2 <send_cmd+0x5c>
	n = 0x01;							/* Dummy CRC + Stop */
    18e0:	81 e0       	ldi	r24, 0x01	; 1
	xchg_spi(n);
    18e2:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    18e6:	cc 30       	cpi	r28, 0x0C	; 12
    18e8:	19 f4       	brne	.+6      	; 0x18f0 <send_cmd+0x6a>
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    18f0:	ca e0       	ldi	r28, 0x0A	; 10
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = xchg_spi(0xFF);
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	} while ((res & 0x80) && --n);
    18f8:	87 ff       	sbrs	r24, 7
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <send_cmd+0x7a>
    18fc:	c1 50       	subi	r28, 0x01	; 1
    18fe:	c9 f7       	brne	.-14     	; 0x18f2 <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	e5 e0       	ldi	r30, 0x05	; 5
    1906:	0c 94 5d 5a 	jmp	0xb4ba	; 0xb4ba <__epilogue_restores__+0x1a>
		deselect();
    190a:	0e 94 b7 0b 	call	0x176e	; 0x176e <deselect>
		if (!select()) return 0xFF;
    190e:	0e 94 2f 0c 	call	0x185e	; 0x185e <select>
    1912:	89 2b       	or	r24, r25
    1914:	79 f6       	brne	.-98     	; 0x18b4 <send_cmd+0x2e>
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	f3 cf       	rjmp	.-26     	; 0x1900 <send_cmd+0x7a>

0000191a <xmit_datablock>:
{
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	ec 01       	movw	r28, r24
    1922:	16 2f       	mov	r17, r22
	if (!wait_ready(500)) return 0;
    1924:	0e 94 12 0c 	call	0x1824	; 0x1824 <wait_ready.constprop.0>
    1928:	9c 01       	movw	r18, r24
    192a:	89 2b       	or	r24, r25
    192c:	e1 f1       	breq	.+120    	; 0x19a6 <xmit_datablock+0x8c>
	xchg_spi(token);					/* Xmit data token */
    192e:	81 2f       	mov	r24, r17
    1930:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
	return 1;
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	30 e0       	ldi	r19, 0x00	; 0
	if (token != 0xFD) {	/* Is data token */
    1938:	1d 3f       	cpi	r17, 0xFD	; 253
    193a:	a9 f1       	breq	.+106    	; 0x19a6 <xmit_datablock+0x8c>
	UDR1 = *p++;
    193c:	88 81       	ld	r24, Y
    193e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	loop_until_bit_is_set(UCSR1A, UDRE1); UDR1 = *p++;
    1942:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1946:	85 ff       	sbrs	r24, 5
    1948:	fc cf       	rjmp	.-8      	; 0x1942 <xmit_datablock+0x28>
    194a:	fe 01       	movw	r30, r28
    194c:	32 96       	adiw	r30, 0x02	; 2
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	cnt -= 2;
    1954:	de 5f       	subi	r29, 0xFE	; 254
		loop_until_bit_is_set(UCSR1A, UDRE1);
    1956:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    195a:	85 ff       	sbrs	r24, 5
    195c:	fc cf       	rjmp	.-8      	; 0x1956 <xmit_datablock+0x3c>
		UDR1; UDR1 = *p++;
    195e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1962:	81 91       	ld	r24, Z+
    1964:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	} while (--cnt);
    1968:	ec 17       	cp	r30, r28
    196a:	fd 07       	cpc	r31, r29
    196c:	a1 f7       	brne	.-24     	; 0x1956 <xmit_datablock+0x3c>
	loop_until_bit_is_set(UCSR1A, RXC1); UDR1;
    196e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1972:	87 ff       	sbrs	r24, 7
    1974:	fc cf       	rjmp	.-8      	; 0x196e <xmit_datablock+0x54>
    1976:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	loop_until_bit_is_set(UCSR1A, RXC1); UDR1;
    197a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    197e:	87 ff       	sbrs	r24, 7
    1980:	fc cf       	rjmp	.-8      	; 0x197a <xmit_datablock+0x60>
    1982:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		xchg_spi(0xFF);					/* CRC (Dummy) */
    1986:	8f ef       	ldi	r24, 0xFF	; 255
    1988:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
		xchg_spi(0xFF);
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* If not accepted, return with error */
    1998:	8f 71       	andi	r24, 0x1F	; 31
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	85 30       	cpi	r24, 0x05	; 5
    199e:	09 f0       	breq	.+2      	; 0x19a2 <xmit_datablock+0x88>
    19a0:	90 e0       	ldi	r25, 0x00	; 0
	if (!wait_ready(500)) return 0;
    19a2:	29 2f       	mov	r18, r25
    19a4:	30 e0       	ldi	r19, 0x00	; 0
}
    19a6:	c9 01       	movw	r24, r18
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	08 95       	ret

000019b0 <mmc_disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
    19b0:	a4 e0       	ldi	r26, 0x04	; 4
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ee ed       	ldi	r30, 0xDE	; 222
    19b6:	fc e0       	ldi	r31, 0x0C	; 12
    19b8:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];


	power_off();						/* Turn off the socket power to reset the card */
    19bc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <power_off>
	for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
    19c0:	8a e0       	ldi	r24, 0x0A	; 10
    19c2:	80 93 e2 1c 	sts	0x1CE2, r24	; 0x801ce2 <Timer1>
    19c6:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
    19ca:	81 11       	cpse	r24, r1
    19cc:	fc cf       	rjmp	.-8      	; 0x19c6 <mmc_disk_initialize+0x16>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */
    19ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
    19d2:	81 ff       	sbrs	r24, 1
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <mmc_disk_initialize+0x32>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    19d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
}
    19da:	24 96       	adiw	r28, 0x04	; 4
    19dc:	e8 e0       	ldi	r30, 0x08	; 8
    19de:	0c 94 5a 5a 	jmp	0xb4b4	; 0xb4b4 <__epilogue_restores__+0x14>
		PORTB &= ~_BV(4); DDRB |= _BV(4);	/* Socket power on (PB4 = low) */
    19e2:	2c 98       	cbi	0x05, 4	; 5
    19e4:	24 9a       	sbi	0x04, 4	; 4
		for (Timer1 = 2; Timer1; ) ;		/* Wait for 20ms */
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	80 93 e2 1c 	sts	0x1CE2, r24	; 0x801ce2 <Timer1>
    19ec:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
    19f0:	81 11       	cpse	r24, r1
    19f2:	fc cf       	rjmp	.-8      	; 0x19ec <mmc_disk_initialize+0x3c>
	PORTD |= (_BV(5)|_BV(3)); DDRD |= (_BV(5)|_BV(4)|_BV(3));
    19f4:	8b b1       	in	r24, 0x0b	; 11
    19f6:	88 62       	ori	r24, 0x28	; 40
    19f8:	8b b9       	out	0x0b, r24	; 11
    19fa:	8a b1       	in	r24, 0x0a	; 10
    19fc:	88 63       	ori	r24, 0x38	; 56
    19fe:	8a b9       	out	0x0a, r24	; 10
	UCSR1C = _BV(UMSEL11)|_BV(UMSEL10);	/* Set USART to SPI mode */
    1a00:	80 ec       	ldi	r24, 0xC0	; 192
    1a02:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
	UCSR1B = _BV(RXEN1)|_BV(TXEN1);		/* Enable USART */
    1a06:	88 e1       	ldi	r24, 0x18	; 24
    1a08:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	FCLK_SLOW();
    1a0c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1a10:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    1a18:	11 50       	subi	r17, 0x01	; 1
    1a1a:	d9 f7       	brne	.-10     	; 0x1a12 <mmc_disk_initialize+0x62>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	ba 01       	movw	r22, r20
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1a28:	08 2f       	mov	r16, r24
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <mmc_disk_initialize+0x80>
    1a2e:	71 c0       	rjmp	.+226    	; 0x1b12 <mmc_disk_initialize+0x162>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    1a30:	84 e6       	ldi	r24, 0x64	; 100
    1a32:	80 93 e2 1c 	sts	0x1CE2, r24	; 0x801ce2 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
    1a36:	4a ea       	ldi	r20, 0xAA	; 170
    1a38:	51 e0       	ldi	r21, 0x01	; 1
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	88 e0       	ldi	r24, 0x08	; 8
    1a40:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <mmc_disk_initialize+0x9a>
    1a48:	41 c0       	rjmp	.+130    	; 0x1acc <mmc_disk_initialize+0x11c>
    1a4a:	8e 01       	movw	r16, r28
    1a4c:	0f 5f       	subi	r16, 0xFF	; 255
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	6e 01       	movw	r12, r28
    1a52:	85 e0       	ldi	r24, 0x05	; 5
    1a54:	c8 0e       	add	r12, r24
    1a56:	d1 1c       	adc	r13, r1
    1a58:	78 01       	movw	r14, r16
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
    1a5a:	8f ef       	ldi	r24, 0xFF	; 255
    1a5c:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    1a60:	f7 01       	movw	r30, r14
    1a62:	81 93       	st	Z+, r24
    1a64:	7f 01       	movw	r14, r30
    1a66:	ec 15       	cp	r30, r12
    1a68:	fd 05       	cpc	r31, r13
    1a6a:	b9 f7       	brne	.-18     	; 0x1a5a <mmc_disk_initialize+0xaa>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <mmc_disk_initialize+0xc4>
    1a72:	4f c0       	rjmp	.+158    	; 0x1b12 <mmc_disk_initialize+0x162>
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	8a 3a       	cpi	r24, 0xAA	; 170
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <mmc_disk_initialize+0xcc>
    1a7a:	4b c0       	rjmp	.+150    	; 0x1b12 <mmc_disk_initialize+0x162>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1a7c:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
    1a80:	88 23       	and	r24, r24
    1a82:	49 f0       	breq	.+18     	; 0x1a96 <mmc_disk_initialize+0xe6>
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	70 e4       	ldi	r23, 0x40	; 64
    1a8c:	89 ea       	ldi	r24, 0xA9	; 169
    1a8e:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1a92:	81 11       	cpse	r24, r1
    1a94:	f3 cf       	rjmp	.-26     	; 0x1a7c <mmc_disk_initialize+0xcc>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1a96:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
    1a9a:	88 23       	and	r24, r24
    1a9c:	d1 f1       	breq	.+116    	; 0x1b12 <mmc_disk_initialize+0x162>
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	ba 01       	movw	r22, r20
    1aa4:	8a e3       	ldi	r24, 0x3A	; 58
    1aa6:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1aaa:	81 11       	cpse	r24, r1
    1aac:	32 c0       	rjmp	.+100    	; 0x1b12 <mmc_disk_initialize+0x162>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	81 93       	st	Z+, r24
    1ab8:	8f 01       	movw	r16, r30
    1aba:	ec 15       	cp	r30, r12
    1abc:	fd 05       	cpc	r31, r13
    1abe:	b9 f7       	brne	.-18     	; 0x1aae <mmc_disk_initialize+0xfe>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	14 e0       	ldi	r17, 0x04	; 4
    1ac4:	86 ff       	sbrs	r24, 6
    1ac6:	26 c0       	rjmp	.+76     	; 0x1b14 <mmc_disk_initialize+0x164>
    1ac8:	1c e0       	ldi	r17, 0x0C	; 12
    1aca:	24 c0       	rjmp	.+72     	; 0x1b14 <mmc_disk_initialize+0x164>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	ba 01       	movw	r22, r20
    1ad2:	89 ea       	ldi	r24, 0xA9	; 169
    1ad4:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1ad8:	11 e0       	ldi	r17, 0x01	; 1
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	10 f4       	brcc	.+4      	; 0x1ae2 <mmc_disk_initialize+0x132>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    1ade:	12 e0       	ldi	r17, 0x02	; 2
    1ae0:	09 ea       	ldi	r16, 0xA9	; 169
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    1ae2:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
    1ae6:	88 23       	and	r24, r24
    1ae8:	41 f0       	breq	.+16     	; 0x1afa <mmc_disk_initialize+0x14a>
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	ba 01       	movw	r22, r20
    1af0:	80 2f       	mov	r24, r16
    1af2:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1af6:	81 11       	cpse	r24, r1
    1af8:	f4 cf       	rjmp	.-24     	; 0x1ae2 <mmc_disk_initialize+0x132>
			if (!Timer1 || send_cmd(CMD16, 512) != 0) {	/* Set R/W block length to 512 */
    1afa:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
    1afe:	88 23       	and	r24, r24
    1b00:	41 f0       	breq	.+16     	; 0x1b12 <mmc_disk_initialize+0x162>
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	52 e0       	ldi	r21, 0x02	; 2
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	80 e1       	ldi	r24, 0x10	; 16
    1b0c:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1b10:	81 11       	cpse	r24, r1
				ty = 0;
    1b12:	10 e0       	ldi	r17, 0x00	; 0
	CardType = ty;
    1b14:	10 93 df 1c 	sts	0x1CDF, r17	; 0x801cdf <CardType>
	deselect();
    1b18:	0e 94 b7 0b 	call	0x176e	; 0x176e <deselect>
	if (ty) {			/* Initialization succeded */
    1b1c:	11 23       	and	r17, r17
    1b1e:	41 f0       	breq	.+16     	; 0x1b30 <mmc_disk_initialize+0x180>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    1b20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
    1b24:	8e 7f       	andi	r24, 0xFE	; 254
    1b26:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Stat>
		FCLK_FAST();
    1b2a:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1b2e:	53 cf       	rjmp	.-346    	; 0x19d6 <mmc_disk_initialize+0x26>
		power_off();
    1b30:	0e 94 a4 0b 	call	0x1748	; 0x1748 <power_off>
    1b34:	50 cf       	rjmp	.-352    	; 0x19d6 <mmc_disk_initialize+0x26>

00001b36 <mmc_disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
	return Stat;
    1b36:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
}
    1b3a:	08 95       	ret

00001b3c <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1b3c:	a3 e0       	ldi	r26, 0x03	; 3
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e4 ea       	ldi	r30, 0xA4	; 164
    1b42:	fd e0       	ldi	r31, 0x0D	; 13
    1b44:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
    1b48:	8c 01       	movw	r16, r24
    1b4a:	2a 83       	std	Y+2, r18	; 0x02
    1b4c:	3b 83       	std	Y+3, r19	; 0x03
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
    1b4e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b50:	3b 81       	ldd	r19, Y+3	; 0x03
    1b52:	84 e0       	ldi	r24, 0x04	; 4
    1b54:	23 2b       	or	r18, r19
    1b56:	d1 f1       	breq	.+116    	; 0x1bcc <mmc_disk_read+0x90>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1b58:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
    1b5c:	80 fd       	sbrc	r24, 0
    1b5e:	3e c0       	rjmp	.+124    	; 0x1bdc <mmc_disk_read+0xa0>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert to byte address if needed */
    1b60:	80 91 df 1c 	lds	r24, 0x1CDF	; 0x801cdf <CardType>
    1b64:	83 fd       	sbrc	r24, 3
    1b66:	07 c0       	rjmp	.+14     	; 0x1b76 <mmc_disk_read+0x3a>
    1b68:	89 e0       	ldi	r24, 0x09	; 9
    1b6a:	44 0f       	add	r20, r20
    1b6c:	55 1f       	adc	r21, r21
    1b6e:	66 1f       	adc	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	8a 95       	dec	r24
    1b74:	d1 f7       	brne	.-12     	; 0x1b6a <mmc_disk_read+0x2e>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	61 f5       	brne	.+88     	; 0x1bd6 <mmc_disk_read+0x9a>
    1b7e:	91 e1       	ldi	r25, 0x11	; 17
    1b80:	99 83       	std	Y+1, r25	; 0x01
	if (send_cmd(cmd, sect) == 0) {
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	18 c0       	rjmp	.+48     	; 0x1bbc <mmc_disk_read+0x80>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	72 e0       	ldi	r23, 0x02	; 2
    1b90:	c8 01       	movw	r24, r16
    1b92:	0e 94 bc 0b 	call	0x1778	; 0x1778 <rcvr_datablock>
    1b96:	89 2b       	or	r24, r25
    1b98:	41 f0       	breq	.+16     	; 0x1baa <mmc_disk_read+0x6e>
			buff += 512;
    1b9a:	1e 5f       	subi	r17, 0xFE	; 254
		} while (--count);
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9b 83       	std	Y+3, r25	; 0x03
    1ba4:	8a 83       	std	Y+2, r24	; 0x02
    1ba6:	89 2b       	or	r24, r25
    1ba8:	89 f7       	brne	.-30     	; 0x1b8c <mmc_disk_read+0x50>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    1baa:	99 81       	ldd	r25, Y+1	; 0x01
    1bac:	92 31       	cpi	r25, 0x12	; 18
    1bae:	31 f4       	brne	.+12     	; 0x1bbc <mmc_disk_read+0x80>
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	ba 01       	movw	r22, r20
    1bb6:	8c e0       	ldi	r24, 0x0C	; 12
    1bb8:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
	}
	deselect();
    1bbc:	0e 94 b7 0b 	call	0x176e	; 0x176e <deselect>

	return count ? RES_ERROR : RES_OK;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc4:	3b 81       	ldd	r19, Y+3	; 0x03
    1bc6:	23 2b       	or	r18, r19
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <mmc_disk_read+0x90>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
}
    1bce:	23 96       	adiw	r28, 0x03	; 3
    1bd0:	e4 e0       	ldi	r30, 0x04	; 4
    1bd2:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    1bd6:	22 e1       	ldi	r18, 0x12	; 18
    1bd8:	29 83       	std	Y+1, r18	; 0x01
    1bda:	d3 cf       	rjmp	.-90     	; 0x1b82 <mmc_disk_read+0x46>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	f6 cf       	rjmp	.-20     	; 0x1bcc <mmc_disk_read+0x90>

00001be0 <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	e6 ef       	ldi	r30, 0xF6	; 246
    1be6:	fd e0       	ldi	r31, 0x0D	; 13
    1be8:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__prologue_saves__+0x14>
    1bec:	8c 01       	movw	r16, r24
    1bee:	6a 01       	movw	r12, r20
    1bf0:	7b 01       	movw	r14, r22
    1bf2:	e9 01       	movw	r28, r18
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
    1bf4:	84 e0       	ldi	r24, 0x04	; 4
    1bf6:	20 97       	sbiw	r28, 0x00	; 0
    1bf8:	79 f1       	breq	.+94     	; 0x1c58 <mmc_disk_write+0x78>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1bfa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
    1bfe:	80 fd       	sbrc	r24, 0
    1c00:	53 c0       	rjmp	.+166    	; 0x1ca8 <mmc_disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1c02:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
    1c06:	82 fd       	sbrc	r24, 2
    1c08:	51 c0       	rjmp	.+162    	; 0x1cac <mmc_disk_write+0xcc>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert to byte address if needed */
    1c0a:	80 91 df 1c 	lds	r24, 0x1CDF	; 0x801cdf <CardType>
    1c0e:	83 fd       	sbrc	r24, 3
    1c10:	07 c0       	rjmp	.+14     	; 0x1c20 <mmc_disk_write+0x40>
    1c12:	99 e0       	ldi	r25, 0x09	; 9
    1c14:	cc 0c       	add	r12, r12
    1c16:	dd 1c       	adc	r13, r13
    1c18:	ee 1c       	adc	r14, r14
    1c1a:	ff 1c       	adc	r15, r15
    1c1c:	9a 95       	dec	r25
    1c1e:	d1 f7       	brne	.-12     	; 0x1c14 <mmc_disk_write+0x34>

	if (count == 1) {	/* Single block write */
    1c20:	c1 30       	cpi	r28, 0x01	; 1
    1c22:	d1 05       	cpc	r29, r1
    1c24:	f9 f4       	brne	.+62     	; 0x1c64 <mmc_disk_write+0x84>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    1c26:	b7 01       	movw	r22, r14
    1c28:	a6 01       	movw	r20, r12
    1c2a:	88 e1       	ldi	r24, 0x18	; 24
    1c2c:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1c30:	81 11       	cpse	r24, r1
    1c32:	37 c0       	rjmp	.+110    	; 0x1ca2 <mmc_disk_write+0xc2>
			&& xmit_datablock(buff, 0xFE)) {
    1c34:	6e ef       	ldi	r22, 0xFE	; 254
    1c36:	c8 01       	movw	r24, r16
    1c38:	0e 94 8d 0c 	call	0x191a	; 0x191a <xmit_datablock>
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	23 2b       	or	r18, r19
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <mmc_disk_write+0x66>
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	c9 2f       	mov	r28, r25
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	d8 2f       	mov	r29, r24
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	deselect();
    1c4c:	0e 94 b7 0b 	call	0x176e	; 0x176e <deselect>

	return count ? RES_ERROR : RES_OK;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	cd 2b       	or	r28, r29
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <mmc_disk_write+0x78>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1c58:	90 e0       	ldi	r25, 0x00	; 0
}
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	e8 e0       	ldi	r30, 0x08	; 8
    1c60:	0c 94 5a 5a 	jmp	0xb4b4	; 0xb4b4 <__epilogue_restores__+0x14>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    1c64:	86 70       	andi	r24, 0x06	; 6
    1c66:	31 f0       	breq	.+12     	; 0x1c74 <mmc_disk_write+0x94>
    1c68:	ae 01       	movw	r20, r28
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	87 e9       	ldi	r24, 0x97	; 151
    1c70:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    1c74:	b7 01       	movw	r22, r14
    1c76:	a6 01       	movw	r20, r12
    1c78:	89 e1       	ldi	r24, 0x19	; 25
    1c7a:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	e5 cf       	rjmp	.-54     	; 0x1c4c <mmc_disk_write+0x6c>
				if (!xmit_datablock(buff, 0xFC)) break;
    1c82:	6c ef       	ldi	r22, 0xFC	; 252
    1c84:	c8 01       	movw	r24, r16
    1c86:	0e 94 8d 0c 	call	0x191a	; 0x191a <xmit_datablock>
    1c8a:	89 2b       	or	r24, r25
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <mmc_disk_write+0xb4>
				buff += 512;
    1c8e:	1e 5f       	subi	r17, 0xFE	; 254
			} while (--count);
    1c90:	21 97       	sbiw	r28, 0x01	; 1
    1c92:	b9 f7       	brne	.-18     	; 0x1c82 <mmc_disk_write+0xa2>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
    1c94:	6d ef       	ldi	r22, 0xFD	; 253
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	0e 94 8d 0c 	call	0x191a	; 0x191a <xmit_datablock>
    1c9e:	89 2b       	or	r24, r25
    1ca0:	a9 f6       	brne	.-86     	; 0x1c4c <mmc_disk_write+0x6c>
    1ca2:	c1 e0       	ldi	r28, 0x01	; 1
    1ca4:	d0 e0       	ldi	r29, 0x00	; 0
    1ca6:	d2 cf       	rjmp	.-92     	; 0x1c4c <mmc_disk_write+0x6c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	d6 cf       	rjmp	.-84     	; 0x1c58 <mmc_disk_write+0x78>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	d4 cf       	rjmp	.-88     	; 0x1c58 <mmc_disk_write+0x78>

00001cb0 <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    1cb0:	a0 e1       	ldi	r26, 0x10	; 16
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ee e5       	ldi	r30, 0x5E	; 94
    1cb6:	fe e0       	ldi	r31, 0x0E	; 14
    1cb8:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__prologue_saves__+0x14>
    1cbc:	e8 2f       	mov	r30, r24
    1cbe:	8b 01       	movw	r16, r22
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1cc0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
    1cc4:	80 fd       	sbrc	r24, 0
    1cc6:	52 c2       	rjmp	.+1188   	; 0x216c <mmc_disk_ioctl+0x4bc>

	res = RES_ERROR;
	switch (cmd) {
    1cc8:	ea 33       	cpi	r30, 0x3A	; 58
    1cca:	50 f4       	brcc	.+20     	; 0x1ce0 <mmc_disk_ioctl+0x30>
    1ccc:	e2 33       	cpi	r30, 0x32	; 50
    1cce:	58 f4       	brcc	.+22     	; 0x1ce6 <mmc_disk_ioctl+0x36>
    1cd0:	e3 30       	cpi	r30, 0x03	; 3
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <mmc_disk_ioctl+0x26>
    1cd4:	94 c0       	rjmp	.+296    	; 0x1dfe <mmc_disk_ioctl+0x14e>
    1cd6:	80 f4       	brcc	.+32     	; 0x1cf8 <mmc_disk_ioctl+0x48>
    1cd8:	ee 23       	and	r30, r30
    1cda:	c1 f0       	breq	.+48     	; 0x1d0c <mmc_disk_ioctl+0x5c>
    1cdc:	e1 30       	cpi	r30, 0x01	; 1
    1cde:	f9 f0       	breq	.+62     	; 0x1d1e <mmc_disk_ioctl+0x6e>
    1ce0:	04 e0       	ldi	r16, 0x04	; 4
    1ce2:	10 e0       	ldi	r17, 0x00	; 0
    1ce4:	0a c1       	rjmp	.+532    	; 0x1efa <mmc_disk_ioctl+0x24a>
    1ce6:	e3 53       	subi	r30, 0x33	; 51
    1ce8:	e7 30       	cpi	r30, 0x07	; 7
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <mmc_disk_ioctl+0x3e>
    1cec:	00 c1       	rjmp	.+512    	; 0x1eee <mmc_disk_ioctl+0x23e>
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	e4 50       	subi	r30, 0x04	; 4
    1cf2:	f5 4a       	sbci	r31, 0xA5	; 165
    1cf4:	0c 94 c1 59 	jmp	0xb382	; 0xb382 <__tablejump2__>
    1cf8:	e7 30       	cpi	r30, 0x07	; 7
    1cfa:	91 f7       	brne	.-28     	; 0x1ce0 <mmc_disk_ioctl+0x30>
		}
		deselect();
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    1cfc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <power_off>
		Stat |= STA_NOINIT;
    1d00:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
    1d04:	81 60       	ori	r24, 0x01	; 1
    1d06:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Stat>
    1d0a:	f5 c0       	rjmp	.+490    	; 0x1ef6 <mmc_disk_ioctl+0x246>
		if (select()) res = RES_OK;
    1d0c:	0e 94 2f 0c 	call	0x185e	; 0x185e <select>
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    1d10:	9c 01       	movw	r18, r24
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	23 2b       	or	r18, r19
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <mmc_disk_ioctl+0x6a>
    1d18:	dc c1       	rjmp	.+952    	; 0x20d2 <mmc_disk_ioctl+0x422>
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	da c1       	rjmp	.+948    	; 0x20d2 <mmc_disk_ioctl+0x422>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	ba 01       	movw	r22, r20
    1d24:	89 e0       	ldi	r24, 0x09	; 9
    1d26:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1d2a:	88 23       	and	r24, r24
    1d2c:	19 f0       	breq	.+6      	; 0x1d34 <mmc_disk_ioctl+0x84>
	res = RES_ERROR;
    1d2e:	01 e0       	ldi	r16, 0x01	; 1
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	36 c0       	rjmp	.+108    	; 0x1da0 <mmc_disk_ioctl+0xf0>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1d34:	60 e1       	ldi	r22, 0x10	; 16
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	ce 01       	movw	r24, r28
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <rcvr_datablock>
    1d40:	89 2b       	or	r24, r25
    1d42:	a9 f3       	breq	.-22     	; 0x1d2e <mmc_disk_ioctl+0x7e>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1d44:	99 81       	ldd	r25, Y+1	; 0x01
    1d46:	92 95       	swap	r25
    1d48:	96 95       	lsr	r25
    1d4a:	96 95       	lsr	r25
    1d4c:	93 70       	andi	r25, 0x03	; 3
    1d4e:	29 85       	ldd	r18, Y+9	; 0x09
    1d50:	6a 85       	ldd	r22, Y+10	; 0x0a
    1d52:	88 85       	ldd	r24, Y+8	; 0x08
    1d54:	91 30       	cpi	r25, 0x01	; 1
    1d56:	39 f5       	brne	.+78     	; 0x1da6 <mmc_disk_ioctl+0xf6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	32 2f       	mov	r19, r18
    1d5c:	22 27       	eor	r18, r18
    1d5e:	26 0f       	add	r18, r22
    1d60:	31 1d       	adc	r19, r1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	a0 e0       	ldi	r26, 0x00	; 0
    1d68:	dc 01       	movw	r26, r24
    1d6a:	99 27       	eor	r25, r25
    1d6c:	88 27       	eor	r24, r24
    1d6e:	88 27       	eor	r24, r24
    1d70:	99 27       	eor	r25, r25
    1d72:	af 73       	andi	r26, 0x3F	; 63
    1d74:	bb 27       	eor	r27, r27
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	b1 1d       	adc	r27, r1
    1d7c:	82 0f       	add	r24, r18
    1d7e:	93 1f       	adc	r25, r19
    1d80:	a1 1d       	adc	r26, r1
    1d82:	b1 1d       	adc	r27, r1
				*(LBA_t*)buff = csize << 10;
    1d84:	2a e0       	ldi	r18, 0x0A	; 10
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	aa 1f       	adc	r26, r26
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	2a 95       	dec	r18
    1d90:	d1 f7       	brne	.-12     	; 0x1d86 <mmc_disk_ioctl+0xd6>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1d92:	f8 01       	movw	r30, r16
    1d94:	80 83       	st	Z, r24
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	a2 83       	std	Z+2, r26	; 0x02
    1d9a:	b3 83       	std	Z+3, r27	; 0x03
				res = RES_OK;
    1d9c:	10 e0       	ldi	r17, 0x00	; 0
    1d9e:	00 e0       	ldi	r16, 0x00	; 0
		}
		deselect();
    1da0:	0e 94 b7 0b 	call	0x176e	; 0x176e <deselect>
		break;
    1da4:	aa c0       	rjmp	.+340    	; 0x1efa <mmc_disk_ioctl+0x24a>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    1da6:	22 95       	swap	r18
    1da8:	26 95       	lsr	r18
    1daa:	26 95       	lsr	r18
    1dac:	23 70       	andi	r18, 0x03	; 3
    1dae:	f4 e0       	ldi	r31, 0x04	; 4
    1db0:	8f 9f       	mul	r24, r31
    1db2:	c0 01       	movw	r24, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	82 0f       	add	r24, r18
    1db8:	91 1d       	adc	r25, r1
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	4f 81       	ldd	r20, Y+7	; 0x07
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	54 2f       	mov	r21, r20
    1dc2:	44 27       	eor	r20, r20
    1dc4:	55 0f       	add	r21, r21
    1dc6:	55 0f       	add	r21, r21
    1dc8:	44 27       	eor	r20, r20
    1dca:	5c 70       	andi	r21, 0x0C	; 12
    1dcc:	84 0f       	add	r24, r20
    1dce:	95 1f       	adc	r25, r21
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	a0 e0       	ldi	r26, 0x00	; 0
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    1dd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1dd6:	2f 70       	andi	r18, 0x0F	; 15
    1dd8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1dda:	33 1f       	adc	r19, r19
    1ddc:	33 27       	eor	r19, r19
    1dde:	33 1f       	adc	r19, r19
    1de0:	23 0f       	add	r18, r19
    1de2:	2e 5f       	subi	r18, 0xFE	; 254
    1de4:	66 0f       	add	r22, r22
    1de6:	66 70       	andi	r22, 0x06	; 6
    1de8:	26 0f       	add	r18, r22
				*(LBA_t*)buff = csize << (n - 9);
    1dea:	29 50       	subi	r18, 0x09	; 9
    1dec:	33 0b       	sbc	r19, r19
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <mmc_disk_ioctl+0x148>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	aa 1f       	adc	r26, r26
    1df6:	bb 1f       	adc	r27, r27
    1df8:	2a 95       	dec	r18
    1dfa:	d2 f7       	brpl	.-12     	; 0x1df0 <mmc_disk_ioctl+0x140>
    1dfc:	ca cf       	rjmp	.-108    	; 0x1d92 <mmc_disk_ioctl+0xe2>
		if (CardType & CT_SD2) {	/* SDv2? */
    1dfe:	f0 90 df 1c 	lds	r15, 0x1CDF	; 0x801cdf <CardType>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	ba 01       	movw	r22, r20
		if (CardType & CT_SD2) {	/* SDv2? */
    1e08:	f2 fe       	sbrs	r15, 2
    1e0a:	21 c0       	rjmp	.+66     	; 0x1e4e <mmc_disk_ioctl+0x19e>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    1e0c:	8d e8       	ldi	r24, 0x8D	; 141
    1e0e:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1e12:	81 11       	cpse	r24, r1
    1e14:	8c cf       	rjmp	.-232    	; 0x1d2e <mmc_disk_ioctl+0x7e>
				xchg_spi(0xFF);
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    1e1c:	60 e1       	ldi	r22, 0x10	; 16
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	ce 01       	movw	r24, r28
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	0e 94 bc 0b 	call	0x1778	; 0x1778 <rcvr_datablock>
    1e28:	89 2b       	or	r24, r25
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <mmc_disk_ioctl+0x17e>
    1e2c:	80 cf       	rjmp	.-256    	; 0x1d2e <mmc_disk_ioctl+0x7e>
    1e2e:	60 e3       	ldi	r22, 0x30	; 48
    1e30:	f6 2e       	mov	r15, r22
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    1e38:	fa 94       	dec	r15
    1e3a:	f1 10       	cpse	r15, r1
    1e3c:	fa cf       	rjmp	.-12     	; 0x1e32 <mmc_disk_ioctl+0x182>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1e3e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e40:	22 95       	swap	r18
    1e42:	2f 70       	andi	r18, 0x0F	; 15
    1e44:	80 e1       	ldi	r24, 0x10	; 16
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a0 e0       	ldi	r26, 0x00	; 0
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	d0 cf       	rjmp	.-96     	; 0x1dee <mmc_disk_ioctl+0x13e>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1e4e:	89 e0       	ldi	r24, 0x09	; 9
    1e50:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1e54:	81 11       	cpse	r24, r1
    1e56:	6b cf       	rjmp	.-298    	; 0x1d2e <mmc_disk_ioctl+0x7e>
    1e58:	60 e1       	ldi	r22, 0x10	; 16
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	0e 94 bc 0b 	call	0x1778	; 0x1778 <rcvr_datablock>
    1e64:	89 2b       	or	r24, r25
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <mmc_disk_ioctl+0x1ba>
    1e68:	62 cf       	rjmp	.-316    	; 0x1d2e <mmc_disk_ioctl+0x7e>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1e6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	2c 85       	ldd	r18, Y+12	; 0x0c
				if (CardType & CT_SD1) {	/* SDv1 */
    1e70:	f1 fe       	sbrs	r15, 1
    1e72:	19 c0       	rjmp	.+50     	; 0x1ea6 <mmc_disk_ioctl+0x1f6>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	8e 77       	andi	r24, 0x7E	; 126
    1e7a:	99 27       	eor	r25, r25
    1e7c:	22 1f       	adc	r18, r18
    1e7e:	22 27       	eor	r18, r18
    1e80:	22 1f       	adc	r18, r18
    1e82:	2f 5f       	subi	r18, 0xFF	; 255
    1e84:	82 0f       	add	r24, r18
    1e86:	91 1d       	adc	r25, r1
    1e88:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e8a:	22 95       	swap	r18
    1e8c:	26 95       	lsr	r18
    1e8e:	26 95       	lsr	r18
    1e90:	23 70       	andi	r18, 0x03	; 3
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	33 0b       	sbc	r19, r19
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <mmc_disk_ioctl+0x1ec>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	2a 95       	dec	r18
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <mmc_disk_ioctl+0x1e8>
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	a0 e0       	ldi	r26, 0x00	; 0
    1ea4:	76 cf       	rjmp	.-276    	; 0x1d92 <mmc_disk_ioctl+0xe2>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    1ea6:	f8 e0       	ldi	r31, 0x08	; 8
    1ea8:	2f 9f       	mul	r18, r31
    1eaa:	a0 01       	movw	r20, r0
    1eac:	11 24       	eor	r1, r1
    1eae:	48 71       	andi	r20, 0x18	; 24
    1eb0:	55 27       	eor	r21, r21
    1eb2:	22 95       	swap	r18
    1eb4:	26 95       	lsr	r18
    1eb6:	27 70       	andi	r18, 0x07	; 7
    1eb8:	24 0f       	add	r18, r20
    1eba:	35 2f       	mov	r19, r21
    1ebc:	31 1d       	adc	r19, r1
    1ebe:	2f 5f       	subi	r18, 0xFF	; 255
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	95 95       	asr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	95 95       	asr	r25
    1ec8:	87 95       	ror	r24
    1eca:	8f 71       	andi	r24, 0x1F	; 31
    1ecc:	99 27       	eor	r25, r25
    1ece:	01 96       	adiw	r24, 0x01	; 1
    1ed0:	28 9f       	mul	r18, r24
    1ed2:	a0 01       	movw	r20, r0
    1ed4:	29 9f       	mul	r18, r25
    1ed6:	50 0d       	add	r21, r0
    1ed8:	38 9f       	mul	r19, r24
    1eda:	50 0d       	add	r21, r0
    1edc:	11 24       	eor	r1, r1
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	40 83       	st	Z, r20
    1ee6:	51 83       	std	Z+1, r21	; 0x01
    1ee8:	62 83       	std	Z+2, r22	; 0x02
    1eea:	73 83       	std	Z+3, r23	; 0x03
    1eec:	57 cf       	rjmp	.-338    	; 0x1d9c <mmc_disk_ioctl+0xec>
		*ptr = CardType;
    1eee:	80 91 df 1c 	lds	r24, 0x1CDF	; 0x801cdf <CardType>
    1ef2:	fb 01       	movw	r30, r22
    1ef4:	80 83       	st	Z, r24
		res = RES_OK;
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
    1ef8:	00 e0       	ldi	r16, 0x00	; 0
	default:
		res = RES_PARERR;
	}

	return res;
}
    1efa:	c8 01       	movw	r24, r16
    1efc:	60 96       	adiw	r28, 0x10	; 16
    1efe:	e8 e0       	ldi	r30, 0x08	; 8
    1f00:	0c 94 5a 5a 	jmp	0xb4b4	; 0xb4b4 <__epilogue_restores__+0x14>
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	50 e0       	ldi	r21, 0x00	; 0
    1f08:	ba 01       	movw	r22, r20
    1f0a:	89 e0       	ldi	r24, 0x09	; 9
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
    1f0c:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1f10:	60 e1       	ldi	r22, 0x10	; 16
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	81 11       	cpse	r24, r1
    1f16:	0b cf       	rjmp	.-490    	; 0x1d2e <mmc_disk_ioctl+0x7e>
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    1f18:	c8 01       	movw	r24, r16
    1f1a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <rcvr_datablock>
    1f1e:	f8 ce       	rjmp	.-528    	; 0x1d10 <mmc_disk_ioctl+0x60>
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	ba 01       	movw	r22, r20
    1f26:	8a e0       	ldi	r24, 0x0A	; 10
    1f28:	f1 cf       	rjmp	.-30     	; 0x1f0c <mmc_disk_ioctl+0x25c>
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	ba 01       	movw	r22, r20
    1f30:	8a e3       	ldi	r24, 0x3A	; 58
    1f32:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1f36:	81 11       	cpse	r24, r1
    1f38:	fa ce       	rjmp	.-524    	; 0x1d2e <mmc_disk_ioctl+0x7e>
    1f3a:	78 01       	movw	r14, r16
    1f3c:	f4 e0       	ldi	r31, 0x04	; 4
    1f3e:	ef 0e       	add	r14, r31
    1f40:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    1f42:	68 01       	movw	r12, r16
    1f44:	0f 5f       	subi	r16, 0xFF	; 255
    1f46:	1f 4f       	sbci	r17, 0xFF	; 255
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    1f4e:	f6 01       	movw	r30, r12
    1f50:	80 83       	st	Z, r24
    1f52:	e0 16       	cp	r14, r16
    1f54:	f1 06       	cpc	r15, r17
    1f56:	a9 f7       	brne	.-22     	; 0x1f42 <mmc_disk_ioctl+0x292>
    1f58:	21 cf       	rjmp	.-446    	; 0x1d9c <mmc_disk_ioctl+0xec>
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	ba 01       	movw	r22, r20
    1f60:	8d e8       	ldi	r24, 0x8D	; 141
    1f62:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1f66:	81 11       	cpse	r24, r1
    1f68:	e2 ce       	rjmp	.-572    	; 0x1d2e <mmc_disk_ioctl+0x7e>
			xchg_spi(0xFF);
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    1f70:	60 e4       	ldi	r22, 0x40	; 64
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	d1 cf       	rjmp	.-94     	; 0x1f18 <mmc_disk_ioctl+0x268>
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    1f76:	fb 01       	movw	r30, r22
    1f78:	43 81       	ldd	r20, Z+3	; 0x03
    1f7a:	54 81       	ldd	r21, Z+4	; 0x04
    1f7c:	65 81       	ldd	r22, Z+5	; 0x05
    1f7e:	76 81       	ldd	r23, Z+6	; 0x06
    1f80:	a9 e0       	ldi	r26, 0x09	; 9
    1f82:	44 0f       	add	r20, r20
    1f84:	55 1f       	adc	r21, r21
    1f86:	66 1f       	adc	r22, r22
    1f88:	77 1f       	adc	r23, r23
    1f8a:	aa 95       	dec	r26
    1f8c:	d1 f7       	brne	.-12     	; 0x1f82 <mmc_disk_ioctl+0x2d2>
    1f8e:	81 81       	ldd	r24, Z+1	; 0x01
    1f90:	92 81       	ldd	r25, Z+2	; 0x02
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	91 70       	andi	r25, 0x01	; 1
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	a0 e0       	ldi	r26, 0x00	; 0
    1f9a:	48 2b       	or	r20, r24
    1f9c:	59 2b       	or	r21, r25
    1f9e:	6a 2b       	or	r22, r26
    1fa0:	7b 2b       	or	r23, r27
    1fa2:	80 81       	ld	r24, Z
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	2c e1       	ldi	r18, 0x1C	; 28
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	aa 1f       	adc	r26, r26
    1fb2:	bb 1f       	adc	r27, r27
    1fb4:	2a 95       	dec	r18
    1fb6:	d1 f7       	brne	.-12     	; 0x1fac <mmc_disk_ioctl+0x2fc>
    1fb8:	84 2b       	or	r24, r20
    1fba:	95 2b       	or	r25, r21
    1fbc:	a6 2b       	or	r26, r22
    1fbe:	b7 2b       	or	r27, r23
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	bd 01       	movw	r22, r26
    1fc4:	70 68       	ori	r23, 0x80	; 128
    1fc6:	80 e3       	ldi	r24, 0x30	; 48
    1fc8:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    1fcc:	81 11       	cpse	r24, r1
    1fce:	af ce       	rjmp	.-674    	; 0x1d2e <mmc_disk_ioctl+0x7e>
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
    1fd0:	84 e6       	ldi	r24, 0x64	; 100
    1fd2:	80 93 e2 1c 	sts	0x1CE2, r24	; 0x801ce2 <Timer1>
    1fd6:	8f ef       	ldi	r24, 0xFF	; 255
    1fd8:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    1fdc:	8f 3f       	cpi	r24, 0xFF	; 255
    1fde:	29 f4       	brne	.+10     	; 0x1fea <mmc_disk_ioctl+0x33a>
    1fe0:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	f7 cf       	rjmp	.-18     	; 0x1fd6 <mmc_disk_ioctl+0x326>
    1fe8:	a2 ce       	rjmp	.-700    	; 0x1d2e <mmc_disk_ioctl+0x7e>
			if (rc == 0xFE) {
    1fea:	8e 3f       	cpi	r24, 0xFE	; 254
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <mmc_disk_ioctl+0x340>
    1fee:	9f ce       	rjmp	.-706    	; 0x1d2e <mmc_disk_ioctl+0x7e>
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	e7 80       	ldd	r14, Z+7	; 0x07
    1ff4:	f0 84       	ldd	r15, Z+8	; 0x08
    1ff6:	c1 80       	ldd	r12, Z+1	; 0x01
    1ff8:	d2 80       	ldd	r13, Z+2	; 0x02
    1ffa:	ce 0c       	add	r12, r14
    1ffc:	df 1c       	adc	r13, r15
    1ffe:	ec 14       	cp	r14, r12
    2000:	fd 04       	cpc	r15, r13
    2002:	89 f4       	brne	.+34     	; 0x2026 <mmc_disk_ioctl+0x376>
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    2004:	f8 01       	movw	r30, r16
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	92 81       	ldd	r25, Z+2	; 0x02
    200a:	02 e0       	ldi	r16, 0x02	; 2
    200c:	12 e0       	ldi	r17, 0x02	; 2
    200e:	08 1b       	sub	r16, r24
    2010:	19 0b       	sbc	r17, r25
    2012:	01 15       	cp	r16, r1
    2014:	11 05       	cpc	r17, r1
    2016:	09 f4       	brne	.+2      	; 0x201a <mmc_disk_ioctl+0x36a>
    2018:	c3 ce       	rjmp	.-634    	; 0x1da0 <mmc_disk_ioctl+0xf0>
    201a:	8f ef       	ldi	r24, 0xFF	; 255
    201c:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    2020:	01 50       	subi	r16, 0x01	; 1
    2022:	11 09       	sbc	r17, r1
    2024:	f6 cf       	rjmp	.-20     	; 0x2012 <mmc_disk_ioctl+0x362>
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    2026:	8f ef       	ldi	r24, 0xFF	; 255
    2028:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    202c:	f7 01       	movw	r30, r14
    202e:	81 93       	st	Z+, r24
    2030:	7f 01       	movw	r14, r30
    2032:	e5 cf       	rjmp	.-54     	; 0x1ffe <mmc_disk_ioctl+0x34e>
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    2034:	fb 01       	movw	r30, r22
    2036:	43 81       	ldd	r20, Z+3	; 0x03
    2038:	54 81       	ldd	r21, Z+4	; 0x04
    203a:	65 81       	ldd	r22, Z+5	; 0x05
    203c:	76 81       	ldd	r23, Z+6	; 0x06
    203e:	39 e0       	ldi	r19, 0x09	; 9
    2040:	44 0f       	add	r20, r20
    2042:	55 1f       	adc	r21, r21
    2044:	66 1f       	adc	r22, r22
    2046:	77 1f       	adc	r23, r23
    2048:	3a 95       	dec	r19
    204a:	d1 f7       	brne	.-12     	; 0x2040 <mmc_disk_ioctl+0x390>
    204c:	81 81       	ldd	r24, Z+1	; 0x01
    204e:	92 81       	ldd	r25, Z+2	; 0x02
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	91 70       	andi	r25, 0x01	; 1
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	48 2b       	or	r20, r24
    205a:	59 2b       	or	r21, r25
    205c:	6a 2b       	or	r22, r26
    205e:	7b 2b       	or	r23, r27
    2060:	80 81       	ld	r24, Z
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	a0 e0       	ldi	r26, 0x00	; 0
    2068:	ec e1       	ldi	r30, 0x1C	; 28
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	aa 1f       	adc	r26, r26
    2070:	bb 1f       	adc	r27, r27
    2072:	ea 95       	dec	r30
    2074:	d1 f7       	brne	.-12     	; 0x206a <mmc_disk_ioctl+0x3ba>
    2076:	84 2b       	or	r24, r20
    2078:	95 2b       	or	r25, r21
    207a:	a6 2b       	or	r26, r22
    207c:	b7 2b       	or	r27, r23
    207e:	ac 01       	movw	r20, r24
    2080:	bd 01       	movw	r22, r26
    2082:	70 68       	ori	r23, 0x80	; 128
    2084:	81 e3       	ldi	r24, 0x31	; 49
    2086:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    208a:	81 11       	cpse	r24, r1
    208c:	50 ce       	rjmp	.-864    	; 0x1d2e <mmc_disk_ioctl+0x7e>
			xchg_spi(0xFF); xchg_spi(0xFE);
    208e:	8f ef       	ldi	r24, 0xFF	; 255
    2090:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    2094:	8e ef       	ldi	r24, 0xFE	; 254
    2096:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    209a:	f8 01       	movw	r30, r16
    209c:	e7 80       	ldd	r14, Z+7	; 0x07
    209e:	f0 84       	ldd	r15, Z+8	; 0x08
    20a0:	c1 80       	ldd	r12, Z+1	; 0x01
    20a2:	d2 80       	ldd	r13, Z+2	; 0x02
    20a4:	ce 0c       	add	r12, r14
    20a6:	df 1c       	adc	r13, r15
    20a8:	ec 14       	cp	r14, r12
    20aa:	fd 04       	cpc	r15, r13
    20ac:	a9 f4       	brne	.+42     	; 0x20d8 <mmc_disk_ioctl+0x428>
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    20ae:	f8 01       	movw	r30, r16
    20b0:	81 81       	ldd	r24, Z+1	; 0x01
    20b2:	92 81       	ldd	r25, Z+2	; 0x02
    20b4:	02 e0       	ldi	r16, 0x02	; 2
    20b6:	12 e0       	ldi	r17, 0x02	; 2
    20b8:	08 1b       	sub	r16, r24
    20ba:	19 0b       	sbc	r17, r25
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	01 15       	cp	r16, r1
    20c0:	11 05       	cpc	r17, r1
    20c2:	81 f4       	brne	.+32     	; 0x20e4 <mmc_disk_ioctl+0x434>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    20c4:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    20c8:	8f 71       	andi	r24, 0x1F	; 31
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	85 30       	cpi	r24, 0x05	; 5
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <mmc_disk_ioctl+0x422>
    20d0:	24 ce       	rjmp	.-952    	; 0x1d1a <mmc_disk_ioctl+0x6a>
	res = RES_ERROR;
    20d2:	09 2f       	mov	r16, r25
    20d4:	10 e0       	ldi	r17, 0x00	; 0
    20d6:	64 ce       	rjmp	.-824    	; 0x1da0 <mmc_disk_ioctl+0xf0>
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    20d8:	f7 01       	movw	r30, r14
    20da:	81 91       	ld	r24, Z+
    20dc:	7f 01       	movw	r14, r30
    20de:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    20e2:	e2 cf       	rjmp	.-60     	; 0x20a8 <mmc_disk_ioctl+0x3f8>
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    20e4:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    20e8:	01 50       	subi	r16, 0x01	; 1
    20ea:	11 09       	sbc	r17, r1
    20ec:	e7 cf       	rjmp	.-50     	; 0x20bc <mmc_disk_ioctl+0x40c>
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
    20ee:	fb 01       	movw	r30, r22
    20f0:	40 81       	ld	r20, Z
    20f2:	50 e0       	ldi	r21, 0x00	; 0
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	8c e1       	ldi	r24, 0x1C	; 28
    20fa:	44 0f       	add	r20, r20
    20fc:	55 1f       	adc	r21, r21
    20fe:	66 1f       	adc	r22, r22
    2100:	77 1f       	adc	r23, r23
    2102:	8a 95       	dec	r24
    2104:	d1 f7       	brne	.-12     	; 0x20fa <mmc_disk_ioctl+0x44a>
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	a0 e0       	ldi	r26, 0x00	; 0
    210e:	48 2b       	or	r20, r24
    2110:	59 2b       	or	r21, r25
    2112:	6a 2b       	or	r22, r26
    2114:	7b 2b       	or	r23, r27
    2116:	83 81       	ldd	r24, Z+3	; 0x03
    2118:	94 81       	ldd	r25, Z+4	; 0x04
    211a:	a5 81       	ldd	r26, Z+5	; 0x05
    211c:	b6 81       	ldd	r27, Z+6	; 0x06
    211e:	29 e0       	ldi	r18, 0x09	; 9
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	aa 1f       	adc	r26, r26
    2126:	bb 1f       	adc	r27, r27
    2128:	2a 95       	dec	r18
    212a:	d1 f7       	brne	.-12     	; 0x2120 <mmc_disk_ioctl+0x470>
    212c:	84 2b       	or	r24, r20
    212e:	95 2b       	or	r25, r21
    2130:	a6 2b       	or	r26, r22
    2132:	b7 2b       	or	r27, r23
    2134:	ac 01       	movw	r20, r24
    2136:	bd 01       	movw	r22, r26
    2138:	74 68       	ori	r23, 0x84	; 132
    213a:	81 e3       	ldi	r24, 0x31	; 49
    213c:	0e 94 43 0c 	call	0x1886	; 0x1886 <send_cmd>
    2140:	81 11       	cpse	r24, r1
    2142:	f5 cd       	rjmp	.-1046   	; 0x1d2e <mmc_disk_ioctl+0x7e>
			xchg_spi(0xFF); xchg_spi(0xFE);
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    214a:	8e ef       	ldi	r24, 0xFE	; 254
    214c:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
			xchg_spi(sdi->ndata);
    2150:	f8 01       	movw	r30, r16
    2152:	81 81       	ldd	r24, Z+1	; 0x01
    2154:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    2158:	01 e0       	ldi	r16, 0x01	; 1
    215a:	12 e0       	ldi	r17, 0x02	; 2
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
    215c:	8f ef       	ldi	r24, 0xFF	; 255
    215e:	0e 94 ae 0b 	call	0x175c	; 0x175c <xchg_spi>
    2162:	01 50       	subi	r16, 0x01	; 1
    2164:	11 09       	sbc	r17, r1
    2166:	d1 f7       	brne	.-12     	; 0x215c <mmc_disk_ioctl+0x4ac>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	ac cf       	rjmp	.-168    	; 0x20c4 <mmc_disk_ioctl+0x414>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    216c:	03 e0       	ldi	r16, 0x03	; 3
    216e:	10 e0       	ldi	r17, 0x00	; 0
    2170:	c4 ce       	rjmp	.-632    	; 0x1efa <mmc_disk_ioctl+0x24a>

00002172 <mmc_disk_timerproc>:
{
	BYTE b;
	UINT n;


	b = Timer1;				/* 100Hz decrement timer */
    2172:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <Timer1>
	if (b) Timer1 = --b;
    2176:	88 23       	and	r24, r24
    2178:	19 f0       	breq	.+6      	; 0x2180 <mmc_disk_timerproc+0xe>
    217a:	81 50       	subi	r24, 0x01	; 1
    217c:	80 93 e2 1c 	sts	0x1CE2, r24	; 0x801ce2 <Timer1>
	n = Timer2;
    2180:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <Timer2>
    2184:	90 91 e1 1c 	lds	r25, 0x1CE1	; 0x801ce1 <Timer2+0x1>
	if (n) Timer2 = --n;
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	29 f0       	breq	.+10     	; 0x2196 <mmc_disk_timerproc+0x24>
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	90 93 e1 1c 	sts	0x1CE1, r25	; 0x801ce1 <Timer2+0x1>
    2192:	80 93 e0 1c 	sts	0x1CE0, r24	; 0x801ce0 <Timer2>

	b = Stat;
    2196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Stat>
	if (MMC_WP) {				/* Write protected */
    219a:	1a 9b       	sbis	0x03, 2	; 3
    219c:	07 c0       	rjmp	.+14     	; 0x21ac <mmc_disk_timerproc+0x3a>
		b |= STA_PROTECT;
    219e:	84 60       	ori	r24, 0x04	; 4
	} else {					/* Write enabled */
		b &= ~STA_PROTECT;
	}
	if (MMC_CD) {				/* Card inserted */
    21a0:	1b 99       	sbic	0x03, 3	; 3
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <mmc_disk_timerproc+0x3e>
		b &= ~STA_NODISK;
    21a4:	8d 7f       	andi	r24, 0xFD	; 253
	} else {					/* Socket empty */
		b |= (STA_NODISK | STA_NOINIT);
	}
	Stat = b;				/* Update MMC status */
    21a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Stat>
}
    21aa:	08 95       	ret
		b &= ~STA_PROTECT;
    21ac:	8b 7f       	andi	r24, 0xFB	; 251
    21ae:	f8 cf       	rjmp	.-16     	; 0x21a0 <mmc_disk_timerproc+0x2e>
		b |= (STA_NODISK | STA_NOINIT);
    21b0:	83 60       	ori	r24, 0x03	; 3
    21b2:	f9 cf       	rjmp	.-14     	; 0x21a6 <mmc_disk_timerproc+0x34>

000021b4 <iic_delay>:
static
void iic_delay (void)
{
	int n;

	for (n = 4; n; n--) PINB;
    21b4:	83 b1       	in	r24, 0x03	; 3
    21b6:	83 b1       	in	r24, 0x03	; 3
    21b8:	83 b1       	in	r24, 0x03	; 3
    21ba:	83 b1       	in	r24, 0x03	; 3
}
    21bc:	08 95       	ret

000021be <iic_start>:

/* Generate start condition on the IIC bus */
static
void iic_start (void)
{
	SDA_HIGH();
    21be:	20 98       	cbi	0x04, 0	; 4
	iic_delay();
    21c0:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SCL_HIGH();
    21c4:	21 98       	cbi	0x04, 1	; 4
	iic_delay();
    21c6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SDA_LOW();
    21ca:	20 9a       	sbi	0x04, 0	; 4
	iic_delay();
    21cc:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SCL_LOW();
    21d0:	21 9a       	sbi	0x04, 1	; 4
	iic_delay();
    21d2:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
}
    21d6:	08 95       	ret

000021d8 <iic_stop>:

/* Generate stop condition on the IIC bus */
static
void iic_stop (void)
{
	SDA_LOW();
    21d8:	20 9a       	sbi	0x04, 0	; 4
	iic_delay();
    21da:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SCL_HIGH();
    21de:	21 98       	cbi	0x04, 1	; 4
	iic_delay();
    21e0:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SDA_HIGH();
    21e4:	20 98       	cbi	0x04, 0	; 4
	iic_delay();
    21e6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
}
    21ea:	08 95       	ret

000021ec <iic_send>:


/* Send a byte to the IIC bus */
static
int iic_send (uint8_t dat)
{
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	08 2f       	mov	r16, r24
    21f6:	c8 e0       	ldi	r28, 0x08	; 8
    21f8:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t b = 0x80;
    21fa:	10 e8       	ldi	r17, 0x80	; 128
	int ack;


	do {
		if (dat & b)	 {	/* SDA = Z/L */
    21fc:	81 2f       	mov	r24, r17
    21fe:	80 23       	and	r24, r16
    2200:	f9 f0       	breq	.+62     	; 0x2240 <iic_send+0x54>
			SDA_HIGH();
    2202:	20 98       	cbi	0x04, 0	; 4
		} else {
			SDA_LOW();
		}
		iic_delay();
    2204:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
		SCL_HIGH();
    2208:	21 98       	cbi	0x04, 1	; 4
		iic_delay();
    220a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
		SCL_LOW();
    220e:	21 9a       	sbi	0x04, 1	; 4
		iic_delay();
    2210:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	} while (b >>= 1);
    2214:	16 95       	lsr	r17
    2216:	21 97       	sbiw	r28, 0x01	; 1
    2218:	89 f7       	brne	.-30     	; 0x21fc <iic_send+0x10>
	SDA_HIGH();
    221a:	20 98       	cbi	0x04, 0	; 4
	iic_delay();
    221c:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SCL_HIGH();
    2220:	21 98       	cbi	0x04, 1	; 4
	ack = SDA_VAL() ? 0 : 1;	/* Sample ACK */
    2222:	c3 b1       	in	r28, 0x03	; 3
	iic_delay();
    2224:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SCL_LOW();
    2228:	21 9a       	sbi	0x04, 1	; 4
	iic_delay();
    222a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	ack = SDA_VAL() ? 0 : 1;	/* Sample ACK */
    222e:	8c 2f       	mov	r24, r28
    2230:	80 95       	com	r24
	return ack;
}
    2232:	81 70       	andi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret
			SDA_LOW();
    2240:	20 9a       	sbi	0x04, 0	; 4
    2242:	e0 cf       	rjmp	.-64     	; 0x2204 <iic_send+0x18>

00002244 <iic_read.part.0>:

/*-------------------------------------------------*/
/* I2C block read/write controls                   */


int iic_read (
    2244:	af 92       	push	r10
    2246:	bf 92       	push	r11
    2248:	df 92       	push	r13
    224a:	ef 92       	push	r14
    224c:	ff 92       	push	r15
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	18 2f       	mov	r17, r24
    2258:	f6 2e       	mov	r15, r22
    225a:	ea 01       	movw	r28, r20
    225c:	02 2f       	mov	r16, r18
    225e:	d3 2e       	mov	r13, r19
    2260:	9a e0       	ldi	r25, 0x0A	; 10
    2262:	a9 2e       	mov	r10, r25
    2264:	b1 2c       	mov	r11, r1

	if (!cnt) return 0;

	n = 10;
	do {							/* Select device */
		iic_start();
    2266:	0e 94 df 10 	call	0x21be	; 0x21be <iic_start>
	} while (!iic_send(dev) && --n);
    226a:	81 2f       	mov	r24, r17
    226c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <iic_send>
    2270:	89 2b       	or	r24, r25
    2272:	c1 f4       	brne	.+48     	; 0x22a4 <iic_read.part.0+0x60>
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	a8 1a       	sub	r10, r24
    2278:	b1 08       	sbc	r11, r1
    227a:	a9 f7       	brne	.-22     	; 0x2266 <iic_read.part.0+0x22>
				} while (cnt);
			}
		}
	}

	iic_stop();						/* Deselect device */
    227c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <iic_stop>

	return cnt ? 0 : 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	cd 2b       	or	r28, r29
    2286:	11 f0       	breq	.+4      	; 0x228c <iic_read.part.0+0x48>
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	80 e0       	ldi	r24, 0x00	; 0
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	bf 90       	pop	r11
    229c:	af 90       	pop	r10
    229e:	08 95       	ret
		SDA_HIGH();
    22a0:	20 98       	cbi	0x04, 0	; 4
    22a2:	25 c0       	rjmp	.+74     	; 0x22ee <iic_read.part.0+0xaa>
		if (iic_send((uint8_t)adr)) {		/* Set start address */
    22a4:	8f 2d       	mov	r24, r15
    22a6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <iic_send>
    22aa:	89 2b       	or	r24, r25
    22ac:	39 f3       	breq	.-50     	; 0x227c <iic_read.part.0+0x38>
			iic_start();				/* Reselect device in read mode */
    22ae:	0e 94 df 10 	call	0x21be	; 0x21be <iic_start>
			if (iic_send(dev | 1)) {
    22b2:	81 2f       	mov	r24, r17
    22b4:	81 60       	ori	r24, 0x01	; 1
    22b6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <iic_send>
    22ba:	89 2b       	or	r24, r25
    22bc:	f9 f2       	breq	.-66     	; 0x227c <iic_read.part.0+0x38>
    22be:	e0 2e       	mov	r14, r16
    22c0:	fd 2c       	mov	r15, r13
					cnt--;
    22c2:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t d = 1;
    22c4:	01 e0       	ldi	r16, 0x01	; 1
    22c6:	10 e0       	ldi	r17, 0x00	; 0
		d <<= 1;
    22c8:	00 0f       	add	r16, r16
    22ca:	11 1f       	adc	r17, r17
		SCL_HIGH();
    22cc:	21 98       	cbi	0x04, 1	; 4
		if (SDA_VAL()) d++;
    22ce:	18 9b       	sbis	0x03, 0	; 3
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <iic_read.part.0+0x92>
    22d2:	0f 5f       	subi	r16, 0xFF	; 255
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
		iic_delay();
    22d6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
		SCL_LOW();
    22da:	21 9a       	sbi	0x04, 1	; 4
		iic_delay();
    22dc:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	} while (d < 0x100);
    22e0:	0f 3f       	cpi	r16, 0xFF	; 255
    22e2:	11 05       	cpc	r17, r1
    22e4:	89 f3       	breq	.-30     	; 0x22c8 <iic_read.part.0+0x84>
    22e6:	80 f3       	brcs	.-32     	; 0x22c8 <iic_read.part.0+0x84>
	if (ack) {		/* SDA = ACK */
    22e8:	20 97       	sbiw	r28, 0x00	; 0
    22ea:	d1 f2       	breq	.-76     	; 0x22a0 <iic_read.part.0+0x5c>
		SDA_LOW();
    22ec:	20 9a       	sbi	0x04, 0	; 4
	iic_delay();
    22ee:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SCL_HIGH();
    22f2:	21 98       	cbi	0x04, 1	; 4
	iic_delay();
    22f4:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	SCL_LOW();
    22f8:	21 9a       	sbi	0x04, 1	; 4
	SDA_HIGH();
    22fa:	20 98       	cbi	0x04, 0	; 4
	iic_delay();
    22fc:	0e 94 da 10 	call	0x21b4	; 0x21b4 <iic_delay>
	return (uint8_t)d;
    2300:	f7 01       	movw	r30, r14
    2302:	01 93       	st	Z+, r16
    2304:	7f 01       	movw	r14, r30
				} while (cnt);
    2306:	20 97       	sbiw	r28, 0x00	; 0
    2308:	e1 f6       	brne	.-72     	; 0x22c2 <iic_read.part.0+0x7e>
    230a:	b8 cf       	rjmp	.-144    	; 0x227c <iic_read.part.0+0x38>

0000230c <iic_write.part.0>:



int iic_write (
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	a0 e0       	ldi	r26, 0x00	; 0
    2310:	ec e8       	ldi	r30, 0x8C	; 140
    2312:	f1 e1       	ldi	r31, 0x11	; 17
    2314:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__prologue_saves__+0x14>
    2318:	e8 2e       	mov	r14, r24
    231a:	f6 2e       	mov	r15, r22
    231c:	ea 01       	movw	r28, r20
    231e:	89 01       	movw	r16, r18
    2320:	8a e0       	ldi	r24, 0x0A	; 10
    2322:	c8 2e       	mov	r12, r24
    2324:	d1 2c       	mov	r13, r1

	if (!cnt) return 0;

	n = 10;
	do {							/* Select device */
		iic_start();
    2326:	0e 94 df 10 	call	0x21be	; 0x21be <iic_start>
	} while (!iic_send(dev) && --n);
    232a:	8e 2d       	mov	r24, r14
    232c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <iic_send>
    2330:	89 2b       	or	r24, r25
    2332:	89 f4       	brne	.+34     	; 0x2356 <iic_write.part.0+0x4a>
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	c8 1a       	sub	r12, r24
    2338:	d1 08       	sbc	r13, r1
    233a:	a9 f7       	brne	.-22     	; 0x2326 <iic_write.part.0+0x1a>
				if (!iic_send(*wbuff++)) break;
			} while (--cnt);
		}
	}

	iic_stop();						/* Deselect device */
    233c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <iic_stop>

	return cnt ? 0 : 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	cd 2b       	or	r28, r29
    2346:	11 f0       	breq	.+4      	; 0x234c <iic_write.part.0+0x40>
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	80 e0       	ldi	r24, 0x00	; 0
}
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	e8 e0       	ldi	r30, 0x08	; 8
    2352:	0c 94 5a 5a 	jmp	0xb4b4	; 0xb4b4 <__epilogue_restores__+0x14>
		if (iic_send((uint8_t)adr)) {		/* Set start address */
    2356:	8f 2d       	mov	r24, r15
    2358:	0e 94 f6 10 	call	0x21ec	; 0x21ec <iic_send>
    235c:	89 2b       	or	r24, r25
    235e:	71 f3       	breq	.-36     	; 0x233c <iic_write.part.0+0x30>
				if (!iic_send(*wbuff++)) break;
    2360:	f8 01       	movw	r30, r16
    2362:	80 81       	ld	r24, Z
    2364:	0f 5f       	subi	r16, 0xFF	; 255
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	0e 94 f6 10 	call	0x21ec	; 0x21ec <iic_send>
    236c:	89 2b       	or	r24, r25
    236e:	31 f3       	breq	.-52     	; 0x233c <iic_write.part.0+0x30>
			} while (--cnt);
    2370:	21 97       	sbiw	r28, 0x01	; 1
    2372:	b1 f7       	brne	.-20     	; 0x2360 <iic_write.part.0+0x54>
    2374:	e3 cf       	rjmp	.-58     	; 0x233c <iic_write.part.0+0x30>

00002376 <iic_read>:
	if (!cnt) return 0;
    2376:	41 15       	cp	r20, r1
    2378:	51 05       	cpc	r21, r1
    237a:	19 f0       	breq	.+6      	; 0x2382 <iic_read+0xc>
    237c:	0e 94 22 11 	call	0x2244	; 0x2244 <iic_read.part.0>
    2380:	08 95       	ret
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
}
    2386:	08 95       	ret

00002388 <iic_write>:
	if (!cnt) return 0;
    2388:	41 15       	cp	r20, r1
    238a:	51 05       	cpc	r21, r1
    238c:	19 f0       	breq	.+6      	; 0x2394 <iic_write+0xc>
    238e:	0e 94 86 11 	call	0x230c	; 0x230c <iic_write.part.0>
    2392:	08 95       	ret
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
}
    2398:	08 95       	ret

0000239a <rtc_gettime>:
/*-------------------------------------------------*/
/* RTC functions                                   */


int rtc_gettime (RTC *rtc)
{
    239a:	a8 e0       	ldi	r26, 0x08	; 8
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e3 ed       	ldi	r30, 0xD3	; 211
    23a0:	f1 e1       	ldi	r31, 0x11	; 17
    23a2:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
    23a6:	8c 01       	movw	r16, r24
	if (!cnt) return 0;
    23a8:	9e 01       	movw	r18, r28
    23aa:	2f 5f       	subi	r18, 0xFF	; 255
    23ac:	3f 4f       	sbci	r19, 0xFF	; 255
    23ae:	47 e0       	ldi	r20, 0x07	; 7
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	70 e0       	ldi	r23, 0x00	; 0
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	80 ed       	ldi	r24, 0xD0	; 208
    23b8:	0e 94 22 11 	call	0x2244	; 0x2244 <iic_read.part.0>
	uint8_t buf[8];


	if (!iic_read(0xD0, 0, 7, buf)) return 0;
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	09 f4       	brne	.+2      	; 0x23c2 <rtc_gettime+0x28>
    23c0:	42 c0       	rjmp	.+132    	; 0x2446 <rtc_gettime+0xac>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	98 2f       	mov	r25, r24
    23c6:	92 95       	swap	r25
    23c8:	97 70       	andi	r25, 0x07	; 7
    23ca:	2a e0       	ldi	r18, 0x0A	; 10
    23cc:	8f 70       	andi	r24, 0x0F	; 15
    23ce:	92 9f       	mul	r25, r18
    23d0:	80 0d       	add	r24, r0
    23d2:	11 24       	eor	r1, r1
    23d4:	f8 01       	movw	r30, r16
    23d6:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	98 2f       	mov	r25, r24
    23dc:	92 95       	swap	r25
    23de:	9f 70       	andi	r25, 0x0F	; 15
    23e0:	8f 70       	andi	r24, 0x0F	; 15
    23e2:	92 9f       	mul	r25, r18
    23e4:	80 0d       	add	r24, r0
    23e6:	11 24       	eor	r1, r1
    23e8:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	38 2f       	mov	r19, r24
    23ee:	32 95       	swap	r19
    23f0:	33 70       	andi	r19, 0x03	; 3
    23f2:	98 2f       	mov	r25, r24
    23f4:	9f 70       	andi	r25, 0x0F	; 15
    23f6:	32 9f       	mul	r19, r18
    23f8:	90 0d       	add	r25, r0
    23fa:	11 24       	eor	r1, r1
    23fc:	95 83       	std	Z+5, r25	; 0x05
	rtc->wday = (buf[2] & 0x07);
    23fe:	87 70       	andi	r24, 0x07	; 7
    2400:	84 83       	std	Z+4, r24	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	98 2f       	mov	r25, r24
    2406:	92 95       	swap	r25
    2408:	93 70       	andi	r25, 0x03	; 3
    240a:	8f 70       	andi	r24, 0x0F	; 15
    240c:	92 9f       	mul	r25, r18
    240e:	80 0d       	add	r24, r0
    2410:	11 24       	eor	r1, r1
    2412:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = (buf[5] & 0x0F) + ((buf[5] >> 4) & 1) * 10;
    2414:	8e 81       	ldd	r24, Y+6	; 0x06
    2416:	84 fb       	bst	r24, 4
    2418:	99 27       	eor	r25, r25
    241a:	90 f9       	bld	r25, 0
    241c:	8f 70       	andi	r24, 0x0F	; 15
    241e:	92 9f       	mul	r25, r18
    2420:	80 0d       	add	r24, r0
    2422:	11 24       	eor	r1, r1
    2424:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    2426:	3f 81       	ldd	r19, Y+7	; 0x07
    2428:	83 2f       	mov	r24, r19
    242a:	8f 70       	andi	r24, 0x0F	; 15
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	80 53       	subi	r24, 0x30	; 48
    2430:	98 4f       	sbci	r25, 0xF8	; 248
    2432:	32 95       	swap	r19
    2434:	3f 70       	andi	r19, 0x0F	; 15
    2436:	32 9f       	mul	r19, r18
    2438:	80 0d       	add	r24, r0
    243a:	91 1d       	adc	r25, r1
    243c:	11 24       	eor	r1, r1
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24

	return 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
}
    2446:	28 96       	adiw	r28, 0x08	; 8
    2448:	e4 e0       	ldi	r30, 0x04	; 4
    244a:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>

0000244e <rtc_settime>:




int rtc_settime (const RTC *rtc)
{
    244e:	a8 e0       	ldi	r26, 0x08	; 8
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	ed e2       	ldi	r30, 0x2D	; 45
    2454:	f2 e1       	ldi	r31, 0x12	; 18
    2456:	0c 94 44 5a 	jmp	0xb488	; 0xb488 <__prologue_saves__+0x20>
    245a:	fc 01       	movw	r30, r24

	uint8_t buf[8];


	buf[0] = rtc->sec / 10 * 16 + rtc->sec % 10;
    245c:	87 81       	ldd	r24, Z+7	; 0x07
    245e:	2a e0       	ldi	r18, 0x0A	; 10
    2460:	62 2f       	mov	r22, r18
    2462:	0e 94 60 59 	call	0xb2c0	; 0xb2c0 <__udivmodqi4>
    2466:	82 95       	swap	r24
    2468:	80 7f       	andi	r24, 0xF0	; 240
    246a:	89 0f       	add	r24, r25
    246c:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = rtc->min / 10 * 16 + rtc->min % 10;
    246e:	86 81       	ldd	r24, Z+6	; 0x06
    2470:	0e 94 60 59 	call	0xb2c0	; 0xb2c0 <__udivmodqi4>
    2474:	82 95       	swap	r24
    2476:	80 7f       	andi	r24, 0xF0	; 240
    2478:	89 0f       	add	r24, r25
    247a:	8a 83       	std	Y+2, r24	; 0x02
	buf[2] = rtc->hour / 10 * 16 + rtc->hour % 10;
    247c:	85 81       	ldd	r24, Z+5	; 0x05
    247e:	0e 94 60 59 	call	0xb2c0	; 0xb2c0 <__udivmodqi4>
    2482:	82 95       	swap	r24
    2484:	80 7f       	andi	r24, 0xF0	; 240
    2486:	89 0f       	add	r24, r25
    2488:	8b 83       	std	Y+3, r24	; 0x03
	buf[3] = rtc->wday & 7;
    248a:	84 81       	ldd	r24, Z+4	; 0x04
    248c:	87 70       	andi	r24, 0x07	; 7
    248e:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
    2490:	83 81       	ldd	r24, Z+3	; 0x03
    2492:	0e 94 60 59 	call	0xb2c0	; 0xb2c0 <__udivmodqi4>
    2496:	82 95       	swap	r24
    2498:	80 7f       	andi	r24, 0xF0	; 240
    249a:	89 0f       	add	r24, r25
    249c:	8d 83       	std	Y+5, r24	; 0x05
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	0e 94 60 59 	call	0xb2c0	; 0xb2c0 <__udivmodqi4>
    24a4:	82 95       	swap	r24
    24a6:	80 7f       	andi	r24, 0xF0	; 240
    24a8:	89 0f       	add	r24, r25
    24aa:	8e 83       	std	Y+6, r24	; 0x06
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	80 5d       	subi	r24, 0xD0	; 208
    24b2:	97 40       	sbci	r25, 0x07	; 7
    24b4:	6a e0       	ldi	r22, 0x0A	; 10
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	0e 94 6c 59 	call	0xb2d8	; 0xb2d8 <__udivmodhi4>
    24bc:	62 95       	swap	r22
    24be:	60 7f       	andi	r22, 0xF0	; 240
    24c0:	68 0f       	add	r22, r24
    24c2:	6f 83       	std	Y+7, r22	; 0x07
	if (!cnt) return 0;
    24c4:	9e 01       	movw	r18, r28
    24c6:	2f 5f       	subi	r18, 0xFF	; 255
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	47 e0       	ldi	r20, 0x07	; 7
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	80 ed       	ldi	r24, 0xD0	; 208
    24d4:	0e 94 86 11 	call	0x230c	; 0x230c <iic_write.part.0>
	return iic_write(0xD0, 0, 7, buf);
}
    24d8:	28 96       	adiw	r28, 0x08	; 8
    24da:	e2 e0       	ldi	r30, 0x02	; 2
    24dc:	0c 94 60 5a 	jmp	0xb4c0	; 0xb4c0 <__epilogue_restores__+0x20>

000024e0 <rtc_init>:




int rtc_init (void)
{
    24e0:	a8 e0       	ldi	r26, 0x08	; 8
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	e6 e7       	ldi	r30, 0x76	; 118
    24e6:	f2 e1       	ldi	r31, 0x12	; 18
    24e8:	0c 94 40 5a 	jmp	0xb480	; 0xb480 <__prologue_saves__+0x18>
	uint8_t buf[8];	/* RTC R/W buffer */
	uint16_t adr;


	IIC_INIT();		/* Initialize IIC function */
    24ec:	84 b1       	in	r24, 0x04	; 4
    24ee:	8c 7f       	andi	r24, 0xFC	; 252
    24f0:	84 b9       	out	0x04, r24	; 4
    24f2:	85 b1       	in	r24, 0x05	; 5
    24f4:	8c 7f       	andi	r24, 0xFC	; 252
    24f6:	85 b9       	out	0x05, r24	; 5
	if (!cnt) return 0;
    24f8:	8e 01       	movw	r16, r28
    24fa:	0f 5f       	subi	r16, 0xFF	; 255
    24fc:	1f 4f       	sbci	r17, 0xFF	; 255
    24fe:	98 01       	movw	r18, r16
    2500:	48 e0       	ldi	r20, 0x08	; 8
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	80 ed       	ldi	r24, 0xD0	; 208
    250a:	0e 94 22 11 	call	0x2244	; 0x2244 <iic_read.part.0>
    250e:	78 01       	movw	r14, r16

	/* Read RTC registers */
	if (!iic_read(0xD0, 0, 8, buf)) return 0;	/* IIC error */
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	29 f1       	breq	.+74     	; 0x255e <rtc_init+0x7e>

	if (buf[7] & 0x20) {	/* When data has been volatiled, set default time */
    2514:	88 85       	ldd	r24, Y+8	; 0x08
    2516:	85 ff       	sbrs	r24, 5
    2518:	20 c0       	rjmp	.+64     	; 0x255a <rtc_init+0x7a>
		/* Clear nv-ram. Reg[8..63] */
		memset(buf, 0, 8);
    251a:	88 e0       	ldi	r24, 0x08	; 8
    251c:	f8 01       	movw	r30, r16
    251e:	11 92       	st	Z+, r1
    2520:	8a 95       	dec	r24
    2522:	e9 f7       	brne	.-6      	; 0x251e <rtc_init+0x3e>
		for (adr = 8; adr < 64; adr += 8) {
    2524:	08 e0       	ldi	r16, 0x08	; 8
    2526:	10 e0       	ldi	r17, 0x00	; 0
			iic_write(0x0D, adr, 8, buf);
    2528:	97 01       	movw	r18, r14
    252a:	48 e0       	ldi	r20, 0x08	; 8
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	b8 01       	movw	r22, r16
    2530:	8d e0       	ldi	r24, 0x0D	; 13
    2532:	0e 94 c4 11 	call	0x2388	; 0x2388 <iic_write>
		for (adr = 8; adr < 64; adr += 8) {
    2536:	08 5f       	subi	r16, 0xF8	; 248
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	00 34       	cpi	r16, 0x40	; 64
    253c:	11 05       	cpc	r17, r1
    253e:	a1 f7       	brne	.-24     	; 0x2528 <rtc_init+0x48>
		}
		/* Reset time to Jan 1, '08. Reg[0..7] */
		buf[4] = 1; buf[5] = 1; buf[6] = 8;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	8e 83       	std	Y+6, r24	; 0x06
    2546:	88 e0       	ldi	r24, 0x08	; 8
    2548:	8f 83       	std	Y+7, r24	; 0x07
		iic_write(0x0D, 0, 8, buf);
    254a:	97 01       	movw	r18, r14
    254c:	48 e0       	ldi	r20, 0x08	; 8
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	70 e0       	ldi	r23, 0x00	; 0
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	8d e0       	ldi	r24, 0x0D	; 13
    2556:	0e 94 c4 11 	call	0x2388	; 0x2388 <iic_write>
	}
	return 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
}
    255e:	28 96       	adiw	r28, 0x08	; 8
    2560:	e6 e0       	ldi	r30, 0x06	; 6
    2562:	0c 94 5c 5a 	jmp	0xb4b8	; 0xb4b8 <__epilogue_restores__+0x18>

00002566 <ld_dword>:
	rv = rv << 8 | ptr[0];
	return rv;
}

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
    2566:	a4 e0       	ldi	r26, 0x04	; 4
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e9 eb       	ldi	r30, 0xB9	; 185
    256c:	f2 e1       	ldi	r31, 0x12	; 18
    256e:	0c 94 44 5a 	jmp	0xb488	; 0xb488 <__prologue_saves__+0x20>

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
    2572:	fc 01       	movw	r30, r24
    2574:	20 81       	ld	r18, Z
    2576:	31 81       	ldd	r19, Z+1	; 0x01
    2578:	42 81       	ldd	r20, Z+2	; 0x02
    257a:	53 81       	ldd	r21, Z+3	; 0x03
}
    257c:	ca 01       	movw	r24, r20
    257e:	b9 01       	movw	r22, r18
    2580:	24 96       	adiw	r28, 0x04	; 4
    2582:	e2 e0       	ldi	r30, 0x02	; 2
    2584:	0c 94 60 5a 	jmp	0xb4c0	; 0xb4c0 <__epilogue_restores__+0x20>

00002588 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
    2588:	fc 01       	movw	r30, r24
	rv = rv << 8 | ptr[4];
	rv = rv << 8 | ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
    258a:	20 81       	ld	r18, Z
    258c:	31 81       	ldd	r19, Z+1	; 0x01
    258e:	42 81       	ldd	r20, Z+2	; 0x02
    2590:	53 81       	ldd	r21, Z+3	; 0x03
    2592:	64 81       	ldd	r22, Z+4	; 0x04
    2594:	75 81       	ldd	r23, Z+5	; 0x05
}
    2596:	86 81       	ldd	r24, Z+6	; 0x06
    2598:	97 81       	ldd	r25, Z+7	; 0x07
    259a:	08 95       	ret

0000259c <st_qword>:
	*ptr++ = (BYTE)val;
}

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	fc 01       	movw	r30, r24
	*ptr++ = (BYTE)val; val >>= 8;
    25a2:	00 83       	st	Z, r16
    25a4:	11 83       	std	Z+1, r17	; 0x01
    25a6:	22 83       	std	Z+2, r18	; 0x02
    25a8:	33 83       	std	Z+3, r19	; 0x03
    25aa:	44 83       	std	Z+4, r20	; 0x04
    25ac:	55 83       	std	Z+5, r21	; 0x05
    25ae:	66 83       	std	Z+6, r22	; 0x06
    25b0:	77 83       	std	Z+7, r23	; 0x07
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val;
}
    25b2:	1f 91       	pop	r17
    25b4:	0f 91       	pop	r16
    25b6:	08 95       	ret

000025b8 <mem_set>:
}


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
    25b8:	9c 01       	movw	r18, r24
	BYTE *d = (BYTE*)dst;
    25ba:	48 0f       	add	r20, r24
    25bc:	59 1f       	adc	r21, r25

	do {
		*d++ = (BYTE)val;
    25be:	f9 01       	movw	r30, r18
    25c0:	2f 5f       	subi	r18, 0xFF	; 255
    25c2:	3f 4f       	sbci	r19, 0xFF	; 255
    25c4:	60 83       	st	Z, r22
	} while (--cnt);
    25c6:	24 17       	cp	r18, r20
    25c8:	35 07       	cpc	r19, r21
    25ca:	c9 f7       	brne	.-14     	; 0x25be <mem_set+0x6>
}
    25cc:	08 95       	ret

000025ce <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	9c 01       	movw	r18, r24
    25d4:	fb 01       	movw	r30, r22
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;
    25d6:	48 0f       	add	r20, r24
    25d8:	59 1f       	adc	r21, r25

	do {
		r = *d++ - *s++;
    25da:	e9 01       	movw	r28, r18
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	88 81       	ld	r24, Y
    25e2:	90 81       	ld	r25, Z
    25e4:	31 96       	adiw	r30, 0x01	; 1
    25e6:	89 1b       	sub	r24, r25
    25e8:	99 0b       	sbc	r25, r25
	} while (--cnt && r == 0);
    25ea:	24 17       	cp	r18, r20
    25ec:	35 07       	cpc	r19, r21
    25ee:	11 f0       	breq	.+4      	; 0x25f4 <mem_cmp+0x26>
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	99 f3       	breq	.-26     	; 0x25da <mem_cmp+0xc>

	return r;
}
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	08 95       	ret

000025fa <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
    25fa:	a4 e0       	ldi	r26, 0x04	; 4
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e3 e0       	ldi	r30, 0x03	; 3
    2600:	f3 e1       	ldi	r31, 0x13	; 19
    2602:	0c 94 44 5a 	jmp	0xb488	; 0xb488 <__prologue_saves__+0x20>
    2606:	fc 01       	movw	r30, r24
	clst -= 2;		/* Cluster number is origin from 2 */
    2608:	9a 01       	movw	r18, r20
    260a:	ab 01       	movw	r20, r22
    260c:	22 50       	subi	r18, 0x02	; 2
    260e:	31 09       	sbc	r19, r1
    2610:	41 09       	sbc	r20, r1
    2612:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    2614:	87 a1       	ldd	r24, Z+39	; 0x27
    2616:	90 a5       	ldd	r25, Z+40	; 0x28
    2618:	a1 a5       	ldd	r26, Z+41	; 0x29
    261a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    261c:	02 97       	sbiw	r24, 0x02	; 2
    261e:	a1 09       	sbc	r26, r1
    2620:	b1 09       	sbc	r27, r1
    2622:	28 17       	cp	r18, r24
    2624:	39 07       	cpc	r19, r25
    2626:	4a 07       	cpc	r20, r26
    2628:	5b 07       	cpc	r21, r27
    262a:	00 f5       	brcc	.+64     	; 0x266c <clst2sect+0x72>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    262c:	a1 85       	ldd	r26, Z+9	; 0x09
    262e:	b2 85       	ldd	r27, Z+10	; 0x0a
    2630:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    2634:	69 83       	std	Y+1, r22	; 0x01
    2636:	7a 83       	std	Y+2, r23	; 0x02
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	9c 83       	std	Y+4, r25	; 0x04
    263c:	83 ad       	ldd	r24, Z+59	; 0x3b
    263e:	94 ad       	ldd	r25, Z+60	; 0x3c
    2640:	a5 ad       	ldd	r26, Z+61	; 0x3d
    2642:	b6 ad       	ldd	r27, Z+62	; 0x3e
    2644:	29 81       	ldd	r18, Y+1	; 0x01
    2646:	3a 81       	ldd	r19, Y+2	; 0x02
    2648:	4b 81       	ldd	r20, Y+3	; 0x03
    264a:	5c 81       	ldd	r21, Y+4	; 0x04
    264c:	28 0f       	add	r18, r24
    264e:	39 1f       	adc	r19, r25
    2650:	4a 1f       	adc	r20, r26
    2652:	5b 1f       	adc	r21, r27
    2654:	29 83       	std	Y+1, r18	; 0x01
    2656:	3a 83       	std	Y+2, r19	; 0x02
    2658:	4b 83       	std	Y+3, r20	; 0x03
    265a:	5c 83       	std	Y+4, r21	; 0x04
}
    265c:	69 81       	ldd	r22, Y+1	; 0x01
    265e:	7a 81       	ldd	r23, Y+2	; 0x02
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	24 96       	adiw	r28, 0x04	; 4
    2666:	e2 e0       	ldi	r30, 0x02	; 2
    2668:	0c 94 60 5a 	jmp	0xb4c0	; 0xb4c0 <__epilogue_restores__+0x20>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    266c:	19 82       	std	Y+1, r1	; 0x01
    266e:	1a 82       	std	Y+2, r1	; 0x02
    2670:	1b 82       	std	Y+3, r1	; 0x03
    2672:	1c 82       	std	Y+4, r1	; 0x04
    2674:	f3 cf       	rjmp	.-26     	; 0x265c <clst2sect+0x62>

00002676 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	fb 01       	movw	r30, r22
    267c:	02 2f       	mov	r16, r18
    267e:	13 2f       	mov	r17, r19
    2680:	9a 01       	movw	r18, r20
	*ptr++ = (BYTE)val; val >>= 8;
    2682:	13 8f       	std	Z+27, r17	; 0x1b
    2684:	02 8f       	std	Z+26, r16	; 0x1a
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    2686:	dc 01       	movw	r26, r24
    2688:	8c 91       	ld	r24, X
    268a:	83 30       	cpi	r24, 0x03	; 3
    268c:	29 f4       	brne	.+10     	; 0x2698 <st_clust+0x22>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    268e:	89 01       	movw	r16, r18
    2690:	22 27       	eor	r18, r18
    2692:	33 27       	eor	r19, r19
	*ptr++ = (BYTE)val; val >>= 8;
    2694:	04 8b       	std	Z+20, r16	; 0x14
	*ptr++ = (BYTE)val;
    2696:	15 8b       	std	Z+21, r17	; 0x15
	}
}
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	08 95       	ret

0000269e <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
    269e:	9c 01       	movw	r18, r24
	BYTE sum = 0;
	UINT n = 11;
    26a0:	ac 01       	movw	r20, r24
    26a2:	45 5f       	subi	r20, 0xF5	; 245
    26a4:	5f 4f       	sbci	r21, 0xFF	; 255
	BYTE sum = 0;
    26a6:	80 e0       	ldi	r24, 0x00	; 0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
    26a8:	80 fb       	bst	r24, 0
    26aa:	87 95       	ror	r24
    26ac:	87 f9       	bld	r24, 7
    26ae:	f9 01       	movw	r30, r18
    26b0:	2f 5f       	subi	r18, 0xFF	; 255
    26b2:	3f 4f       	sbci	r19, 0xFF	; 255
    26b4:	90 81       	ld	r25, Z
    26b6:	89 0f       	add	r24, r25
	} while (--n);
    26b8:	24 17       	cp	r18, r20
    26ba:	35 07       	cpc	r19, r21
    26bc:	a9 f7       	brne	.-22     	; 0x26a8 <sum_sfn+0xa>
	return sum;
}
    26be:	08 95       	ret

000026c0 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
    26c0:	fc 01       	movw	r30, r24
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
    26c2:	21 81       	ldd	r18, Z+1	; 0x01
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	2f 5f       	subi	r18, 0xFF	; 255
    26c8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ca:	85 e0       	ldi	r24, 0x05	; 5
    26cc:	22 0f       	add	r18, r18
    26ce:	33 1f       	adc	r19, r19
    26d0:	8a 95       	dec	r24
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <xdir_sum+0xc>
	for (i = sum = 0; i < szblk; i++) {
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	40 e0       	ldi	r20, 0x00	; 0
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
    26dc:	42 30       	cpi	r20, 0x02	; 2
    26de:	51 05       	cpc	r21, r1
    26e0:	81 f0       	breq	.+32     	; 0x2702 <xdir_sum+0x42>
			i++;
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
    26e2:	80 fb       	bst	r24, 0
    26e4:	97 95       	ror	r25
    26e6:	87 95       	ror	r24
    26e8:	97 f9       	bld	r25, 7
    26ea:	df 01       	movw	r26, r30
    26ec:	a4 0f       	add	r26, r20
    26ee:	b5 1f       	adc	r27, r21
    26f0:	6c 91       	ld	r22, X
    26f2:	86 0f       	add	r24, r22
    26f4:	91 1d       	adc	r25, r1
	for (i = sum = 0; i < szblk; i++) {
    26f6:	4f 5f       	subi	r20, 0xFF	; 255
    26f8:	5f 4f       	sbci	r21, 0xFF	; 255
    26fa:	42 17       	cp	r20, r18
    26fc:	53 07       	cpc	r21, r19
    26fe:	70 f3       	brcs	.-36     	; 0x26dc <xdir_sum+0x1c>
		}
	}
	return sum;
}
    2700:	08 95       	ret
			i++;
    2702:	43 e0       	ldi	r20, 0x03	; 3
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	f7 cf       	rjmp	.-18     	; 0x26f6 <xdir_sum+0x36>

00002708 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	dc 01       	movw	r26, r24
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
    270e:	ed 91       	ld	r30, X+
    2710:	fc 91       	ld	r31, X
    2712:	11 97       	sbiw	r26, 0x01	; 1
	if (!tp) return vol;	/* Invalid path name? */
    2714:	30 97       	sbiw	r30, 0x00	; 0
    2716:	71 f0       	breq	.+28     	; 0x2734 <get_ldnumber+0x2c>
    2718:	cf 01       	movw	r24, r30
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
    271a:	ec 01       	movw	r28, r24
    271c:	28 81       	ld	r18, Y
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	20 32       	cpi	r18, 0x20	; 32
    2722:	a8 f0       	brcs	.+42     	; 0x274e <get_ldnumber+0x46>
    2724:	2a 33       	cpi	r18, 0x3A	; 58
    2726:	c9 f7       	brne	.-14     	; 0x271a <get_ldnumber+0x12>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    2728:	9f 01       	movw	r18, r30
    272a:	2e 5f       	subi	r18, 0xFE	; 254
    272c:	3f 4f       	sbci	r19, 0xFF	; 255
    272e:	82 17       	cp	r24, r18
    2730:	93 07       	cpc	r25, r19
    2732:	19 f0       	breq	.+6      	; 0x273a <get_ldnumber+0x32>
	if (!tp) return vol;	/* Invalid path name? */
    2734:	8f ef       	ldi	r24, 0xFF	; 255
    2736:	9f ef       	ldi	r25, 0xFF	; 255
    2738:	07 c0       	rjmp	.+14     	; 0x2748 <get_ldnumber+0x40>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    273a:	20 81       	ld	r18, Z
    273c:	20 33       	cpi	r18, 0x30	; 48
    273e:	d1 f7       	brne	.-12     	; 0x2734 <get_ldnumber+0x2c>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
    2740:	8d 93       	st	X+, r24
    2742:	9c 93       	st	X, r25
			i = (int)*tp - '0';	/* Get the LD number */
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	80 e0       	ldi	r24, 0x00	; 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	08 95       	ret
	vol = CurrVol;	/* Default drive is current drive */
    274e:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <CurrVol>
    2752:	90 e0       	ldi	r25, 0x00	; 0
	return vol;		/* Return the default drive */
    2754:	f9 cf       	rjmp	.-14     	; 0x2748 <get_ldnumber+0x40>

00002756 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	ec 01       	movw	r28, r24
    2760:	8b 01       	movw	r16, r22
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    2762:	89 2b       	or	r24, r25
    2764:	61 f4       	brne	.+24     	; 0x277e <validate+0x28>
	FRESULT res = FR_INVALID_OBJECT;
    2766:	89 e0       	ldi	r24, 0x09	; 9
    2768:	90 e0       	ldi	r25, 0x00	; 0
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	f8 01       	movw	r30, r16
    2770:	31 83       	std	Z+1, r19	; 0x01
    2772:	20 83       	st	Z, r18
	return res;
}
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	1f 91       	pop	r17
    277a:	0f 91       	pop	r16
    277c:	08 95       	ret
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    277e:	e8 81       	ld	r30, Y
    2780:	f9 81       	ldd	r31, Y+1	; 0x01
    2782:	30 97       	sbiw	r30, 0x00	; 0
    2784:	81 f3       	breq	.-32     	; 0x2766 <validate+0x10>
    2786:	80 81       	ld	r24, Z
    2788:	88 23       	and	r24, r24
    278a:	69 f3       	breq	.-38     	; 0x2766 <validate+0x10>
    278c:	2a 81       	ldd	r18, Y+2	; 0x02
    278e:	3b 81       	ldd	r19, Y+3	; 0x03
    2790:	85 81       	ldd	r24, Z+5	; 0x05
    2792:	96 81       	ldd	r25, Z+6	; 0x06
    2794:	28 17       	cp	r18, r24
    2796:	39 07       	cpc	r19, r25
    2798:	31 f7       	brne	.-52     	; 0x2766 <validate+0x10>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
    279a:	81 81       	ldd	r24, Z+1	; 0x01
    279c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <disk_status>
    27a0:	80 fd       	sbrc	r24, 0
    27a2:	e1 cf       	rjmp	.-62     	; 0x2766 <validate+0x10>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
    27a4:	28 81       	ld	r18, Y
    27a6:	39 81       	ldd	r19, Y+1	; 0x01
			res = FR_OK;
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	e0 cf       	rjmp	.-64     	; 0x276e <validate+0x18>

000027ae <put_utf>:
{
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	ea 01       	movw	r28, r20
    27b8:	89 01       	movw	r16, r18
	wc = ff_uni2oem(chr, CODEPAGE);
    27ba:	45 eb       	ldi	r20, 0xB5	; 181
    27bc:	51 e0       	ldi	r21, 0x01	; 1
    27be:	0e 94 ca 4b 	call	0x9794	; 0x9794 <ff_uni2oem>
    27c2:	9c 01       	movw	r18, r24
	if (wc >= 0x100) {	/* Is this a DBC? */
    27c4:	8f 3f       	cpi	r24, 0xFF	; 255
    27c6:	91 05       	cpc	r25, r1
    27c8:	79 f0       	breq	.+30     	; 0x27e8 <put_utf+0x3a>
    27ca:	70 f0       	brcs	.+28     	; 0x27e8 <put_utf+0x3a>
		if (szb < 2) return 0;
    27cc:	02 30       	cpi	r16, 0x02	; 2
    27ce:	11 05       	cpc	r17, r1
    27d0:	90 f0       	brcs	.+36     	; 0x27f6 <put_utf+0x48>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
    27d2:	38 27       	eor	r19, r24
    27d4:	23 27       	eor	r18, r19
    27d6:	32 27       	eor	r19, r18
    27d8:	39 83       	std	Y+1, r19	; 0x01
    27da:	28 83       	st	Y, r18
		return 2;
    27dc:	82 e0       	ldi	r24, 0x02	; 2
}
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	08 95       	ret
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	29 f0       	breq	.+10     	; 0x27f6 <put_utf+0x48>
    27ec:	01 2b       	or	r16, r17
    27ee:	19 f0       	breq	.+6      	; 0x27f6 <put_utf+0x48>
	*buf++ = (TCHAR)wc;					/* Store the character */
    27f0:	88 83       	st	Y, r24
	return 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	f4 cf       	rjmp	.-24     	; 0x27de <put_utf+0x30>
		if (szb < 2) return 0;
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	f2 cf       	rjmp	.-28     	; 0x27de <put_utf+0x30>

000027fa <get_fileinfo>:
{
    27fa:	a6 e0       	ldi	r26, 0x06	; 6
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e3 e0       	ldi	r30, 0x03	; 3
    2800:	f4 e1       	ldi	r31, 0x14	; 20
    2802:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    2806:	8c 01       	movw	r16, r24
    2808:	6d 83       	std	Y+5, r22	; 0x05
    280a:	7e 83       	std	Y+6, r23	; 0x06
	FATFS *fs = dp->obj.fs;
    280c:	dc 01       	movw	r26, r24
    280e:	8d 90       	ld	r8, X+
    2810:	9c 90       	ld	r9, X
    2812:	11 97       	sbiw	r26, 0x01	; 1
	fno->fname[0] = 0;			/* Invaidate file info */
    2814:	ed 81       	ldd	r30, Y+5	; 0x05
    2816:	fe 81       	ldd	r31, Y+6	; 0x06
    2818:	12 8e       	std	Z+26, r1	; 0x1a
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    281a:	9e 96       	adiw	r26, 0x2e	; 46
    281c:	8d 91       	ld	r24, X+
    281e:	9d 91       	ld	r25, X+
    2820:	0d 90       	ld	r0, X+
    2822:	bc 91       	ld	r27, X
    2824:	a0 2d       	mov	r26, r0
    2826:	89 2b       	or	r24, r25
    2828:	8a 2b       	or	r24, r26
    282a:	8b 2b       	or	r24, r27
    282c:	09 f4       	brne	.+2      	; 0x2830 <get_fileinfo+0x36>
    282e:	4b c0       	rjmp	.+150    	; 0x28c6 <get_fileinfo+0xcc>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    2830:	d4 01       	movw	r26, r8
    2832:	8c 91       	ld	r24, X
    2834:	84 30       	cpi	r24, 0x04	; 4
    2836:	09 f0       	breq	.+2      	; 0x283a <get_fileinfo+0x40>
    2838:	9f c0       	rjmp	.+318    	; 0x2978 <get_fileinfo+0x17e>
		get_xfileinfo(fs->dirbuf, fno);
    283a:	1d 96       	adiw	r26, 0x0d	; 13
    283c:	cd 90       	ld	r12, X+
    283e:	dc 90       	ld	r13, X
	nc = 0; hs = 0; di = 0;
    2840:	b1 2c       	mov	r11, r1
    2842:	a1 2c       	mov	r10, r1
	si = SZDIRE * 2;	/* 1st C1 entry */
    2844:	40 e4       	ldi	r20, 0x40	; 64
    2846:	e4 2e       	mov	r14, r20
    2848:	f1 2c       	mov	r15, r1
	nc = 0; hs = 0; di = 0;
    284a:	10 e0       	ldi	r17, 0x00	; 0
    284c:	00 e0       	ldi	r16, 0x00	; 0
    284e:	51 2c       	mov	r5, r1
    2850:	41 2c       	mov	r4, r1
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
    2852:	88 24       	eor	r8, r8
    2854:	8a 94       	dec	r8
    2856:	91 2c       	mov	r9, r1
	while (nc < dirb[XDIR_NumName]) {
    2858:	d6 01       	movw	r26, r12
    285a:	93 96       	adiw	r26, 0x23	; 35
    285c:	8c 91       	ld	r24, X
    285e:	8a 15       	cp	r24, r10
    2860:	1b 04       	cpc	r1, r11
    2862:	09 f0       	breq	.+2      	; 0x2866 <get_fileinfo+0x6c>
    2864:	a0 f5       	brcc	.+104    	; 0x28ce <get_fileinfo+0xd4>
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
    2866:	41 14       	cp	r4, r1
    2868:	51 04       	cpc	r5, r1
    286a:	09 f0       	breq	.+2      	; 0x286e <get_fileinfo+0x74>
    286c:	80 c1       	rjmp	.+768    	; 0x2b6e <get_fileinfo+0x374>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
    286e:	01 15       	cp	r16, r1
    2870:	11 05       	cpc	r17, r1
    2872:	09 f4       	brne	.+2      	; 0x2876 <get_fileinfo+0x7c>
    2874:	7c c1       	rjmp	.+760    	; 0x2b6e <get_fileinfo+0x374>
	fno->fname[di] = 0;						/* Terminate the name */
    2876:	ed 81       	ldd	r30, Y+5	; 0x05
    2878:	fe 81       	ldd	r31, Y+6	; 0x06
    287a:	e0 0f       	add	r30, r16
    287c:	f1 1f       	adc	r31, r17
    287e:	12 8e       	std	Z+26, r1	; 0x1a
	fno->altname[0] = 0;					/* exFAT does not support SFN */
    2880:	ed 81       	ldd	r30, Y+5	; 0x05
    2882:	fe 81       	ldd	r31, Y+6	; 0x06
    2884:	15 86       	std	Z+13, r1	; 0x0d
	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
    2886:	d6 01       	movw	r26, r12
    2888:	14 96       	adiw	r26, 0x04	; 4
    288a:	8c 91       	ld	r24, X
    288c:	84 87       	std	Z+12, r24	; 0x0c
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
    288e:	84 fd       	sbrc	r24, 4
    2890:	6a c0       	rjmp	.+212    	; 0x2966 <get_fileinfo+0x16c>
    2892:	c6 01       	movw	r24, r12
    2894:	c8 96       	adiw	r24, 0x38	; 56
    2896:	0e 94 c4 12 	call	0x2588	; 0x2588 <ld_qword>
    289a:	ed 81       	ldd	r30, Y+5	; 0x05
    289c:	fe 81       	ldd	r31, Y+6	; 0x06
    289e:	20 83       	st	Z, r18
    28a0:	31 83       	std	Z+1, r19	; 0x01
    28a2:	42 83       	std	Z+2, r20	; 0x02
    28a4:	53 83       	std	Z+3, r21	; 0x03
    28a6:	64 83       	std	Z+4, r22	; 0x04
    28a8:	75 83       	std	Z+5, r23	; 0x05
    28aa:	86 83       	std	Z+6, r24	; 0x06
    28ac:	97 83       	std	Z+7, r25	; 0x07
	rv = rv << 8 | ptr[0];
    28ae:	d6 01       	movw	r26, r12
    28b0:	1c 96       	adiw	r26, 0x0c	; 12
    28b2:	8d 91       	ld	r24, X+
    28b4:	9c 91       	ld	r25, X
    28b6:	1d 97       	sbiw	r26, 0x0d	; 13
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
    28b8:	93 87       	std	Z+11, r25	; 0x0b
    28ba:	82 87       	std	Z+10, r24	; 0x0a
	rv = rv << 8 | ptr[0];
    28bc:	1e 96       	adiw	r26, 0x0e	; 14
    28be:	8d 91       	ld	r24, X+
    28c0:	9c 91       	ld	r25, X
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
    28c2:	91 87       	std	Z+9, r25	; 0x09
    28c4:	80 87       	std	Z+8, r24	; 0x08
}
    28c6:	26 96       	adiw	r28, 0x06	; 6
    28c8:	e2 e1       	ldi	r30, 0x12	; 18
    28ca:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
    28ce:	b0 e6       	ldi	r27, 0x60	; 96
    28d0:	eb 16       	cp	r14, r27
    28d2:	b2 e0       	ldi	r27, 0x02	; 2
    28d4:	fb 06       	cpc	r15, r27
    28d6:	08 f0       	brcs	.+2      	; 0x28da <get_fileinfo+0xe0>
    28d8:	4a c1       	rjmp	.+660    	; 0x2b6e <get_fileinfo+0x374>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
    28da:	c7 01       	movw	r24, r14
    28dc:	8f 71       	andi	r24, 0x1F	; 31
    28de:	99 27       	eor	r25, r25
    28e0:	89 2b       	or	r24, r25
    28e2:	19 f4       	brne	.+6      	; 0x28ea <get_fileinfo+0xf0>
    28e4:	e2 e0       	ldi	r30, 0x02	; 2
    28e6:	ee 0e       	add	r14, r30
    28e8:	f1 1c       	adc	r15, r1
	rv = rv << 8 | ptr[0];
    28ea:	f6 01       	movw	r30, r12
    28ec:	ee 0d       	add	r30, r14
    28ee:	ff 1d       	adc	r31, r15
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
    28f4:	f2 e0       	ldi	r31, 0x02	; 2
    28f6:	ef 0e       	add	r14, r31
    28f8:	f1 1c       	adc	r15, r1
    28fa:	2f ef       	ldi	r18, 0xFF	; 255
    28fc:	a2 1a       	sub	r10, r18
    28fe:	b2 0a       	sbc	r11, r18
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
    2900:	41 14       	cp	r4, r1
    2902:	51 04       	cpc	r5, r1
    2904:	29 f4       	brne	.+10     	; 0x2910 <get_fileinfo+0x116>
    2906:	9c 01       	movw	r18, r24
    2908:	38 5d       	subi	r19, 0xD8	; 216
    290a:	21 15       	cp	r18, r1
    290c:	38 40       	sbci	r19, 0x08	; 8
    290e:	48 f1       	brcs	.+82     	; 0x2962 <get_fileinfo+0x168>
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
    2910:	a8 01       	movw	r20, r16
    2912:	46 5e       	subi	r20, 0xE6	; 230
    2914:	5f 4f       	sbci	r21, 0xFF	; 255
    2916:	6d 81       	ldd	r22, Y+5	; 0x05
    2918:	7e 81       	ldd	r23, Y+6	; 0x06
    291a:	64 0f       	add	r22, r20
    291c:	75 1f       	adc	r23, r21
    291e:	71 2c       	mov	r7, r1
    2920:	61 2c       	mov	r6, r1
    2922:	a2 01       	movw	r20, r4
    2924:	33 27       	eor	r19, r19
    2926:	22 27       	eor	r18, r18
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	28 2b       	or	r18, r24
    292e:	39 2b       	or	r19, r25
    2930:	4a 2b       	or	r20, r26
    2932:	5b 2b       	or	r21, r27
    2934:	29 83       	std	Y+1, r18	; 0x01
    2936:	3a 83       	std	Y+2, r19	; 0x02
    2938:	4b 83       	std	Y+3, r20	; 0x03
    293a:	5c 83       	std	Y+4, r21	; 0x04
    293c:	94 01       	movw	r18, r8
    293e:	20 1b       	sub	r18, r16
    2940:	31 0b       	sbc	r19, r17
    2942:	ab 01       	movw	r20, r22
    2944:	69 81       	ldd	r22, Y+1	; 0x01
    2946:	7a 81       	ldd	r23, Y+2	; 0x02
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <put_utf>
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
    2954:	88 23       	and	r24, r24
    2956:	09 f4       	brne	.+2      	; 0x295a <get_fileinfo+0x160>
    2958:	0a c1       	rjmp	.+532    	; 0x2b6e <get_fileinfo+0x374>
		di += wc;
    295a:	02 0f       	add	r16, r18
    295c:	13 1f       	adc	r17, r19
		hs = 0;
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	2c 01       	movw	r4, r24
    2964:	79 cf       	rjmp	.-270    	; 0x2858 <get_fileinfo+0x5e>
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	91 cf       	rjmp	.-222    	; 0x289a <get_fileinfo+0xa0>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
    2978:	f8 01       	movw	r30, r16
    297a:	e0 5c       	subi	r30, 0xC0	; 192
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	80 81       	ld	r24, Z
    2980:	91 81       	ldd	r25, Z+1	; 0x01
    2982:	a2 81       	ldd	r26, Z+2	; 0x02
    2984:	b3 81       	ldd	r27, Z+3	; 0x03
    2986:	8f 3f       	cpi	r24, 0xFF	; 255
    2988:	9f 4f       	sbci	r25, 0xFF	; 255
    298a:	af 4f       	sbci	r26, 0xFF	; 255
    298c:	bf 4f       	sbci	r27, 0xFF	; 255
    298e:	09 f0       	breq	.+2      	; 0x2992 <get_fileinfo+0x198>
    2990:	a6 c0       	rjmp	.+332    	; 0x2ade <get_fileinfo+0x2e4>
		wc = dp->dir[si++];			/* Get a char */
    2992:	f8 01       	movw	r30, r16
    2994:	02 a9       	ldd	r16, Z+50	; 0x32
    2996:	13 a9       	ldd	r17, Z+51	; 0x33
    2998:	f8 01       	movw	r30, r16
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	20 e0       	ldi	r18, 0x00	; 0
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
    29a2:	7e e2       	ldi	r23, 0x2E	; 46
		wc = dp->dir[si++];			/* Get a char */
    29a4:	2f 5f       	subi	r18, 0xFF	; 255
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	61 91       	ld	r22, Z+
    29aa:	46 2f       	mov	r20, r22
    29ac:	50 e0       	ldi	r21, 0x00	; 0
		if (wc == ' ') continue;	/* Skip padding spaces */
    29ae:	60 32       	cpi	r22, 0x20	; 32
    29b0:	c1 f0       	breq	.+48     	; 0x29e2 <get_fileinfo+0x1e8>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
    29b2:	45 30       	cpi	r20, 0x05	; 5
    29b4:	51 05       	cpc	r21, r1
    29b6:	09 f4       	brne	.+2      	; 0x29ba <get_fileinfo+0x1c0>
    29b8:	45 ee       	ldi	r20, 0xE5	; 229
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
    29ba:	29 30       	cpi	r18, 0x09	; 9
    29bc:	31 05       	cpc	r19, r1
    29be:	51 f4       	brne	.+20     	; 0x29d4 <get_fileinfo+0x1da>
    29c0:	8c 30       	cpi	r24, 0x0C	; 12
    29c2:	91 05       	cpc	r25, r1
    29c4:	38 f4       	brcc	.+14     	; 0x29d4 <get_fileinfo+0x1da>
    29c6:	ad 81       	ldd	r26, Y+5	; 0x05
    29c8:	be 81       	ldd	r27, Y+6	; 0x06
    29ca:	a8 0f       	add	r26, r24
    29cc:	b9 1f       	adc	r27, r25
    29ce:	1d 96       	adiw	r26, 0x0d	; 13
    29d0:	7c 93       	st	X, r23
    29d2:	01 96       	adiw	r24, 0x01	; 1
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
    29d4:	ad 81       	ldd	r26, Y+5	; 0x05
    29d6:	be 81       	ldd	r27, Y+6	; 0x06
    29d8:	a8 0f       	add	r26, r24
    29da:	b9 1f       	adc	r27, r25
    29dc:	1d 96       	adiw	r26, 0x0d	; 13
    29de:	4c 93       	st	X, r20
    29e0:	01 96       	adiw	r24, 0x01	; 1
	while (si < 11) {		/* Get SFN from SFN entry */
    29e2:	2b 30       	cpi	r18, 0x0B	; 11
    29e4:	31 05       	cpc	r19, r1
    29e6:	f1 f6       	brne	.-68     	; 0x29a4 <get_fileinfo+0x1aa>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
    29e8:	ed 81       	ldd	r30, Y+5	; 0x05
    29ea:	fe 81       	ldd	r31, Y+6	; 0x06
    29ec:	e8 0f       	add	r30, r24
    29ee:	f9 1f       	adc	r31, r25
    29f0:	15 86       	std	Z+13, r1	; 0x0d
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
    29f2:	ad 81       	ldd	r26, Y+5	; 0x05
    29f4:	be 81       	ldd	r27, Y+6	; 0x06
    29f6:	5a 96       	adiw	r26, 0x1a	; 26
    29f8:	2c 91       	ld	r18, X
    29fa:	5a 97       	sbiw	r26, 0x1a	; 26
    29fc:	21 11       	cpse	r18, r1
    29fe:	8d c0       	rjmp	.+282    	; 0x2b1a <get_fileinfo+0x320>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
    2a00:	89 2b       	or	r24, r25
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <get_fileinfo+0x20c>
    2a04:	76 c0       	rjmp	.+236    	; 0x2af2 <get_fileinfo+0x2f8>
    2a06:	fd 01       	movw	r30, r26
    2a08:	3d 96       	adiw	r30, 0x0d	; 13
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
    2a0a:	58 e0       	ldi	r21, 0x08	; 8
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	41 91       	ld	r20, Z+
    2a12:	44 23       	and	r20, r20
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <get_fileinfo+0x21e>
    2a16:	73 c0       	rjmp	.+230    	; 0x2afe <get_fileinfo+0x304>
				wc = (WCHAR)fno->altname[si];
    2a18:	24 2f       	mov	r18, r20
    2a1a:	04 2e       	mov	r0, r20
    2a1c:	00 0c       	add	r0, r0
    2a1e:	33 0b       	sbc	r19, r19
				if (wc == '.') lcf = NS_EXT;
    2a20:	4e 32       	cpi	r20, 0x2E	; 46
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <get_fileinfo+0x22c>
    2a24:	a2 c0       	rjmp	.+324    	; 0x2b6a <get_fileinfo+0x370>
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
    2a26:	b9 01       	movw	r22, r18
    2a28:	61 54       	subi	r22, 0x41	; 65
    2a2a:	71 09       	sbc	r23, r1
    2a2c:	6a 31       	cpi	r22, 0x1A	; 26
    2a2e:	71 05       	cpc	r23, r1
    2a30:	38 f4       	brcc	.+14     	; 0x2a40 <get_fileinfo+0x246>
    2a32:	d8 01       	movw	r26, r16
    2a34:	1c 96       	adiw	r26, 0x0c	; 12
    2a36:	4c 91       	ld	r20, X
    2a38:	45 23       	and	r20, r21
    2a3a:	11 f0       	breq	.+4      	; 0x2a40 <get_fileinfo+0x246>
    2a3c:	20 5e       	subi	r18, 0xE0	; 224
    2a3e:	3f 4f       	sbci	r19, 0xFF	; 255
				fno->fname[di] = (TCHAR)wc;
    2a40:	24 87       	std	Z+12, r18	; 0x0c
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
    2a42:	01 96       	adiw	r24, 0x01	; 1
    2a44:	e5 cf       	rjmp	.-54     	; 0x2a10 <get_fileinfo+0x216>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
    2a46:	c1 14       	cp	r12, r1
    2a48:	d1 04       	cpc	r13, r1
    2a4a:	29 f4       	brne	.+10     	; 0x2a56 <get_fileinfo+0x25c>
    2a4c:	9c 01       	movw	r18, r24
    2a4e:	38 5d       	subi	r19, 0xD8	; 216
    2a50:	21 15       	cp	r18, r1
    2a52:	38 40       	sbci	r19, 0x08	; 8
    2a54:	48 f1       	brcs	.+82     	; 0x2aa8 <get_fileinfo+0x2ae>
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
    2a56:	a7 01       	movw	r20, r14
    2a58:	46 5e       	subi	r20, 0xE6	; 230
    2a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5c:	6d 81       	ldd	r22, Y+5	; 0x05
    2a5e:	7e 81       	ldd	r23, Y+6	; 0x06
    2a60:	64 0f       	add	r22, r20
    2a62:	75 1f       	adc	r23, r21
    2a64:	16 01       	movw	r2, r12
    2a66:	51 2c       	mov	r5, r1
    2a68:	41 2c       	mov	r4, r1
    2a6a:	a1 01       	movw	r20, r2
    2a6c:	33 27       	eor	r19, r19
    2a6e:	22 27       	eor	r18, r18
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	a0 e0       	ldi	r26, 0x00	; 0
    2a74:	28 2b       	or	r18, r24
    2a76:	39 2b       	or	r19, r25
    2a78:	4a 2b       	or	r20, r26
    2a7a:	5b 2b       	or	r21, r27
    2a7c:	29 83       	std	Y+1, r18	; 0x01
    2a7e:	3a 83       	std	Y+2, r19	; 0x02
    2a80:	4b 83       	std	Y+3, r20	; 0x03
    2a82:	5c 83       	std	Y+4, r21	; 0x04
    2a84:	93 01       	movw	r18, r6
    2a86:	2e 19       	sub	r18, r14
    2a88:	3f 09       	sbc	r19, r15
    2a8a:	ab 01       	movw	r20, r22
    2a8c:	69 81       	ldd	r22, Y+1	; 0x01
    2a8e:	7a 81       	ldd	r23, Y+2	; 0x02
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	9c 81       	ldd	r25, Y+4	; 0x04
    2a94:	0e 94 d7 13 	call	0x27ae	; 0x27ae <put_utf>
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
    2a9c:	88 23       	and	r24, r24
    2a9e:	99 f0       	breq	.+38     	; 0x2ac6 <get_fileinfo+0x2cc>
				di += wc;
    2aa0:	e2 0e       	add	r14, r18
    2aa2:	f3 1e       	adc	r15, r19
				hs = 0;
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	32 e0       	ldi	r19, 0x02	; 2
    2aaa:	a3 0e       	add	r10, r19
    2aac:	b1 1c       	adc	r11, r1
    2aae:	6c 01       	movw	r12, r24
			while (fs->lfnbuf[si] != 0) {
    2ab0:	d4 01       	movw	r26, r8
    2ab2:	1b 96       	adiw	r26, 0x0b	; 11
    2ab4:	ed 91       	ld	r30, X+
    2ab6:	fc 91       	ld	r31, X
    2ab8:	ea 0d       	add	r30, r10
    2aba:	fb 1d       	adc	r31, r11
    2abc:	80 81       	ld	r24, Z
    2abe:	91 81       	ldd	r25, Z+1	; 0x01
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	09 f6       	brne	.-126    	; 0x2a46 <get_fileinfo+0x24c>
    2ac4:	97 01       	movw	r18, r14
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
    2ac6:	cd 28       	or	r12, r13
    2ac8:	11 f0       	breq	.+4      	; 0x2ace <get_fileinfo+0x2d4>
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	20 e0       	ldi	r18, 0x00	; 0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
    2ace:	2d 80       	ldd	r2, Y+5	; 0x05
    2ad0:	3e 80       	ldd	r3, Y+6	; 0x06
    2ad2:	22 0d       	add	r18, r2
    2ad4:	33 1d       	adc	r19, r3
    2ad6:	d9 01       	movw	r26, r18
    2ad8:	5a 96       	adiw	r26, 0x1a	; 26
    2ada:	1c 92       	st	X, r1
    2adc:	5a cf       	rjmp	.-332    	; 0x2992 <get_fileinfo+0x198>
    2ade:	b1 2c       	mov	r11, r1
    2ae0:	a1 2c       	mov	r10, r1
			si = di = hs = 0;
    2ae2:	d1 2c       	mov	r13, r1
    2ae4:	c1 2c       	mov	r12, r1
    2ae6:	f1 2c       	mov	r15, r1
    2ae8:	e1 2c       	mov	r14, r1
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
    2aea:	66 24       	eor	r6, r6
    2aec:	6a 94       	dec	r6
    2aee:	71 2c       	mov	r7, r1
    2af0:	df cf       	rjmp	.-66     	; 0x2ab0 <get_fileinfo+0x2b6>
			fno->fname[di++] = '?';
    2af2:	8f e3       	ldi	r24, 0x3F	; 63
    2af4:	ed 81       	ldd	r30, Y+5	; 0x05
    2af6:	fe 81       	ldd	r31, Y+6	; 0x06
    2af8:	82 8f       	std	Z+26, r24	; 0x1a
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
		fno->fname[di] = 0;	/* Terminate the LFN */
    2afe:	2d 80       	ldd	r2, Y+5	; 0x05
    2b00:	3e 80       	ldd	r3, Y+6	; 0x06
    2b02:	82 0d       	add	r24, r2
    2b04:	93 1d       	adc	r25, r3
    2b06:	dc 01       	movw	r26, r24
    2b08:	5a 96       	adiw	r26, 0x1a	; 26
    2b0a:	1c 92       	st	X, r1
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	84 85       	ldd	r24, Z+12	; 0x0c
    2b10:	81 11       	cpse	r24, r1
    2b12:	03 c0       	rjmp	.+6      	; 0x2b1a <get_fileinfo+0x320>
    2b14:	d1 01       	movw	r26, r2
    2b16:	1d 96       	adiw	r26, 0x0d	; 13
    2b18:	1c 92       	st	X, r1
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	83 85       	ldd	r24, Z+11	; 0x0b
    2b1e:	ad 81       	ldd	r26, Y+5	; 0x05
    2b20:	be 81       	ldd	r27, Y+6	; 0x06
    2b22:	1c 96       	adiw	r26, 0x0c	; 12
    2b24:	8c 93       	st	X, r24
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
    2b26:	c8 01       	movw	r24, r16
    2b28:	4c 96       	adiw	r24, 0x1c	; 28
    2b2a:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    2b2e:	69 83       	std	Y+1, r22	; 0x01
    2b30:	7a 83       	std	Y+2, r23	; 0x02
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	9c 83       	std	Y+4, r25	; 0x04
    2b36:	4b 01       	movw	r8, r22
    2b38:	5c 01       	movw	r10, r24
    2b3a:	c1 2c       	mov	r12, r1
    2b3c:	d1 2c       	mov	r13, r1
    2b3e:	76 01       	movw	r14, r12
    2b40:	ed 81       	ldd	r30, Y+5	; 0x05
    2b42:	fe 81       	ldd	r31, Y+6	; 0x06
    2b44:	60 83       	st	Z, r22
    2b46:	91 82       	std	Z+1, r9	; 0x01
    2b48:	82 83       	std	Z+2, r24	; 0x02
    2b4a:	b3 82       	std	Z+3, r11	; 0x03
    2b4c:	14 82       	std	Z+4, r1	; 0x04
    2b4e:	15 82       	std	Z+5, r1	; 0x05
    2b50:	16 82       	std	Z+6, r1	; 0x06
    2b52:	17 82       	std	Z+7, r1	; 0x07
	rv = rv << 8 | ptr[0];
    2b54:	d8 01       	movw	r26, r16
    2b56:	56 96       	adiw	r26, 0x16	; 22
    2b58:	8d 91       	ld	r24, X+
    2b5a:	9c 91       	ld	r25, X
    2b5c:	57 97       	sbiw	r26, 0x17	; 23
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
    2b5e:	93 87       	std	Z+11, r25	; 0x0b
    2b60:	82 87       	std	Z+10, r24	; 0x0a
	rv = rv << 8 | ptr[0];
    2b62:	58 96       	adiw	r26, 0x18	; 24
    2b64:	8d 91       	ld	r24, X+
    2b66:	9c 91       	ld	r25, X
    2b68:	ac ce       	rjmp	.-680    	; 0x28c2 <get_fileinfo+0xc8>
				if (wc == '.') lcf = NS_EXT;
    2b6a:	50 e1       	ldi	r21, 0x10	; 16
    2b6c:	69 cf       	rjmp	.-302    	; 0x2a40 <get_fileinfo+0x246>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
    2b6e:	8f e3       	ldi	r24, 0x3F	; 63
    2b70:	ed 81       	ldd	r30, Y+5	; 0x05
    2b72:	fe 81       	ldd	r31, Y+6	; 0x06
    2b74:	82 8f       	std	Z+26, r24	; 0x1a
    2b76:	01 e0       	ldi	r16, 0x01	; 1
    2b78:	10 e0       	ldi	r17, 0x00	; 0
    2b7a:	7d ce       	rjmp	.-774    	; 0x2876 <get_fileinfo+0x7c>

00002b7c <tchar2uni>:
{
    2b7c:	a6 e0       	ldi	r26, 0x06	; 6
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e4 ec       	ldi	r30, 0xC4	; 196
    2b82:	f5 e1       	ldi	r31, 0x15	; 21
    2b84:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
    2b88:	8d 83       	std	Y+5, r24	; 0x05
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
	wc = (BYTE)*p++;			/* Get a byte */
    2b8c:	ad 81       	ldd	r26, Y+5	; 0x05
    2b8e:	be 81       	ldd	r27, Y+6	; 0x06
    2b90:	0d 91       	ld	r16, X+
    2b92:	1c 91       	ld	r17, X
    2b94:	f8 01       	movw	r30, r16
    2b96:	21 91       	ld	r18, Z+
    2b98:	8f 01       	movw	r16, r30
    2b9a:	82 2f       	mov	r24, r18
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
	if (wc != 0) {
    2b9e:	22 23       	and	r18, r18
    2ba0:	31 f0       	breq	.+12     	; 0x2bae <tchar2uni+0x32>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
    2ba2:	65 eb       	ldi	r22, 0xB5	; 181
    2ba4:	71 e0       	ldi	r23, 0x01	; 1
    2ba6:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	99 f0       	breq	.+38     	; 0x2bd4 <tchar2uni+0x58>
	uc = wc;
    2bae:	9c 01       	movw	r18, r24
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	40 e0       	ldi	r20, 0x00	; 0
    2bb4:	29 83       	std	Y+1, r18	; 0x01
    2bb6:	3a 83       	std	Y+2, r19	; 0x02
    2bb8:	4b 83       	std	Y+3, r20	; 0x03
    2bba:	5c 83       	std	Y+4, r21	; 0x04
	*str = p;	/* Next read pointer */
    2bbc:	ad 81       	ldd	r26, Y+5	; 0x05
    2bbe:	be 81       	ldd	r27, Y+6	; 0x06
    2bc0:	0d 93       	st	X+, r16
    2bc2:	1c 93       	st	X, r17
}
    2bc4:	69 81       	ldd	r22, Y+1	; 0x01
    2bc6:	7a 81       	ldd	r23, Y+2	; 0x02
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	9c 81       	ldd	r25, Y+4	; 0x04
    2bcc:	26 96       	adiw	r28, 0x06	; 6
    2bce:	e4 e0       	ldi	r30, 0x04	; 4
    2bd0:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
    2bd4:	2f ef       	ldi	r18, 0xFF	; 255
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	a9 01       	movw	r20, r18
    2bda:	29 83       	std	Y+1, r18	; 0x01
    2bdc:	3a 83       	std	Y+2, r19	; 0x02
    2bde:	4b 83       	std	Y+3, r20	; 0x03
    2be0:	5c 83       	std	Y+4, r21	; 0x04
    2be2:	f0 cf       	rjmp	.-32     	; 0x2bc4 <tchar2uni+0x48>

00002be4 <xname_sum>:
{
    2be4:	a6 e0       	ldi	r26, 0x06	; 6
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e8 ef       	ldi	r30, 0xF8	; 248
    2bea:	f5 e1       	ldi	r31, 0x15	; 21
    2bec:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
	WORD sum = 0;
    2bf0:	10 e0       	ldi	r17, 0x00	; 0
    2bf2:	00 e0       	ldi	r16, 0x00	; 0
	while ((chr = *name++) != 0) {
    2bf4:	8d 83       	std	Y+5, r24	; 0x05
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	ed 81       	ldd	r30, Y+5	; 0x05
    2bfa:	fe 81       	ldd	r31, Y+6	; 0x06
    2bfc:	81 91       	ld	r24, Z+
    2bfe:	91 91       	ld	r25, Z+
    2c00:	fe 83       	std	Y+6, r31	; 0x06
    2c02:	ed 83       	std	Y+5, r30	; 0x05
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	29 f4       	brne	.+10     	; 0x2c12 <xname_sum+0x2e>
}
    2c08:	c8 01       	movw	r24, r16
    2c0a:	26 96       	adiw	r28, 0x06	; 6
    2c0c:	e4 e0       	ldi	r30, 0x04	; 4
    2c0e:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
    2c12:	9c 01       	movw	r18, r24
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	29 83       	std	Y+1, r18	; 0x01
    2c1a:	3a 83       	std	Y+2, r19	; 0x02
    2c1c:	4b 83       	std	Y+3, r20	; 0x03
    2c1e:	5c 83       	std	Y+4, r21	; 0x04
    2c20:	ca 01       	movw	r24, r20
    2c22:	b9 01       	movw	r22, r18
    2c24:	0e 94 0b 4c 	call	0x9816	; 0x9816 <ff_wtoupper>
    2c28:	46 2f       	mov	r20, r22
    2c2a:	57 2f       	mov	r21, r23
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
    2c2c:	c8 01       	movw	r24, r16
    2c2e:	80 fb       	bst	r24, 0
    2c30:	97 95       	ror	r25
    2c32:	87 95       	ror	r24
    2c34:	97 f9       	bld	r25, 7
    2c36:	8a 01       	movw	r16, r20
    2c38:	11 27       	eor	r17, r17
    2c3a:	08 0f       	add	r16, r24
    2c3c:	19 1f       	adc	r17, r25
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
    2c3e:	00 fb       	bst	r16, 0
    2c40:	17 95       	ror	r17
    2c42:	07 95       	ror	r16
    2c44:	17 f9       	bld	r17, 7
    2c46:	45 2f       	mov	r20, r21
    2c48:	55 27       	eor	r21, r21
    2c4a:	04 0f       	add	r16, r20
    2c4c:	15 1f       	adc	r17, r21
	while ((chr = *name++) != 0) {
    2c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c50:	9e 81       	ldd	r25, Y+6	; 0x06
    2c52:	d0 cf       	rjmp	.-96     	; 0x2bf4 <xname_sum+0x10>

00002c54 <mem_cpy.part.0>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
    2c54:	9b 01       	movw	r18, r22
    2c56:	fc 01       	movw	r30, r24
    2c58:	46 0f       	add	r20, r22
    2c5a:	57 1f       	adc	r21, r23
			*d++ = *s++;
    2c5c:	d9 01       	movw	r26, r18
    2c5e:	2f 5f       	subi	r18, 0xFF	; 255
    2c60:	3f 4f       	sbci	r19, 0xFF	; 255
    2c62:	8c 91       	ld	r24, X
    2c64:	81 93       	st	Z+, r24
		} while (--cnt);
    2c66:	24 17       	cp	r18, r20
    2c68:	35 07       	cpc	r19, r21
    2c6a:	c1 f7       	brne	.-16     	; 0x2c5c <mem_cpy.part.0+0x8>
}
    2c6c:	08 95       	ret

00002c6e <sync_window>:
{
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	a0 e0       	ldi	r26, 0x00	; 0
    2c72:	ed e3       	ldi	r30, 0x3D	; 61
    2c74:	f6 e1       	ldi	r31, 0x16	; 22
    2c76:	0c 94 3a 5a 	jmp	0xb474	; 0xb474 <__prologue_saves__+0xc>
    2c7a:	ec 01       	movw	r28, r24
	if (fs->wflag) {	/* Is the disk access window dirty? */
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	81 11       	cpse	r24, r1
    2c80:	08 c0       	rjmp	.+16     	; 0x2c92 <sync_window+0x24>
	FRESULT res = FR_OK;
    2c82:	f1 2c       	mov	r15, r1
    2c84:	e1 2c       	mov	r14, r1
}
    2c86:	c7 01       	movw	r24, r14
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	ec e0       	ldi	r30, 0x0C	; 12
    2c8e:	0c 94 56 5a 	jmp	0xb4ac	; 0xb4ac <__epilogue_restores__+0xc>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    2c92:	6e 01       	movw	r12, r28
    2c94:	47 e4       	ldi	r20, 0x47	; 71
    2c96:	c4 0e       	add	r12, r20
    2c98:	d1 1c       	adc	r13, r1
    2c9a:	5e 01       	movw	r10, r28
    2c9c:	53 e4       	ldi	r21, 0x43	; 67
    2c9e:	a5 0e       	add	r10, r21
    2ca0:	b1 1c       	adc	r11, r1
    2ca2:	f5 01       	movw	r30, r10
    2ca4:	20 81       	ld	r18, Z
    2ca6:	31 81       	ldd	r19, Z+1	; 0x01
    2ca8:	42 81       	ldd	r20, Z+2	; 0x02
    2caa:	53 81       	ldd	r21, Z+3	; 0x03
    2cac:	01 e0       	ldi	r16, 0x01	; 1
    2cae:	10 e0       	ldi	r17, 0x00	; 0
    2cb0:	b6 01       	movw	r22, r12
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    2cb8:	7c 01       	movw	r14, r24
    2cba:	89 2b       	or	r24, r25
    2cbc:	59 f5       	brne	.+86     	; 0x2d14 <sync_window+0xa6>
			fs->wflag = 0;	/* Clear window dirty flag */
    2cbe:	1b 82       	std	Y+3, r1	; 0x03
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    2cc0:	f5 01       	movw	r30, r10
    2cc2:	00 81       	ld	r16, Z
    2cc4:	11 81       	ldd	r17, Z+1	; 0x01
    2cc6:	22 81       	ldd	r18, Z+2	; 0x02
    2cc8:	33 81       	ldd	r19, Z+3	; 0x03
    2cca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ccc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cce:	ad a5       	ldd	r26, Y+45	; 0x2d
    2cd0:	be a5       	ldd	r27, Y+46	; 0x2e
    2cd2:	8b a8       	ldd	r8, Y+51	; 0x33
    2cd4:	9c a8       	ldd	r9, Y+52	; 0x34
    2cd6:	ad a8       	ldd	r10, Y+53	; 0x35
    2cd8:	be a8       	ldd	r11, Y+54	; 0x36
    2cda:	b9 01       	movw	r22, r18
    2cdc:	a8 01       	movw	r20, r16
    2cde:	48 19       	sub	r20, r8
    2ce0:	59 09       	sbc	r21, r9
    2ce2:	6a 09       	sbc	r22, r10
    2ce4:	7b 09       	sbc	r23, r11
    2ce6:	4a 01       	movw	r8, r20
    2ce8:	5b 01       	movw	r10, r22
    2cea:	88 16       	cp	r8, r24
    2cec:	99 06       	cpc	r9, r25
    2cee:	aa 06       	cpc	r10, r26
    2cf0:	bb 06       	cpc	r11, r27
    2cf2:	38 f6       	brcc	.-114    	; 0x2c82 <sync_window+0x14>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    2cf4:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf6:	62 30       	cpi	r22, 0x02	; 2
    2cf8:	21 f6       	brne	.-120    	; 0x2c82 <sync_window+0x14>
    2cfa:	a9 01       	movw	r20, r18
    2cfc:	98 01       	movw	r18, r16
    2cfe:	28 0f       	add	r18, r24
    2d00:	39 1f       	adc	r19, r25
    2d02:	4a 1f       	adc	r20, r26
    2d04:	5b 1f       	adc	r21, r27
    2d06:	01 e0       	ldi	r16, 0x01	; 1
    2d08:	10 e0       	ldi	r17, 0x00	; 0
    2d0a:	b6 01       	movw	r22, r12
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    2d12:	b9 cf       	rjmp	.-142    	; 0x2c86 <sync_window+0x18>
			res = FR_DISK_ERR;
    2d14:	ee 24       	eor	r14, r14
    2d16:	e3 94       	inc	r14
    2d18:	f1 2c       	mov	r15, r1
	return res;
    2d1a:	b5 cf       	rjmp	.-150    	; 0x2c86 <sync_window+0x18>

00002d1c <move_window>:
{
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	a0 e0       	ldi	r26, 0x00	; 0
    2d20:	e4 e9       	ldi	r30, 0x94	; 148
    2d22:	f6 e1       	ldi	r31, 0x16	; 22
    2d24:	0c 94 3c 5a 	jmp	0xb478	; 0xb478 <__prologue_saves__+0x10>
    2d28:	5c 01       	movw	r10, r24
    2d2a:	6a 01       	movw	r12, r20
    2d2c:	7b 01       	movw	r14, r22
	if (sect != fs->winsect) {	/* Window offset changed? */
    2d2e:	ec 01       	movw	r28, r24
    2d30:	cd 5b       	subi	r28, 0xBD	; 189
    2d32:	df 4f       	sbci	r29, 0xFF	; 255
    2d34:	88 81       	ld	r24, Y
    2d36:	99 81       	ldd	r25, Y+1	; 0x01
    2d38:	aa 81       	ldd	r26, Y+2	; 0x02
    2d3a:	bb 81       	ldd	r27, Y+3	; 0x03
	FRESULT res = FR_OK;
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
	if (sect != fs->winsect) {	/* Window offset changed? */
    2d40:	8c 15       	cp	r24, r12
    2d42:	9d 05       	cpc	r25, r13
    2d44:	ae 05       	cpc	r26, r14
    2d46:	bf 05       	cpc	r27, r15
    2d48:	f1 f0       	breq	.+60     	; 0x2d86 <move_window+0x6a>
		res = sync_window(fs);		/* Flush the window */
    2d4a:	c5 01       	movw	r24, r10
    2d4c:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <sync_window>
    2d50:	9c 01       	movw	r18, r24
		if (res == FR_OK) {			/* Fill sector window with new data */
    2d52:	89 2b       	or	r24, r25
    2d54:	c1 f4       	brne	.+48     	; 0x2d86 <move_window+0x6a>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    2d56:	b5 01       	movw	r22, r10
    2d58:	69 5b       	subi	r22, 0xB9	; 185
    2d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5c:	01 e0       	ldi	r16, 0x01	; 1
    2d5e:	10 e0       	ldi	r17, 0x00	; 0
    2d60:	a7 01       	movw	r20, r14
    2d62:	96 01       	movw	r18, r12
    2d64:	f5 01       	movw	r30, r10
    2d66:	81 81       	ldd	r24, Z+1	; 0x01
    2d68:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <disk_read>
    2d6c:	9c 01       	movw	r18, r24
    2d6e:	89 2b       	or	r24, r25
    2d70:	31 f0       	breq	.+12     	; 0x2d7e <move_window+0x62>
				res = FR_DISK_ERR;
    2d72:	21 e0       	ldi	r18, 0x01	; 1
    2d74:	30 e0       	ldi	r19, 0x00	; 0
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
    2d76:	cc 24       	eor	r12, r12
    2d78:	ca 94       	dec	r12
    2d7a:	dc 2c       	mov	r13, r12
    2d7c:	76 01       	movw	r14, r12
			fs->winsect = sect;
    2d7e:	c8 82       	st	Y, r12
    2d80:	d9 82       	std	Y+1, r13	; 0x01
    2d82:	ea 82       	std	Y+2, r14	; 0x02
    2d84:	fb 82       	std	Y+3, r15	; 0x03
}
    2d86:	c9 01       	movw	r24, r18
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	ea e0       	ldi	r30, 0x0A	; 10
    2d8e:	0c 94 58 5a 	jmp	0xb4b0	; 0xb4b0 <__epilogue_restores__+0x10>

00002d92 <find_bitmap>:
{
    2d92:	ae e0       	ldi	r26, 0x0E	; 14
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	ef ec       	ldi	r30, 0xCF	; 207
    2d98:	f6 e1       	ldi	r31, 0x16	; 22
    2d9a:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    2d9e:	89 87       	std	Y+9, r24	; 0x09
    2da0:	9a 87       	std	Y+10, r25	; 0x0a
    2da2:	0d 83       	std	Y+5, r16	; 0x05
    2da4:	1e 83       	std	Y+6, r17	; 0x06
    2da6:	2f 83       	std	Y+7, r18	; 0x07
    2da8:	38 87       	std	Y+8, r19	; 0x08
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
    2daa:	4a 01       	movw	r8, r20
    2dac:	5b 01       	movw	r10, r22
    2dae:	22 e0       	ldi	r18, 0x02	; 2
    2db0:	82 1a       	sub	r8, r18
    2db2:	91 08       	sbc	r9, r1
    2db4:	a1 08       	sbc	r10, r1
    2db6:	b1 08       	sbc	r11, r1
	if (clst >= fs->n_fatent - 2) clst = 0;
    2db8:	e9 85       	ldd	r30, Y+9	; 0x09
    2dba:	fa 85       	ldd	r31, Y+10	; 0x0a
    2dbc:	87 a1       	ldd	r24, Z+39	; 0x27
    2dbe:	90 a5       	ldd	r25, Z+40	; 0x28
    2dc0:	a1 a5       	ldd	r26, Z+41	; 0x29
    2dc2:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2dc4:	02 97       	sbiw	r24, 0x02	; 2
    2dc6:	a1 09       	sbc	r26, r1
    2dc8:	b1 09       	sbc	r27, r1
    2dca:	88 16       	cp	r8, r24
    2dcc:	99 06       	cpc	r9, r25
    2dce:	aa 06       	cpc	r10, r26
    2dd0:	bb 06       	cpc	r11, r27
    2dd2:	18 f0       	brcs	.+6      	; 0x2dda <find_bitmap+0x48>
    2dd4:	81 2c       	mov	r8, r1
    2dd6:	91 2c       	mov	r9, r1
    2dd8:	54 01       	movw	r10, r8
	scl = val = clst; ctr = 0;
    2dda:	89 82       	std	Y+1, r8	; 0x01
    2ddc:	9a 82       	std	Y+2, r9	; 0x02
    2dde:	ab 82       	std	Y+3, r10	; 0x03
    2de0:	bc 82       	std	Y+4, r11	; 0x04
    2de2:	75 01       	movw	r14, r10
    2de4:	64 01       	movw	r12, r8
    2de6:	41 2c       	mov	r4, r1
    2de8:	51 2c       	mov	r5, r1
    2dea:	32 01       	movw	r6, r4
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
    2dec:	29 84       	ldd	r2, Y+9	; 0x09
    2dee:	3a 84       	ldd	r3, Y+10	; 0x0a
    2df0:	ff e3       	ldi	r31, 0x3F	; 63
    2df2:	2f 0e       	add	r2, r31
    2df4:	31 1c       	adc	r3, r1
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
    2df6:	11 e0       	ldi	r17, 0x01	; 1
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
    2df8:	f1 01       	movw	r30, r2
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	a2 81       	ldd	r26, Z+2	; 0x02
    2e00:	b3 81       	ldd	r27, Z+3	; 0x03
    2e02:	b7 01       	movw	r22, r14
    2e04:	a6 01       	movw	r20, r12
    2e06:	3c e0       	ldi	r19, 0x0C	; 12
    2e08:	76 95       	lsr	r23
    2e0a:	67 95       	ror	r22
    2e0c:	57 95       	ror	r21
    2e0e:	47 95       	ror	r20
    2e10:	3a 95       	dec	r19
    2e12:	d1 f7       	brne	.-12     	; 0x2e08 <find_bitmap+0x76>
    2e14:	48 0f       	add	r20, r24
    2e16:	59 1f       	adc	r21, r25
    2e18:	6a 1f       	adc	r22, r26
    2e1a:	7b 1f       	adc	r23, r27
    2e1c:	89 85       	ldd	r24, Y+9	; 0x09
    2e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e20:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    2e24:	89 2b       	or	r24, r25
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <find_bitmap+0x98>
    2e28:	7a c0       	rjmp	.+244    	; 0x2f1e <find_bitmap+0x18c>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
    2e2a:	d7 01       	movw	r26, r14
    2e2c:	c6 01       	movw	r24, r12
    2e2e:	23 e0       	ldi	r18, 0x03	; 3
    2e30:	b6 95       	lsr	r27
    2e32:	a7 95       	ror	r26
    2e34:	97 95       	ror	r25
    2e36:	87 95       	ror	r24
    2e38:	2a 95       	dec	r18
    2e3a:	d1 f7       	brne	.-12     	; 0x2e30 <find_bitmap+0x9e>
    2e3c:	91 70       	andi	r25, 0x01	; 1
    2e3e:	96 01       	movw	r18, r12
    2e40:	27 70       	andi	r18, 0x07	; 7
    2e42:	33 27       	eor	r19, r19
    2e44:	f1 2f       	mov	r31, r17
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <find_bitmap+0xb8>
    2e48:	ff 0f       	add	r31, r31
    2e4a:	2a 95       	dec	r18
    2e4c:	ea f7       	brpl	.-6      	; 0x2e48 <find_bitmap+0xb6>
    2e4e:	2f 2f       	mov	r18, r31
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
    2e50:	a9 85       	ldd	r26, Y+9	; 0x09
    2e52:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e54:	97 96       	adiw	r26, 0x27	; 39
    2e56:	4d 91       	ld	r20, X+
    2e58:	5d 91       	ld	r21, X+
    2e5a:	6d 91       	ld	r22, X+
    2e5c:	7c 91       	ld	r23, X
    2e5e:	9a 97       	sbiw	r26, 0x2a	; 42
    2e60:	42 50       	subi	r20, 0x02	; 2
    2e62:	51 09       	sbc	r21, r1
    2e64:	61 09       	sbc	r22, r1
    2e66:	71 09       	sbc	r23, r1
    2e68:	4b 87       	std	Y+11, r20	; 0x0b
    2e6a:	5c 87       	std	Y+12, r21	; 0x0c
    2e6c:	6d 87       	std	Y+13, r22	; 0x0d
    2e6e:	7e 87       	std	Y+14, r23	; 0x0e
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
    2e70:	e9 85       	ldd	r30, Y+9	; 0x09
    2e72:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e74:	e8 0f       	add	r30, r24
    2e76:	f9 1f       	adc	r31, r25
    2e78:	e9 5b       	subi	r30, 0xB9	; 185
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	30 81       	ld	r19, Z
    2e7e:	32 23       	and	r19, r18
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
    2e80:	bf ef       	ldi	r27, 0xFF	; 255
    2e82:	cb 1a       	sub	r12, r27
    2e84:	db 0a       	sbc	r13, r27
    2e86:	eb 0a       	sbc	r14, r27
    2e88:	fb 0a       	sbc	r15, r27
    2e8a:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e8c:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e8e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e90:	7e 85       	ldd	r23, Y+14	; 0x0e
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
    2e92:	22 0f       	add	r18, r18
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
    2e94:	c4 16       	cp	r12, r20
    2e96:	d5 06       	cpc	r13, r21
    2e98:	e6 06       	cpc	r14, r22
    2e9a:	f7 06       	cpc	r15, r23
    2e9c:	30 f0       	brcs	.+12     	; 0x2eaa <find_bitmap+0x118>
					val = 0; bm = 0; i = SS(fs);
    2e9e:	c1 2c       	mov	r12, r1
    2ea0:	d1 2c       	mov	r13, r1
    2ea2:	76 01       	movw	r14, r12
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	92 e0       	ldi	r25, 0x02	; 2
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
				if (bv == 0) {	/* Is it a free cluster? */
    2eaa:	31 11       	cpse	r19, r1
    2eac:	22 c0       	rjmp	.+68     	; 0x2ef2 <find_bitmap+0x160>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
    2eae:	5f ef       	ldi	r21, 0xFF	; 255
    2eb0:	45 1a       	sub	r4, r21
    2eb2:	55 0a       	sbc	r5, r21
    2eb4:	65 0a       	sbc	r6, r21
    2eb6:	75 0a       	sbc	r7, r21
    2eb8:	4d 81       	ldd	r20, Y+5	; 0x05
    2eba:	5e 81       	ldd	r21, Y+6	; 0x06
    2ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebe:	78 85       	ldd	r23, Y+8	; 0x08
    2ec0:	44 16       	cp	r4, r20
    2ec2:	55 06       	cpc	r5, r21
    2ec4:	66 06       	cpc	r6, r22
    2ec6:	77 06       	cpc	r7, r23
    2ec8:	d9 f4       	brne	.+54     	; 0x2f00 <find_bitmap+0x16e>
    2eca:	69 81       	ldd	r22, Y+1	; 0x01
    2ecc:	7a 81       	ldd	r23, Y+2	; 0x02
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	6e 5f       	subi	r22, 0xFE	; 254
    2ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eda:	69 83       	std	Y+1, r22	; 0x01
    2edc:	7a 83       	std	Y+2, r23	; 0x02
    2ede:	8b 83       	std	Y+3, r24	; 0x03
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
}
    2ee2:	69 81       	ldd	r22, Y+1	; 0x01
    2ee4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eea:	2e 96       	adiw	r28, 0x0e	; 14
    2eec:	e2 e1       	ldi	r30, 0x12	; 18
    2eee:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
    2ef2:	c9 82       	std	Y+1, r12	; 0x01
    2ef4:	da 82       	std	Y+2, r13	; 0x02
    2ef6:	eb 82       	std	Y+3, r14	; 0x03
    2ef8:	fc 82       	std	Y+4, r15	; 0x04
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
    2efa:	41 2c       	mov	r4, r1
    2efc:	51 2c       	mov	r5, r1
    2efe:	32 01       	movw	r6, r4
				if (val == clst) return 0;	/* All cluster scanned? */
    2f00:	8c 14       	cp	r8, r12
    2f02:	9d 04       	cpc	r9, r13
    2f04:	ae 04       	cpc	r10, r14
    2f06:	bf 04       	cpc	r11, r15
    2f08:	91 f0       	breq	.+36     	; 0x2f2e <find_bitmap+0x19c>
			} while (bm != 0);
    2f0a:	21 11       	cpse	r18, r1
    2f0c:	b1 cf       	rjmp	.-158    	; 0x2e70 <find_bitmap+0xde>
		} while (++i < SS(fs));
    2f0e:	01 96       	adiw	r24, 0x01	; 1
    2f10:	81 15       	cp	r24, r1
    2f12:	72 e0       	ldi	r23, 0x02	; 2
    2f14:	97 07       	cpc	r25, r23
    2f16:	08 f0       	brcs	.+2      	; 0x2f1a <find_bitmap+0x188>
    2f18:	6f cf       	rjmp	.-290    	; 0x2df8 <find_bitmap+0x66>
			bm = 1;
    2f1a:	21 e0       	ldi	r18, 0x01	; 1
    2f1c:	a9 cf       	rjmp	.-174    	; 0x2e70 <find_bitmap+0xde>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
    2f1e:	8f ef       	ldi	r24, 0xFF	; 255
    2f20:	9f ef       	ldi	r25, 0xFF	; 255
    2f22:	dc 01       	movw	r26, r24
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	ab 83       	std	Y+3, r26	; 0x03
    2f2a:	bc 83       	std	Y+4, r27	; 0x04
    2f2c:	da cf       	rjmp	.-76     	; 0x2ee2 <find_bitmap+0x150>
				if (val == clst) return 0;	/* All cluster scanned? */
    2f2e:	19 82       	std	Y+1, r1	; 0x01
    2f30:	1a 82       	std	Y+2, r1	; 0x02
    2f32:	1b 82       	std	Y+3, r1	; 0x03
    2f34:	1c 82       	std	Y+4, r1	; 0x04
    2f36:	d5 cf       	rjmp	.-86     	; 0x2ee2 <find_bitmap+0x150>

00002f38 <change_bitmap>:
{
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	e2 ea       	ldi	r30, 0xA2	; 162
    2f3e:	f7 e1       	ldi	r31, 0x17	; 23
    2f40:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    2f44:	6c 01       	movw	r12, r24
    2f46:	48 01       	movw	r8, r16
    2f48:	59 01       	movw	r10, r18
    2f4a:	17 01       	movw	r2, r14
	clst -= 2;	/* The first bit corresponds to cluster #2 */
    2f4c:	42 50       	subi	r20, 0x02	; 2
    2f4e:	51 09       	sbc	r21, r1
    2f50:	61 09       	sbc	r22, r1
    2f52:	71 09       	sbc	r23, r1
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
    2f54:	fc 01       	movw	r30, r24
    2f56:	ff 96       	adiw	r30, 0x3f	; 63
    2f58:	2a 01       	movw	r4, r20
    2f5a:	3b 01       	movw	r6, r22
    2f5c:	8c e0       	ldi	r24, 0x0C	; 12
    2f5e:	76 94       	lsr	r7
    2f60:	67 94       	ror	r6
    2f62:	57 94       	ror	r5
    2f64:	47 94       	ror	r4
    2f66:	8a 95       	dec	r24
    2f68:	d1 f7       	brne	.-12     	; 0x2f5e <change_bitmap+0x26>
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	a2 81       	ldd	r26, Z+2	; 0x02
    2f70:	b3 81       	ldd	r27, Z+3	; 0x03
    2f72:	48 0e       	add	r4, r24
    2f74:	59 1e       	adc	r5, r25
    2f76:	6a 1e       	adc	r6, r26
    2f78:	7b 1e       	adc	r7, r27
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
    2f7a:	db 01       	movw	r26, r22
    2f7c:	ca 01       	movw	r24, r20
    2f7e:	23 e0       	ldi	r18, 0x03	; 3
    2f80:	b6 95       	lsr	r27
    2f82:	a7 95       	ror	r26
    2f84:	97 95       	ror	r25
    2f86:	87 95       	ror	r24
    2f88:	2a 95       	dec	r18
    2f8a:	d1 f7       	brne	.-12     	; 0x2f80 <change_bitmap+0x48>
    2f8c:	91 70       	andi	r25, 0x01	; 1
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
    2f8e:	47 70       	andi	r20, 0x07	; 7
    2f90:	55 27       	eor	r21, r21
    2f92:	c1 e0       	ldi	r28, 0x01	; 1
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <change_bitmap+0x60>
    2f96:	cc 0f       	add	r28, r28
    2f98:	4a 95       	dec	r20
    2f9a:	ea f7       	brpl	.-6      	; 0x2f96 <change_bitmap+0x5e>
				fs->wflag = 1;
    2f9c:	d1 e0       	ldi	r29, 0x01	; 1
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
    2f9e:	a2 01       	movw	r20, r4
    2fa0:	b3 01       	movw	r22, r6
    2fa2:	8c 01       	movw	r16, r24
    2fa4:	2f ef       	ldi	r18, 0xFF	; 255
    2fa6:	42 1a       	sub	r4, r18
    2fa8:	52 0a       	sbc	r5, r18
    2faa:	62 0a       	sbc	r6, r18
    2fac:	72 0a       	sbc	r7, r18
    2fae:	c6 01       	movw	r24, r12
    2fb0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	39 f5       	brne	.+78     	; 0x3006 <change_bitmap+0xce>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
    2fb8:	a6 01       	movw	r20, r12
    2fba:	40 0f       	add	r20, r16
    2fbc:	51 1f       	adc	r21, r17
    2fbe:	fa 01       	movw	r30, r20
    2fc0:	e9 5b       	subi	r30, 0xB9	; 185
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	60 81       	ld	r22, Z
    2fc6:	76 2f       	mov	r23, r22
    2fc8:	7c 23       	and	r23, r28
    2fca:	21 e0       	ldi	r18, 0x01	; 1
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <change_bitmap+0x9a>
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	22 15       	cp	r18, r2
    2fd4:	33 05       	cpc	r19, r3
    2fd6:	f1 f0       	breq	.+60     	; 0x3014 <change_bitmap+0xdc>
				fs->win[i] ^= bm;	/* Flip the bit */
    2fd8:	49 5b       	subi	r20, 0xB9	; 185
    2fda:	5f 4f       	sbci	r21, 0xFF	; 255
    2fdc:	6c 27       	eor	r22, r28
    2fde:	fa 01       	movw	r30, r20
    2fe0:	60 83       	st	Z, r22
				fs->wflag = 1;
    2fe2:	f6 01       	movw	r30, r12
    2fe4:	d3 83       	std	Z+3, r29	; 0x03
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
    2fe6:	f1 e0       	ldi	r31, 0x01	; 1
    2fe8:	8f 1a       	sub	r8, r31
    2fea:	91 08       	sbc	r9, r1
    2fec:	a1 08       	sbc	r10, r1
    2fee:	b1 08       	sbc	r11, r1
    2ff0:	61 f0       	breq	.+24     	; 0x300a <change_bitmap+0xd2>
			} while (bm <<= 1);		/* Next bit */
    2ff2:	cc 0f       	add	r28, r28
    2ff4:	09 f7       	brne	.-62     	; 0x2fb8 <change_bitmap+0x80>
		} while (++i < SS(fs));		/* Next byte */
    2ff6:	0f 5f       	subi	r16, 0xFF	; 255
    2ff8:	1f 4f       	sbci	r17, 0xFF	; 255
			bm = 1;
    2ffa:	c1 e0       	ldi	r28, 0x01	; 1
		} while (++i < SS(fs));		/* Next byte */
    2ffc:	01 15       	cp	r16, r1
    2ffe:	22 e0       	ldi	r18, 0x02	; 2
    3000:	12 07       	cpc	r17, r18
    3002:	d1 f6       	brne	.-76     	; 0x2fb8 <change_bitmap+0x80>
    3004:	cc cf       	rjmp	.-104    	; 0x2f9e <change_bitmap+0x66>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
}
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	e2 e1       	ldi	r30, 0x12	; 18
    3010:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
    3014:	82 e0       	ldi	r24, 0x02	; 2
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	f8 cf       	rjmp	.-16     	; 0x300a <change_bitmap+0xd2>

0000301a <get_fat>:
{
    301a:	a7 e0       	ldi	r26, 0x07	; 7
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e3 e1       	ldi	r30, 0x13	; 19
    3020:	f8 e1       	ldi	r31, 0x18	; 24
    3022:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    3026:	fc 01       	movw	r30, r24
    3028:	6a 01       	movw	r12, r20
    302a:	7b 01       	movw	r14, r22
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    302c:	22 e0       	ldi	r18, 0x02	; 2
    302e:	c2 16       	cp	r12, r18
    3030:	d1 04       	cpc	r13, r1
    3032:	e1 04       	cpc	r14, r1
    3034:	f1 04       	cpc	r15, r1
    3036:	d8 f0       	brcs	.+54     	; 0x306e <get_fat+0x54>
	FATFS *fs = obj->fs;
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    3040:	dc 01       	movw	r26, r24
    3042:	97 96       	adiw	r26, 0x27	; 39
    3044:	4d 91       	ld	r20, X+
    3046:	5d 91       	ld	r21, X+
    3048:	6d 91       	ld	r22, X+
    304a:	7c 91       	ld	r23, X
    304c:	9a 97       	sbiw	r26, 0x2a	; 42
    304e:	c4 16       	cp	r12, r20
    3050:	d5 06       	cpc	r13, r21
    3052:	e6 06       	cpc	r14, r22
    3054:	f7 06       	cpc	r15, r23
    3056:	58 f4       	brcc	.+22     	; 0x306e <get_fat+0x54>
		switch (fs->fs_type) {
    3058:	8c 91       	ld	r24, X
    305a:	83 30       	cpi	r24, 0x03	; 3
    305c:	09 f4       	brne	.+2      	; 0x3060 <get_fat+0x46>
    305e:	f3 c0       	rjmp	.+486    	; 0x3246 <get_fat+0x22c>
    3060:	58 f4       	brcc	.+22     	; 0x3078 <get_fat+0x5e>
    3062:	81 30       	cpi	r24, 0x01	; 1
    3064:	09 f4       	brne	.+2      	; 0x3068 <get_fat+0x4e>
    3066:	73 c0       	rjmp	.+230    	; 0x314e <get_fat+0x134>
    3068:	82 30       	cpi	r24, 0x02	; 2
    306a:	09 f4       	brne	.+2      	; 0x306e <get_fat+0x54>
    306c:	c8 c0       	rjmp	.+400    	; 0x31fe <get_fat+0x1e4>
		val = 1;	/* Internal error */
    306e:	61 e0       	ldi	r22, 0x01	; 1
    3070:	70 e0       	ldi	r23, 0x00	; 0
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	86 c0       	rjmp	.+268    	; 0x3184 <get_fat+0x16a>
		switch (fs->fs_type) {
    3078:	84 30       	cpi	r24, 0x04	; 4
    307a:	c9 f7       	brne	.-14     	; 0x306e <get_fat+0x54>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
    307c:	32 84       	ldd	r3, Z+10	; 0x0a
    307e:	43 84       	ldd	r4, Z+11	; 0x0b
    3080:	54 84       	ldd	r5, Z+12	; 0x0c
    3082:	65 84       	ldd	r6, Z+13	; 0x0d
    3084:	76 84       	ldd	r7, Z+14	; 0x0e
    3086:	07 85       	ldd	r16, Z+15	; 0x0f
    3088:	10 89       	ldd	r17, Z+16	; 0x10
    308a:	b1 89       	ldd	r27, Z+17	; 0x11
    308c:	bf 83       	std	Y+7, r27	; 0x07
    308e:	23 2d       	mov	r18, r3
    3090:	34 2d       	mov	r19, r4
    3092:	45 2d       	mov	r20, r5
    3094:	56 2d       	mov	r21, r6
    3096:	67 2d       	mov	r22, r7
    3098:	70 2f       	mov	r23, r16
    309a:	81 2f       	mov	r24, r17
    309c:	9b 2f       	mov	r25, r27
    309e:	a0 e0       	ldi	r26, 0x00	; 0
    30a0:	25 80       	ldd	r2, Z+5	; 0x05
    30a2:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    30a6:	41 f0       	breq	.+16     	; 0x30b8 <get_fat+0x9e>
    30a8:	46 81       	ldd	r20, Z+6	; 0x06
    30aa:	57 81       	ldd	r21, Z+7	; 0x07
    30ac:	60 85       	ldd	r22, Z+8	; 0x08
    30ae:	71 85       	ldd	r23, Z+9	; 0x09
    30b0:	45 2b       	or	r20, r21
    30b2:	46 2b       	or	r20, r22
    30b4:	47 2b       	or	r20, r23
    30b6:	11 f4       	brne	.+4      	; 0x30bc <get_fat+0xa2>
    30b8:	21 10       	cpse	r2, r1
    30ba:	d9 cf       	rjmp	.-78     	; 0x306e <get_fat+0x54>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
    30bc:	46 81       	ldd	r20, Z+6	; 0x06
    30be:	57 81       	ldd	r21, Z+7	; 0x07
    30c0:	60 85       	ldd	r22, Z+8	; 0x08
    30c2:	71 85       	ldd	r23, Z+9	; 0x09
    30c4:	46 01       	movw	r8, r12
    30c6:	57 01       	movw	r10, r14
    30c8:	84 1a       	sub	r8, r20
    30ca:	95 0a       	sbc	r9, r21
    30cc:	a6 0a       	sbc	r10, r22
    30ce:	b7 0a       	sbc	r11, r23
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
    30d0:	ad 81       	ldd	r26, Y+5	; 0x05
    30d2:	be 81       	ldd	r27, Y+6	; 0x06
    30d4:	19 96       	adiw	r26, 0x09	; 9
    30d6:	0d 90       	ld	r0, X+
    30d8:	bc 91       	ld	r27, X
    30da:	a0 2d       	mov	r26, r0
    30dc:	ba 83       	std	Y+2, r27	; 0x02
    30de:	a9 83       	std	Y+1, r26	; 0x01
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
    30e0:	b2 e0       	ldi	r27, 0x02	; 2
    30e2:	2b 12       	cpse	r2, r27
    30e4:	db c0       	rjmp	.+438    	; 0x329c <get_fat+0x282>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
    30e6:	23 2d       	mov	r18, r3
    30e8:	34 2d       	mov	r19, r4
    30ea:	45 2d       	mov	r20, r5
    30ec:	56 2d       	mov	r21, r6
    30ee:	67 2d       	mov	r22, r7
    30f0:	70 2f       	mov	r23, r16
    30f2:	81 2f       	mov	r24, r17
    30f4:	9f 81       	ldd	r25, Y+7	; 0x07
    30f6:	af ef       	ldi	r26, 0xFF	; 255
    30f8:	0e 94 91 5a 	call	0xb522	; 0xb522 <__adddi3_s8>
    30fc:	09 e0       	ldi	r16, 0x09	; 9
    30fe:	0e 94 6d 5a 	call	0xb4da	; 0xb4da <__lshrdi3>
    3102:	72 2f       	mov	r23, r18
    3104:	63 2f       	mov	r22, r19
    3106:	94 2f       	mov	r25, r20
    3108:	85 2f       	mov	r24, r21
    310a:	e9 81       	ldd	r30, Y+1	; 0x01
    310c:	fa 81       	ldd	r31, Y+2	; 0x02
    310e:	9f 01       	movw	r18, r30
    3110:	50 e0       	ldi	r21, 0x00	; 0
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	79 83       	std	Y+1, r23	; 0x01
    3116:	6a 83       	std	Y+2, r22	; 0x02
    3118:	9b 83       	std	Y+3, r25	; 0x03
    311a:	8c 83       	std	Y+4, r24	; 0x04
    311c:	69 81       	ldd	r22, Y+1	; 0x01
    311e:	7a 81       	ldd	r23, Y+2	; 0x02
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	0e 94 80 59 	call	0xb300	; 0xb300 <__udivmodsi4>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
    3128:	28 15       	cp	r18, r8
    312a:	39 05       	cpc	r19, r9
    312c:	4a 05       	cpc	r20, r10
    312e:	5b 05       	cpc	r21, r11
    3130:	08 f4       	brcc	.+2      	; 0x3134 <get_fat+0x11a>
    3132:	9d cf       	rjmp	.-198    	; 0x306e <get_fat+0x54>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
    3134:	82 16       	cp	r8, r18
    3136:	93 06       	cpc	r9, r19
    3138:	a4 06       	cpc	r10, r20
    313a:	b5 06       	cpc	r11, r21
    313c:	09 f4       	brne	.+2      	; 0x3140 <get_fat+0x126>
    313e:	ee c0       	rjmp	.+476    	; 0x331c <get_fat+0x302>
    3140:	c7 01       	movw	r24, r14
    3142:	b6 01       	movw	r22, r12
    3144:	6f 5f       	subi	r22, 0xFF	; 255
    3146:	7f 4f       	sbci	r23, 0xFF	; 255
    3148:	8f 4f       	sbci	r24, 0xFF	; 255
    314a:	9f 4f       	sbci	r25, 0xFF	; 255
    314c:	1b c0       	rjmp	.+54     	; 0x3184 <get_fat+0x16a>
			bc = (UINT)clst; bc += bc / 2;
    314e:	86 01       	movw	r16, r12
    3150:	16 95       	lsr	r17
    3152:	07 95       	ror	r16
    3154:	0c 0d       	add	r16, r12
    3156:	1d 1d       	adc	r17, r13
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    3158:	c8 01       	movw	r24, r16
    315a:	89 2f       	mov	r24, r25
    315c:	99 27       	eor	r25, r25
    315e:	86 95       	lsr	r24
    3160:	ed 81       	ldd	r30, Y+5	; 0x05
    3162:	fe 81       	ldd	r31, Y+6	; 0x06
    3164:	43 a9       	ldd	r20, Z+51	; 0x33
    3166:	54 a9       	ldd	r21, Z+52	; 0x34
    3168:	65 a9       	ldd	r22, Z+53	; 0x35
    316a:	76 a9       	ldd	r23, Z+54	; 0x36
    316c:	48 0f       	add	r20, r24
    316e:	59 1f       	adc	r21, r25
    3170:	61 1d       	adc	r22, r1
    3172:	71 1d       	adc	r23, r1
    3174:	cf 01       	movw	r24, r30
    3176:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    317a:	89 2b       	or	r24, r25
    317c:	39 f0       	breq	.+14     	; 0x318c <get_fat+0x172>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    317e:	6f ef       	ldi	r22, 0xFF	; 255
    3180:	7f ef       	ldi	r23, 0xFF	; 255
    3182:	cb 01       	movw	r24, r22
}
    3184:	27 96       	adiw	r28, 0x07	; 7
    3186:	e2 e1       	ldi	r30, 0x12	; 18
    3188:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    318c:	58 01       	movw	r10, r16
    318e:	ff ef       	ldi	r31, 0xFF	; 255
    3190:	af 1a       	sub	r10, r31
    3192:	bf 0a       	sbc	r11, r31
    3194:	f8 01       	movw	r30, r16
    3196:	f1 70       	andi	r31, 0x01	; 1
    3198:	8d 81       	ldd	r24, Y+5	; 0x05
    319a:	9e 81       	ldd	r25, Y+6	; 0x06
    319c:	e8 0f       	add	r30, r24
    319e:	f9 1f       	adc	r31, r25
    31a0:	e9 5b       	subi	r30, 0xB9	; 185
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	10 81       	ld	r17, Z
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    31a6:	c5 01       	movw	r24, r10
    31a8:	89 2f       	mov	r24, r25
    31aa:	99 27       	eor	r25, r25
    31ac:	86 95       	lsr	r24
    31ae:	ad 81       	ldd	r26, Y+5	; 0x05
    31b0:	be 81       	ldd	r27, Y+6	; 0x06
    31b2:	d3 96       	adiw	r26, 0x33	; 51
    31b4:	4d 91       	ld	r20, X+
    31b6:	5d 91       	ld	r21, X+
    31b8:	6d 91       	ld	r22, X+
    31ba:	7c 91       	ld	r23, X
    31bc:	d6 97       	sbiw	r26, 0x36	; 54
    31be:	48 0f       	add	r20, r24
    31c0:	59 1f       	adc	r21, r25
    31c2:	61 1d       	adc	r22, r1
    31c4:	71 1d       	adc	r23, r1
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    31cc:	89 2b       	or	r24, r25
    31ce:	b9 f6       	brne	.-82     	; 0x317e <get_fat+0x164>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    31d0:	b1 e0       	ldi	r27, 0x01	; 1
    31d2:	bb 22       	and	r11, r27
    31d4:	ed 81       	ldd	r30, Y+5	; 0x05
    31d6:	fe 81       	ldd	r31, Y+6	; 0x06
    31d8:	ea 0d       	add	r30, r10
    31da:	fb 1d       	adc	r31, r11
    31dc:	e9 5b       	subi	r30, 0xB9	; 185
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 81       	ld	r24, Z
    31e2:	78 2f       	mov	r23, r24
    31e4:	61 2f       	mov	r22, r17
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    31e6:	c0 fe       	sbrs	r12, 0
    31e8:	08 c0       	rjmp	.+16     	; 0x31fa <get_fat+0x1e0>
    31ea:	54 e0       	ldi	r21, 0x04	; 4
    31ec:	76 95       	lsr	r23
    31ee:	67 95       	ror	r22
    31f0:	5a 95       	dec	r21
    31f2:	e1 f7       	brne	.-8      	; 0x31ec <get_fat+0x1d2>
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	c5 cf       	rjmp	.-118    	; 0x3184 <get_fat+0x16a>
    31fa:	7f 70       	andi	r23, 0x0F	; 15
    31fc:	fb cf       	rjmp	.-10     	; 0x31f4 <get_fat+0x1da>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    31fe:	77 27       	eor	r23, r23
    3200:	6f 2d       	mov	r22, r15
    3202:	5e 2d       	mov	r21, r14
    3204:	4d 2d       	mov	r20, r13
    3206:	ed 81       	ldd	r30, Y+5	; 0x05
    3208:	fe 81       	ldd	r31, Y+6	; 0x06
    320a:	83 a9       	ldd	r24, Z+51	; 0x33
    320c:	94 a9       	ldd	r25, Z+52	; 0x34
    320e:	a5 a9       	ldd	r26, Z+53	; 0x35
    3210:	b6 a9       	ldd	r27, Z+54	; 0x36
    3212:	48 0f       	add	r20, r24
    3214:	59 1f       	adc	r21, r25
    3216:	6a 1f       	adc	r22, r26
    3218:	7b 1f       	adc	r23, r27
    321a:	cf 01       	movw	r24, r30
    321c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    3220:	89 2b       	or	r24, r25
    3222:	09 f0       	breq	.+2      	; 0x3226 <get_fat+0x20c>
    3224:	ac cf       	rjmp	.-168    	; 0x317e <get_fat+0x164>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    3226:	cc 0c       	add	r12, r12
    3228:	dd 1c       	adc	r13, r13
    322a:	e8 94       	clt
    322c:	c0 f8       	bld	r12, 0
    322e:	f1 e0       	ldi	r31, 0x01	; 1
    3230:	df 22       	and	r13, r31
	rv = rv << 8 | ptr[0];
    3232:	8d 81       	ldd	r24, Y+5	; 0x05
    3234:	9e 81       	ldd	r25, Y+6	; 0x06
    3236:	8c 0d       	add	r24, r12
    3238:	9d 1d       	adc	r25, r13
    323a:	89 5b       	subi	r24, 0xB9	; 185
    323c:	9f 4f       	sbci	r25, 0xFF	; 255
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    323e:	dc 01       	movw	r26, r24
    3240:	6d 91       	ld	r22, X+
    3242:	7c 91       	ld	r23, X
    3244:	d7 cf       	rjmp	.-82     	; 0x31f4 <get_fat+0x1da>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    3246:	ed 81       	ldd	r30, Y+5	; 0x05
    3248:	fe 81       	ldd	r31, Y+6	; 0x06
    324a:	83 a9       	ldd	r24, Z+51	; 0x33
    324c:	94 a9       	ldd	r25, Z+52	; 0x34
    324e:	a5 a9       	ldd	r26, Z+53	; 0x35
    3250:	b6 a9       	ldd	r27, Z+54	; 0x36
    3252:	b7 01       	movw	r22, r14
    3254:	a6 01       	movw	r20, r12
    3256:	27 e0       	ldi	r18, 0x07	; 7
    3258:	76 95       	lsr	r23
    325a:	67 95       	ror	r22
    325c:	57 95       	ror	r21
    325e:	47 95       	ror	r20
    3260:	2a 95       	dec	r18
    3262:	d1 f7       	brne	.-12     	; 0x3258 <get_fat+0x23e>
    3264:	48 0f       	add	r20, r24
    3266:	59 1f       	adc	r21, r25
    3268:	6a 1f       	adc	r22, r26
    326a:	7b 1f       	adc	r23, r27
    326c:	cf 01       	movw	r24, r30
    326e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    3272:	89 2b       	or	r24, r25
    3274:	09 f0       	breq	.+2      	; 0x3278 <get_fat+0x25e>
    3276:	83 cf       	rjmp	.-250    	; 0x317e <get_fat+0x164>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	89 5b       	subi	r24, 0xB9	; 185
    327e:	9f 4f       	sbci	r25, 0xFF	; 255
    3280:	cc 0c       	add	r12, r12
    3282:	dd 1c       	adc	r13, r13
    3284:	cc 0c       	add	r12, r12
    3286:	dd 1c       	adc	r13, r13
    3288:	fc ef       	ldi	r31, 0xFC	; 252
    328a:	cf 22       	and	r12, r31
    328c:	f1 e0       	ldi	r31, 0x01	; 1
    328e:	df 22       	and	r13, r31
    3290:	8c 0d       	add	r24, r12
    3292:	9d 1d       	adc	r25, r13
    3294:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    3298:	9f 70       	andi	r25, 0x0F	; 15
			break;
    329a:	74 cf       	rjmp	.-280    	; 0x3184 <get_fat+0x16a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
    329c:	23 e0       	ldi	r18, 0x03	; 3
    329e:	22 12       	cpse	r2, r18
    32a0:	0a c0       	rjmp	.+20     	; 0x32b6 <get_fat+0x29c>
    32a2:	82 89       	ldd	r24, Z+18	; 0x12
    32a4:	93 89       	ldd	r25, Z+19	; 0x13
    32a6:	a4 89       	ldd	r26, Z+20	; 0x14
    32a8:	b5 89       	ldd	r27, Z+21	; 0x15
    32aa:	88 16       	cp	r8, r24
    32ac:	99 06       	cpc	r9, r25
    32ae:	aa 06       	cpc	r10, r26
    32b0:	bb 06       	cpc	r11, r27
    32b2:	08 f4       	brcc	.+2      	; 0x32b6 <get_fat+0x29c>
    32b4:	45 cf       	rjmp	.-374    	; 0x3140 <get_fat+0x126>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
    32b6:	86 89       	ldd	r24, Z+22	; 0x16
    32b8:	97 89       	ldd	r25, Z+23	; 0x17
    32ba:	a0 8d       	ldd	r26, Z+24	; 0x18
    32bc:	b1 8d       	ldd	r27, Z+25	; 0x19
    32be:	89 2b       	or	r24, r25
    32c0:	8a 2b       	or	r24, r26
    32c2:	8b 2b       	or	r24, r27
    32c4:	59 f5       	brne	.+86     	; 0x331c <get_fat+0x302>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    32c6:	ed 81       	ldd	r30, Y+5	; 0x05
    32c8:	fe 81       	ldd	r31, Y+6	; 0x06
    32ca:	83 a9       	ldd	r24, Z+51	; 0x33
    32cc:	94 a9       	ldd	r25, Z+52	; 0x34
    32ce:	a5 a9       	ldd	r26, Z+53	; 0x35
    32d0:	b6 a9       	ldd	r27, Z+54	; 0x36
    32d2:	b7 01       	movw	r22, r14
    32d4:	a6 01       	movw	r20, r12
    32d6:	37 e0       	ldi	r19, 0x07	; 7
    32d8:	76 95       	lsr	r23
    32da:	67 95       	ror	r22
    32dc:	57 95       	ror	r21
    32de:	47 95       	ror	r20
    32e0:	3a 95       	dec	r19
    32e2:	d1 f7       	brne	.-12     	; 0x32d8 <get_fat+0x2be>
    32e4:	48 0f       	add	r20, r24
    32e6:	59 1f       	adc	r21, r25
    32e8:	6a 1f       	adc	r22, r26
    32ea:	7b 1f       	adc	r23, r27
    32ec:	cf 01       	movw	r24, r30
    32ee:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    32f2:	89 2b       	or	r24, r25
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <get_fat+0x2de>
    32f6:	43 cf       	rjmp	.-378    	; 0x317e <get_fat+0x164>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	89 5b       	subi	r24, 0xB9	; 185
    32fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3300:	cc 0c       	add	r12, r12
    3302:	dd 1c       	adc	r13, r13
    3304:	cc 0c       	add	r12, r12
    3306:	dd 1c       	adc	r13, r13
    3308:	fc ef       	ldi	r31, 0xFC	; 252
    330a:	cf 22       	and	r12, r31
    330c:	f1 e0       	ldi	r31, 0x01	; 1
    330e:	df 22       	and	r13, r31
    3310:	8c 0d       	add	r24, r12
    3312:	9d 1d       	adc	r25, r13
    3314:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    3318:	9f 77       	andi	r25, 0x7F	; 127
    331a:	34 cf       	rjmp	.-408    	; 0x3184 <get_fat+0x16a>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
    331c:	6f ef       	ldi	r22, 0xFF	; 255
    331e:	7f ef       	ldi	r23, 0xFF	; 255
    3320:	8f ef       	ldi	r24, 0xFF	; 255
    3322:	9f e7       	ldi	r25, 0x7F	; 127
	return val;
    3324:	2f cf       	rjmp	.-418    	; 0x3184 <get_fat+0x16a>

00003326 <dir_sdi>:
{
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	a0 e0       	ldi	r26, 0x00	; 0
    332a:	e9 e9       	ldi	r30, 0x99	; 153
    332c:	f9 e1       	ldi	r31, 0x19	; 25
    332e:	0c 94 36 5a 	jmp	0xb46c	; 0xb46c <__prologue_saves__+0x4>
    3332:	ec 01       	movw	r28, r24
    3334:	6a 01       	movw	r12, r20
    3336:	7b 01       	movw	r14, r22
	FATFS *fs = dp->obj.fs;
    3338:	08 81       	ld	r16, Y
    333a:	19 81       	ldd	r17, Y+1	; 0x01
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    333c:	d8 01       	movw	r26, r16
    333e:	8c 91       	ld	r24, X
    3340:	40 e0       	ldi	r20, 0x00	; 0
    3342:	50 e0       	ldi	r21, 0x00	; 0
    3344:	60 e2       	ldi	r22, 0x20	; 32
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	84 30       	cpi	r24, 0x04	; 4
    334a:	21 f4       	brne	.+8      	; 0x3354 <dir_sdi+0x2e>
    334c:	40 e0       	ldi	r20, 0x00	; 0
    334e:	50 e0       	ldi	r21, 0x00	; 0
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	70 e1       	ldi	r23, 0x10	; 16
    3354:	c4 16       	cp	r12, r20
    3356:	d5 06       	cpc	r13, r21
    3358:	e6 06       	cpc	r14, r22
    335a:	f7 06       	cpc	r15, r23
    335c:	38 f0       	brcs	.+14     	; 0x336c <dir_sdi+0x46>
		return FR_INT_ERR;
    335e:	82 e0       	ldi	r24, 0x02	; 2
    3360:	90 e0       	ldi	r25, 0x00	; 0
}
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	e0 e1       	ldi	r30, 0x10	; 16
    3368:	0c 94 52 5a 	jmp	0xb4a4	; 0xb4a4 <__epilogue_restores__+0x4>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    336c:	b7 01       	movw	r22, r14
    336e:	a6 01       	movw	r20, r12
    3370:	4f 71       	andi	r20, 0x1F	; 31
    3372:	55 27       	eor	r21, r21
    3374:	66 27       	eor	r22, r22
    3376:	77 27       	eor	r23, r23
    3378:	45 2b       	or	r20, r21
    337a:	46 2b       	or	r20, r22
    337c:	47 2b       	or	r20, r23
    337e:	79 f7       	brne	.-34     	; 0x335e <dir_sdi+0x38>
	dp->dptr = ofs;				/* Set current offset */
    3380:	ce a2       	std	Y+38, r12	; 0x26
    3382:	df a2       	std	Y+39, r13	; 0x27
    3384:	e8 a6       	std	Y+40, r14	; 0x28
    3386:	f9 a6       	std	Y+41, r15	; 0x29
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    3388:	8e 80       	ldd	r8, Y+6	; 0x06
    338a:	9f 80       	ldd	r9, Y+7	; 0x07
    338c:	a8 84       	ldd	r10, Y+8	; 0x08
    338e:	b9 84       	ldd	r11, Y+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    3390:	81 14       	cp	r8, r1
    3392:	91 04       	cpc	r9, r1
    3394:	a1 04       	cpc	r10, r1
    3396:	b1 04       	cpc	r11, r1
    3398:	09 f0       	breq	.+2      	; 0x339c <dir_sdi+0x76>
    339a:	56 c0       	rjmp	.+172    	; 0x3448 <dir_sdi+0x122>
    339c:	83 30       	cpi	r24, 0x03	; 3
    339e:	08 f0       	brcs	.+2      	; 0x33a2 <dir_sdi+0x7c>
    33a0:	46 c0       	rjmp	.+140    	; 0x342e <dir_sdi+0x108>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
    33a2:	f8 01       	movw	r30, r16
    33a4:	87 81       	ldd	r24, Z+7	; 0x07
    33a6:	90 85       	ldd	r25, Z+8	; 0x08
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	a0 e0       	ldi	r26, 0x00	; 0
    33ac:	b7 01       	movw	r22, r14
    33ae:	a6 01       	movw	r20, r12
    33b0:	e5 e0       	ldi	r30, 0x05	; 5
    33b2:	76 95       	lsr	r23
    33b4:	67 95       	ror	r22
    33b6:	57 95       	ror	r21
    33b8:	47 95       	ror	r20
    33ba:	ea 95       	dec	r30
    33bc:	d1 f7       	brne	.-12     	; 0x33b2 <dir_sdi+0x8c>
    33be:	48 17       	cp	r20, r24
    33c0:	59 07       	cpc	r21, r25
    33c2:	6a 07       	cpc	r22, r26
    33c4:	7b 07       	cpc	r23, r27
    33c6:	58 f6       	brcc	.-106    	; 0x335e <dir_sdi+0x38>
		dp->sect = fs->dirbase;
    33c8:	f8 01       	movw	r30, r16
    33ca:	87 a9       	ldd	r24, Z+55	; 0x37
    33cc:	90 ad       	ldd	r25, Z+56	; 0x38
    33ce:	a1 ad       	ldd	r26, Z+57	; 0x39
    33d0:	b2 ad       	ldd	r27, Z+58	; 0x3a
    33d2:	8e a7       	std	Y+46, r24	; 0x2e
    33d4:	9f a7       	std	Y+47, r25	; 0x2f
    33d6:	a8 ab       	std	Y+48, r26	; 0x30
    33d8:	b9 ab       	std	Y+49, r27	; 0x31
	dp->clust = clst;					/* Current cluster# */
    33da:	8a a6       	std	Y+42, r8	; 0x2a
    33dc:	9b a6       	std	Y+43, r9	; 0x2b
    33de:	ac a6       	std	Y+44, r10	; 0x2c
    33e0:	bd a6       	std	Y+45, r11	; 0x2d
	if (dp->sect == 0) return FR_INT_ERR;
    33e2:	4e a5       	ldd	r20, Y+46	; 0x2e
    33e4:	5f a5       	ldd	r21, Y+47	; 0x2f
    33e6:	68 a9       	ldd	r22, Y+48	; 0x30
    33e8:	79 a9       	ldd	r23, Y+49	; 0x31
    33ea:	41 15       	cp	r20, r1
    33ec:	51 05       	cpc	r21, r1
    33ee:	61 05       	cpc	r22, r1
    33f0:	71 05       	cpc	r23, r1
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <dir_sdi+0xd0>
    33f4:	b4 cf       	rjmp	.-152    	; 0x335e <dir_sdi+0x38>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
    33f6:	d7 01       	movw	r26, r14
    33f8:	c6 01       	movw	r24, r12
    33fa:	29 e0       	ldi	r18, 0x09	; 9
    33fc:	b6 95       	lsr	r27
    33fe:	a7 95       	ror	r26
    3400:	97 95       	ror	r25
    3402:	87 95       	ror	r24
    3404:	2a 95       	dec	r18
    3406:	d1 f7       	brne	.-12     	; 0x33fc <dir_sdi+0xd6>
    3408:	84 0f       	add	r24, r20
    340a:	95 1f       	adc	r25, r21
    340c:	a6 1f       	adc	r26, r22
    340e:	b7 1f       	adc	r27, r23
    3410:	8e a7       	std	Y+46, r24	; 0x2e
    3412:	9f a7       	std	Y+47, r25	; 0x2f
    3414:	a8 ab       	std	Y+48, r26	; 0x30
    3416:	b9 ab       	std	Y+49, r27	; 0x31
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    3418:	09 5b       	subi	r16, 0xB9	; 185
    341a:	1f 4f       	sbci	r17, 0xFF	; 255
    341c:	f1 e0       	ldi	r31, 0x01	; 1
    341e:	df 22       	and	r13, r31
    3420:	c0 0e       	add	r12, r16
    3422:	d1 1e       	adc	r13, r17
    3424:	db aa       	std	Y+51, r13	; 0x33
    3426:	ca aa       	std	Y+50, r12	; 0x32
	return FR_OK;
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	9a cf       	rjmp	.-204    	; 0x3362 <dir_sdi+0x3c>
		clst = (DWORD)fs->dirbase;
    342e:	f8 01       	movw	r30, r16
    3430:	87 a9       	ldd	r24, Z+55	; 0x37
    3432:	90 ad       	ldd	r25, Z+56	; 0x38
    3434:	a1 ad       	ldd	r26, Z+57	; 0x39
    3436:	b2 ad       	ldd	r27, Z+58	; 0x3a
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
    3438:	1d 82       	std	Y+5, r1	; 0x05
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	a1 05       	cpc	r26, r1
    343e:	b1 05       	cpc	r27, r1
    3440:	09 f4       	brne	.+2      	; 0x3444 <dir_sdi+0x11e>
    3442:	af cf       	rjmp	.-162    	; 0x33a2 <dir_sdi+0x7c>
    3444:	4c 01       	movw	r8, r24
    3446:	5d 01       	movw	r10, r26
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    3448:	d8 01       	movw	r26, r16
    344a:	19 96       	adiw	r26, 0x09	; 9
    344c:	4d 90       	ld	r4, X+
    344e:	5c 90       	ld	r5, X
    3450:	71 2c       	mov	r7, r1
    3452:	61 2c       	mov	r6, r1
    3454:	39 e0       	ldi	r19, 0x09	; 9
    3456:	44 0c       	add	r4, r4
    3458:	55 1c       	adc	r5, r5
    345a:	66 1c       	adc	r6, r6
    345c:	77 1c       	adc	r7, r7
    345e:	3a 95       	dec	r19
    3460:	d1 f7       	brne	.-12     	; 0x3456 <dir_sdi+0x130>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    3462:	b5 01       	movw	r22, r10
    3464:	a4 01       	movw	r20, r8
		while (ofs >= csz) {				/* Follow cluster chain */
    3466:	c4 14       	cp	r12, r4
    3468:	d5 04       	cpc	r13, r5
    346a:	e6 04       	cpc	r14, r6
    346c:	f7 04       	cpc	r15, r7
    346e:	40 f4       	brcc	.+16     	; 0x3480 <dir_sdi+0x15a>
		dp->sect = clst2sect(fs, clst);
    3470:	c8 01       	movw	r24, r16
    3472:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    3476:	6e a7       	std	Y+46, r22	; 0x2e
    3478:	7f a7       	std	Y+47, r23	; 0x2f
    347a:	88 ab       	std	Y+48, r24	; 0x30
    347c:	99 ab       	std	Y+49, r25	; 0x31
    347e:	ad cf       	rjmp	.-166    	; 0x33da <dir_sdi+0xb4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    3480:	ce 01       	movw	r24, r28
    3482:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    3486:	4b 01       	movw	r8, r22
    3488:	5c 01       	movw	r10, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    348a:	bf ef       	ldi	r27, 0xFF	; 255
    348c:	8b 16       	cp	r8, r27
    348e:	9b 06       	cpc	r9, r27
    3490:	ab 06       	cpc	r10, r27
    3492:	bb 06       	cpc	r11, r27
    3494:	b9 f0       	breq	.+46     	; 0x34c4 <dir_sdi+0x19e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    3496:	e2 e0       	ldi	r30, 0x02	; 2
    3498:	8e 16       	cp	r8, r30
    349a:	91 04       	cpc	r9, r1
    349c:	a1 04       	cpc	r10, r1
    349e:	b1 04       	cpc	r11, r1
    34a0:	08 f4       	brcc	.+2      	; 0x34a4 <dir_sdi+0x17e>
    34a2:	5d cf       	rjmp	.-326    	; 0x335e <dir_sdi+0x38>
    34a4:	f8 01       	movw	r30, r16
    34a6:	87 a1       	ldd	r24, Z+39	; 0x27
    34a8:	90 a5       	ldd	r25, Z+40	; 0x28
    34aa:	a1 a5       	ldd	r26, Z+41	; 0x29
    34ac:	b2 a5       	ldd	r27, Z+42	; 0x2a
    34ae:	88 16       	cp	r8, r24
    34b0:	99 06       	cpc	r9, r25
    34b2:	aa 06       	cpc	r10, r26
    34b4:	bb 06       	cpc	r11, r27
    34b6:	08 f0       	brcs	.+2      	; 0x34ba <dir_sdi+0x194>
    34b8:	52 cf       	rjmp	.-348    	; 0x335e <dir_sdi+0x38>
			ofs -= csz;
    34ba:	c4 18       	sub	r12, r4
    34bc:	d5 08       	sbc	r13, r5
    34be:	e6 08       	sbc	r14, r6
    34c0:	f7 08       	sbc	r15, r7
    34c2:	cf cf       	rjmp	.-98     	; 0x3462 <dir_sdi+0x13c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	4c cf       	rjmp	.-360    	; 0x3362 <dir_sdi+0x3c>

000034ca <check_fs>:
{
    34ca:	ef 92       	push	r14
    34cc:	ff 92       	push	r15
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
    34d2:	cf 93       	push	r28
    34d4:	df 93       	push	r29
    34d6:	8c 01       	movw	r16, r24
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    34d8:	fc 01       	movw	r30, r24
    34da:	13 82       	std	Z+3, r1	; 0x03
    34dc:	ed 5b       	subi	r30, 0xBD	; 189
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	8f ef       	ldi	r24, 0xFF	; 255
    34e2:	9f ef       	ldi	r25, 0xFF	; 255
    34e4:	dc 01       	movw	r26, r24
    34e6:	80 83       	st	Z, r24
    34e8:	91 83       	std	Z+1, r25	; 0x01
    34ea:	a2 83       	std	Z+2, r26	; 0x02
    34ec:	b3 83       	std	Z+3, r27	; 0x03
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    34ee:	c8 01       	movw	r24, r16
    34f0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    34f4:	ec 01       	movw	r28, r24
    34f6:	89 2b       	or	r24, r25
    34f8:	c1 f5       	brne	.+112    	; 0x356a <check_fs+0xa0>
	rv = rv << 8 | ptr[0];
    34fa:	f8 01       	movw	r30, r16
    34fc:	eb 5b       	subi	r30, 0xBB	; 187
    34fe:	fd 4f       	sbci	r31, 0xFD	; 253
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	85 35       	cpi	r24, 0x55	; 85
    3506:	9a 4a       	sbci	r25, 0xAA	; 170
    3508:	99 f5       	brne	.+102    	; 0x3570 <check_fs+0xa6>
	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
    350a:	78 01       	movw	r14, r16
    350c:	27 e4       	ldi	r18, 0x47	; 71
    350e:	e2 0e       	add	r14, r18
    3510:	f1 1c       	adc	r15, r1
    3512:	4b e0       	ldi	r20, 0x0B	; 11
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	62 ec       	ldi	r22, 0xC2	; 194
    3518:	71 e0       	ldi	r23, 0x01	; 1
    351a:	c7 01       	movw	r24, r14
    351c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <mem_cmp>
    3520:	89 2b       	or	r24, r25
    3522:	49 f1       	breq	.+82     	; 0x3576 <check_fs+0xac>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
    3524:	f7 01       	movw	r30, r14
    3526:	80 81       	ld	r24, Z
    3528:	8b 3e       	cpi	r24, 0xEB	; 235
    352a:	19 f0       	breq	.+6      	; 0x3532 <check_fs+0x68>
    352c:	88 5e       	subi	r24, 0xE8	; 232
    352e:	82 30       	cpi	r24, 0x02	; 2
    3530:	28 f5       	brcc	.+74     	; 0x357c <check_fs+0xb2>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
    3532:	43 e0       	ldi	r20, 0x03	; 3
    3534:	50 e0       	ldi	r21, 0x00	; 0
    3536:	6e eb       	ldi	r22, 0xBE	; 190
    3538:	71 e0       	ldi	r23, 0x01	; 1
    353a:	c8 01       	movw	r24, r16
    353c:	83 58       	subi	r24, 0x83	; 131
    353e:	9f 4f       	sbci	r25, 0xFF	; 255
    3540:	0e 94 e7 12 	call	0x25ce	; 0x25ce <mem_cmp>
    3544:	89 2b       	or	r24, r25
    3546:	59 f0       	breq	.+22     	; 0x355e <check_fs+0x94>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
    3548:	45 e0       	ldi	r20, 0x05	; 5
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	66 eb       	ldi	r22, 0xB6	; 182
    354e:	71 e0       	ldi	r23, 0x01	; 1
    3550:	c8 01       	movw	r24, r16
    3552:	87 56       	subi	r24, 0x67	; 103
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	0e 94 e7 12 	call	0x25ce	; 0x25ce <mem_cmp>
    355a:	89 2b       	or	r24, r25
    355c:	79 f4       	brne	.+30     	; 0x357c <check_fs+0xb2>
}
    355e:	ce 01       	movw	r24, r28
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	e6 e0       	ldi	r30, 0x06	; 6
    3566:	0c 94 5c 5a 	jmp	0xb4b8	; 0xb4b8 <__epilogue_restores__+0x18>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    356a:	c4 e0       	ldi	r28, 0x04	; 4
    356c:	d0 e0       	ldi	r29, 0x00	; 0
    356e:	f7 cf       	rjmp	.-18     	; 0x355e <check_fs+0x94>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
    3570:	c3 e0       	ldi	r28, 0x03	; 3
    3572:	d0 e0       	ldi	r29, 0x00	; 0
    3574:	f4 cf       	rjmp	.-24     	; 0x355e <check_fs+0x94>
	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
    3576:	c1 e0       	ldi	r28, 0x01	; 1
    3578:	d0 e0       	ldi	r29, 0x00	; 0
    357a:	f1 cf       	rjmp	.-30     	; 0x355e <check_fs+0x94>
	return 2;	/* Valid BS but not FAT */
    357c:	c2 e0       	ldi	r28, 0x02	; 2
    357e:	d0 e0       	ldi	r29, 0x00	; 0
    3580:	ee cf       	rjmp	.-36     	; 0x355e <check_fs+0x94>

00003582 <put_fat>:
{
    3582:	a6 e0       	ldi	r26, 0x06	; 6
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e7 ec       	ldi	r30, 0xC7	; 199
    3588:	fa e1       	ldi	r31, 0x1A	; 26
    358a:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    358e:	5c 01       	movw	r10, r24
    3590:	6a 01       	movw	r12, r20
    3592:	7b 01       	movw	r14, r22
    3594:	28 01       	movw	r4, r16
    3596:	39 01       	movw	r6, r18
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    3598:	22 e0       	ldi	r18, 0x02	; 2
    359a:	c2 16       	cp	r12, r18
    359c:	d1 04       	cpc	r13, r1
    359e:	e1 04       	cpc	r14, r1
    35a0:	f1 04       	cpc	r15, r1
    35a2:	08 f4       	brcc	.+2      	; 0x35a6 <put_fat+0x24>
    35a4:	00 c1       	rjmp	.+512    	; 0x37a6 <put_fat+0x224>
    35a6:	fc 01       	movw	r30, r24
    35a8:	87 a1       	ldd	r24, Z+39	; 0x27
    35aa:	90 a5       	ldd	r25, Z+40	; 0x28
    35ac:	a1 a5       	ldd	r26, Z+41	; 0x29
    35ae:	b2 a5       	ldd	r27, Z+42	; 0x2a
    35b0:	c8 16       	cp	r12, r24
    35b2:	d9 06       	cpc	r13, r25
    35b4:	ea 06       	cpc	r14, r26
    35b6:	fb 06       	cpc	r15, r27
    35b8:	38 f4       	brcc	.+14     	; 0x35c8 <put_fat+0x46>
		switch (fs->fs_type) {
    35ba:	80 81       	ld	r24, Z
    35bc:	82 30       	cpi	r24, 0x02	; 2
    35be:	09 f4       	brne	.+2      	; 0x35c2 <put_fat+0x40>
    35c0:	92 c0       	rjmp	.+292    	; 0x36e6 <put_fat+0x164>
    35c2:	38 f4       	brcc	.+14     	; 0x35d2 <put_fat+0x50>
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	71 f0       	breq	.+28     	; 0x35e4 <put_fat+0x62>
	FRESULT res = FR_INT_ERR;
    35c8:	22 e0       	ldi	r18, 0x02	; 2
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	3e 83       	std	Y+6, r19	; 0x06
    35ce:	2d 83       	std	Y+5, r18	; 0x05
    35d0:	7d c0       	rjmp	.+250    	; 0x36cc <put_fat+0x14a>
		switch (fs->fs_type) {
    35d2:	83 50       	subi	r24, 0x03	; 3
    35d4:	82 30       	cpi	r24, 0x02	; 2
    35d6:	08 f4       	brcc	.+2      	; 0x35da <put_fat+0x58>
    35d8:	a7 c0       	rjmp	.+334    	; 0x3728 <put_fat+0x1a6>
    35da:	42 e0       	ldi	r20, 0x02	; 2
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	5e 83       	std	Y+6, r21	; 0x06
    35e0:	4d 83       	std	Y+5, r20	; 0x05
	return res;
    35e2:	74 c0       	rjmp	.+232    	; 0x36cc <put_fat+0x14a>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    35e4:	8a 01       	movw	r16, r20
    35e6:	16 95       	lsr	r17
    35e8:	07 95       	ror	r16
    35ea:	04 0f       	add	r16, r20
    35ec:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    35ee:	c8 01       	movw	r24, r16
    35f0:	89 2f       	mov	r24, r25
    35f2:	99 27       	eor	r25, r25
    35f4:	86 95       	lsr	r24
    35f6:	d5 01       	movw	r26, r10
    35f8:	d3 96       	adiw	r26, 0x33	; 51
    35fa:	4d 91       	ld	r20, X+
    35fc:	5d 91       	ld	r21, X+
    35fe:	6d 91       	ld	r22, X+
    3600:	7c 91       	ld	r23, X
    3602:	d6 97       	sbiw	r26, 0x36	; 54
    3604:	48 0f       	add	r20, r24
    3606:	59 1f       	adc	r21, r25
    3608:	61 1d       	adc	r22, r1
    360a:	71 1d       	adc	r23, r1
    360c:	c5 01       	movw	r24, r10
    360e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    3612:	8d 83       	std	Y+5, r24	; 0x05
    3614:	9e 83       	std	Y+6, r25	; 0x06
			if (res != FR_OK) break;
    3616:	ed 81       	ldd	r30, Y+5	; 0x05
    3618:	fe 81       	ldd	r31, Y+6	; 0x06
    361a:	ef 2b       	or	r30, r31
    361c:	09 f0       	breq	.+2      	; 0x3620 <put_fat+0x9e>
    361e:	56 c0       	rjmp	.+172    	; 0x36cc <put_fat+0x14a>
			p = fs->win + bc++ % SS(fs);
    3620:	15 01       	movw	r2, r10
    3622:	f7 e4       	ldi	r31, 0x47	; 71
    3624:	2f 0e       	add	r2, r31
    3626:	31 1c       	adc	r3, r1
    3628:	48 01       	movw	r8, r16
    362a:	2f ef       	ldi	r18, 0xFF	; 255
    362c:	82 1a       	sub	r8, r18
    362e:	92 0a       	sbc	r9, r18
    3630:	11 70       	andi	r17, 0x01	; 1
    3632:	f1 01       	movw	r30, r2
    3634:	e0 0f       	add	r30, r16
    3636:	f1 1f       	adc	r31, r17
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
    3638:	84 2d       	mov	r24, r4
    363a:	a7 01       	movw	r20, r14
    363c:	96 01       	movw	r18, r12
    363e:	21 70       	andi	r18, 0x01	; 1
    3640:	33 27       	eor	r19, r19
    3642:	44 27       	eor	r20, r20
    3644:	55 27       	eor	r21, r21
    3646:	29 83       	std	Y+1, r18	; 0x01
    3648:	3a 83       	std	Y+2, r19	; 0x02
    364a:	4b 83       	std	Y+3, r20	; 0x03
    364c:	5c 83       	std	Y+4, r21	; 0x04
    364e:	c0 fe       	sbrs	r12, 0
    3650:	07 c0       	rjmp	.+14     	; 0x3660 <put_fat+0xde>
    3652:	80 81       	ld	r24, Z
    3654:	8f 70       	andi	r24, 0x0F	; 15
    3656:	40 e1       	ldi	r20, 0x10	; 16
    3658:	44 9e       	mul	r4, r20
    365a:	90 01       	movw	r18, r0
    365c:	11 24       	eor	r1, r1
    365e:	82 2b       	or	r24, r18
    3660:	80 83       	st	Z, r24
			fs->wflag = 1;
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	d5 01       	movw	r26, r10
    3666:	13 96       	adiw	r26, 0x03	; 3
    3668:	8c 93       	st	X, r24
    366a:	13 97       	sbiw	r26, 0x03	; 3
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    366c:	d3 96       	adiw	r26, 0x33	; 51
    366e:	4d 91       	ld	r20, X+
    3670:	5d 91       	ld	r21, X+
    3672:	6d 91       	ld	r22, X+
    3674:	7c 91       	ld	r23, X
    3676:	d6 97       	sbiw	r26, 0x36	; 54
    3678:	c4 01       	movw	r24, r8
    367a:	89 2f       	mov	r24, r25
    367c:	99 27       	eor	r25, r25
    367e:	86 95       	lsr	r24
    3680:	48 0f       	add	r20, r24
    3682:	59 1f       	adc	r21, r25
    3684:	61 1d       	adc	r22, r1
    3686:	71 1d       	adc	r23, r1
    3688:	c5 01       	movw	r24, r10
    368a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    368e:	8d 83       	std	Y+5, r24	; 0x05
    3690:	9e 83       	std	Y+6, r25	; 0x06
			if (res != FR_OK) break;
    3692:	ed 81       	ldd	r30, Y+5	; 0x05
    3694:	fe 81       	ldd	r31, Y+6	; 0x06
    3696:	ef 2b       	or	r30, r31
    3698:	c9 f4       	brne	.+50     	; 0x36cc <put_fat+0x14a>
			p = fs->win + bc % SS(fs);
    369a:	f1 e0       	ldi	r31, 0x01	; 1
    369c:	9f 22       	and	r9, r31
    369e:	f1 01       	movw	r30, r2
    36a0:	e8 0d       	add	r30, r8
    36a2:	f9 1d       	adc	r31, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    36a4:	29 81       	ldd	r18, Y+1	; 0x01
    36a6:	3a 81       	ldd	r19, Y+2	; 0x02
    36a8:	4b 81       	ldd	r20, Y+3	; 0x03
    36aa:	5c 81       	ldd	r21, Y+4	; 0x04
    36ac:	23 2b       	or	r18, r19
    36ae:	24 2b       	or	r18, r20
    36b0:	25 2b       	or	r18, r21
    36b2:	91 f0       	breq	.+36     	; 0x36d8 <put_fat+0x156>
    36b4:	54 e0       	ldi	r21, 0x04	; 4
    36b6:	76 94       	lsr	r7
    36b8:	67 94       	ror	r6
    36ba:	57 94       	ror	r5
    36bc:	47 94       	ror	r4
    36be:	5a 95       	dec	r21
    36c0:	d1 f7       	brne	.-12     	; 0x36b6 <put_fat+0x134>
    36c2:	40 82       	st	Z, r4
			fs->wflag = 1;
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	d5 01       	movw	r26, r10
    36c8:	13 96       	adiw	r26, 0x03	; 3
    36ca:	8c 93       	st	X, r24
}
    36cc:	8d 81       	ldd	r24, Y+5	; 0x05
    36ce:	9e 81       	ldd	r25, Y+6	; 0x06
    36d0:	26 96       	adiw	r28, 0x06	; 6
    36d2:	e2 e1       	ldi	r30, 0x12	; 18
    36d4:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    36d8:	80 81       	ld	r24, Z
    36da:	80 7f       	andi	r24, 0xF0	; 240
    36dc:	35 2d       	mov	r19, r5
    36de:	3f 70       	andi	r19, 0x0F	; 15
    36e0:	43 2e       	mov	r4, r19
    36e2:	48 2a       	or	r4, r24
    36e4:	ee cf       	rjmp	.-36     	; 0x36c2 <put_fat+0x140>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    36e6:	77 27       	eor	r23, r23
    36e8:	6f 2d       	mov	r22, r15
    36ea:	5e 2d       	mov	r21, r14
    36ec:	4d 2d       	mov	r20, r13
    36ee:	83 a9       	ldd	r24, Z+51	; 0x33
    36f0:	94 a9       	ldd	r25, Z+52	; 0x34
    36f2:	a5 a9       	ldd	r26, Z+53	; 0x35
    36f4:	b6 a9       	ldd	r27, Z+54	; 0x36
    36f6:	48 0f       	add	r20, r24
    36f8:	59 1f       	adc	r21, r25
    36fa:	6a 1f       	adc	r22, r26
    36fc:	7b 1f       	adc	r23, r27
    36fe:	c5 01       	movw	r24, r10
    3700:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    3704:	8d 83       	std	Y+5, r24	; 0x05
    3706:	9e 83       	std	Y+6, r25	; 0x06
			if (res != FR_OK) break;
    3708:	2d 81       	ldd	r18, Y+5	; 0x05
    370a:	3e 81       	ldd	r19, Y+6	; 0x06
    370c:	23 2b       	or	r18, r19
    370e:	f1 f6       	brne	.-68     	; 0x36cc <put_fat+0x14a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    3710:	f6 01       	movw	r30, r12
    3712:	ee 0f       	add	r30, r30
    3714:	ff 1f       	adc	r31, r31
    3716:	ee 7f       	andi	r30, 0xFE	; 254
    3718:	f1 70       	andi	r31, 0x01	; 1
	*ptr++ = (BYTE)val; val >>= 8;
    371a:	ea 0d       	add	r30, r10
    371c:	fb 1d       	adc	r31, r11
    371e:	e9 5b       	subi	r30, 0xB9	; 185
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	11 83       	std	Z+1, r17	; 0x01
    3724:	00 83       	st	Z, r16
    3726:	ce cf       	rjmp	.-100    	; 0x36c4 <put_fat+0x142>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    3728:	83 a9       	ldd	r24, Z+51	; 0x33
    372a:	94 a9       	ldd	r25, Z+52	; 0x34
    372c:	a5 a9       	ldd	r26, Z+53	; 0x35
    372e:	b6 a9       	ldd	r27, Z+54	; 0x36
    3730:	27 e0       	ldi	r18, 0x07	; 7
    3732:	76 95       	lsr	r23
    3734:	67 95       	ror	r22
    3736:	57 95       	ror	r21
    3738:	47 95       	ror	r20
    373a:	2a 95       	dec	r18
    373c:	d1 f7       	brne	.-12     	; 0x3732 <put_fat+0x1b0>
    373e:	48 0f       	add	r20, r24
    3740:	59 1f       	adc	r21, r25
    3742:	6a 1f       	adc	r22, r26
    3744:	7b 1f       	adc	r23, r27
    3746:	c5 01       	movw	r24, r10
    3748:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    374c:	8d 83       	std	Y+5, r24	; 0x05
    374e:	9e 83       	std	Y+6, r25	; 0x06
			if (res != FR_OK) break;
    3750:	2d 81       	ldd	r18, Y+5	; 0x05
    3752:	3e 81       	ldd	r19, Y+6	; 0x06
    3754:	23 2b       	or	r18, r19
    3756:	09 f0       	breq	.+2      	; 0x375a <put_fat+0x1d8>
    3758:	b9 cf       	rjmp	.-142    	; 0x36cc <put_fat+0x14a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    375a:	cc 0c       	add	r12, r12
    375c:	dd 1c       	adc	r13, r13
    375e:	cc 0c       	add	r12, r12
    3760:	dd 1c       	adc	r13, r13
    3762:	3c ef       	ldi	r19, 0xFC	; 252
    3764:	c3 22       	and	r12, r19
    3766:	31 e0       	ldi	r19, 0x01	; 1
    3768:	d3 22       	and	r13, r19
    376a:	c5 01       	movw	r24, r10
    376c:	89 5b       	subi	r24, 0xB9	; 185
    376e:	9f 4f       	sbci	r25, 0xFF	; 255
    3770:	c8 0e       	add	r12, r24
    3772:	d9 1e       	adc	r13, r25
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
    3774:	d5 01       	movw	r26, r10
    3776:	8c 91       	ld	r24, X
    3778:	84 30       	cpi	r24, 0x04	; 4
    377a:	79 f0       	breq	.+30     	; 0x379a <put_fat+0x218>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    377c:	c6 01       	movw	r24, r12
    377e:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    3782:	bf e0       	ldi	r27, 0x0F	; 15
    3784:	7b 22       	and	r7, r27
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	88 27       	eor	r24, r24
    378c:	99 27       	eor	r25, r25
    378e:	aa 27       	eor	r26, r26
    3790:	b0 7f       	andi	r27, 0xF0	; 240
    3792:	48 2a       	or	r4, r24
    3794:	59 2a       	or	r5, r25
    3796:	6a 2a       	or	r6, r26
    3798:	7b 2a       	or	r7, r27
	*ptr++ = (BYTE)val; val >>= 8;
    379a:	f6 01       	movw	r30, r12
    379c:	40 82       	st	Z, r4
    379e:	51 82       	std	Z+1, r5	; 0x01
    37a0:	62 82       	std	Z+2, r6	; 0x02
    37a2:	73 82       	std	Z+3, r7	; 0x03
			fs->wflag = 1;
    37a4:	8f cf       	rjmp	.-226    	; 0x36c4 <put_fat+0x142>
	FRESULT res = FR_INT_ERR;
    37a6:	e2 e0       	ldi	r30, 0x02	; 2
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	fe 83       	std	Y+6, r31	; 0x06
    37ac:	ed 83       	std	Y+5, r30	; 0x05
    37ae:	8e cf       	rjmp	.-228    	; 0x36cc <put_fat+0x14a>

000037b0 <fill_last_frag>:
{
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	a0 e0       	ldi	r26, 0x00	; 0
    37b4:	ee ed       	ldi	r30, 0xDE	; 222
    37b6:	fb e1       	ldi	r31, 0x1B	; 27
    37b8:	0c 94 36 5a 	jmp	0xb46c	; 0xb46c <__prologue_saves__+0x4>
    37bc:	ec 01       	movw	r28, r24
    37be:	6a 01       	movw	r12, r20
    37c0:	7b 01       	movw	r14, r22
    37c2:	b0 2e       	mov	r11, r16
    37c4:	a1 2e       	mov	r10, r17
    37c6:	92 2e       	mov	r9, r18
    37c8:	83 2e       	mov	r8, r19
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
    37ca:	2a 01       	movw	r4, r20
    37cc:	3b 01       	movw	r6, r22
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	48 0e       	add	r4, r24
    37d2:	51 1c       	adc	r5, r1
    37d4:	61 1c       	adc	r6, r1
    37d6:	71 1c       	adc	r7, r1
    37d8:	8f ef       	ldi	r24, 0xFF	; 255
    37da:	c8 1a       	sub	r12, r24
    37dc:	d8 0a       	sbc	r13, r24
    37de:	e8 0a       	sbc	r14, r24
    37e0:	f8 0a       	sbc	r15, r24
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
    37e2:	8e 89       	ldd	r24, Y+22	; 0x16
    37e4:	9f 89       	ldd	r25, Y+23	; 0x17
    37e6:	a8 8d       	ldd	r26, Y+24	; 0x18
    37e8:	b9 8d       	ldd	r27, Y+25	; 0x19
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	a1 05       	cpc	r26, r1
    37ee:	b1 05       	cpc	r27, r1
    37f0:	39 f4       	brne	.+14     	; 0x3800 <fill_last_frag+0x50>
	return FR_OK;
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	80 e0       	ldi	r24, 0x00	; 0
}
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	e0 e1       	ldi	r30, 0x10	; 16
    37fc:	0c 94 52 5a 	jmp	0xb4a4	; 0xb4a4 <__epilogue_restores__+0x4>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
    3800:	81 30       	cpi	r24, 0x01	; 1
    3802:	91 05       	cpc	r25, r1
    3804:	a1 05       	cpc	r26, r1
    3806:	b1 05       	cpc	r27, r1
    3808:	f1 f0       	breq	.+60     	; 0x3846 <fill_last_frag+0x96>
    380a:	93 01       	movw	r18, r6
    380c:	82 01       	movw	r16, r4
    380e:	08 1b       	sub	r16, r24
    3810:	19 0b       	sbc	r17, r25
    3812:	2a 0b       	sbc	r18, r26
    3814:	3b 0b       	sbc	r19, r27
    3816:	b7 01       	movw	r22, r14
    3818:	a6 01       	movw	r20, r12
    381a:	48 1b       	sub	r20, r24
    381c:	59 0b       	sbc	r21, r25
    381e:	6a 0b       	sbc	r22, r26
    3820:	7b 0b       	sbc	r23, r27
    3822:	88 81       	ld	r24, Y
    3824:	99 81       	ldd	r25, Y+1	; 0x01
    3826:	0e 94 c1 1a 	call	0x3582	; 0x3582 <put_fat>
		if (res != FR_OK) return res;
    382a:	00 97       	sbiw	r24, 0x00	; 0
    382c:	21 f7       	brne	.-56     	; 0x37f6 <fill_last_frag+0x46>
		obj->n_frag--;
    382e:	8e 89       	ldd	r24, Y+22	; 0x16
    3830:	9f 89       	ldd	r25, Y+23	; 0x17
    3832:	a8 8d       	ldd	r26, Y+24	; 0x18
    3834:	b9 8d       	ldd	r27, Y+25	; 0x19
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	a1 09       	sbc	r26, r1
    383a:	b1 09       	sbc	r27, r1
    383c:	8e 8b       	std	Y+22, r24	; 0x16
    383e:	9f 8b       	std	Y+23, r25	; 0x17
    3840:	a8 8f       	std	Y+24, r26	; 0x18
    3842:	b9 8f       	std	Y+25, r27	; 0x19
    3844:	ce cf       	rjmp	.-100    	; 0x37e2 <fill_last_frag+0x32>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
    3846:	0b 2d       	mov	r16, r11
    3848:	1a 2d       	mov	r17, r10
    384a:	29 2d       	mov	r18, r9
    384c:	38 2d       	mov	r19, r8
    384e:	e3 cf       	rjmp	.-58     	; 0x3816 <fill_last_frag+0x66>

00003850 <create_chain>:
{
    3850:	a6 e0       	ldi	r26, 0x06	; 6
    3852:	b0 e0       	ldi	r27, 0x00	; 0
    3854:	ee e2       	ldi	r30, 0x2E	; 46
    3856:	fc e1       	ldi	r31, 0x1C	; 28
    3858:	0c 94 36 5a 	jmp	0xb46c	; 0xb46c <__prologue_saves__+0x4>
    385c:	6c 01       	movw	r12, r24
    385e:	49 83       	std	Y+1, r20	; 0x01
    3860:	5a 83       	std	Y+2, r21	; 0x02
    3862:	6b 83       	std	Y+3, r22	; 0x03
    3864:	7c 83       	std	Y+4, r23	; 0x04
	FATFS *fs = obj->fs;
    3866:	dc 01       	movw	r26, r24
    3868:	0d 90       	ld	r0, X+
    386a:	bc 91       	ld	r27, X
    386c:	a0 2d       	mov	r26, r0
    386e:	be 83       	std	Y+6, r27	; 0x06
    3870:	ad 83       	std	Y+5, r26	; 0x05
	if (clst == 0) {	/* Create a new chain */
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	9a 81       	ldd	r25, Y+2	; 0x02
    3876:	ab 81       	ldd	r26, Y+3	; 0x03
    3878:	bc 81       	ldd	r27, Y+4	; 0x04
    387a:	89 2b       	or	r24, r25
    387c:	8a 2b       	or	r24, r26
    387e:	8b 2b       	or	r24, r27
    3880:	e9 f4       	brne	.+58     	; 0x38bc <create_chain+0x6c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    3882:	ad 81       	ldd	r26, Y+5	; 0x05
    3884:	be 81       	ldd	r27, Y+6	; 0x06
    3886:	1f 96       	adiw	r26, 0x0f	; 15
    3888:	4d 90       	ld	r4, X+
    388a:	5d 90       	ld	r5, X+
    388c:	6d 90       	ld	r6, X+
    388e:	7c 90       	ld	r7, X
    3890:	52 97       	sbiw	r26, 0x12	; 18
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    3892:	41 14       	cp	r4, r1
    3894:	51 04       	cpc	r5, r1
    3896:	61 04       	cpc	r6, r1
    3898:	71 04       	cpc	r7, r1
    389a:	59 f0       	breq	.+22     	; 0x38b2 <create_chain+0x62>
    389c:	97 96       	adiw	r26, 0x27	; 39
    389e:	8d 91       	ld	r24, X+
    38a0:	9d 91       	ld	r25, X+
    38a2:	0d 90       	ld	r0, X+
    38a4:	bc 91       	ld	r27, X
    38a6:	a0 2d       	mov	r26, r0
    38a8:	48 16       	cp	r4, r24
    38aa:	59 06       	cpc	r5, r25
    38ac:	6a 06       	cpc	r6, r26
    38ae:	7b 06       	cpc	r7, r27
    38b0:	a0 f1       	brcs	.+104    	; 0x391a <create_chain+0xca>
    38b2:	41 2c       	mov	r4, r1
    38b4:	51 2c       	mov	r5, r1
    38b6:	32 01       	movw	r6, r4
    38b8:	43 94       	inc	r4
    38ba:	2f c0       	rjmp	.+94     	; 0x391a <create_chain+0xca>
		cs = get_fat(obj, clst);			/* Check the cluster status */
    38bc:	49 81       	ldd	r20, Y+1	; 0x01
    38be:	5a 81       	ldd	r21, Y+2	; 0x02
    38c0:	6b 81       	ldd	r22, Y+3	; 0x03
    38c2:	7c 81       	ldd	r23, Y+4	; 0x04
    38c4:	c6 01       	movw	r24, r12
    38c6:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    38ca:	4b 01       	movw	r8, r22
    38cc:	5c 01       	movw	r10, r24
		if (cs < 2) return 1;				/* Test for insanity */
    38ce:	b2 e0       	ldi	r27, 0x02	; 2
    38d0:	8b 16       	cp	r8, r27
    38d2:	91 04       	cpc	r9, r1
    38d4:	a1 04       	cpc	r10, r1
    38d6:	b1 04       	cpc	r11, r1
    38d8:	50 f4       	brcc	.+20     	; 0x38ee <create_chain+0x9e>
    38da:	81 2c       	mov	r8, r1
    38dc:	91 2c       	mov	r9, r1
    38de:	54 01       	movw	r10, r8
    38e0:	83 94       	inc	r8
}
    38e2:	c5 01       	movw	r24, r10
    38e4:	b4 01       	movw	r22, r8
    38e6:	26 96       	adiw	r28, 0x06	; 6
    38e8:	e0 e1       	ldi	r30, 0x10	; 16
    38ea:	0c 94 52 5a 	jmp	0xb4a4	; 0xb4a4 <__epilogue_restores__+0x4>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    38ee:	ef ef       	ldi	r30, 0xFF	; 255
    38f0:	8e 16       	cp	r8, r30
    38f2:	9e 06       	cpc	r9, r30
    38f4:	ae 06       	cpc	r10, r30
    38f6:	be 06       	cpc	r11, r30
    38f8:	09 f4       	brne	.+2      	; 0x38fc <create_chain+0xac>
    38fa:	a3 c1       	rjmp	.+838    	; 0x3c42 <create_chain+0x3f2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    38fc:	ed 81       	ldd	r30, Y+5	; 0x05
    38fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3900:	87 a1       	ldd	r24, Z+39	; 0x27
    3902:	90 a5       	ldd	r25, Z+40	; 0x28
    3904:	a1 a5       	ldd	r26, Z+41	; 0x29
    3906:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3908:	88 16       	cp	r8, r24
    390a:	99 06       	cpc	r9, r25
    390c:	aa 06       	cpc	r10, r26
    390e:	bb 06       	cpc	r11, r27
    3910:	40 f3       	brcs	.-48     	; 0x38e2 <create_chain+0x92>
    3912:	49 80       	ldd	r4, Y+1	; 0x01
    3914:	5a 80       	ldd	r5, Y+2	; 0x02
    3916:	6b 80       	ldd	r6, Y+3	; 0x03
    3918:	7c 80       	ldd	r7, Y+4	; 0x04
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    391a:	ed 81       	ldd	r30, Y+5	; 0x05
    391c:	fe 81       	ldd	r31, Y+6	; 0x06
    391e:	83 89       	ldd	r24, Z+19	; 0x13
    3920:	94 89       	ldd	r25, Z+20	; 0x14
    3922:	a5 89       	ldd	r26, Z+21	; 0x15
    3924:	b6 89       	ldd	r27, Z+22	; 0x16
    3926:	89 2b       	or	r24, r25
    3928:	8a 2b       	or	r24, r26
    392a:	8b 2b       	or	r24, r27
    392c:	21 f4       	brne	.+8      	; 0x3936 <create_chain+0xe6>
    392e:	81 2c       	mov	r8, r1
    3930:	91 2c       	mov	r9, r1
    3932:	54 01       	movw	r10, r8
    3934:	d6 cf       	rjmp	.-84     	; 0x38e2 <create_chain+0x92>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    3936:	ad 81       	ldd	r26, Y+5	; 0x05
    3938:	be 81       	ldd	r27, Y+6	; 0x06
    393a:	8c 91       	ld	r24, X
    393c:	84 30       	cpi	r24, 0x04	; 4
    393e:	09 f0       	breq	.+2      	; 0x3942 <create_chain+0xf2>
    3940:	c8 c0       	rjmp	.+400    	; 0x3ad2 <create_chain+0x282>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
    3942:	01 e0       	ldi	r16, 0x01	; 1
    3944:	10 e0       	ldi	r17, 0x00	; 0
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	b3 01       	movw	r22, r6
    394c:	a2 01       	movw	r20, r4
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <find_bitmap>
    3954:	4b 01       	movw	r8, r22
    3956:	5c 01       	movw	r10, r24
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	a1 09       	sbc	r26, r1
    3960:	b1 09       	sbc	r27, r1
    3962:	8e 3f       	cpi	r24, 0xFE	; 254
    3964:	9f 4f       	sbci	r25, 0xFF	; 255
    3966:	af 4f       	sbci	r26, 0xFF	; 255
    3968:	bf 4f       	sbci	r27, 0xFF	; 255
    396a:	08 f0       	brcs	.+2      	; 0x396e <create_chain+0x11e>
    396c:	ba cf       	rjmp	.-140    	; 0x38e2 <create_chain+0x92>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
    396e:	ee 24       	eor	r14, r14
    3970:	e3 94       	inc	r14
    3972:	f1 2c       	mov	r15, r1
    3974:	01 e0       	ldi	r16, 0x01	; 1
    3976:	10 e0       	ldi	r17, 0x00	; 0
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	b5 01       	movw	r22, r10
    397e:	a4 01       	movw	r20, r8
    3980:	8d 81       	ldd	r24, Y+5	; 0x05
    3982:	9e 81       	ldd	r25, Y+6	; 0x06
    3984:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <change_bitmap>
    3988:	9c 01       	movw	r18, r24
		if (res == FR_INT_ERR) return 1;
    398a:	82 30       	cpi	r24, 0x02	; 2
    398c:	91 05       	cpc	r25, r1
    398e:	09 f4       	brne	.+2      	; 0x3992 <create_chain+0x142>
    3990:	a4 cf       	rjmp	.-184    	; 0x38da <create_chain+0x8a>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	09 f4       	brne	.+2      	; 0x3998 <create_chain+0x148>
    3996:	55 c1       	rjmp	.+682    	; 0x3c42 <create_chain+0x3f2>
		if (clst == 0) {							/* Is it a new chain? */
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	9a 81       	ldd	r25, Y+2	; 0x02
    399c:	ab 81       	ldd	r26, Y+3	; 0x03
    399e:	bc 81       	ldd	r27, Y+4	; 0x04
    39a0:	89 2b       	or	r24, r25
    39a2:	8a 2b       	or	r24, r26
    39a4:	8b 2b       	or	r24, r27
    39a6:	41 f4       	brne	.+16     	; 0x39b8 <create_chain+0x168>
			obj->stat = 2;							/* Set status 'contiguous' */
    39a8:	82 e0       	ldi	r24, 0x02	; 2
    39aa:	d6 01       	movw	r26, r12
    39ac:	15 96       	adiw	r26, 0x05	; 5
    39ae:	8c 93       	st	X, r24
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    39b0:	23 2b       	or	r18, r19
    39b2:	09 f0       	breq	.+2      	; 0x39b6 <create_chain+0x166>
    39b4:	92 cf       	rjmp	.-220    	; 0x38da <create_chain+0x8a>
    39b6:	63 c0       	rjmp	.+198    	; 0x3a7e <create_chain+0x22e>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
    39b8:	f6 01       	movw	r30, r12
    39ba:	85 81       	ldd	r24, Z+5	; 0x05
    39bc:	82 30       	cpi	r24, 0x02	; 2
    39be:	c1 f4       	brne	.+48     	; 0x39f0 <create_chain+0x1a0>
    39c0:	d3 01       	movw	r26, r6
    39c2:	c2 01       	movw	r24, r4
    39c4:	01 96       	adiw	r24, 0x01	; 1
    39c6:	a1 1d       	adc	r26, r1
    39c8:	b1 1d       	adc	r27, r1
    39ca:	88 15       	cp	r24, r8
    39cc:	99 05       	cpc	r25, r9
    39ce:	aa 05       	cpc	r26, r10
    39d0:	bb 05       	cpc	r27, r11
    39d2:	71 f3       	breq	.-36     	; 0x39b0 <create_chain+0x160>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
    39d4:	86 81       	ldd	r24, Z+6	; 0x06
    39d6:	97 81       	ldd	r25, Z+7	; 0x07
    39d8:	a0 85       	ldd	r26, Z+8	; 0x08
    39da:	b1 85       	ldd	r27, Z+9	; 0x09
    39dc:	48 1a       	sub	r4, r24
    39de:	59 0a       	sbc	r5, r25
    39e0:	6a 0a       	sbc	r6, r26
    39e2:	7b 0a       	sbc	r7, r27
    39e4:	42 8a       	std	Z+18, r4	; 0x12
    39e6:	53 8a       	std	Z+19, r5	; 0x13
    39e8:	64 8a       	std	Z+20, r6	; 0x14
    39ea:	75 8a       	std	Z+21, r7	; 0x15
				obj->stat = 3;						/* Change status 'just fragmented' */
    39ec:	83 e0       	ldi	r24, 0x03	; 3
    39ee:	85 83       	std	Z+5, r24	; 0x05
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
    39f0:	f6 01       	movw	r30, r12
    39f2:	86 89       	ldd	r24, Z+22	; 0x16
    39f4:	97 89       	ldd	r25, Z+23	; 0x17
    39f6:	a0 8d       	ldd	r26, Z+24	; 0x18
    39f8:	b1 8d       	ldd	r27, Z+25	; 0x19
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
    39fa:	49 81       	ldd	r20, Y+1	; 0x01
    39fc:	5a 81       	ldd	r21, Y+2	; 0x02
    39fe:	6b 81       	ldd	r22, Y+3	; 0x03
    3a00:	7c 81       	ldd	r23, Y+4	; 0x04
    3a02:	4f 5f       	subi	r20, 0xFF	; 255
    3a04:	5f 4f       	sbci	r21, 0xFF	; 255
    3a06:	6f 4f       	sbci	r22, 0xFF	; 255
    3a08:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0a:	48 15       	cp	r20, r8
    3a0c:	59 05       	cpc	r21, r9
    3a0e:	6a 05       	cpc	r22, r10
    3a10:	7b 05       	cpc	r23, r11
    3a12:	91 f4       	brne	.+36     	; 0x3a38 <create_chain+0x1e8>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
    3a14:	00 97       	sbiw	r24, 0x00	; 0
    3a16:	a1 05       	cpc	r26, r1
    3a18:	b1 05       	cpc	r27, r1
    3a1a:	49 f0       	breq	.+18     	; 0x3a2e <create_chain+0x1de>
    3a1c:	01 96       	adiw	r24, 0x01	; 1
    3a1e:	a1 1d       	adc	r26, r1
    3a20:	b1 1d       	adc	r27, r1
    3a22:	f6 01       	movw	r30, r12
    3a24:	86 8b       	std	Z+22, r24	; 0x16
    3a26:	97 8b       	std	Z+23, r25	; 0x17
    3a28:	a0 8f       	std	Z+24, r26	; 0x18
    3a2a:	b1 8f       	std	Z+25, r27	; 0x19
    3a2c:	c1 cf       	rjmp	.-126    	; 0x39b0 <create_chain+0x160>
    3a2e:	82 e0       	ldi	r24, 0x02	; 2
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	a0 e0       	ldi	r26, 0x00	; 0
    3a34:	b0 e0       	ldi	r27, 0x00	; 0
    3a36:	f5 cf       	rjmp	.-22     	; 0x3a22 <create_chain+0x1d2>
				if (obj->n_frag == 0) obj->n_frag = 1;
    3a38:	89 2b       	or	r24, r25
    3a3a:	8a 2b       	or	r24, r26
    3a3c:	8b 2b       	or	r24, r27
    3a3e:	49 f4       	brne	.+18     	; 0x3a52 <create_chain+0x202>
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a0 e0       	ldi	r26, 0x00	; 0
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	f6 01       	movw	r30, r12
    3a4a:	86 8b       	std	Z+22, r24	; 0x16
    3a4c:	97 8b       	std	Z+23, r25	; 0x17
    3a4e:	a0 8f       	std	Z+24, r26	; 0x18
    3a50:	b1 8f       	std	Z+25, r27	; 0x19
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
    3a52:	95 01       	movw	r18, r10
    3a54:	84 01       	movw	r16, r8
    3a56:	49 81       	ldd	r20, Y+1	; 0x01
    3a58:	5a 81       	ldd	r21, Y+2	; 0x02
    3a5a:	6b 81       	ldd	r22, Y+3	; 0x03
    3a5c:	7c 81       	ldd	r23, Y+4	; 0x04
    3a5e:	c6 01       	movw	r24, r12
    3a60:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <fill_last_frag>
    3a64:	9c 01       	movw	r18, r24
				if (res == FR_OK) obj->n_frag = 1;
    3a66:	89 2b       	or	r24, r25
    3a68:	09 f0       	breq	.+2      	; 0x3a6c <create_chain+0x21c>
    3a6a:	e7 c0       	rjmp	.+462    	; 0x3c3a <create_chain+0x3ea>
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	a0 e0       	ldi	r26, 0x00	; 0
    3a72:	b0 e0       	ldi	r27, 0x00	; 0
    3a74:	f6 01       	movw	r30, r12
    3a76:	86 8b       	std	Z+22, r24	; 0x16
    3a78:	97 8b       	std	Z+23, r25	; 0x17
    3a7a:	a0 8f       	std	Z+24, r26	; 0x18
    3a7c:	b1 8f       	std	Z+25, r27	; 0x19
		fs->last_clst = ncl;
    3a7e:	ad 81       	ldd	r26, Y+5	; 0x05
    3a80:	be 81       	ldd	r27, Y+6	; 0x06
    3a82:	1f 96       	adiw	r26, 0x0f	; 15
    3a84:	8d 92       	st	X+, r8
    3a86:	9d 92       	st	X+, r9
    3a88:	ad 92       	st	X+, r10
    3a8a:	bc 92       	st	X, r11
    3a8c:	52 97       	sbiw	r26, 0x12	; 18
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    3a8e:	fd 01       	movw	r30, r26
    3a90:	83 89       	ldd	r24, Z+19	; 0x13
    3a92:	94 89       	ldd	r25, Z+20	; 0x14
    3a94:	a5 89       	ldd	r26, Z+21	; 0x15
    3a96:	b6 89       	ldd	r27, Z+22	; 0x16
    3a98:	47 a1       	ldd	r20, Z+39	; 0x27
    3a9a:	50 a5       	ldd	r21, Z+40	; 0x28
    3a9c:	61 a5       	ldd	r22, Z+41	; 0x29
    3a9e:	72 a5       	ldd	r23, Z+42	; 0x2a
    3aa0:	42 50       	subi	r20, 0x02	; 2
    3aa2:	51 09       	sbc	r21, r1
    3aa4:	61 09       	sbc	r22, r1
    3aa6:	71 09       	sbc	r23, r1
    3aa8:	48 17       	cp	r20, r24
    3aaa:	59 07       	cpc	r21, r25
    3aac:	6a 07       	cpc	r22, r26
    3aae:	7b 07       	cpc	r23, r27
    3ab0:	38 f0       	brcs	.+14     	; 0x3ac0 <create_chain+0x270>
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	a1 09       	sbc	r26, r1
    3ab6:	b1 09       	sbc	r27, r1
    3ab8:	83 8b       	std	Z+19, r24	; 0x13
    3aba:	94 8b       	std	Z+20, r25	; 0x14
    3abc:	a5 8b       	std	Z+21, r26	; 0x15
    3abe:	b6 8b       	std	Z+22, r27	; 0x16
		fs->fsi_flag |= 1;
    3ac0:	ad 81       	ldd	r26, Y+5	; 0x05
    3ac2:	be 81       	ldd	r27, Y+6	; 0x06
    3ac4:	14 96       	adiw	r26, 0x04	; 4
    3ac6:	8c 91       	ld	r24, X
    3ac8:	14 97       	sbiw	r26, 0x04	; 4
    3aca:	81 60       	ori	r24, 0x01	; 1
    3acc:	14 96       	adiw	r26, 0x04	; 4
    3ace:	8c 93       	st	X, r24
    3ad0:	08 cf       	rjmp	.-496    	; 0x38e2 <create_chain+0x92>
		if (scl == clst) {						/* Stretching an existing chain? */
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ad8:	bc 81       	ldd	r27, Y+4	; 0x04
    3ada:	48 16       	cp	r4, r24
    3adc:	59 06       	cpc	r5, r25
    3ade:	6a 06       	cpc	r6, r26
    3ae0:	7b 06       	cpc	r7, r27
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <create_chain+0x296>
    3ae4:	47 c0       	rjmp	.+142    	; 0x3b74 <create_chain+0x324>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
    3ae6:	53 01       	movw	r10, r6
    3ae8:	42 01       	movw	r8, r4
    3aea:	9f ef       	ldi	r25, 0xFF	; 255
    3aec:	89 1a       	sub	r8, r25
    3aee:	99 0a       	sbc	r9, r25
    3af0:	a9 0a       	sbc	r10, r25
    3af2:	b9 0a       	sbc	r11, r25
			if (ncl >= fs->n_fatent) ncl = 2;
    3af4:	ed 81       	ldd	r30, Y+5	; 0x05
    3af6:	fe 81       	ldd	r31, Y+6	; 0x06
    3af8:	87 a1       	ldd	r24, Z+39	; 0x27
    3afa:	90 a5       	ldd	r25, Z+40	; 0x28
    3afc:	a1 a5       	ldd	r26, Z+41	; 0x29
    3afe:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3b00:	88 16       	cp	r8, r24
    3b02:	99 06       	cpc	r9, r25
    3b04:	aa 06       	cpc	r10, r26
    3b06:	bb 06       	cpc	r11, r27
    3b08:	28 f0       	brcs	.+10     	; 0x3b14 <create_chain+0x2c4>
    3b0a:	22 e0       	ldi	r18, 0x02	; 2
    3b0c:	82 2e       	mov	r8, r18
    3b0e:	91 2c       	mov	r9, r1
    3b10:	a1 2c       	mov	r10, r1
    3b12:	b1 2c       	mov	r11, r1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    3b14:	b5 01       	movw	r22, r10
    3b16:	a4 01       	movw	r20, r8
    3b18:	c6 01       	movw	r24, r12
    3b1a:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    3b1e:	46 2f       	mov	r20, r22
    3b20:	57 2f       	mov	r21, r23
    3b22:	bc 01       	movw	r22, r24
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    3b24:	41 30       	cpi	r20, 0x01	; 1
    3b26:	51 05       	cpc	r21, r1
    3b28:	61 05       	cpc	r22, r1
    3b2a:	71 05       	cpc	r23, r1
    3b2c:	09 f4       	brne	.+2      	; 0x3b30 <create_chain+0x2e0>
    3b2e:	d5 ce       	rjmp	.-598    	; 0x38da <create_chain+0x8a>
    3b30:	4f 3f       	cpi	r20, 0xFF	; 255
    3b32:	ff ef       	ldi	r31, 0xFF	; 255
    3b34:	5f 07       	cpc	r21, r31
    3b36:	6f 07       	cpc	r22, r31
    3b38:	7f 07       	cpc	r23, r31
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <create_chain+0x2ee>
    3b3c:	82 c0       	rjmp	.+260    	; 0x3c42 <create_chain+0x3f2>
			if (cs != 0) {						/* Not free? */
    3b3e:	45 2b       	or	r20, r21
    3b40:	46 2b       	or	r20, r22
    3b42:	47 2b       	or	r20, r23
    3b44:	09 f4       	brne	.+2      	; 0x3b48 <create_chain+0x2f8>
    3b46:	52 c0       	rjmp	.+164    	; 0x3bec <create_chain+0x39c>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    3b48:	ed 81       	ldd	r30, Y+5	; 0x05
    3b4a:	fe 81       	ldd	r31, Y+6	; 0x06
    3b4c:	87 85       	ldd	r24, Z+15	; 0x0f
    3b4e:	90 89       	ldd	r25, Z+16	; 0x10
    3b50:	a1 89       	ldd	r26, Z+17	; 0x11
    3b52:	b2 89       	ldd	r27, Z+18	; 0x12
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    3b54:	82 30       	cpi	r24, 0x02	; 2
    3b56:	91 05       	cpc	r25, r1
    3b58:	a1 05       	cpc	r26, r1
    3b5a:	b1 05       	cpc	r27, r1
    3b5c:	58 f0       	brcs	.+22     	; 0x3b74 <create_chain+0x324>
    3b5e:	47 a1       	ldd	r20, Z+39	; 0x27
    3b60:	50 a5       	ldd	r21, Z+40	; 0x28
    3b62:	61 a5       	ldd	r22, Z+41	; 0x29
    3b64:	72 a5       	ldd	r23, Z+42	; 0x2a
    3b66:	84 17       	cp	r24, r20
    3b68:	95 07       	cpc	r25, r21
    3b6a:	a6 07       	cpc	r26, r22
    3b6c:	b7 07       	cpc	r27, r23
    3b6e:	10 f4       	brcc	.+4      	; 0x3b74 <create_chain+0x324>
    3b70:	2c 01       	movw	r4, r24
    3b72:	3d 01       	movw	r6, r26
    3b74:	53 01       	movw	r10, r6
    3b76:	42 01       	movw	r8, r4
				ncl++;							/* Next cluster */
    3b78:	ff ef       	ldi	r31, 0xFF	; 255
    3b7a:	8f 1a       	sub	r8, r31
    3b7c:	9f 0a       	sbc	r9, r31
    3b7e:	af 0a       	sbc	r10, r31
    3b80:	bf 0a       	sbc	r11, r31
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    3b82:	ed 81       	ldd	r30, Y+5	; 0x05
    3b84:	fe 81       	ldd	r31, Y+6	; 0x06
    3b86:	87 a1       	ldd	r24, Z+39	; 0x27
    3b88:	90 a5       	ldd	r25, Z+40	; 0x28
    3b8a:	a1 a5       	ldd	r26, Z+41	; 0x29
    3b8c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3b8e:	88 16       	cp	r8, r24
    3b90:	99 06       	cpc	r9, r25
    3b92:	aa 06       	cpc	r10, r26
    3b94:	bb 06       	cpc	r11, r27
    3b96:	60 f0       	brcs	.+24     	; 0x3bb0 <create_chain+0x360>
					if (ncl > scl) return 0;	/* No free cluster found? */
    3b98:	f2 e0       	ldi	r31, 0x02	; 2
    3b9a:	4f 16       	cp	r4, r31
    3b9c:	51 04       	cpc	r5, r1
    3b9e:	61 04       	cpc	r6, r1
    3ba0:	71 04       	cpc	r7, r1
    3ba2:	08 f4       	brcc	.+2      	; 0x3ba6 <create_chain+0x356>
    3ba4:	c4 ce       	rjmp	.-632    	; 0x392e <create_chain+0xde>
					ncl = 2;
    3ba6:	92 e0       	ldi	r25, 0x02	; 2
    3ba8:	89 2e       	mov	r8, r25
    3baa:	91 2c       	mov	r9, r1
    3bac:	a1 2c       	mov	r10, r1
    3bae:	b1 2c       	mov	r11, r1
				cs = get_fat(obj, ncl);			/* Get the cluster status */
    3bb0:	b5 01       	movw	r22, r10
    3bb2:	a4 01       	movw	r20, r8
    3bb4:	c6 01       	movw	r24, r12
    3bb6:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    3bba:	46 2f       	mov	r20, r22
    3bbc:	57 2f       	mov	r21, r23
    3bbe:	bc 01       	movw	r22, r24
				if (cs == 0) break;				/* Found a free cluster? */
    3bc0:	41 15       	cp	r20, r1
    3bc2:	51 05       	cpc	r21, r1
    3bc4:	61 05       	cpc	r22, r1
    3bc6:	71 05       	cpc	r23, r1
    3bc8:	b9 f0       	breq	.+46     	; 0x3bf8 <create_chain+0x3a8>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    3bca:	41 30       	cpi	r20, 0x01	; 1
    3bcc:	51 05       	cpc	r21, r1
    3bce:	61 05       	cpc	r22, r1
    3bd0:	71 05       	cpc	r23, r1
    3bd2:	09 f4       	brne	.+2      	; 0x3bd6 <create_chain+0x386>
    3bd4:	82 ce       	rjmp	.-764    	; 0x38da <create_chain+0x8a>
    3bd6:	4f 3f       	cpi	r20, 0xFF	; 255
    3bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    3bda:	6f 4f       	sbci	r22, 0xFF	; 255
    3bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bde:	89 f1       	breq	.+98     	; 0x3c42 <create_chain+0x3f2>
				if (ncl == scl) return 0;		/* No free cluster found? */
    3be0:	84 14       	cp	r8, r4
    3be2:	95 04       	cpc	r9, r5
    3be4:	a6 04       	cpc	r10, r6
    3be6:	b7 04       	cpc	r11, r7
    3be8:	39 f6       	brne	.-114    	; 0x3b78 <create_chain+0x328>
    3bea:	a1 ce       	rjmp	.-702    	; 0x392e <create_chain+0xde>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    3bec:	81 14       	cp	r8, r1
    3bee:	91 04       	cpc	r9, r1
    3bf0:	a1 04       	cpc	r10, r1
    3bf2:	b1 04       	cpc	r11, r1
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <create_chain+0x3a8>
    3bf6:	be cf       	rjmp	.-132    	; 0x3b74 <create_chain+0x324>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    3bf8:	0f ef       	ldi	r16, 0xFF	; 255
    3bfa:	1f ef       	ldi	r17, 0xFF	; 255
    3bfc:	98 01       	movw	r18, r16
    3bfe:	b5 01       	movw	r22, r10
    3c00:	a4 01       	movw	r20, r8
    3c02:	8d 81       	ldd	r24, Y+5	; 0x05
    3c04:	9e 81       	ldd	r25, Y+6	; 0x06
    3c06:	0e 94 c1 1a 	call	0x3582	; 0x3582 <put_fat>
    3c0a:	9c 01       	movw	r18, r24
		if (res == FR_OK && clst != 0) {
    3c0c:	89 2b       	or	r24, r25
    3c0e:	a9 f4       	brne	.+42     	; 0x3c3a <create_chain+0x3ea>
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	9a 81       	ldd	r25, Y+2	; 0x02
    3c14:	ab 81       	ldd	r26, Y+3	; 0x03
    3c16:	bc 81       	ldd	r27, Y+4	; 0x04
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	a1 05       	cpc	r26, r1
    3c1c:	b1 05       	cpc	r27, r1
    3c1e:	09 f4       	brne	.+2      	; 0x3c22 <create_chain+0x3d2>
    3c20:	2e cf       	rjmp	.-420    	; 0x3a7e <create_chain+0x22e>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    3c22:	95 01       	movw	r18, r10
    3c24:	84 01       	movw	r16, r8
    3c26:	ac 01       	movw	r20, r24
    3c28:	bd 01       	movw	r22, r26
    3c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <put_fat>
    3c32:	9c 01       	movw	r18, r24
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    3c34:	89 2b       	or	r24, r25
    3c36:	09 f4       	brne	.+2      	; 0x3c3a <create_chain+0x3ea>
    3c38:	22 cf       	rjmp	.-444    	; 0x3a7e <create_chain+0x22e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    3c3a:	21 30       	cpi	r18, 0x01	; 1
    3c3c:	31 05       	cpc	r19, r1
    3c3e:	09 f0       	breq	.+2      	; 0x3c42 <create_chain+0x3f2>
    3c40:	4c ce       	rjmp	.-872    	; 0x38da <create_chain+0x8a>
    3c42:	88 24       	eor	r8, r8
    3c44:	8a 94       	dec	r8
    3c46:	98 2c       	mov	r9, r8
    3c48:	54 01       	movw	r10, r8
    3c4a:	4b ce       	rjmp	.-874    	; 0x38e2 <create_chain+0x92>

00003c4c <remove_chain>:
{
    3c4c:	a6 e0       	ldi	r26, 0x06	; 6
    3c4e:	b0 e0       	ldi	r27, 0x00	; 0
    3c50:	ec e2       	ldi	r30, 0x2C	; 44
    3c52:	fe e1       	ldi	r31, 0x1E	; 30
    3c54:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    3c58:	1c 01       	movw	r2, r24
    3c5a:	4a 01       	movw	r8, r20
    3c5c:	5b 01       	movw	r10, r22
    3c5e:	28 01       	movw	r4, r16
    3c60:	39 01       	movw	r6, r18
	FATFS *fs = obj->fs;
    3c62:	dc 01       	movw	r26, r24
    3c64:	0d 90       	ld	r0, X+
    3c66:	bc 91       	ld	r27, X
    3c68:	a0 2d       	mov	r26, r0
    3c6a:	be 83       	std	Y+6, r27	; 0x06
    3c6c:	ad 83       	std	Y+5, r26	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    3c6e:	b2 e0       	ldi	r27, 0x02	; 2
    3c70:	8b 16       	cp	r8, r27
    3c72:	91 04       	cpc	r9, r1
    3c74:	a1 04       	cpc	r10, r1
    3c76:	b1 04       	cpc	r11, r1
    3c78:	38 f4       	brcc	.+14     	; 0x3c88 <remove_chain+0x3c>
    3c7a:	22 e0       	ldi	r18, 0x02	; 2
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
}
    3c7e:	c9 01       	movw	r24, r18
    3c80:	26 96       	adiw	r28, 0x06	; 6
    3c82:	e2 e1       	ldi	r30, 0x12	; 18
    3c84:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    3c88:	ed 81       	ldd	r30, Y+5	; 0x05
    3c8a:	fe 81       	ldd	r31, Y+6	; 0x06
    3c8c:	87 a1       	ldd	r24, Z+39	; 0x27
    3c8e:	90 a5       	ldd	r25, Z+40	; 0x28
    3c90:	a1 a5       	ldd	r26, Z+41	; 0x29
    3c92:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3c94:	88 16       	cp	r8, r24
    3c96:	99 06       	cpc	r9, r25
    3c98:	aa 06       	cpc	r10, r26
    3c9a:	bb 06       	cpc	r11, r27
    3c9c:	70 f7       	brcc	.-36     	; 0x3c7a <remove_chain+0x2e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    3c9e:	41 14       	cp	r4, r1
    3ca0:	51 04       	cpc	r5, r1
    3ca2:	61 04       	cpc	r6, r1
    3ca4:	71 04       	cpc	r7, r1
    3ca6:	19 f5       	brne	.+70     	; 0x3cee <remove_chain+0xa2>
{
    3ca8:	89 82       	std	Y+1, r8	; 0x01
    3caa:	9a 82       	std	Y+2, r9	; 0x02
    3cac:	ab 82       	std	Y+3, r10	; 0x03
    3cae:	bc 82       	std	Y+4, r11	; 0x04
		nxt = get_fat(obj, clst);			/* Get cluster status */
    3cb0:	75 01       	movw	r14, r10
    3cb2:	64 01       	movw	r12, r8
    3cb4:	b5 01       	movw	r22, r10
    3cb6:	a4 01       	movw	r20, r8
    3cb8:	c1 01       	movw	r24, r2
    3cba:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    3cbe:	4b 01       	movw	r8, r22
    3cc0:	5c 01       	movw	r10, r24
		if (nxt == 0) break;				/* Empty cluster? */
    3cc2:	81 14       	cp	r8, r1
    3cc4:	91 04       	cpc	r9, r1
    3cc6:	a1 04       	cpc	r10, r1
    3cc8:	b1 04       	cpc	r11, r1
    3cca:	39 f5       	brne	.+78     	; 0x3d1a <remove_chain+0xce>
	if (fs->fs_type == FS_EXFAT) {
    3ccc:	ad 81       	ldd	r26, Y+5	; 0x05
    3cce:	be 81       	ldd	r27, Y+6	; 0x06
    3cd0:	8c 91       	ld	r24, X
    3cd2:	84 30       	cpi	r24, 0x04	; 4
    3cd4:	49 f4       	brne	.+18     	; 0x3ce8 <remove_chain+0x9c>
		if (pclst == 0) {	/* Has the entire chain been removed? */
    3cd6:	41 14       	cp	r4, r1
    3cd8:	51 04       	cpc	r5, r1
    3cda:	61 04       	cpc	r6, r1
    3cdc:	71 04       	cpc	r7, r1
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <remove_chain+0x96>
    3ce0:	9a c0       	rjmp	.+308    	; 0x3e16 <remove_chain+0x1ca>
			obj->stat = 0;		/* Change the chain status 'initial' */
    3ce2:	d1 01       	movw	r26, r2
    3ce4:	15 96       	adiw	r26, 0x05	; 5
    3ce6:	1c 92       	st	X, r1
	return FR_OK;
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	c8 cf       	rjmp	.-112    	; 0x3c7e <remove_chain+0x32>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    3cee:	ad 81       	ldd	r26, Y+5	; 0x05
    3cf0:	be 81       	ldd	r27, Y+6	; 0x06
    3cf2:	8c 91       	ld	r24, X
    3cf4:	84 30       	cpi	r24, 0x04	; 4
    3cf6:	21 f4       	brne	.+8      	; 0x3d00 <remove_chain+0xb4>
    3cf8:	f1 01       	movw	r30, r2
    3cfa:	85 81       	ldd	r24, Z+5	; 0x05
    3cfc:	82 30       	cpi	r24, 0x02	; 2
    3cfe:	a1 f2       	breq	.-88     	; 0x3ca8 <remove_chain+0x5c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    3d00:	0f ef       	ldi	r16, 0xFF	; 255
    3d02:	1f ef       	ldi	r17, 0xFF	; 255
    3d04:	98 01       	movw	r18, r16
    3d06:	b3 01       	movw	r22, r6
    3d08:	a2 01       	movw	r20, r4
    3d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <put_fat>
    3d12:	9c 01       	movw	r18, r24
		if (res != FR_OK) return res;
    3d14:	89 2b       	or	r24, r25
    3d16:	41 f2       	breq	.-112    	; 0x3ca8 <remove_chain+0x5c>
    3d18:	b2 cf       	rjmp	.-156    	; 0x3c7e <remove_chain+0x32>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    3d1a:	b1 e0       	ldi	r27, 0x01	; 1
    3d1c:	8b 16       	cp	r8, r27
    3d1e:	91 04       	cpc	r9, r1
    3d20:	a1 04       	cpc	r10, r1
    3d22:	b1 04       	cpc	r11, r1
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <remove_chain+0xdc>
    3d26:	a9 cf       	rjmp	.-174    	; 0x3c7a <remove_chain+0x2e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    3d28:	ef ef       	ldi	r30, 0xFF	; 255
    3d2a:	8e 16       	cp	r8, r30
    3d2c:	9e 06       	cpc	r9, r30
    3d2e:	ae 06       	cpc	r10, r30
    3d30:	be 06       	cpc	r11, r30
    3d32:	19 f4       	brne	.+6      	; 0x3d3a <remove_chain+0xee>
    3d34:	21 e0       	ldi	r18, 0x01	; 1
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	a2 cf       	rjmp	.-188    	; 0x3c7e <remove_chain+0x32>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
    3d3a:	ad 81       	ldd	r26, Y+5	; 0x05
    3d3c:	be 81       	ldd	r27, Y+6	; 0x06
    3d3e:	8c 91       	ld	r24, X
    3d40:	84 30       	cpi	r24, 0x04	; 4
    3d42:	09 f0       	breq	.+2      	; 0x3d46 <remove_chain+0xfa>
    3d44:	47 c0       	rjmp	.+142    	; 0x3dd4 <remove_chain+0x188>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    3d46:	ed 81       	ldd	r30, Y+5	; 0x05
    3d48:	fe 81       	ldd	r31, Y+6	; 0x06
    3d4a:	43 89       	ldd	r20, Z+19	; 0x13
    3d4c:	54 89       	ldd	r21, Z+20	; 0x14
    3d4e:	65 89       	ldd	r22, Z+21	; 0x15
    3d50:	76 89       	ldd	r23, Z+22	; 0x16
    3d52:	87 a1       	ldd	r24, Z+39	; 0x27
    3d54:	90 a5       	ldd	r25, Z+40	; 0x28
    3d56:	a1 a5       	ldd	r26, Z+41	; 0x29
    3d58:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3d5a:	02 97       	sbiw	r24, 0x02	; 2
    3d5c:	a1 09       	sbc	r26, r1
    3d5e:	b1 09       	sbc	r27, r1
    3d60:	48 17       	cp	r20, r24
    3d62:	59 07       	cpc	r21, r25
    3d64:	6a 07       	cpc	r22, r26
    3d66:	7b 07       	cpc	r23, r27
    3d68:	08 f4       	brcc	.+2      	; 0x3d6c <remove_chain+0x120>
    3d6a:	42 c0       	rjmp	.+132    	; 0x3df0 <remove_chain+0x1a4>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
    3d6c:	97 01       	movw	r18, r14
    3d6e:	86 01       	movw	r16, r12
    3d70:	0f 5f       	subi	r16, 0xFF	; 255
    3d72:	1f 4f       	sbci	r17, 0xFF	; 255
    3d74:	2f 4f       	sbci	r18, 0xFF	; 255
    3d76:	3f 4f       	sbci	r19, 0xFF	; 255
    3d78:	08 15       	cp	r16, r8
    3d7a:	19 05       	cpc	r17, r9
    3d7c:	2a 05       	cpc	r18, r10
    3d7e:	3b 05       	cpc	r19, r11
    3d80:	e1 f0       	breq	.+56     	; 0x3dba <remove_chain+0x16e>
			if (fs->fs_type == FS_EXFAT) {
    3d82:	ed 81       	ldd	r30, Y+5	; 0x05
    3d84:	fe 81       	ldd	r31, Y+6	; 0x06
    3d86:	80 81       	ld	r24, Z
    3d88:	84 30       	cpi	r24, 0x04	; 4
    3d8a:	99 f4       	brne	.+38     	; 0x3db2 <remove_chain+0x166>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d90:	ab 81       	ldd	r26, Y+3	; 0x03
    3d92:	bc 81       	ldd	r27, Y+4	; 0x04
    3d94:	08 1b       	sub	r16, r24
    3d96:	19 0b       	sbc	r17, r25
    3d98:	2a 0b       	sbc	r18, r26
    3d9a:	3b 0b       	sbc	r19, r27
    3d9c:	f1 2c       	mov	r15, r1
    3d9e:	e1 2c       	mov	r14, r1
    3da0:	ac 01       	movw	r20, r24
    3da2:	bd 01       	movw	r22, r26
    3da4:	cf 01       	movw	r24, r30
    3da6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <change_bitmap>
    3daa:	9c 01       	movw	r18, r24
				if (res != FR_OK) return res;
    3dac:	89 2b       	or	r24, r25
    3dae:	09 f0       	breq	.+2      	; 0x3db2 <remove_chain+0x166>
    3db0:	66 cf       	rjmp	.-308    	; 0x3c7e <remove_chain+0x32>
    3db2:	89 82       	std	Y+1, r8	; 0x01
    3db4:	9a 82       	std	Y+2, r9	; 0x02
    3db6:	ab 82       	std	Y+3, r10	; 0x03
    3db8:	bc 82       	std	Y+4, r11	; 0x04
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    3dba:	ed 81       	ldd	r30, Y+5	; 0x05
    3dbc:	fe 81       	ldd	r31, Y+6	; 0x06
    3dbe:	87 a1       	ldd	r24, Z+39	; 0x27
    3dc0:	90 a5       	ldd	r25, Z+40	; 0x28
    3dc2:	a1 a5       	ldd	r26, Z+41	; 0x29
    3dc4:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3dc6:	88 16       	cp	r8, r24
    3dc8:	99 06       	cpc	r9, r25
    3dca:	aa 06       	cpc	r10, r26
    3dcc:	bb 06       	cpc	r11, r27
    3dce:	08 f4       	brcc	.+2      	; 0x3dd2 <remove_chain+0x186>
    3dd0:	6f cf       	rjmp	.-290    	; 0x3cb0 <remove_chain+0x64>
    3dd2:	7c cf       	rjmp	.-264    	; 0x3ccc <remove_chain+0x80>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    3dd4:	00 e0       	ldi	r16, 0x00	; 0
    3dd6:	10 e0       	ldi	r17, 0x00	; 0
    3dd8:	98 01       	movw	r18, r16
    3dda:	b7 01       	movw	r22, r14
    3ddc:	a6 01       	movw	r20, r12
    3dde:	8d 81       	ldd	r24, Y+5	; 0x05
    3de0:	9e 81       	ldd	r25, Y+6	; 0x06
    3de2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <put_fat>
    3de6:	9c 01       	movw	r18, r24
			if (res != FR_OK) return res;
    3de8:	89 2b       	or	r24, r25
    3dea:	09 f4       	brne	.+2      	; 0x3dee <remove_chain+0x1a2>
    3dec:	ac cf       	rjmp	.-168    	; 0x3d46 <remove_chain+0xfa>
    3dee:	47 cf       	rjmp	.-370    	; 0x3c7e <remove_chain+0x32>
			fs->free_clst++;
    3df0:	4f 5f       	subi	r20, 0xFF	; 255
    3df2:	5f 4f       	sbci	r21, 0xFF	; 255
    3df4:	6f 4f       	sbci	r22, 0xFF	; 255
    3df6:	7f 4f       	sbci	r23, 0xFF	; 255
    3df8:	ad 81       	ldd	r26, Y+5	; 0x05
    3dfa:	be 81       	ldd	r27, Y+6	; 0x06
    3dfc:	53 96       	adiw	r26, 0x13	; 19
    3dfe:	4d 93       	st	X+, r20
    3e00:	5d 93       	st	X+, r21
    3e02:	6d 93       	st	X+, r22
    3e04:	7c 93       	st	X, r23
    3e06:	56 97       	sbiw	r26, 0x16	; 22
			fs->fsi_flag |= 1;
    3e08:	14 96       	adiw	r26, 0x04	; 4
    3e0a:	8c 91       	ld	r24, X
    3e0c:	14 97       	sbiw	r26, 0x04	; 4
    3e0e:	81 60       	ori	r24, 0x01	; 1
    3e10:	14 96       	adiw	r26, 0x04	; 4
    3e12:	8c 93       	st	X, r24
    3e14:	ab cf       	rjmp	.-170    	; 0x3d6c <remove_chain+0x120>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
    3e16:	f1 01       	movw	r30, r2
    3e18:	85 81       	ldd	r24, Z+5	; 0x05
    3e1a:	81 11       	cpse	r24, r1
    3e1c:	2e c0       	rjmp	.+92     	; 0x3e7a <remove_chain+0x22e>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
    3e1e:	86 80       	ldd	r8, Z+6	; 0x06
    3e20:	97 80       	ldd	r9, Z+7	; 0x07
    3e22:	a0 84       	ldd	r10, Z+8	; 0x08
    3e24:	b1 84       	ldd	r11, Z+9	; 0x09
				while (clst != pclst) {
    3e26:	84 14       	cp	r8, r4
    3e28:	95 04       	cpc	r9, r5
    3e2a:	a6 04       	cpc	r10, r6
    3e2c:	b7 04       	cpc	r11, r7
    3e2e:	29 f4       	brne	.+10     	; 0x3e3a <remove_chain+0x1ee>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	d1 01       	movw	r26, r2
    3e34:	15 96       	adiw	r26, 0x05	; 5
    3e36:	8c 93       	st	X, r24
    3e38:	57 cf       	rjmp	.-338    	; 0x3ce8 <remove_chain+0x9c>
					nxt = get_fat(obj, clst);
    3e3a:	b5 01       	movw	r22, r10
    3e3c:	a4 01       	movw	r20, r8
    3e3e:	c1 01       	movw	r24, r2
    3e40:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    3e44:	46 2f       	mov	r20, r22
    3e46:	57 2f       	mov	r21, r23
    3e48:	bc 01       	movw	r22, r24
					if (nxt < 2) return FR_INT_ERR;
    3e4a:	42 30       	cpi	r20, 0x02	; 2
    3e4c:	51 05       	cpc	r21, r1
    3e4e:	61 05       	cpc	r22, r1
    3e50:	71 05       	cpc	r23, r1
    3e52:	08 f4       	brcc	.+2      	; 0x3e56 <remove_chain+0x20a>
    3e54:	12 cf       	rjmp	.-476    	; 0x3c7a <remove_chain+0x2e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
    3e56:	4f 3f       	cpi	r20, 0xFF	; 255
    3e58:	ff ef       	ldi	r31, 0xFF	; 255
    3e5a:	5f 07       	cpc	r21, r31
    3e5c:	6f 07       	cpc	r22, r31
    3e5e:	7f 07       	cpc	r23, r31
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <remove_chain+0x218>
    3e62:	68 cf       	rjmp	.-304    	; 0x3d34 <remove_chain+0xe8>
					if (nxt != clst + 1) break;	/* Not contiguous? */
    3e64:	8f ef       	ldi	r24, 0xFF	; 255
    3e66:	88 1a       	sub	r8, r24
    3e68:	98 0a       	sbc	r9, r24
    3e6a:	a8 0a       	sbc	r10, r24
    3e6c:	b8 0a       	sbc	r11, r24
    3e6e:	84 16       	cp	r8, r20
    3e70:	95 06       	cpc	r9, r21
    3e72:	a6 06       	cpc	r10, r22
    3e74:	b7 06       	cpc	r11, r23
    3e76:	b9 f2       	breq	.-82     	; 0x3e26 <remove_chain+0x1da>
    3e78:	37 cf       	rjmp	.-402    	; 0x3ce8 <remove_chain+0x9c>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
    3e7a:	83 30       	cpi	r24, 0x03	; 3
    3e7c:	09 f0       	breq	.+2      	; 0x3e80 <remove_chain+0x234>
    3e7e:	34 cf       	rjmp	.-408    	; 0x3ce8 <remove_chain+0x9c>
    3e80:	86 81       	ldd	r24, Z+6	; 0x06
    3e82:	97 81       	ldd	r25, Z+7	; 0x07
    3e84:	a0 85       	ldd	r26, Z+8	; 0x08
    3e86:	b1 85       	ldd	r27, Z+9	; 0x09
    3e88:	48 16       	cp	r4, r24
    3e8a:	59 06       	cpc	r5, r25
    3e8c:	6a 06       	cpc	r6, r26
    3e8e:	7b 06       	cpc	r7, r27
    3e90:	08 f4       	brcc	.+2      	; 0x3e94 <remove_chain+0x248>
    3e92:	2a cf       	rjmp	.-428    	; 0x3ce8 <remove_chain+0x9c>
    3e94:	42 89       	ldd	r20, Z+18	; 0x12
    3e96:	53 89       	ldd	r21, Z+19	; 0x13
    3e98:	64 89       	ldd	r22, Z+20	; 0x14
    3e9a:	75 89       	ldd	r23, Z+21	; 0x15
    3e9c:	84 0f       	add	r24, r20
    3e9e:	95 1f       	adc	r25, r21
    3ea0:	a6 1f       	adc	r26, r22
    3ea2:	b7 1f       	adc	r27, r23
    3ea4:	84 15       	cp	r24, r4
    3ea6:	95 05       	cpc	r25, r5
    3ea8:	a6 05       	cpc	r26, r6
    3eaa:	b7 05       	cpc	r27, r7
    3eac:	08 f4       	brcc	.+2      	; 0x3eb0 <remove_chain+0x264>
    3eae:	1c cf       	rjmp	.-456    	; 0x3ce8 <remove_chain+0x9c>
    3eb0:	bf cf       	rjmp	.-130    	; 0x3e30 <remove_chain+0x1e4>

00003eb2 <fill_first_frag>:
{
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	a0 e0       	ldi	r26, 0x00	; 0
    3eb6:	ef e5       	ldi	r30, 0x5F	; 95
    3eb8:	ff e1       	ldi	r31, 0x1F	; 31
    3eba:	0c 94 3a 5a 	jmp	0xb474	; 0xb474 <__prologue_saves__+0xc>
    3ebe:	ec 01       	movw	r28, r24
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
    3ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec2:	83 30       	cpi	r24, 0x03	; 3
    3ec4:	91 f4       	brne	.+36     	; 0x3eea <fill_first_frag+0x38>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
    3ec6:	4e 81       	ldd	r20, Y+6	; 0x06
    3ec8:	5f 81       	ldd	r21, Y+7	; 0x07
    3eca:	68 85       	ldd	r22, Y+8	; 0x08
    3ecc:	79 85       	ldd	r23, Y+9	; 0x09
    3ece:	ca 88       	ldd	r12, Y+18	; 0x12
    3ed0:	db 88       	ldd	r13, Y+19	; 0x13
    3ed2:	ec 88       	ldd	r14, Y+20	; 0x14
    3ed4:	fd 88       	ldd	r15, Y+21	; 0x15
    3ed6:	c4 0e       	add	r12, r20
    3ed8:	d5 1e       	adc	r13, r21
    3eda:	e6 1e       	adc	r14, r22
    3edc:	f7 1e       	adc	r15, r23
    3ede:	4c 15       	cp	r20, r12
    3ee0:	5d 05       	cpc	r21, r13
    3ee2:	6e 05       	cpc	r22, r14
    3ee4:	7f 05       	cpc	r23, r15
    3ee6:	41 f4       	brne	.+16     	; 0x3ef8 <fill_first_frag+0x46>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
    3ee8:	1d 82       	std	Y+5, r1	; 0x05
	return FR_OK;
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	80 e0       	ldi	r24, 0x00	; 0
}
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	ec e0       	ldi	r30, 0x0C	; 12
    3ef4:	0c 94 56 5a 	jmp	0xb4ac	; 0xb4ac <__epilogue_restores__+0xc>
			res = put_fat(obj->fs, cl, cl + 1);
    3ef8:	4a 01       	movw	r8, r20
    3efa:	5b 01       	movw	r10, r22
    3efc:	8f ef       	ldi	r24, 0xFF	; 255
    3efe:	88 1a       	sub	r8, r24
    3f00:	98 0a       	sbc	r9, r24
    3f02:	a8 0a       	sbc	r10, r24
    3f04:	b8 0a       	sbc	r11, r24
    3f06:	95 01       	movw	r18, r10
    3f08:	84 01       	movw	r16, r8
    3f0a:	88 81       	ld	r24, Y
    3f0c:	99 81       	ldd	r25, Y+1	; 0x01
    3f0e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <put_fat>
			if (res != FR_OK) return res;
    3f12:	00 97       	sbiw	r24, 0x00	; 0
    3f14:	61 f7       	brne	.-40     	; 0x3eee <fill_first_frag+0x3c>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
    3f16:	b5 01       	movw	r22, r10
    3f18:	a4 01       	movw	r20, r8
    3f1a:	e1 cf       	rjmp	.-62     	; 0x3ede <fill_first_frag+0x2c>

00003f1c <dir_clear>:
{
    3f1c:	b0 e0       	ldi	r27, 0x00	; 0
    3f1e:	a0 e0       	ldi	r26, 0x00	; 0
    3f20:	e4 e9       	ldi	r30, 0x94	; 148
    3f22:	ff e1       	ldi	r31, 0x1F	; 31
    3f24:	0c 94 3a 5a 	jmp	0xb474	; 0xb474 <__prologue_saves__+0xc>
    3f28:	ec 01       	movw	r28, r24
    3f2a:	5a 01       	movw	r10, r20
    3f2c:	6b 01       	movw	r12, r22
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    3f2e:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <sync_window>
    3f32:	7c 01       	movw	r14, r24
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	e1 14       	cp	r14, r1
    3f38:	f1 04       	cpc	r15, r1
    3f3a:	29 f5       	brne	.+74     	; 0x3f86 <dir_clear+0x6a>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
    3f3c:	a5 01       	movw	r20, r10
    3f3e:	b6 01       	movw	r22, r12
    3f40:	ce 01       	movw	r24, r28
    3f42:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    3f46:	4b 01       	movw	r8, r22
    3f48:	5c 01       	movw	r10, r24
	fs->winsect = sect;				/* Set window to top of the cluster */
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	ed 5b       	subi	r30, 0xBD	; 189
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	80 82       	st	Z, r8
    3f52:	91 82       	std	Z+1, r9	; 0x01
    3f54:	a2 82       	std	Z+2, r10	; 0x02
    3f56:	b3 82       	std	Z+3, r11	; 0x03
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    3f58:	6e 01       	movw	r12, r28
    3f5a:	87 e4       	ldi	r24, 0x47	; 71
    3f5c:	c8 0e       	add	r12, r24
    3f5e:	d1 1c       	adc	r13, r1
    3f60:	40 e0       	ldi	r20, 0x00	; 0
    3f62:	52 e0       	ldi	r21, 0x02	; 2
    3f64:	70 e0       	ldi	r23, 0x00	; 0
    3f66:	60 e0       	ldi	r22, 0x00	; 0
    3f68:	c6 01       	movw	r24, r12
    3f6a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    3f6e:	89 85       	ldd	r24, Y+9	; 0x09
    3f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f72:	e8 16       	cp	r14, r24
    3f74:	f9 06       	cpc	r15, r25
    3f76:	68 f0       	brcs	.+26     	; 0x3f92 <dir_clear+0x76>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	29 85       	ldd	r18, Y+9	; 0x09
    3f7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f7e:	2e 15       	cp	r18, r14
    3f80:	3f 05       	cpc	r19, r15
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <dir_clear+0x6a>
    3f84:	80 e0       	ldi	r24, 0x00	; 0
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    3f86:	90 e0       	ldi	r25, 0x00	; 0
}
    3f88:	cd b7       	in	r28, 0x3d	; 61
    3f8a:	de b7       	in	r29, 0x3e	; 62
    3f8c:	ec e0       	ldi	r30, 0x0C	; 12
    3f8e:	0c 94 56 5a 	jmp	0xb4ac	; 0xb4ac <__epilogue_restores__+0xc>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    3f92:	01 e0       	ldi	r16, 0x01	; 1
    3f94:	10 e0       	ldi	r17, 0x00	; 0
    3f96:	a5 01       	movw	r20, r10
    3f98:	94 01       	movw	r18, r8
    3f9a:	2e 0d       	add	r18, r14
    3f9c:	3f 1d       	adc	r19, r15
    3f9e:	41 1d       	adc	r20, r1
    3fa0:	51 1d       	adc	r21, r1
    3fa2:	b6 01       	movw	r22, r12
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    3faa:	89 2b       	or	r24, r25
    3fac:	29 f7       	brne	.-54     	; 0x3f78 <dir_clear+0x5c>
    3fae:	8f ef       	ldi	r24, 0xFF	; 255
    3fb0:	e8 1a       	sub	r14, r24
    3fb2:	f8 0a       	sbc	r15, r24
    3fb4:	dc cf       	rjmp	.-72     	; 0x3f6e <dir_clear+0x52>

00003fb6 <dir_next>:
{
    3fb6:	4f 92       	push	r4
    3fb8:	5f 92       	push	r5
    3fba:	6f 92       	push	r6
    3fbc:	7f 92       	push	r7
    3fbe:	af 92       	push	r10
    3fc0:	bf 92       	push	r11
    3fc2:	cf 92       	push	r12
    3fc4:	df 92       	push	r13
    3fc6:	ef 92       	push	r14
    3fc8:	ff 92       	push	r15
    3fca:	0f 93       	push	r16
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	ec 01       	movw	r28, r24
    3fd4:	5b 01       	movw	r10, r22
	FATFS *fs = dp->obj.fs;
    3fd6:	08 81       	ld	r16, Y
    3fd8:	19 81       	ldd	r17, Y+1	; 0x01
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    3fda:	4e a0       	ldd	r4, Y+38	; 0x26
    3fdc:	5f a0       	ldd	r5, Y+39	; 0x27
    3fde:	68 a4       	ldd	r6, Y+40	; 0x28
    3fe0:	79 a4       	ldd	r7, Y+41	; 0x29
    3fe2:	20 e2       	ldi	r18, 0x20	; 32
    3fe4:	42 0e       	add	r4, r18
    3fe6:	51 1c       	adc	r5, r1
    3fe8:	61 1c       	adc	r6, r1
    3fea:	71 1c       	adc	r7, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    3fec:	d8 01       	movw	r26, r16
    3fee:	8c 91       	ld	r24, X
    3ff0:	84 30       	cpi	r24, 0x04	; 4
    3ff2:	09 f4       	brne	.+2      	; 0x3ff6 <dir_next+0x40>
    3ff4:	4a c0       	rjmp	.+148    	; 0x408a <dir_next+0xd4>
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	a0 e2       	ldi	r26, 0x20	; 32
    3ffc:	b0 e0       	ldi	r27, 0x00	; 0
    3ffe:	48 16       	cp	r4, r24
    4000:	59 06       	cpc	r5, r25
    4002:	6a 06       	cpc	r6, r26
    4004:	7b 06       	cpc	r7, r27
    4006:	20 f0       	brcs	.+8      	; 0x4010 <dir_next+0x5a>
    4008:	1e a6       	std	Y+46, r1	; 0x2e
    400a:	1f a6       	std	Y+47, r1	; 0x2f
    400c:	18 aa       	std	Y+48, r1	; 0x30
    400e:	19 aa       	std	Y+49, r1	; 0x31
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    4010:	8e a5       	ldd	r24, Y+46	; 0x2e
    4012:	9f a5       	ldd	r25, Y+47	; 0x2f
    4014:	a8 a9       	ldd	r26, Y+48	; 0x30
    4016:	b9 a9       	ldd	r27, Y+49	; 0x31
    4018:	00 97       	sbiw	r24, 0x00	; 0
    401a:	a1 05       	cpc	r26, r1
    401c:	b1 05       	cpc	r27, r1
    401e:	91 f1       	breq	.+100    	; 0x4084 <dir_next+0xce>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    4020:	b3 01       	movw	r22, r6
    4022:	a2 01       	movw	r20, r4
    4024:	51 70       	andi	r21, 0x01	; 1
    4026:	66 27       	eor	r22, r22
    4028:	77 27       	eor	r23, r23
    402a:	45 2b       	or	r20, r21
    402c:	46 2b       	or	r20, r22
    402e:	47 2b       	or	r20, r23
    4030:	09 f0       	breq	.+2      	; 0x4034 <dir_next+0x7e>
    4032:	ae c0       	rjmp	.+348    	; 0x4190 <__stack+0x91>
		dp->sect++;				/* Next sector */
    4034:	01 96       	adiw	r24, 0x01	; 1
    4036:	a1 1d       	adc	r26, r1
    4038:	b1 1d       	adc	r27, r1
    403a:	8e a7       	std	Y+46, r24	; 0x2e
    403c:	9f a7       	std	Y+47, r25	; 0x2f
    403e:	a8 ab       	std	Y+48, r26	; 0x30
    4040:	b9 ab       	std	Y+49, r27	; 0x31
		if (dp->clust == 0) {	/* Static table */
    4042:	4a a5       	ldd	r20, Y+42	; 0x2a
    4044:	5b a5       	ldd	r21, Y+43	; 0x2b
    4046:	6c a5       	ldd	r22, Y+44	; 0x2c
    4048:	7d a5       	ldd	r23, Y+45	; 0x2d
    404a:	41 15       	cp	r20, r1
    404c:	51 05       	cpc	r21, r1
    404e:	61 05       	cpc	r22, r1
    4050:	71 05       	cpc	r23, r1
    4052:	01 f5       	brne	.+64     	; 0x4094 <dir_next+0xde>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    4054:	f8 01       	movw	r30, r16
    4056:	87 81       	ldd	r24, Z+7	; 0x07
    4058:	90 85       	ldd	r25, Z+8	; 0x08
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	a0 e0       	ldi	r26, 0x00	; 0
    405e:	b3 01       	movw	r22, r6
    4060:	a2 01       	movw	r20, r4
    4062:	35 e0       	ldi	r19, 0x05	; 5
    4064:	76 95       	lsr	r23
    4066:	67 95       	ror	r22
    4068:	57 95       	ror	r21
    406a:	47 95       	ror	r20
    406c:	3a 95       	dec	r19
    406e:	d1 f7       	brne	.-12     	; 0x4064 <dir_next+0xae>
    4070:	48 17       	cp	r20, r24
    4072:	59 07       	cpc	r21, r25
    4074:	6a 07       	cpc	r22, r26
    4076:	7b 07       	cpc	r23, r27
    4078:	08 f4       	brcc	.+2      	; 0x407c <dir_next+0xc6>
    407a:	8a c0       	rjmp	.+276    	; 0x4190 <__stack+0x91>
				dp->sect = 0; return FR_NO_FILE;
    407c:	1e a6       	std	Y+46, r1	; 0x2e
    407e:	1f a6       	std	Y+47, r1	; 0x2f
    4080:	18 aa       	std	Y+48, r1	; 0x30
    4082:	19 aa       	std	Y+49, r1	; 0x31
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    4084:	84 e0       	ldi	r24, 0x04	; 4
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	2b c0       	rjmp	.+86     	; 0x40e0 <dir_next+0x12a>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	a0 e0       	ldi	r26, 0x00	; 0
    4090:	b0 e1       	ldi	r27, 0x10	; 16
    4092:	b5 cf       	rjmp	.-150    	; 0x3ffe <dir_next+0x48>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    4094:	d8 01       	movw	r26, r16
    4096:	19 96       	adiw	r26, 0x09	; 9
    4098:	8d 91       	ld	r24, X+
    409a:	9c 91       	ld	r25, X
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	b0 e0       	ldi	r27, 0x00	; 0
    40a0:	a0 e0       	ldi	r26, 0x00	; 0
    40a2:	73 01       	movw	r14, r6
    40a4:	62 01       	movw	r12, r4
    40a6:	29 e0       	ldi	r18, 0x09	; 9
    40a8:	f6 94       	lsr	r15
    40aa:	e7 94       	ror	r14
    40ac:	d7 94       	ror	r13
    40ae:	c7 94       	ror	r12
    40b0:	2a 95       	dec	r18
    40b2:	d1 f7       	brne	.-12     	; 0x40a8 <dir_next+0xf2>
    40b4:	8c 21       	and	r24, r12
    40b6:	9d 21       	and	r25, r13
    40b8:	ae 21       	and	r26, r14
    40ba:	bf 21       	and	r27, r15
    40bc:	89 2b       	or	r24, r25
    40be:	8a 2b       	or	r24, r26
    40c0:	8b 2b       	or	r24, r27
    40c2:	09 f0       	breq	.+2      	; 0x40c6 <dir_next+0x110>
    40c4:	65 c0       	rjmp	.+202    	; 0x4190 <__stack+0x91>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    40c6:	ce 01       	movw	r24, r28
    40c8:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    40cc:	6b 01       	movw	r12, r22
    40ce:	7c 01       	movw	r14, r24
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    40d0:	b2 e0       	ldi	r27, 0x02	; 2
    40d2:	cb 16       	cp	r12, r27
    40d4:	d1 04       	cpc	r13, r1
    40d6:	e1 04       	cpc	r14, r1
    40d8:	f1 04       	cpc	r15, r1
    40da:	88 f4       	brcc	.+34     	; 0x40fe <dir_next+0x148>
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	90 e0       	ldi	r25, 0x00	; 0
}
    40e0:	df 91       	pop	r29
    40e2:	cf 91       	pop	r28
    40e4:	1f 91       	pop	r17
    40e6:	0f 91       	pop	r16
    40e8:	ff 90       	pop	r15
    40ea:	ef 90       	pop	r14
    40ec:	df 90       	pop	r13
    40ee:	cf 90       	pop	r12
    40f0:	bf 90       	pop	r11
    40f2:	af 90       	pop	r10
    40f4:	7f 90       	pop	r7
    40f6:	6f 90       	pop	r6
    40f8:	5f 90       	pop	r5
    40fa:	4f 90       	pop	r4
    40fc:	08 95       	ret
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    40fe:	ef ef       	ldi	r30, 0xFF	; 255
    4100:	ce 16       	cp	r12, r30
    4102:	de 06       	cpc	r13, r30
    4104:	ee 06       	cpc	r14, r30
    4106:	fe 06       	cpc	r15, r30
    4108:	19 f4       	brne	.+6      	; 0x4110 <__stack+0x11>
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	e8 cf       	rjmp	.-48     	; 0x40e0 <dir_next+0x12a>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    4110:	f8 01       	movw	r30, r16
    4112:	87 a1       	ldd	r24, Z+39	; 0x27
    4114:	90 a5       	ldd	r25, Z+40	; 0x28
    4116:	a1 a5       	ldd	r26, Z+41	; 0x29
    4118:	b2 a5       	ldd	r27, Z+42	; 0x2a
    411a:	c8 16       	cp	r12, r24
    411c:	d9 06       	cpc	r13, r25
    411e:	ea 06       	cpc	r14, r26
    4120:	fb 06       	cpc	r15, r27
    4122:	48 f1       	brcs	.+82     	; 0x4176 <__stack+0x77>
					if (!stretch) {								/* If no stretch, report EOT */
    4124:	ab 28       	or	r10, r11
    4126:	09 f4       	brne	.+2      	; 0x412a <__stack+0x2b>
    4128:	a9 cf       	rjmp	.-174    	; 0x407c <dir_next+0xc6>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    412a:	4a a5       	ldd	r20, Y+42	; 0x2a
    412c:	5b a5       	ldd	r21, Y+43	; 0x2b
    412e:	6c a5       	ldd	r22, Y+44	; 0x2c
    4130:	7d a5       	ldd	r23, Y+45	; 0x2d
    4132:	ce 01       	movw	r24, r28
    4134:	0e 94 28 1c 	call	0x3850	; 0x3850 <create_chain>
    4138:	6b 01       	movw	r12, r22
    413a:	7c 01       	movw	r14, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    413c:	87 e0       	ldi	r24, 0x07	; 7
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	c1 14       	cp	r12, r1
    4142:	d1 04       	cpc	r13, r1
    4144:	e1 04       	cpc	r14, r1
    4146:	f1 04       	cpc	r15, r1
    4148:	59 f2       	breq	.-106    	; 0x40e0 <dir_next+0x12a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    414a:	f1 e0       	ldi	r31, 0x01	; 1
    414c:	cf 16       	cp	r12, r31
    414e:	d1 04       	cpc	r13, r1
    4150:	e1 04       	cpc	r14, r1
    4152:	f1 04       	cpc	r15, r1
    4154:	19 f2       	breq	.-122    	; 0x40dc <dir_next+0x126>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4156:	2f ef       	ldi	r18, 0xFF	; 255
    4158:	c2 16       	cp	r12, r18
    415a:	d2 06       	cpc	r13, r18
    415c:	e2 06       	cpc	r14, r18
    415e:	f2 06       	cpc	r15, r18
    4160:	a1 f2       	breq	.-88     	; 0x410a <__stack+0xb>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    4162:	b7 01       	movw	r22, r14
    4164:	a6 01       	movw	r20, r12
    4166:	c8 01       	movw	r24, r16
    4168:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <dir_clear>
    416c:	89 2b       	or	r24, r25
    416e:	69 f6       	brne	.-102    	; 0x410a <__stack+0xb>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
    4170:	8d 81       	ldd	r24, Y+5	; 0x05
    4172:	84 60       	ori	r24, 0x04	; 4
    4174:	8d 83       	std	Y+5, r24	; 0x05
				dp->clust = clst;		/* Initialize data for new cluster */
    4176:	ca a6       	std	Y+42, r12	; 0x2a
    4178:	db a6       	std	Y+43, r13	; 0x2b
    417a:	ec a6       	std	Y+44, r14	; 0x2c
    417c:	fd a6       	std	Y+45, r15	; 0x2d
				dp->sect = clst2sect(fs, clst);
    417e:	b7 01       	movw	r22, r14
    4180:	a6 01       	movw	r20, r12
    4182:	c8 01       	movw	r24, r16
    4184:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    4188:	6e a7       	std	Y+46, r22	; 0x2e
    418a:	7f a7       	std	Y+47, r23	; 0x2f
    418c:	88 ab       	std	Y+48, r24	; 0x30
    418e:	99 ab       	std	Y+49, r25	; 0x31
	dp->dptr = ofs;						/* Current entry */
    4190:	4e a2       	std	Y+38, r4	; 0x26
    4192:	5f a2       	std	Y+39, r5	; 0x27
    4194:	68 a6       	std	Y+40, r6	; 0x28
    4196:	79 a6       	std	Y+41, r7	; 0x29
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    4198:	c8 01       	movw	r24, r16
    419a:	89 5b       	subi	r24, 0xB9	; 185
    419c:	9f 4f       	sbci	r25, 0xFF	; 255
    419e:	a1 e0       	ldi	r26, 0x01	; 1
    41a0:	5a 22       	and	r5, r26
    41a2:	84 0d       	add	r24, r4
    41a4:	95 1d       	adc	r25, r5
    41a6:	9b ab       	std	Y+51, r25	; 0x33
    41a8:	8a ab       	std	Y+50, r24	; 0x32
	return FR_OK;
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	98 cf       	rjmp	.-208    	; 0x40e0 <dir_next+0x12a>

000041b0 <load_xdir>:
{
    41b0:	b0 e0       	ldi	r27, 0x00	; 0
    41b2:	a0 e0       	ldi	r26, 0x00	; 0
    41b4:	ee ed       	ldi	r30, 0xDE	; 222
    41b6:	f0 e2       	ldi	r31, 0x20	; 32
    41b8:	0c 94 3c 5a 	jmp	0xb478	; 0xb478 <__prologue_saves__+0x10>
    41bc:	8c 01       	movw	r16, r24
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
    41be:	fc 01       	movw	r30, r24
    41c0:	80 81       	ld	r24, Z
    41c2:	91 81       	ldd	r25, Z+1	; 0x01
    41c4:	fc 01       	movw	r30, r24
    41c6:	c5 84       	ldd	r12, Z+13	; 0x0d
    41c8:	d6 84       	ldd	r13, Z+14	; 0x0e
	res = move_window(dp->obj.fs, dp->sect);
    41ca:	f8 01       	movw	r30, r16
    41cc:	46 a5       	ldd	r20, Z+46	; 0x2e
    41ce:	57 a5       	ldd	r21, Z+47	; 0x2f
    41d0:	60 a9       	ldd	r22, Z+48	; 0x30
    41d2:	71 a9       	ldd	r23, Z+49	; 0x31
    41d4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    41d8:	ec 01       	movw	r28, r24
	if (res != FR_OK) return res;
    41da:	89 2b       	or	r24, r25
    41dc:	09 f0       	breq	.+2      	; 0x41e0 <load_xdir+0x30>
    41de:	9b c0       	rjmp	.+310    	; 0x4316 <load_xdir+0x166>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
    41e0:	f8 01       	movw	r30, r16
    41e2:	62 a9       	ldd	r22, Z+50	; 0x32
    41e4:	73 a9       	ldd	r23, Z+51	; 0x33
    41e6:	fb 01       	movw	r30, r22
    41e8:	80 81       	ld	r24, Z
    41ea:	85 38       	cpi	r24, 0x85	; 133
    41ec:	09 f0       	breq	.+2      	; 0x41f0 <load_xdir+0x40>
    41ee:	91 c0       	rjmp	.+290    	; 0x4312 <load_xdir+0x162>
	if (cnt != 0) {
    41f0:	40 e2       	ldi	r20, 0x20	; 32
    41f2:	50 e0       	ldi	r21, 0x00	; 0
    41f4:	c6 01       	movw	r24, r12
    41f6:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
    41fa:	f6 01       	movw	r30, r12
    41fc:	e1 80       	ldd	r14, Z+1	; 0x01
    41fe:	f1 2c       	mov	r15, r1
    4200:	ff ef       	ldi	r31, 0xFF	; 255
    4202:	ef 1a       	sub	r14, r31
    4204:	ff 0a       	sbc	r15, r31
    4206:	25 e0       	ldi	r18, 0x05	; 5
    4208:	ee 0c       	add	r14, r14
    420a:	ff 1c       	adc	r15, r15
    420c:	2a 95       	dec	r18
    420e:	e1 f7       	brne	.-8      	; 0x4208 <load_xdir+0x58>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
    4210:	c7 01       	movw	r24, r14
    4212:	80 56       	subi	r24, 0x60	; 96
    4214:	91 09       	sbc	r25, r1
    4216:	81 30       	cpi	r24, 0x01	; 1
    4218:	92 40       	sbci	r25, 0x02	; 2
    421a:	08 f0       	brcs	.+2      	; 0x421e <load_xdir+0x6e>
    421c:	7a c0       	rjmp	.+244    	; 0x4312 <load_xdir+0x162>
	res = dir_next(dp, 0);
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	60 e0       	ldi	r22, 0x00	; 0
    4222:	c8 01       	movw	r24, r16
    4224:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    4228:	ec 01       	movw	r28, r24
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
    422a:	84 30       	cpi	r24, 0x04	; 4
    422c:	91 05       	cpc	r25, r1
    422e:	09 f4       	brne	.+2      	; 0x4232 <load_xdir+0x82>
    4230:	70 c0       	rjmp	.+224    	; 0x4312 <load_xdir+0x162>
	if (res != FR_OK) return res;
    4232:	89 2b       	or	r24, r25
    4234:	09 f0       	breq	.+2      	; 0x4238 <load_xdir+0x88>
    4236:	6f c0       	rjmp	.+222    	; 0x4316 <load_xdir+0x166>
	res = move_window(dp->obj.fs, dp->sect);
    4238:	f8 01       	movw	r30, r16
    423a:	46 a5       	ldd	r20, Z+46	; 0x2e
    423c:	57 a5       	ldd	r21, Z+47	; 0x2f
    423e:	60 a9       	ldd	r22, Z+48	; 0x30
    4240:	71 a9       	ldd	r23, Z+49	; 0x31
    4242:	80 81       	ld	r24, Z
    4244:	91 81       	ldd	r25, Z+1	; 0x01
    4246:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    424a:	ec 01       	movw	r28, r24
	if (res != FR_OK) return res;
    424c:	89 2b       	or	r24, r25
    424e:	09 f0       	breq	.+2      	; 0x4252 <load_xdir+0xa2>
    4250:	62 c0       	rjmp	.+196    	; 0x4316 <load_xdir+0x166>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
    4252:	f8 01       	movw	r30, r16
    4254:	62 a9       	ldd	r22, Z+50	; 0x32
    4256:	73 a9       	ldd	r23, Z+51	; 0x33
    4258:	fb 01       	movw	r30, r22
    425a:	80 81       	ld	r24, Z
    425c:	80 3c       	cpi	r24, 0xC0	; 192
    425e:	09 f0       	breq	.+2      	; 0x4262 <load_xdir+0xb2>
    4260:	58 c0       	rjmp	.+176    	; 0x4312 <load_xdir+0x162>
	if (cnt != 0) {
    4262:	40 e2       	ldi	r20, 0x20	; 32
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	c6 01       	movw	r24, r12
    4268:	80 96       	adiw	r24, 0x20	; 32
    426a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
    426e:	f6 01       	movw	r30, r12
    4270:	83 a1       	ldd	r24, Z+35	; 0x23
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	8c 96       	adiw	r24, 0x2c	; 44
    4276:	6f e0       	ldi	r22, 0x0F	; 15
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	0e 94 6c 59 	call	0xb2d8	; 0xb2d8 <__udivmodhi4>
    427e:	95 e0       	ldi	r25, 0x05	; 5
    4280:	66 0f       	add	r22, r22
    4282:	77 1f       	adc	r23, r23
    4284:	9a 95       	dec	r25
    4286:	e1 f7       	brne	.-8      	; 0x4280 <load_xdir+0xd0>
    4288:	e6 16       	cp	r14, r22
    428a:	f7 06       	cpc	r15, r23
    428c:	08 f4       	brcc	.+2      	; 0x4290 <load_xdir+0xe0>
    428e:	41 c0       	rjmp	.+130    	; 0x4312 <load_xdir+0x162>
	i = 2 * SZDIRE;	/* Name offset to load */
    4290:	80 e4       	ldi	r24, 0x40	; 64
    4292:	a8 2e       	mov	r10, r24
    4294:	b1 2c       	mov	r11, r1
		res = dir_next(dp, 0);
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	c8 01       	movw	r24, r16
    429c:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    42a0:	ec 01       	movw	r28, r24
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
    42a2:	84 30       	cpi	r24, 0x04	; 4
    42a4:	91 05       	cpc	r25, r1
    42a6:	a9 f1       	breq	.+106    	; 0x4312 <load_xdir+0x162>
		if (res != FR_OK) return res;
    42a8:	89 2b       	or	r24, r25
    42aa:	a9 f5       	brne	.+106    	; 0x4316 <load_xdir+0x166>
		res = move_window(dp->obj.fs, dp->sect);
    42ac:	f8 01       	movw	r30, r16
    42ae:	46 a5       	ldd	r20, Z+46	; 0x2e
    42b0:	57 a5       	ldd	r21, Z+47	; 0x2f
    42b2:	60 a9       	ldd	r22, Z+48	; 0x30
    42b4:	71 a9       	ldd	r23, Z+49	; 0x31
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    42be:	ec 01       	movw	r28, r24
		if (res != FR_OK) return res;
    42c0:	89 2b       	or	r24, r25
    42c2:	49 f5       	brne	.+82     	; 0x4316 <load_xdir+0x166>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
    42c4:	f8 01       	movw	r30, r16
    42c6:	62 a9       	ldd	r22, Z+50	; 0x32
    42c8:	73 a9       	ldd	r23, Z+51	; 0x33
    42ca:	fb 01       	movw	r30, r22
    42cc:	80 81       	ld	r24, Z
    42ce:	81 3c       	cpi	r24, 0xC1	; 193
    42d0:	01 f5       	brne	.+64     	; 0x4312 <load_xdir+0x162>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
    42d2:	f0 e6       	ldi	r31, 0x60	; 96
    42d4:	af 16       	cp	r10, r31
    42d6:	f2 e0       	ldi	r31, 0x02	; 2
    42d8:	bf 06       	cpc	r11, r31
    42da:	38 f4       	brcc	.+14     	; 0x42ea <load_xdir+0x13a>
	if (cnt != 0) {
    42dc:	40 e2       	ldi	r20, 0x20	; 32
    42de:	50 e0       	ldi	r21, 0x00	; 0
    42e0:	c6 01       	movw	r24, r12
    42e2:	8a 0d       	add	r24, r10
    42e4:	9b 1d       	adc	r25, r11
    42e6:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
	} while ((i += SZDIRE) < sz_ent);
    42ea:	20 e2       	ldi	r18, 0x20	; 32
    42ec:	a2 0e       	add	r10, r18
    42ee:	b1 1c       	adc	r11, r1
    42f0:	ae 14       	cp	r10, r14
    42f2:	bf 04       	cpc	r11, r15
    42f4:	80 f2       	brcs	.-96     	; 0x4296 <load_xdir+0xe6>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
    42f6:	81 e6       	ldi	r24, 0x61	; 97
    42f8:	a8 16       	cp	r10, r24
    42fa:	82 e0       	ldi	r24, 0x02	; 2
    42fc:	b8 06       	cpc	r11, r24
    42fe:	58 f4       	brcc	.+22     	; 0x4316 <load_xdir+0x166>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
    4300:	c6 01       	movw	r24, r12
    4302:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xdir_sum>
    4306:	f6 01       	movw	r30, r12
    4308:	22 81       	ldd	r18, Z+2	; 0x02
    430a:	33 81       	ldd	r19, Z+3	; 0x03
    430c:	82 17       	cp	r24, r18
    430e:	93 07       	cpc	r25, r19
    4310:	11 f0       	breq	.+4      	; 0x4316 <load_xdir+0x166>
    4312:	c2 e0       	ldi	r28, 0x02	; 2
    4314:	d0 e0       	ldi	r29, 0x00	; 0
}
    4316:	ce 01       	movw	r24, r28
    4318:	cd b7       	in	r28, 0x3d	; 61
    431a:	de b7       	in	r29, 0x3e	; 62
    431c:	ea e0       	ldi	r30, 0x0A	; 10
    431e:	0c 94 58 5a 	jmp	0xb4b0	; 0xb4b0 <__epilogue_restores__+0x10>

00004322 <load_obj_xdir>:
{
    4322:	0f 93       	push	r16
    4324:	1f 93       	push	r17
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
    432a:	ec 01       	movw	r28, r24
    432c:	fb 01       	movw	r30, r22
	dp->obj.fs = obj->fs;
    432e:	80 81       	ld	r24, Z
    4330:	91 81       	ldd	r25, Z+1	; 0x01
    4332:	99 83       	std	Y+1, r25	; 0x01
    4334:	88 83       	st	Y, r24
	dp->obj.sclust = obj->c_scl;
    4336:	82 8d       	ldd	r24, Z+26	; 0x1a
    4338:	93 8d       	ldd	r25, Z+27	; 0x1b
    433a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    433c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    433e:	8e 83       	std	Y+6, r24	; 0x06
    4340:	9f 83       	std	Y+7, r25	; 0x07
    4342:	a8 87       	std	Y+8, r26	; 0x08
    4344:	b9 87       	std	Y+9, r27	; 0x09
	dp->obj.stat = (BYTE)obj->c_size;
    4346:	06 8d       	ldd	r16, Z+30	; 0x1e
    4348:	17 8d       	ldd	r17, Z+31	; 0x1f
    434a:	20 a1       	ldd	r18, Z+32	; 0x20
    434c:	31 a1       	ldd	r19, Z+33	; 0x21
    434e:	0d 83       	std	Y+5, r16	; 0x05
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
    4350:	00 27       	eor	r16, r16
    4352:	0a 87       	std	Y+10, r16	; 0x0a
    4354:	1b 87       	std	Y+11, r17	; 0x0b
    4356:	2c 87       	std	Y+12, r18	; 0x0c
    4358:	3d 87       	std	Y+13, r19	; 0x0d
    435a:	1e 86       	std	Y+14, r1	; 0x0e
    435c:	1f 86       	std	Y+15, r1	; 0x0f
    435e:	18 8a       	std	Y+16, r1	; 0x10
    4360:	19 8a       	std	Y+17, r1	; 0x11
	dp->obj.n_frag = 0;
    4362:	1e 8a       	std	Y+22, r1	; 0x16
    4364:	1f 8a       	std	Y+23, r1	; 0x17
    4366:	18 8e       	std	Y+24, r1	; 0x18
    4368:	19 8e       	std	Y+25, r1	; 0x19
	dp->blk_ofs = obj->c_ofs;
    436a:	42 a1       	ldd	r20, Z+34	; 0x22
    436c:	53 a1       	ldd	r21, Z+35	; 0x23
    436e:	64 a1       	ldd	r22, Z+36	; 0x24
    4370:	75 a1       	ldd	r23, Z+37	; 0x25
    4372:	fe 01       	movw	r30, r28
    4374:	e0 5c       	subi	r30, 0xC0	; 192
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	40 83       	st	Z, r20
    437a:	51 83       	std	Z+1, r21	; 0x01
    437c:	62 83       	std	Z+2, r22	; 0x02
    437e:	73 83       	std	Z+3, r23	; 0x03
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
    4380:	ce 01       	movw	r24, r28
    4382:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    4386:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    4388:	89 2b       	or	r24, r25
    438a:	21 f4       	brne	.+8      	; 0x4394 <load_obj_xdir+0x72>
		res = load_xdir(dp);		/* Load the object's entry block */
    438c:	ce 01       	movw	r24, r28
    438e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <load_xdir>
    4392:	9c 01       	movw	r18, r24
}
    4394:	c9 01       	movw	r24, r18
    4396:	df 91       	pop	r29
    4398:	cf 91       	pop	r28
    439a:	1f 91       	pop	r17
    439c:	0f 91       	pop	r16
    439e:	08 95       	ret

000043a0 <dir_read>:
{
    43a0:	b0 e0       	ldi	r27, 0x00	; 0
    43a2:	a0 e0       	ldi	r26, 0x00	; 0
    43a4:	e6 ed       	ldi	r30, 0xD6	; 214
    43a6:	f1 e2       	ldi	r31, 0x21	; 33
    43a8:	0c 94 36 5a 	jmp	0xb46c	; 0xb46c <__prologue_saves__+0x4>
    43ac:	ec 01       	movw	r28, r24
    43ae:	6b 01       	movw	r12, r22
	FATFS *fs = dp->obj.fs;
    43b0:	e8 80       	ld	r14, Y
    43b2:	f9 80       	ldd	r15, Y+1	; 0x01
	BYTE ord = 0xFF, sum = 0xFF;
    43b4:	88 24       	eor	r8, r8
    43b6:	8a 94       	dec	r8
    43b8:	55 24       	eor	r5, r5
    43ba:	5a 94       	dec	r5
	FRESULT res = FR_NO_FILE;
    43bc:	04 e0       	ldi	r16, 0x04	; 4
    43be:	10 e0       	ldi	r17, 0x00	; 0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
    43c0:	bd e0       	ldi	r27, 0x0D	; 13
    43c2:	4b 2e       	mov	r4, r27
    43c4:	8a ea       	ldi	r24, 0xAA	; 170
    43c6:	68 2e       	mov	r6, r24
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	78 2e       	mov	r7, r24
						dp->blk_ofs = dp->dptr;
    43cc:	5e 01       	movw	r10, r28
    43ce:	80 e4       	ldi	r24, 0x40	; 64
    43d0:	a8 0e       	add	r10, r24
    43d2:	b1 1c       	adc	r11, r1
	while (dp->sect) {
    43d4:	4e a5       	ldd	r20, Y+46	; 0x2e
    43d6:	5f a5       	ldd	r21, Y+47	; 0x2f
    43d8:	68 a9       	ldd	r22, Y+48	; 0x30
    43da:	79 a9       	ldd	r23, Y+49	; 0x31
    43dc:	41 15       	cp	r20, r1
    43de:	51 05       	cpc	r21, r1
    43e0:	61 05       	cpc	r22, r1
    43e2:	71 05       	cpc	r23, r1
    43e4:	21 f4       	brne	.+8      	; 0x43ee <dir_read+0x4e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    43e6:	01 15       	cp	r16, r1
    43e8:	11 05       	cpc	r17, r1
    43ea:	c1 f0       	breq	.+48     	; 0x441c <dir_read+0x7c>
    43ec:	b6 c0       	rjmp	.+364    	; 0x455a <dir_read+0x1ba>
		res = move_window(fs, dp->sect);
    43ee:	c7 01       	movw	r24, r14
    43f0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    43f4:	8c 01       	movw	r16, r24
		if (res != FR_OK) break;
    43f6:	89 2b       	or	r24, r25
    43f8:	09 f0       	breq	.+2      	; 0x43fc <dir_read+0x5c>
    43fa:	af c0       	rjmp	.+350    	; 0x455a <dir_read+0x1ba>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
    43fc:	ea a9       	ldd	r30, Y+50	; 0x32
    43fe:	fb a9       	ldd	r31, Y+51	; 0x33
    4400:	90 80       	ld	r9, Z
		if (b == 0) {
    4402:	99 20       	and	r9, r9
    4404:	09 f4       	brne	.+2      	; 0x4408 <dir_read+0x68>
    4406:	ca c0       	rjmp	.+404    	; 0x459c <dir_read+0x1fc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    4408:	d7 01       	movw	r26, r14
    440a:	8c 91       	ld	r24, X
    440c:	84 30       	cpi	r24, 0x04	; 4
    440e:	59 f5       	brne	.+86     	; 0x4466 <dir_read+0xc6>
			if (FF_USE_LABEL && vol) {
    4410:	c1 14       	cp	r12, r1
    4412:	d1 04       	cpc	r13, r1
    4414:	59 f0       	breq	.+22     	; 0x442c <dir_read+0x8c>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
    4416:	b3 e8       	ldi	r27, 0x83	; 131
    4418:	9b 12       	cpse	r9, r27
    441a:	96 c0       	rjmp	.+300    	; 0x4548 <dir_read+0x1a8>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
    441c:	10 e0       	ldi	r17, 0x00	; 0
    441e:	00 e0       	ldi	r16, 0x00	; 0
}
    4420:	c8 01       	movw	r24, r16
    4422:	cd b7       	in	r28, 0x3d	; 61
    4424:	de b7       	in	r29, 0x3e	; 62
    4426:	e0 e1       	ldi	r30, 0x10	; 16
    4428:	0c 94 52 5a 	jmp	0xb4a4	; 0xb4a4 <__epilogue_restores__+0x4>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
    442c:	e5 e8       	ldi	r30, 0x85	; 133
    442e:	9e 12       	cpse	r9, r30
    4430:	8b c0       	rjmp	.+278    	; 0x4548 <dir_read+0x1a8>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
    4432:	8e a1       	ldd	r24, Y+38	; 0x26
    4434:	9f a1       	ldd	r25, Y+39	; 0x27
    4436:	a8 a5       	ldd	r26, Y+40	; 0x28
    4438:	b9 a5       	ldd	r27, Y+41	; 0x29
    443a:	fe 01       	movw	r30, r28
    443c:	e0 5c       	subi	r30, 0xC0	; 192
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	80 83       	st	Z, r24
    4442:	91 83       	std	Z+1, r25	; 0x01
    4444:	a2 83       	std	Z+2, r26	; 0x02
    4446:	b3 83       	std	Z+3, r27	; 0x03
					res = load_xdir(dp);	/* Load the entry block */
    4448:	ce 01       	movw	r24, r28
    444a:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <load_xdir>
    444e:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    4450:	89 2b       	or	r24, r25
    4452:	09 f0       	breq	.+2      	; 0x4456 <dir_read+0xb6>
    4454:	82 c0       	rjmp	.+260    	; 0x455a <dir_read+0x1ba>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
    4456:	d7 01       	movw	r26, r14
    4458:	1d 96       	adiw	r26, 0x0d	; 13
    445a:	ed 91       	ld	r30, X+
    445c:	fc 91       	ld	r31, X
    445e:	84 81       	ldd	r24, Z+4	; 0x04
    4460:	8f 73       	andi	r24, 0x3F	; 63
    4462:	8c 83       	std	Y+4, r24	; 0x04
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    4464:	dd cf       	rjmp	.-70     	; 0x4420 <dir_read+0x80>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    4466:	23 85       	ldd	r18, Z+11	; 0x0b
    4468:	2f 73       	andi	r18, 0x3F	; 63
    446a:	2c 83       	std	Y+4, r18	; 0x04
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
    446c:	b5 ee       	ldi	r27, 0xE5	; 229
    446e:	9b 16       	cp	r9, r27
    4470:	09 f4       	brne	.+2      	; 0x4474 <dir_read+0xd4>
    4472:	7b c0       	rjmp	.+246    	; 0x456a <dir_read+0x1ca>
    4474:	8e e2       	ldi	r24, 0x2E	; 46
    4476:	98 16       	cp	r9, r24
    4478:	09 f4       	brne	.+2      	; 0x447c <dir_read+0xdc>
    447a:	77 c0       	rjmp	.+238    	; 0x456a <dir_read+0x1ca>
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	32 2f       	mov	r19, r18
    4482:	3f 71       	andi	r19, 0x1F	; 31
    4484:	38 30       	cpi	r19, 0x08	; 8
    4486:	09 f0       	breq	.+2      	; 0x448a <dir_read+0xea>
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	8c 15       	cp	r24, r12
    448c:	9d 05       	cpc	r25, r13
    448e:	09 f0       	breq	.+2      	; 0x4492 <dir_read+0xf2>
    4490:	6c c0       	rjmp	.+216    	; 0x456a <dir_read+0x1ca>
				if (attr == AM_LFN) {			/* An LFN entry is found */
    4492:	2f 30       	cpi	r18, 0x0F	; 15
    4494:	09 f0       	breq	.+2      	; 0x4498 <dir_read+0xf8>
    4496:	70 c0       	rjmp	.+224    	; 0x4578 <dir_read+0x1d8>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
    4498:	96 fe       	sbrs	r9, 6
    449a:	64 c0       	rjmp	.+200    	; 0x4564 <dir_read+0x1c4>
						sum = dp->dir[LDIR_Chksum];
    449c:	85 84       	ldd	r8, Z+13	; 0x0d
						b &= (BYTE)~LLEF; ord = b;
    449e:	e8 94       	clt
    44a0:	96 f8       	bld	r9, 6
						dp->blk_ofs = dp->dptr;
    44a2:	4e a1       	ldd	r20, Y+38	; 0x26
    44a4:	5f a1       	ldd	r21, Y+39	; 0x27
    44a6:	68 a5       	ldd	r22, Y+40	; 0x28
    44a8:	79 a5       	ldd	r23, Y+41	; 0x29
    44aa:	d5 01       	movw	r26, r10
    44ac:	4d 93       	st	X+, r20
    44ae:	5d 93       	st	X+, r21
    44b0:	6d 93       	st	X+, r22
    44b2:	7c 93       	st	X, r23
    44b4:	13 97       	sbiw	r26, 0x03	; 3
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    44b6:	85 85       	ldd	r24, Z+13	; 0x0d
    44b8:	88 11       	cpse	r24, r8
    44ba:	57 c0       	rjmp	.+174    	; 0x456a <dir_read+0x1ca>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
    44bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    44be:	93 8d       	ldd	r25, Z+27	; 0x1b
    44c0:	89 2b       	or	r24, r25
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <dir_read+0x126>
    44c4:	52 c0       	rjmp	.+164    	; 0x456a <dir_read+0x1ca>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    44c6:	d7 01       	movw	r26, r14
    44c8:	1b 96       	adiw	r26, 0x0b	; 11
    44ca:	4d 91       	ld	r20, X+
    44cc:	5c 91       	ld	r21, X
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
    44ce:	20 81       	ld	r18, Z
    44d0:	2f 7b       	andi	r18, 0xBF	; 191
    44d2:	21 50       	subi	r18, 0x01	; 1
    44d4:	33 0b       	sbc	r19, r19
    44d6:	42 9e       	mul	r4, r18
    44d8:	c0 01       	movw	r24, r0
    44da:	43 9e       	mul	r4, r19
    44dc:	90 0d       	add	r25, r0
    44de:	11 24       	eor	r1, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    44e0:	0d e9       	ldi	r16, 0x9D	; 157
    44e2:	11 e0       	ldi	r17, 0x01	; 1
    44e4:	21 e0       	ldi	r18, 0x01	; 1
    44e6:	30 e0       	ldi	r19, 0x00	; 0
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    44e8:	d8 01       	movw	r26, r16
    44ea:	6d 91       	ld	r22, X+
    44ec:	8d 01       	movw	r16, r26
	rv = rv << 8 | ptr[0];
    44ee:	6e 0f       	add	r22, r30
    44f0:	7f 2f       	mov	r23, r31
    44f2:	71 1d       	adc	r23, r1
    44f4:	db 01       	movw	r26, r22
    44f6:	6d 91       	ld	r22, X+
    44f8:	7c 91       	ld	r23, X
		if (wc != 0) {
    44fa:	21 15       	cp	r18, r1
    44fc:	31 05       	cpc	r19, r1
    44fe:	c1 f1       	breq	.+112    	; 0x4570 <dir_read+0x1d0>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
    4500:	8f 3f       	cpi	r24, 0xFF	; 255
    4502:	91 05       	cpc	r25, r1
    4504:	09 f0       	breq	.+2      	; 0x4508 <dir_read+0x168>
    4506:	88 f5       	brcc	.+98     	; 0x456a <dir_read+0x1ca>
			lfnbuf[i++] = wc = uc;			/* Store it */
    4508:	9c 01       	movw	r18, r24
    450a:	22 0f       	add	r18, r18
    450c:	33 1f       	adc	r19, r19
    450e:	24 0f       	add	r18, r20
    4510:	35 1f       	adc	r19, r21
    4512:	d9 01       	movw	r26, r18
    4514:	6d 93       	st	X+, r22
    4516:	7c 93       	st	X, r23
	rv = rv << 8 | ptr[0];
    4518:	9b 01       	movw	r18, r22
			lfnbuf[i++] = wc = uc;			/* Store it */
    451a:	01 96       	adiw	r24, 0x01	; 1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    451c:	60 16       	cp	r6, r16
    451e:	71 06       	cpc	r7, r17
    4520:	19 f7       	brne	.-58     	; 0x44e8 <dir_read+0x148>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
    4522:	60 81       	ld	r22, Z
    4524:	66 ff       	sbrs	r22, 6
    4526:	0d c0       	rjmp	.+26     	; 0x4542 <dir_read+0x1a2>
    4528:	23 2b       	or	r18, r19
    452a:	59 f0       	breq	.+22     	; 0x4542 <dir_read+0x1a2>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
    452c:	8f 3f       	cpi	r24, 0xFF	; 255
    452e:	91 05       	cpc	r25, r1
    4530:	09 f0       	breq	.+2      	; 0x4534 <dir_read+0x194>
    4532:	d8 f4       	brcc	.+54     	; 0x456a <dir_read+0x1ca>
		lfnbuf[i] = 0;
    4534:	88 0f       	add	r24, r24
    4536:	99 1f       	adc	r25, r25
    4538:	84 0f       	add	r24, r20
    453a:	95 1f       	adc	r25, r21
    453c:	fc 01       	movw	r30, r24
    453e:	11 82       	std	Z+1, r1	; 0x01
    4540:	10 82       	st	Z, r1
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4542:	55 24       	eor	r5, r5
    4544:	5a 94       	dec	r5
    4546:	59 0c       	add	r5, r9
		res = dir_next(dp, 0);		/* Next entry */
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	ce 01       	movw	r24, r28
    454e:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    4552:	8c 01       	movw	r16, r24
		if (res != FR_OK) break;
    4554:	89 2b       	or	r24, r25
    4556:	09 f4       	brne	.+2      	; 0x455a <dir_read+0x1ba>
    4558:	3d cf       	rjmp	.-390    	; 0x43d4 <dir_read+0x34>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    455a:	1e a6       	std	Y+46, r1	; 0x2e
    455c:	1f a6       	std	Y+47, r1	; 0x2f
    455e:	18 aa       	std	Y+48, r1	; 0x30
    4560:	19 aa       	std	Y+49, r1	; 0x31
	return res;
    4562:	5e cf       	rjmp	.-324    	; 0x4420 <dir_read+0x80>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4564:	59 14       	cp	r5, r9
    4566:	09 f4       	brne	.+2      	; 0x456a <dir_read+0x1ca>
    4568:	a6 cf       	rjmp	.-180    	; 0x44b6 <dir_read+0x116>
    456a:	55 24       	eor	r5, r5
    456c:	5a 94       	dec	r5
    456e:	ec cf       	rjmp	.-40     	; 0x4548 <dir_read+0x1a8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    4570:	6f 3f       	cpi	r22, 0xFF	; 255
    4572:	7f 4f       	sbci	r23, 0xFF	; 255
    4574:	99 f2       	breq	.-90     	; 0x451c <dir_read+0x17c>
    4576:	f9 cf       	rjmp	.-14     	; 0x456a <dir_read+0x1ca>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
    4578:	51 10       	cpse	r5, r1
    457a:	06 c0       	rjmp	.+12     	; 0x4588 <dir_read+0x1e8>
    457c:	cf 01       	movw	r24, r30
    457e:	0e 94 4f 13 	call	0x269e	; 0x269e <sum_sfn>
    4582:	88 15       	cp	r24, r8
    4584:	09 f4       	brne	.+2      	; 0x4588 <dir_read+0x1e8>
    4586:	4a cf       	rjmp	.-364    	; 0x441c <dir_read+0x7c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
    4588:	c0 5c       	subi	r28, 0xC0	; 192
    458a:	df 4f       	sbci	r29, 0xFF	; 255
    458c:	8f ef       	ldi	r24, 0xFF	; 255
    458e:	9f ef       	ldi	r25, 0xFF	; 255
    4590:	dc 01       	movw	r26, r24
    4592:	88 83       	st	Y, r24
    4594:	99 83       	std	Y+1, r25	; 0x01
    4596:	aa 83       	std	Y+2, r26	; 0x02
    4598:	bb 83       	std	Y+3, r27	; 0x03
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    459a:	42 cf       	rjmp	.-380    	; 0x4420 <dir_read+0x80>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
    459c:	04 e0       	ldi	r16, 0x04	; 4
    459e:	10 e0       	ldi	r17, 0x00	; 0
    45a0:	dc cf       	rjmp	.-72     	; 0x455a <dir_read+0x1ba>

000045a2 <dir_alloc>:
{
    45a2:	b0 e0       	ldi	r27, 0x00	; 0
    45a4:	a0 e0       	ldi	r26, 0x00	; 0
    45a6:	e7 ed       	ldi	r30, 0xD7	; 215
    45a8:	f2 e2       	ldi	r31, 0x22	; 34
    45aa:	0c 94 3c 5a 	jmp	0xb478	; 0xb478 <__prologue_saves__+0x10>
    45ae:	8c 01       	movw	r16, r24
    45b0:	7b 01       	movw	r14, r22
	FATFS *fs = dp->obj.fs;
    45b2:	dc 01       	movw	r26, r24
    45b4:	cd 90       	ld	r12, X+
    45b6:	dc 90       	ld	r13, X
	res = dir_sdi(dp, 0);
    45b8:	40 e0       	ldi	r20, 0x00	; 0
    45ba:	50 e0       	ldi	r21, 0x00	; 0
    45bc:	ba 01       	movw	r22, r20
    45be:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    45c2:	ec 01       	movw	r28, r24
	if (res == FR_OK) {
    45c4:	89 2b       	or	r24, r25
    45c6:	f1 f4       	brne	.+60     	; 0x4604 <dir_alloc+0x62>
			res = move_window(fs, dp->sect);
    45c8:	f8 01       	movw	r30, r16
    45ca:	46 a5       	ldd	r20, Z+46	; 0x2e
    45cc:	57 a5       	ldd	r21, Z+47	; 0x2f
    45ce:	60 a9       	ldd	r22, Z+48	; 0x30
    45d0:	71 a9       	ldd	r23, Z+49	; 0x31
    45d2:	c6 01       	movw	r24, r12
    45d4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    45d8:	5c 01       	movw	r10, r24
			if (res != FR_OK) break;
    45da:	00 97       	sbiw	r24, 0x00	; 0
    45dc:	51 f5       	brne	.+84     	; 0x4632 <dir_alloc+0x90>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
    45de:	d8 01       	movw	r26, r16
    45e0:	d2 96       	adiw	r26, 0x32	; 50
    45e2:	ed 91       	ld	r30, X+
    45e4:	fc 91       	ld	r31, X
    45e6:	80 81       	ld	r24, Z
    45e8:	f6 01       	movw	r30, r12
    45ea:	90 81       	ld	r25, Z
    45ec:	94 30       	cpi	r25, 0x04	; 4
    45ee:	b9 f4       	brne	.+46     	; 0x461e <dir_alloc+0x7c>
    45f0:	87 ff       	sbrs	r24, 7
    45f2:	19 c0       	rjmp	.+50     	; 0x4626 <dir_alloc+0x84>
			res = dir_next(dp, 1);
    45f4:	61 e0       	ldi	r22, 0x01	; 1
    45f6:	70 e0       	ldi	r23, 0x00	; 0
    45f8:	c8 01       	movw	r24, r16
    45fa:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    45fe:	ec 01       	movw	r28, r24
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
    4600:	89 2b       	or	r24, r25
    4602:	59 f0       	breq	.+22     	; 0x461a <dir_alloc+0x78>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    4604:	c4 30       	cpi	r28, 0x04	; 4
    4606:	d1 05       	cpc	r29, r1
    4608:	11 f4       	brne	.+4      	; 0x460e <dir_alloc+0x6c>
    460a:	c7 e0       	ldi	r28, 0x07	; 7
    460c:	d0 e0       	ldi	r29, 0x00	; 0
}
    460e:	ce 01       	movw	r24, r28
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
    4614:	ea e0       	ldi	r30, 0x0A	; 10
    4616:	0c 94 58 5a 	jmp	0xb4b0	; 0xb4b0 <__epilogue_restores__+0x10>
    461a:	e5 01       	movw	r28, r10
    461c:	d5 cf       	rjmp	.-86     	; 0x45c8 <dir_alloc+0x26>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
    461e:	85 3e       	cpi	r24, 0xE5	; 229
    4620:	11 f0       	breq	.+4      	; 0x4626 <dir_alloc+0x84>
    4622:	81 11       	cpse	r24, r1
    4624:	e7 cf       	rjmp	.-50     	; 0x45f4 <dir_alloc+0x52>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
    4626:	21 96       	adiw	r28, 0x01	; 1
    4628:	ce 15       	cp	r28, r14
    462a:	df 05       	cpc	r29, r15
    462c:	21 f0       	breq	.+8      	; 0x4636 <dir_alloc+0x94>
    462e:	5e 01       	movw	r10, r28
    4630:	e1 cf       	rjmp	.-62     	; 0x45f4 <dir_alloc+0x52>
    4632:	ec 01       	movw	r28, r24
    4634:	e7 cf       	rjmp	.-50     	; 0x4604 <dir_alloc+0x62>
			res = move_window(fs, dp->sect);
    4636:	d0 e0       	ldi	r29, 0x00	; 0
    4638:	c0 e0       	ldi	r28, 0x00	; 0
	return res;
    463a:	e9 cf       	rjmp	.-46     	; 0x460e <dir_alloc+0x6c>

0000463c <store_xdir>:
{
    463c:	b0 e0       	ldi	r27, 0x00	; 0
    463e:	a0 e0       	ldi	r26, 0x00	; 0
    4640:	e4 e2       	ldi	r30, 0x24	; 36
    4642:	f3 e2       	ldi	r31, 0x23	; 35
    4644:	0c 94 3d 5a 	jmp	0xb47a	; 0xb47a <__prologue_saves__+0x12>
    4648:	8c 01       	movw	r16, r24
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
    464a:	dc 01       	movw	r26, r24
    464c:	ed 91       	ld	r30, X+
    464e:	fc 91       	ld	r31, X
    4650:	e5 84       	ldd	r14, Z+13	; 0x0d
    4652:	f6 84       	ldd	r15, Z+14	; 0x0e
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
    4654:	c7 01       	movw	r24, r14
    4656:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
    465a:	f7 01       	movw	r30, r14
    465c:	93 83       	std	Z+3, r25	; 0x03
    465e:	82 83       	std	Z+2, r24	; 0x02
	nent = dirb[XDIR_NumSec] + 1;
    4660:	c1 80       	ldd	r12, Z+1	; 0x01
	res = dir_sdi(dp, dp->blk_ofs);
    4662:	f8 01       	movw	r30, r16
    4664:	e0 5c       	subi	r30, 0xC0	; 192
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	40 81       	ld	r20, Z
    466a:	51 81       	ldd	r21, Z+1	; 0x01
    466c:	62 81       	ldd	r22, Z+2	; 0x02
    466e:	73 81       	ldd	r23, Z+3	; 0x03
    4670:	c8 01       	movw	r24, r16
    4672:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    4676:	ec 01       	movw	r28, r24
	while (res == FR_OK) {
    4678:	d1 2c       	mov	r13, r1
		dp->obj.fs->wflag = 1;
    467a:	bb 24       	eor	r11, r11
    467c:	b3 94       	inc	r11
	while (res == FR_OK) {
    467e:	20 97       	sbiw	r28, 0x00	; 0
    4680:	51 f0       	breq	.+20     	; 0x4696 <store_xdir+0x5a>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
    4682:	ce 01       	movw	r24, r28
    4684:	23 97       	sbiw	r28, 0x03	; 3
    4686:	10 f0       	brcs	.+4      	; 0x468c <store_xdir+0x50>
    4688:	82 e0       	ldi	r24, 0x02	; 2
    468a:	90 e0       	ldi	r25, 0x00	; 0
}
    468c:	cd b7       	in	r28, 0x3d	; 61
    468e:	de b7       	in	r29, 0x3e	; 62
    4690:	e9 e0       	ldi	r30, 0x09	; 9
    4692:	0c 94 59 5a 	jmp	0xb4b2	; 0xb4b2 <__epilogue_restores__+0x12>
		res = move_window(dp->obj.fs, dp->sect);
    4696:	d8 01       	movw	r26, r16
    4698:	9e 96       	adiw	r26, 0x2e	; 46
    469a:	4d 91       	ld	r20, X+
    469c:	5d 91       	ld	r21, X+
    469e:	6d 91       	ld	r22, X+
    46a0:	7c 91       	ld	r23, X
    46a2:	d1 97       	sbiw	r26, 0x31	; 49
    46a4:	8d 91       	ld	r24, X+
    46a6:	9c 91       	ld	r25, X
    46a8:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    46ac:	ec 01       	movw	r28, r24
		if (res != FR_OK) break;
    46ae:	89 2b       	or	r24, r25
    46b0:	41 f7       	brne	.-48     	; 0x4682 <store_xdir+0x46>
	if (cnt != 0) {
    46b2:	40 e2       	ldi	r20, 0x20	; 32
    46b4:	50 e0       	ldi	r21, 0x00	; 0
    46b6:	b7 01       	movw	r22, r14
    46b8:	f8 01       	movw	r30, r16
    46ba:	82 a9       	ldd	r24, Z+50	; 0x32
    46bc:	93 a9       	ldd	r25, Z+51	; 0x33
    46be:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
		dp->obj.fs->wflag = 1;
    46c2:	d8 01       	movw	r26, r16
    46c4:	ed 91       	ld	r30, X+
    46c6:	fc 91       	ld	r31, X
    46c8:	b3 82       	std	Z+3, r11	; 0x03
		if (--nent == 0) break;
    46ca:	c1 14       	cp	r12, r1
    46cc:	d1 04       	cpc	r13, r1
    46ce:	c9 f2       	breq	.-78     	; 0x4682 <store_xdir+0x46>
		dirb += SZDIRE;
    46d0:	b0 e2       	ldi	r27, 0x20	; 32
    46d2:	eb 0e       	add	r14, r27
    46d4:	f1 1c       	adc	r15, r1
		res = dir_next(dp, 0);
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	60 e0       	ldi	r22, 0x00	; 0
    46da:	c8 01       	movw	r24, r16
    46dc:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    46e0:	ec 01       	movw	r28, r24
    46e2:	e1 e0       	ldi	r30, 0x01	; 1
    46e4:	ce 1a       	sub	r12, r30
    46e6:	d1 08       	sbc	r13, r1
    46e8:	ca cf       	rjmp	.-108    	; 0x467e <store_xdir+0x42>

000046ea <dir_remove>:
{
    46ea:	b0 e0       	ldi	r27, 0x00	; 0
    46ec:	a0 e0       	ldi	r26, 0x00	; 0
    46ee:	eb e7       	ldi	r30, 0x7B	; 123
    46f0:	f3 e2       	ldi	r31, 0x23	; 35
    46f2:	0c 94 3c 5a 	jmp	0xb478	; 0xb478 <__prologue_saves__+0x10>
    46f6:	ec 01       	movw	r28, r24
	FATFS *fs = dp->obj.fs;
    46f8:	08 81       	ld	r16, Y
    46fa:	19 81       	ldd	r17, Y+1	; 0x01
	DWORD last = dp->dptr;
    46fc:	ce a0       	ldd	r12, Y+38	; 0x26
    46fe:	df a0       	ldd	r13, Y+39	; 0x27
    4700:	e8 a4       	ldd	r14, Y+40	; 0x28
    4702:	f9 a4       	ldd	r15, Y+41	; 0x29
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
    4704:	fc 01       	movw	r30, r24
    4706:	e0 5c       	subi	r30, 0xC0	; 192
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	40 81       	ld	r20, Z
    470c:	51 81       	ldd	r21, Z+1	; 0x01
    470e:	62 81       	ldd	r22, Z+2	; 0x02
    4710:	73 81       	ldd	r23, Z+3	; 0x03
    4712:	4f 3f       	cpi	r20, 0xFF	; 255
    4714:	8f ef       	ldi	r24, 0xFF	; 255
    4716:	58 07       	cpc	r21, r24
    4718:	68 07       	cpc	r22, r24
    471a:	78 07       	cpc	r23, r24
    471c:	81 f5       	brne	.+96     	; 0x477e <dir_remove+0x94>
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
    471e:	85 ee       	ldi	r24, 0xE5	; 229
    4720:	b8 2e       	mov	r11, r24
			fs->wflag = 1;
    4722:	aa 24       	eor	r10, r10
    4724:	a3 94       	inc	r10
			res = move_window(fs, dp->sect);
    4726:	4e a5       	ldd	r20, Y+46	; 0x2e
    4728:	5f a5       	ldd	r21, Y+47	; 0x2f
    472a:	68 a9       	ldd	r22, Y+48	; 0x30
    472c:	79 a9       	ldd	r23, Y+49	; 0x31
    472e:	c8 01       	movw	r24, r16
    4730:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    4734:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
    4736:	89 2b       	or	r24, r25
    4738:	e1 f4       	brne	.+56     	; 0x4772 <dir_remove+0x88>
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
    473a:	ea a9       	ldd	r30, Y+50	; 0x32
    473c:	fb a9       	ldd	r31, Y+51	; 0x33
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    473e:	d8 01       	movw	r26, r16
    4740:	8c 91       	ld	r24, X
    4742:	84 30       	cpi	r24, 0x04	; 4
    4744:	41 f5       	brne	.+80     	; 0x4796 <dir_remove+0xac>
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
    4746:	80 81       	ld	r24, Z
    4748:	8f 77       	andi	r24, 0x7F	; 127
    474a:	80 83       	st	Z, r24
			fs->wflag = 1;
    474c:	f8 01       	movw	r30, r16
    474e:	a3 82       	std	Z+3, r10	; 0x03
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
    4750:	8e a1       	ldd	r24, Y+38	; 0x26
    4752:	9f a1       	ldd	r25, Y+39	; 0x27
    4754:	a8 a5       	ldd	r26, Y+40	; 0x28
    4756:	b9 a5       	ldd	r27, Y+41	; 0x29
    4758:	8c 15       	cp	r24, r12
    475a:	9d 05       	cpc	r25, r13
    475c:	ae 05       	cpc	r26, r14
    475e:	bf 05       	cpc	r27, r15
    4760:	a0 f4       	brcc	.+40     	; 0x478a <dir_remove+0xa0>
			res = dir_next(dp, 0);	/* Next entry */
    4762:	70 e0       	ldi	r23, 0x00	; 0
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	ce 01       	movw	r24, r28
    4768:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    476c:	9c 01       	movw	r18, r24
		} while (res == FR_OK);
    476e:	89 2b       	or	r24, r25
    4770:	d1 f2       	breq	.-76     	; 0x4726 <dir_remove+0x3c>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    4772:	24 30       	cpi	r18, 0x04	; 4
    4774:	31 05       	cpc	r19, r1
    4776:	49 f4       	brne	.+18     	; 0x478a <dir_remove+0xa0>
    4778:	22 e0       	ldi	r18, 0x02	; 2
    477a:	30 e0       	ldi	r19, 0x00	; 0
	return res;
    477c:	06 c0       	rjmp	.+12     	; 0x478a <dir_remove+0xa0>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
    477e:	ce 01       	movw	r24, r28
    4780:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    4784:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    4786:	89 2b       	or	r24, r25
    4788:	51 f2       	breq	.-108    	; 0x471e <dir_remove+0x34>
}
    478a:	c9 01       	movw	r24, r18
    478c:	cd b7       	in	r28, 0x3d	; 61
    478e:	de b7       	in	r29, 0x3e	; 62
    4790:	ea e0       	ldi	r30, 0x0A	; 10
    4792:	0c 94 58 5a 	jmp	0xb4b0	; 0xb4b0 <__epilogue_restores__+0x10>
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
    4796:	b0 82       	st	Z, r11
    4798:	d9 cf       	rjmp	.-78     	; 0x474c <dir_remove+0x62>

0000479a <dir_find>:
{
    479a:	ae e0       	ldi	r26, 0x0E	; 14
    479c:	b0 e0       	ldi	r27, 0x00	; 0
    479e:	e3 ed       	ldi	r30, 0xD3	; 211
    47a0:	f3 e2       	ldi	r31, 0x23	; 35
    47a2:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    47a6:	4c 01       	movw	r8, r24
	FATFS *fs = dp->obj.fs;
    47a8:	dc 01       	movw	r26, r24
    47aa:	0d 90       	ld	r0, X+
    47ac:	bc 91       	ld	r27, X
    47ae:	a0 2d       	mov	r26, r0
    47b0:	be 83       	std	Y+6, r27	; 0x06
    47b2:	ad 83       	std	Y+5, r26	; 0x05
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    47b4:	40 e0       	ldi	r20, 0x00	; 0
    47b6:	50 e0       	ldi	r21, 0x00	; 0
    47b8:	ba 01       	movw	r22, r20
    47ba:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    47be:	1c 01       	movw	r2, r24
	if (res != FR_OK) return res;
    47c0:	89 2b       	or	r24, r25
    47c2:	b9 f4       	brne	.+46     	; 0x47f2 <dir_find+0x58>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    47c4:	ed 81       	ldd	r30, Y+5	; 0x05
    47c6:	fe 81       	ldd	r31, Y+6	; 0x06
    47c8:	80 81       	ld	r24, Z
    47ca:	84 30       	cpi	r24, 0x04	; 4
    47cc:	09 f0       	breq	.+2      	; 0x47d0 <dir_find+0x36>
    47ce:	7b c0       	rjmp	.+246    	; 0x48c6 <dir_find+0x12c>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
    47d0:	83 85       	ldd	r24, Z+11	; 0x0b
    47d2:	94 85       	ldd	r25, Z+12	; 0x0c
    47d4:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <xname_sum>
    47d8:	7c 01       	movw	r14, r24
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
    47da:	70 e0       	ldi	r23, 0x00	; 0
    47dc:	60 e0       	ldi	r22, 0x00	; 0
    47de:	c4 01       	movw	r24, r8
    47e0:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <dir_read>
    47e4:	8f 83       	std	Y+7, r24	; 0x07
    47e6:	98 87       	std	Y+8, r25	; 0x08
    47e8:	af 81       	ldd	r26, Y+7	; 0x07
    47ea:	b8 85       	ldd	r27, Y+8	; 0x08
    47ec:	10 97       	sbiw	r26, 0x00	; 0
    47ee:	31 f0       	breq	.+12     	; 0x47fc <dir_find+0x62>
    47f0:	1d 01       	movw	r2, r26
}
    47f2:	c1 01       	movw	r24, r2
    47f4:	2e 96       	adiw	r28, 0x0e	; 14
    47f6:	e2 e1       	ldi	r30, 0x12	; 18
    47f8:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
    47fc:	ad 81       	ldd	r26, Y+5	; 0x05
    47fe:	be 81       	ldd	r27, Y+6	; 0x06
    4800:	1d 96       	adiw	r26, 0x0d	; 13
    4802:	ed 91       	ld	r30, X+
    4804:	fc 91       	ld	r31, X
    4806:	84 a1       	ldd	r24, Z+36	; 0x24
    4808:	95 a1       	ldd	r25, Z+37	; 0x25
    480a:	e8 16       	cp	r14, r24
    480c:	f9 06       	cpc	r15, r25
    480e:	29 f7       	brne	.-54     	; 0x47da <dir_find+0x40>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
    4810:	c3 a0       	ldd	r12, Z+35	; 0x23
    4812:	d1 2c       	mov	r13, r1
    4814:	00 e4       	ldi	r16, 0x40	; 64
    4816:	10 e0       	ldi	r17, 0x00	; 0
    4818:	af 80       	ldd	r10, Y+7	; 0x07
    481a:	b8 84       	ldd	r11, Y+8	; 0x08
    481c:	aa 0c       	add	r10, r10
    481e:	bb 1c       	adc	r11, r11
    4820:	8f 81       	ldd	r24, Y+7	; 0x07
    4822:	98 85       	ldd	r25, Y+8	; 0x08
    4824:	8c 15       	cp	r24, r12
    4826:	9d 05       	cpc	r25, r13
    4828:	69 f4       	brne	.+26     	; 0x4844 <dir_find+0xaa>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
    482a:	ad 81       	ldd	r26, Y+5	; 0x05
    482c:	be 81       	ldd	r27, Y+6	; 0x06
    482e:	1b 96       	adiw	r26, 0x0b	; 11
    4830:	8d 91       	ld	r24, X+
    4832:	9c 91       	ld	r25, X
    4834:	a8 0e       	add	r10, r24
    4836:	b9 1e       	adc	r11, r25
    4838:	f5 01       	movw	r30, r10
    483a:	80 81       	ld	r24, Z
    483c:	91 81       	ldd	r25, Z+1	; 0x01
    483e:	89 2b       	or	r24, r25
    4840:	61 f6       	brne	.-104    	; 0x47da <dir_find+0x40>
    4842:	d7 cf       	rjmp	.-82     	; 0x47f2 <dir_find+0x58>
				if ((di % SZDIRE) == 0) di += 2;
    4844:	c8 01       	movw	r24, r16
    4846:	8f 71       	andi	r24, 0x1F	; 31
    4848:	99 27       	eor	r25, r25
    484a:	89 2b       	or	r24, r25
    484c:	11 f4       	brne	.+4      	; 0x4852 <dir_find+0xb8>
    484e:	0e 5f       	subi	r16, 0xFE	; 254
    4850:	1f 4f       	sbci	r17, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    4852:	ad 81       	ldd	r26, Y+5	; 0x05
    4854:	be 81       	ldd	r27, Y+6	; 0x06
    4856:	1d 96       	adiw	r26, 0x0d	; 13
    4858:	ed 91       	ld	r30, X+
    485a:	fc 91       	ld	r31, X
    485c:	e0 0f       	add	r30, r16
    485e:	f1 1f       	adc	r31, r17
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
    4860:	80 81       	ld	r24, Z
    4862:	91 81       	ldd	r25, Z+1	; 0x01
    4864:	9c 01       	movw	r18, r24
    4866:	50 e0       	ldi	r21, 0x00	; 0
    4868:	40 e0       	ldi	r20, 0x00	; 0
    486a:	29 83       	std	Y+1, r18	; 0x01
    486c:	3a 83       	std	Y+2, r19	; 0x02
    486e:	4b 83       	std	Y+3, r20	; 0x03
    4870:	5c 83       	std	Y+4, r21	; 0x04
    4872:	ca 01       	movw	r24, r20
    4874:	b9 01       	movw	r22, r18
    4876:	0e 94 0b 4c 	call	0x9816	; 0x9816 <ff_wtoupper>
    487a:	2b 01       	movw	r4, r22
    487c:	3c 01       	movw	r6, r24
    487e:	ad 81       	ldd	r26, Y+5	; 0x05
    4880:	be 81       	ldd	r27, Y+6	; 0x06
    4882:	1b 96       	adiw	r26, 0x0b	; 11
    4884:	8d 91       	ld	r24, X+
    4886:	9c 91       	ld	r25, X
    4888:	a8 0e       	add	r10, r24
    488a:	b9 1e       	adc	r11, r25
    488c:	f5 01       	movw	r30, r10
    488e:	80 81       	ld	r24, Z
    4890:	91 81       	ldd	r25, Z+1	; 0x01
    4892:	9c 01       	movw	r18, r24
    4894:	50 e0       	ldi	r21, 0x00	; 0
    4896:	40 e0       	ldi	r20, 0x00	; 0
    4898:	ca 01       	movw	r24, r20
    489a:	b9 01       	movw	r22, r18
    489c:	0e 94 0b 4c 	call	0x9816	; 0x9816 <ff_wtoupper>
    48a0:	69 83       	std	Y+1, r22	; 0x01
    48a2:	7a 83       	std	Y+2, r23	; 0x02
    48a4:	8b 83       	std	Y+3, r24	; 0x03
    48a6:	9c 83       	std	Y+4, r25	; 0x04
    48a8:	46 16       	cp	r4, r22
    48aa:	57 06       	cpc	r5, r23
    48ac:	68 06       	cpc	r6, r24
    48ae:	79 06       	cpc	r7, r25
    48b0:	09 f0       	breq	.+2      	; 0x48b4 <dir_find+0x11a>
    48b2:	93 cf       	rjmp	.-218    	; 0x47da <dir_find+0x40>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
    48b4:	0e 5f       	subi	r16, 0xFE	; 254
    48b6:	1f 4f       	sbci	r17, 0xFF	; 255
    48b8:	4f 81       	ldd	r20, Y+7	; 0x07
    48ba:	58 85       	ldd	r21, Y+8	; 0x08
    48bc:	4f 5f       	subi	r20, 0xFF	; 255
    48be:	5f 4f       	sbci	r21, 0xFF	; 255
    48c0:	58 87       	std	Y+8, r21	; 0x08
    48c2:	4f 83       	std	Y+7, r20	; 0x07
    48c4:	a9 cf       	rjmp	.-174    	; 0x4818 <dir_find+0x7e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    48c6:	84 01       	movw	r16, r8
    48c8:	00 5c       	subi	r16, 0xC0	; 192
    48ca:	1f 4f       	sbci	r17, 0xFF	; 255
    48cc:	8f ef       	ldi	r24, 0xFF	; 255
    48ce:	9f ef       	ldi	r25, 0xFF	; 255
    48d0:	dc 01       	movw	r26, r24
    48d2:	f8 01       	movw	r30, r16
    48d4:	80 83       	st	Z, r24
    48d6:	91 83       	std	Z+1, r25	; 0x01
    48d8:	a2 83       	std	Z+2, r26	; 0x02
    48da:	b3 83       	std	Z+3, r27	; 0x03
    48dc:	cc 24       	eor	r12, r12
    48de:	ca 94       	dec	r12
    48e0:	ff ef       	ldi	r31, 0xFF	; 255
    48e2:	f9 83       	std	Y+1, r31	; 0x01
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
    48e4:	94 01       	movw	r18, r8
    48e6:	2c 5c       	subi	r18, 0xCC	; 204
    48e8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ea:	3e 87       	std	Y+14, r19	; 0x0e
    48ec:	2d 87       	std	Y+13, r18	; 0x0d
		res = move_window(fs, dp->sect);
    48ee:	d4 01       	movw	r26, r8
    48f0:	9e 96       	adiw	r26, 0x2e	; 46
    48f2:	4d 91       	ld	r20, X+
    48f4:	5d 91       	ld	r21, X+
    48f6:	6d 91       	ld	r22, X+
    48f8:	7c 91       	ld	r23, X
    48fa:	d1 97       	sbiw	r26, 0x31	; 49
    48fc:	8d 81       	ldd	r24, Y+5	; 0x05
    48fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4900:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    4904:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    4906:	89 2b       	or	r24, r25
    4908:	09 f0       	breq	.+2      	; 0x490c <dir_find+0x172>
    490a:	c5 c0       	rjmp	.+394    	; 0x4a96 <dir_find+0x2fc>
		c = dp->dir[DIR_Name];
    490c:	f4 01       	movw	r30, r8
    490e:	e2 a8       	ldd	r14, Z+50	; 0x32
    4910:	f3 a8       	ldd	r15, Z+51	; 0x33
    4912:	d7 01       	movw	r26, r14
    4914:	dc 90       	ld	r13, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4916:	dd 20       	and	r13, r13
    4918:	09 f4       	brne	.+2      	; 0x491c <dir_find+0x182>
    491a:	01 c1       	rjmp	.+514    	; 0x4b1e <dir_find+0x384>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
    491c:	1b 96       	adiw	r26, 0x0b	; 11
    491e:	9c 91       	ld	r25, X
    4920:	89 2f       	mov	r24, r25
    4922:	8f 73       	andi	r24, 0x3F	; 63
    4924:	84 83       	std	Z+4, r24	; 0x04
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4926:	b5 ee       	ldi	r27, 0xE5	; 229
    4928:	db 16       	cp	r13, r27
    492a:	21 f0       	breq	.+8      	; 0x4934 <dir_find+0x19a>
    492c:	93 ff       	sbrs	r25, 3
    492e:	0e c0       	rjmp	.+28     	; 0x494c <dir_find+0x1b2>
    4930:	8f 30       	cpi	r24, 0x0F	; 15
    4932:	79 f0       	breq	.+30     	; 0x4952 <dir_find+0x1b8>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    4934:	2f ef       	ldi	r18, 0xFF	; 255
    4936:	f8 01       	movw	r30, r16
    4938:	20 83       	st	Z, r18
    493a:	3f ef       	ldi	r19, 0xFF	; 255
    493c:	31 83       	std	Z+1, r19	; 0x01
    493e:	4f ef       	ldi	r20, 0xFF	; 255
    4940:	42 83       	std	Z+2, r20	; 0x02
    4942:	5f ef       	ldi	r21, 0xFF	; 255
    4944:	53 83       	std	Z+3, r21	; 0x03
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4946:	8f ef       	ldi	r24, 0xFF	; 255
    4948:	89 83       	std	Y+1, r24	; 0x01
    494a:	9c c0       	rjmp	.+312    	; 0x4a84 <dir_find+0x2ea>
			if (a == AM_LFN) {			/* An LFN entry is found */
    494c:	8f 30       	cpi	r24, 0x0F	; 15
    494e:	09 f0       	breq	.+2      	; 0x4952 <dir_find+0x1b8>
    4950:	b2 c0       	rjmp	.+356    	; 0x4ab6 <dir_find+0x31c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
    4952:	d4 01       	movw	r26, r8
    4954:	df 96       	adiw	r26, 0x3f	; 63
    4956:	8c 91       	ld	r24, X
    4958:	df 97       	sbiw	r26, 0x3f	; 63
    495a:	86 fd       	sbrc	r24, 6
    495c:	93 c0       	rjmp	.+294    	; 0x4a84 <dir_find+0x2ea>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
    495e:	d6 fe       	sbrs	r13, 6
    4960:	9c c0       	rjmp	.+312    	; 0x4a9a <dir_find+0x300>
						sum = dp->dir[LDIR_Chksum];
    4962:	f7 01       	movw	r30, r14
    4964:	c5 84       	ldd	r12, Z+13	; 0x0d
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
    4966:	e8 94       	clt
    4968:	d6 f8       	bld	r13, 6
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
    496a:	96 96       	adiw	r26, 0x26	; 38
    496c:	8d 91       	ld	r24, X+
    496e:	9d 91       	ld	r25, X+
    4970:	0d 90       	ld	r0, X+
    4972:	bc 91       	ld	r27, X
    4974:	a0 2d       	mov	r26, r0
    4976:	f8 01       	movw	r30, r16
    4978:	80 83       	st	Z, r24
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	a2 83       	std	Z+2, r26	; 0x02
    497e:	b3 83       	std	Z+3, r27	; 0x03
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4980:	d7 01       	movw	r26, r14
    4982:	1d 96       	adiw	r26, 0x0d	; 13
    4984:	8c 91       	ld	r24, X
    4986:	1d 97       	sbiw	r26, 0x0d	; 13
    4988:	8c 11       	cpse	r24, r12
    498a:	dd cf       	rjmp	.-70     	; 0x4946 <dir_find+0x1ac>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
    498c:	5a 96       	adiw	r26, 0x1a	; 26
    498e:	8d 91       	ld	r24, X+
    4990:	9c 91       	ld	r25, X
    4992:	5b 97       	sbiw	r26, 0x1b	; 27
    4994:	89 2b       	or	r24, r25
    4996:	09 f0       	breq	.+2      	; 0x499a <dir_find+0x200>
    4998:	b6 c0       	rjmp	.+364    	; 0x4b06 <dir_find+0x36c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    499a:	ed 81       	ldd	r30, Y+5	; 0x05
    499c:	fe 81       	ldd	r31, Y+6	; 0x06
    499e:	63 84       	ldd	r6, Z+11	; 0x0b
    49a0:	74 84       	ldd	r7, Z+12	; 0x0c
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    49a2:	8c 91       	ld	r24, X
    49a4:	8f 73       	andi	r24, 0x3F	; 63
    49a6:	81 50       	subi	r24, 0x01	; 1
    49a8:	99 0b       	sbc	r25, r25
    49aa:	4d e0       	ldi	r20, 0x0D	; 13
    49ac:	48 9f       	mul	r20, r24
    49ae:	90 01       	movw	r18, r0
    49b0:	49 9f       	mul	r20, r25
    49b2:	30 0d       	add	r19, r0
    49b4:	11 24       	eor	r1, r1
    49b6:	38 87       	std	Y+8, r19	; 0x08
    49b8:	2f 83       	std	Y+7, r18	; 0x07
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    49ba:	3d e9       	ldi	r19, 0x9D	; 157
    49bc:	43 2e       	mov	r4, r19
    49be:	31 e0       	ldi	r19, 0x01	; 1
    49c0:	53 2e       	mov	r5, r19
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	90 e0       	ldi	r25, 0x00	; 0
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    49c6:	d2 01       	movw	r26, r4
    49c8:	2d 91       	ld	r18, X+
    49ca:	2d 01       	movw	r4, r26
	rv = rv << 8 | ptr[0];
    49cc:	f7 01       	movw	r30, r14
    49ce:	e2 0f       	add	r30, r18
    49d0:	f1 1d       	adc	r31, r1
    49d2:	a0 80       	ld	r10, Z
    49d4:	b1 80       	ldd	r11, Z+1	; 0x01
		if (wc != 0) {
    49d6:	00 97       	sbiw	r24, 0x00	; 0
    49d8:	09 f4       	brne	.+2      	; 0x49dc <dir_find+0x242>
    49da:	66 c0       	rjmp	.+204    	; 0x4aa8 <dir_find+0x30e>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    49dc:	ef 81       	ldd	r30, Y+7	; 0x07
    49de:	f8 85       	ldd	r31, Y+8	; 0x08
    49e0:	ef 3f       	cpi	r30, 0xFF	; 255
    49e2:	f1 05       	cpc	r31, r1
    49e4:	11 f0       	breq	.+4      	; 0x49ea <dir_find+0x250>
    49e6:	08 f0       	brcs	.+2      	; 0x49ea <dir_find+0x250>
    49e8:	91 c0       	rjmp	.+290    	; 0x4b0c <dir_find+0x372>
    49ea:	50 e0       	ldi	r21, 0x00	; 0
    49ec:	40 e0       	ldi	r20, 0x00	; 0
    49ee:	ca 01       	movw	r24, r20
    49f0:	b5 01       	movw	r22, r10
    49f2:	0e 94 0b 4c 	call	0x9816	; 0x9816 <ff_wtoupper>
    49f6:	69 83       	std	Y+1, r22	; 0x01
    49f8:	7a 83       	std	Y+2, r23	; 0x02
    49fa:	8b 83       	std	Y+3, r24	; 0x03
    49fc:	9c 83       	std	Y+4, r25	; 0x04
    49fe:	4f 81       	ldd	r20, Y+7	; 0x07
    4a00:	58 85       	ldd	r21, Y+8	; 0x08
    4a02:	4f 5f       	subi	r20, 0xFF	; 255
    4a04:	5f 4f       	sbci	r21, 0xFF	; 255
    4a06:	5c 87       	std	Y+12, r21	; 0x0c
    4a08:	4b 87       	std	Y+11, r20	; 0x0b
    4a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    4a0c:	98 85       	ldd	r25, Y+8	; 0x08
    4a0e:	88 0f       	add	r24, r24
    4a10:	99 1f       	adc	r25, r25
    4a12:	86 0d       	add	r24, r6
    4a14:	97 1d       	adc	r25, r7
    4a16:	dc 01       	movw	r26, r24
    4a18:	8d 91       	ld	r24, X+
    4a1a:	9c 91       	ld	r25, X
    4a1c:	9c 01       	movw	r18, r24
    4a1e:	50 e0       	ldi	r21, 0x00	; 0
    4a20:	40 e0       	ldi	r20, 0x00	; 0
    4a22:	ca 01       	movw	r24, r20
    4a24:	b9 01       	movw	r22, r18
    4a26:	0e 94 0b 4c 	call	0x9816	; 0x9816 <ff_wtoupper>
    4a2a:	6f 83       	std	Y+7, r22	; 0x07
    4a2c:	78 87       	std	Y+8, r23	; 0x08
    4a2e:	89 87       	std	Y+9, r24	; 0x09
    4a30:	9a 87       	std	Y+10, r25	; 0x0a
    4a32:	29 81       	ldd	r18, Y+1	; 0x01
    4a34:	3a 81       	ldd	r19, Y+2	; 0x02
    4a36:	4b 81       	ldd	r20, Y+3	; 0x03
    4a38:	5c 81       	ldd	r21, Y+4	; 0x04
    4a3a:	26 17       	cp	r18, r22
    4a3c:	37 07       	cpc	r19, r23
    4a3e:	48 07       	cpc	r20, r24
    4a40:	59 07       	cpc	r21, r25
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <dir_find+0x2ac>
    4a44:	66 c0       	rjmp	.+204    	; 0x4b12 <dir_find+0x378>
	rv = rv << 8 | ptr[0];
    4a46:	c5 01       	movw	r24, r10
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    4a48:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a4a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a4c:	58 87       	std	Y+8, r21	; 0x08
    4a4e:	4f 83       	std	Y+7, r20	; 0x07
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    4a50:	aa ea       	ldi	r26, 0xAA	; 170
    4a52:	4a 16       	cp	r4, r26
    4a54:	a1 e0       	ldi	r26, 0x01	; 1
    4a56:	5a 06       	cpc	r5, r26
    4a58:	09 f0       	breq	.+2      	; 0x4a5c <dir_find+0x2c2>
    4a5a:	b5 cf       	rjmp	.-150    	; 0x49c6 <dir_find+0x22c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
    4a5c:	f7 01       	movw	r30, r14
    4a5e:	20 81       	ld	r18, Z
    4a60:	26 ff       	sbrs	r18, 6
    4a62:	0e c0       	rjmp	.+28     	; 0x4a80 <dir_find+0x2e6>
    4a64:	89 2b       	or	r24, r25
    4a66:	61 f0       	breq	.+24     	; 0x4a80 <dir_find+0x2e6>
    4a68:	2f 81       	ldd	r18, Y+7	; 0x07
    4a6a:	38 85       	ldd	r19, Y+8	; 0x08
    4a6c:	22 0f       	add	r18, r18
    4a6e:	33 1f       	adc	r19, r19
    4a70:	26 0d       	add	r18, r6
    4a72:	37 1d       	adc	r19, r7
    4a74:	d9 01       	movw	r26, r18
    4a76:	8d 91       	ld	r24, X+
    4a78:	9c 91       	ld	r25, X
    4a7a:	89 2b       	or	r24, r25
    4a7c:	09 f0       	breq	.+2      	; 0x4a80 <dir_find+0x2e6>
    4a7e:	4c c0       	rjmp	.+152    	; 0x4b18 <dir_find+0x37e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4a80:	da 94       	dec	r13
    4a82:	d9 82       	std	Y+1, r13	; 0x01
		res = dir_next(dp, 0);	/* Next entry */
    4a84:	70 e0       	ldi	r23, 0x00	; 0
    4a86:	60 e0       	ldi	r22, 0x00	; 0
    4a88:	c4 01       	movw	r24, r8
    4a8a:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    4a8e:	9c 01       	movw	r18, r24
	} while (res == FR_OK);
    4a90:	89 2b       	or	r24, r25
    4a92:	09 f4       	brne	.+2      	; 0x4a96 <dir_find+0x2fc>
    4a94:	2c cf       	rjmp	.-424    	; 0x48ee <dir_find+0x154>
    4a96:	19 01       	movw	r2, r18
    4a98:	ac ce       	rjmp	.-680    	; 0x47f2 <dir_find+0x58>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4a9a:	f9 81       	ldd	r31, Y+1	; 0x01
    4a9c:	fd 15       	cp	r31, r13
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <dir_find+0x308>
    4aa0:	6f cf       	rjmp	.-290    	; 0x4980 <dir_find+0x1e6>
    4aa2:	5f ef       	ldi	r21, 0xFF	; 255
    4aa4:	59 83       	std	Y+1, r21	; 0x01
    4aa6:	ee cf       	rjmp	.-36     	; 0x4a84 <dir_find+0x2ea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
    4aa8:	5f ef       	ldi	r21, 0xFF	; 255
    4aaa:	a5 16       	cp	r10, r21
    4aac:	b5 06       	cpc	r11, r21
    4aae:	81 f2       	breq	.-96     	; 0x4a50 <dir_find+0x2b6>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4ab0:	ef ef       	ldi	r30, 0xFF	; 255
    4ab2:	e9 83       	std	Y+1, r30	; 0x01
    4ab4:	e7 cf       	rjmp	.-50     	; 0x4a84 <dir_find+0x2ea>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
    4ab6:	b9 81       	ldd	r27, Y+1	; 0x01
    4ab8:	b1 11       	cpse	r27, r1
    4aba:	06 c0       	rjmp	.+12     	; 0x4ac8 <dir_find+0x32e>
    4abc:	c7 01       	movw	r24, r14
    4abe:	0e 94 4f 13 	call	0x269e	; 0x269e <sum_sfn>
    4ac2:	8c 15       	cp	r24, r12
    4ac4:	09 f4       	brne	.+2      	; 0x4ac8 <dir_find+0x32e>
    4ac6:	95 ce       	rjmp	.-726    	; 0x47f2 <dir_find+0x58>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
    4ac8:	f4 01       	movw	r30, r8
    4aca:	87 ad       	ldd	r24, Z+63	; 0x3f
    4acc:	80 fd       	sbrc	r24, 0
    4ace:	0a c0       	rjmp	.+20     	; 0x4ae4 <dir_find+0x34a>
    4ad0:	4b e0       	ldi	r20, 0x0B	; 11
    4ad2:	50 e0       	ldi	r21, 0x00	; 0
    4ad4:	6d 85       	ldd	r22, Y+13	; 0x0d
    4ad6:	7e 85       	ldd	r23, Y+14	; 0x0e
    4ad8:	c7 01       	movw	r24, r14
    4ada:	0e 94 e7 12 	call	0x25ce	; 0x25ce <mem_cmp>
    4ade:	89 2b       	or	r24, r25
    4ae0:	09 f4       	brne	.+2      	; 0x4ae4 <dir_find+0x34a>
    4ae2:	87 ce       	rjmp	.-754    	; 0x47f2 <dir_find+0x58>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    4ae4:	ef ef       	ldi	r30, 0xFF	; 255
    4ae6:	d8 01       	movw	r26, r16
    4ae8:	ec 93       	st	X, r30
    4aea:	ff ef       	ldi	r31, 0xFF	; 255
    4aec:	11 96       	adiw	r26, 0x01	; 1
    4aee:	fc 93       	st	X, r31
    4af0:	11 97       	sbiw	r26, 0x01	; 1
    4af2:	2f ef       	ldi	r18, 0xFF	; 255
    4af4:	12 96       	adiw	r26, 0x02	; 2
    4af6:	2c 93       	st	X, r18
    4af8:	12 97       	sbiw	r26, 0x02	; 2
    4afa:	3f ef       	ldi	r19, 0xFF	; 255
    4afc:	13 96       	adiw	r26, 0x03	; 3
    4afe:	3c 93       	st	X, r19
    4b00:	4f ef       	ldi	r20, 0xFF	; 255
    4b02:	49 83       	std	Y+1, r20	; 0x01
    4b04:	bf cf       	rjmp	.-130    	; 0x4a84 <dir_find+0x2ea>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4b06:	9f ef       	ldi	r25, 0xFF	; 255
    4b08:	99 83       	std	Y+1, r25	; 0x01
    4b0a:	bc cf       	rjmp	.-136    	; 0x4a84 <dir_find+0x2ea>
    4b0c:	af ef       	ldi	r26, 0xFF	; 255
    4b0e:	a9 83       	std	Y+1, r26	; 0x01
    4b10:	b9 cf       	rjmp	.-142    	; 0x4a84 <dir_find+0x2ea>
    4b12:	bf ef       	ldi	r27, 0xFF	; 255
    4b14:	b9 83       	std	Y+1, r27	; 0x01
    4b16:	b6 cf       	rjmp	.-148    	; 0x4a84 <dir_find+0x2ea>
    4b18:	ff ef       	ldi	r31, 0xFF	; 255
    4b1a:	f9 83       	std	Y+1, r31	; 0x01
    4b1c:	b3 cf       	rjmp	.-154    	; 0x4a84 <dir_find+0x2ea>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4b1e:	84 e0       	ldi	r24, 0x04	; 4
    4b20:	28 2e       	mov	r2, r24
    4b22:	31 2c       	mov	r3, r1
    4b24:	66 ce       	rjmp	.-820    	; 0x47f2 <dir_find+0x58>

00004b26 <dir_register>:
{
    4b26:	a2 e5       	ldi	r26, 0x52	; 82
    4b28:	b0 e0       	ldi	r27, 0x00	; 0
    4b2a:	e9 e9       	ldi	r30, 0x99	; 153
    4b2c:	f5 e2       	ldi	r31, 0x25	; 37
    4b2e:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    4b32:	4c 01       	movw	r8, r24
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
    4b34:	dc 01       	movw	r26, r24
    4b36:	df 96       	adiw	r26, 0x3f	; 63
    4b38:	8c 91       	ld	r24, X
    4b3a:	df 97       	sbiw	r26, 0x3f	; 63
    4b3c:	80 7a       	andi	r24, 0xA0	; 160
    4b3e:	58 2e       	mov	r5, r24
    4b40:	06 e0       	ldi	r16, 0x06	; 6
    4b42:	10 e0       	ldi	r17, 0x00	; 0
    4b44:	09 f0       	breq	.+2      	; 0x4b48 <dir_register+0x22>
    4b46:	21 c1       	rjmp	.+578    	; 0x4d8a <dir_register+0x264>
	FATFS *fs = dp->obj.fs;
    4b48:	6d 90       	ld	r6, X+
    4b4a:	7c 90       	ld	r7, X
    4b4c:	d3 01       	movw	r26, r6
    4b4e:	1b 96       	adiw	r26, 0x0b	; 11
    4b50:	ed 91       	ld	r30, X+
    4b52:	fc 91       	ld	r31, X
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
    4b54:	f1 2c       	mov	r15, r1
    4b56:	e1 2c       	mov	r14, r1
    4b58:	81 91       	ld	r24, Z+
    4b5a:	91 91       	ld	r25, Z+
    4b5c:	89 2b       	or	r24, r25
    4b5e:	09 f0       	breq	.+2      	; 0x4b62 <dir_register+0x3c>
    4b60:	1a c1       	rjmp	.+564    	; 0x4d96 <dir_register+0x270>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    4b62:	f3 01       	movw	r30, r6
    4b64:	80 81       	ld	r24, Z
    4b66:	84 30       	cpi	r24, 0x04	; 4
    4b68:	09 f0       	breq	.+2      	; 0x4b6c <dir_register+0x46>
    4b6a:	1b c1       	rjmp	.+566    	; 0x4da2 <dir_register+0x27c>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
    4b6c:	c7 01       	movw	r24, r14
    4b6e:	0e 96       	adiw	r24, 0x0e	; 14
    4b70:	6f e0       	ldi	r22, 0x0F	; 15
    4b72:	70 e0       	ldi	r23, 0x00	; 0
    4b74:	0e 94 6c 59 	call	0xb2d8	; 0xb2d8 <__udivmodhi4>
    4b78:	7b 01       	movw	r14, r22
    4b7a:	6e 5f       	subi	r22, 0xFE	; 254
    4b7c:	7f 4f       	sbci	r23, 0xFF	; 255
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
    4b7e:	c4 01       	movw	r24, r8
    4b80:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <dir_alloc>
    4b84:	8c 01       	movw	r16, r24
		if (res != FR_OK) return res;
    4b86:	89 2b       	or	r24, r25
    4b88:	09 f0       	breq	.+2      	; 0x4b8c <dir_register+0x66>
    4b8a:	ff c0       	rjmp	.+510    	; 0x4d8a <dir_register+0x264>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
    4b8c:	94 01       	movw	r18, r8
    4b8e:	20 5c       	subi	r18, 0xC0	; 192
    4b90:	3f 4f       	sbci	r19, 0xFF	; 255
    4b92:	ff ef       	ldi	r31, 0xFF	; 255
    4b94:	ef 1a       	sub	r14, r31
    4b96:	ff 0a       	sbc	r15, r31
    4b98:	45 e0       	ldi	r20, 0x05	; 5
    4b9a:	ee 0c       	add	r14, r14
    4b9c:	ff 1c       	adc	r15, r15
    4b9e:	4a 95       	dec	r20
    4ba0:	e1 f7       	brne	.-8      	; 0x4b9a <dir_register+0x74>
    4ba2:	f4 01       	movw	r30, r8
    4ba4:	86 a1       	ldd	r24, Z+38	; 0x26
    4ba6:	97 a1       	ldd	r25, Z+39	; 0x27
    4ba8:	a0 a5       	ldd	r26, Z+40	; 0x28
    4baa:	b1 a5       	ldd	r27, Z+41	; 0x29
    4bac:	8e 19       	sub	r24, r14
    4bae:	9f 09       	sbc	r25, r15
    4bb0:	a1 09       	sbc	r26, r1
    4bb2:	b1 09       	sbc	r27, r1
    4bb4:	f9 01       	movw	r30, r18
    4bb6:	80 83       	st	Z, r24
    4bb8:	91 83       	std	Z+1, r25	; 0x01
    4bba:	a2 83       	std	Z+2, r26	; 0x02
    4bbc:	b3 83       	std	Z+3, r27	; 0x03
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
    4bbe:	d4 01       	movw	r26, r8
    4bc0:	15 96       	adiw	r26, 0x05	; 5
    4bc2:	8c 91       	ld	r24, X
    4bc4:	15 97       	sbiw	r26, 0x05	; 5
    4bc6:	82 ff       	sbrs	r24, 2
    4bc8:	8c c0       	rjmp	.+280    	; 0x4ce2 <dir_register+0x1bc>
			dp->obj.stat &= ~4;
    4bca:	8b 7f       	andi	r24, 0xFB	; 251
    4bcc:	15 96       	adiw	r26, 0x05	; 5
    4bce:	8c 93       	st	X, r24
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
    4bd0:	c4 01       	movw	r24, r8
    4bd2:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fill_first_frag>
    4bd6:	8c 01       	movw	r16, r24
			if (res != FR_OK) return res;
    4bd8:	89 2b       	or	r24, r25
    4bda:	09 f0       	breq	.+2      	; 0x4bde <dir_register+0xb8>
    4bdc:	d6 c0       	rjmp	.+428    	; 0x4d8a <dir_register+0x264>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
    4bde:	f4 01       	movw	r30, r8
    4be0:	42 a5       	ldd	r20, Z+42	; 0x2a
    4be2:	53 a5       	ldd	r21, Z+43	; 0x2b
    4be4:	64 a5       	ldd	r22, Z+44	; 0x2c
    4be6:	75 a5       	ldd	r23, Z+45	; 0x2d
    4be8:	0f ef       	ldi	r16, 0xFF	; 255
    4bea:	1f ef       	ldi	r17, 0xFF	; 255
    4bec:	98 01       	movw	r18, r16
    4bee:	c4 01       	movw	r24, r8
    4bf0:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <fill_last_frag>
    4bf4:	8c 01       	movw	r16, r24
			if (res != FR_OK) return res;
    4bf6:	89 2b       	or	r24, r25
    4bf8:	09 f0       	breq	.+2      	; 0x4bfc <dir_register+0xd6>
    4bfa:	c7 c0       	rjmp	.+398    	; 0x4d8a <dir_register+0x264>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
    4bfc:	f4 01       	movw	r30, r8
    4bfe:	86 81       	ldd	r24, Z+6	; 0x06
    4c00:	97 81       	ldd	r25, Z+7	; 0x07
    4c02:	a0 85       	ldd	r26, Z+8	; 0x08
    4c04:	b1 85       	ldd	r27, Z+9	; 0x09
    4c06:	89 2b       	or	r24, r25
    4c08:	8a 2b       	or	r24, r26
    4c0a:	8b 2b       	or	r24, r27
    4c0c:	09 f4       	brne	.+2      	; 0x4c10 <dir_register+0xea>
    4c0e:	69 c0       	rjmp	.+210    	; 0x4ce2 <dir_register+0x1bc>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
    4c10:	b4 01       	movw	r22, r8
    4c12:	ce 01       	movw	r24, r28
    4c14:	01 96       	adiw	r24, 0x01	; 1
    4c16:	0e 94 91 21 	call	0x4322	; 0x4322 <load_obj_xdir>
    4c1a:	8c 01       	movw	r16, r24
				if (res != FR_OK) return res;
    4c1c:	89 2b       	or	r24, r25
    4c1e:	09 f0       	breq	.+2      	; 0x4c22 <dir_register+0xfc>
    4c20:	b4 c0       	rjmp	.+360    	; 0x4d8a <dir_register+0x264>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
    4c22:	d3 01       	movw	r26, r6
    4c24:	19 96       	adiw	r26, 0x09	; 9
    4c26:	ad 90       	ld	r10, X+
    4c28:	bc 90       	ld	r11, X
    4c2a:	1a 97       	sbiw	r26, 0x0a	; 10
    4c2c:	d1 2c       	mov	r13, r1
    4c2e:	c1 2c       	mov	r12, r1
    4c30:	39 e0       	ldi	r19, 0x09	; 9
    4c32:	aa 0c       	add	r10, r10
    4c34:	bb 1c       	adc	r11, r11
    4c36:	cc 1c       	adc	r12, r12
    4c38:	dd 1c       	adc	r13, r13
    4c3a:	3a 95       	dec	r19
    4c3c:	d1 f7       	brne	.-12     	; 0x4c32 <dir_register+0x10c>
    4c3e:	95 01       	movw	r18, r10
    4c40:	a6 01       	movw	r20, r12
    4c42:	60 e0       	ldi	r22, 0x00	; 0
    4c44:	70 e0       	ldi	r23, 0x00	; 0
    4c46:	80 e0       	ldi	r24, 0x00	; 0
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	f4 01       	movw	r30, r8
    4c4c:	a2 84       	ldd	r10, Z+10	; 0x0a
    4c4e:	b3 84       	ldd	r11, Z+11	; 0x0b
    4c50:	c4 84       	ldd	r12, Z+12	; 0x0c
    4c52:	d5 84       	ldd	r13, Z+13	; 0x0d
    4c54:	e6 84       	ldd	r14, Z+14	; 0x0e
    4c56:	f7 84       	ldd	r15, Z+15	; 0x0f
    4c58:	00 89       	ldd	r16, Z+16	; 0x10
    4c5a:	11 89       	ldd	r17, Z+17	; 0x11
    4c5c:	0e 94 88 5a 	call	0xb510	; 0xb510 <__adddi3>
    4c60:	89 01       	movw	r16, r18
    4c62:	9a 01       	movw	r18, r20
    4c64:	ab 01       	movw	r20, r22
    4c66:	bc 01       	movw	r22, r24
    4c68:	02 87       	std	Z+10, r16	; 0x0a
    4c6a:	13 87       	std	Z+11, r17	; 0x0b
    4c6c:	24 87       	std	Z+12, r18	; 0x0c
    4c6e:	35 87       	std	Z+13, r19	; 0x0d
    4c70:	46 87       	std	Z+14, r20	; 0x0e
    4c72:	57 87       	std	Z+15, r21	; 0x0f
    4c74:	80 8b       	std	Z+16, r24	; 0x10
    4c76:	71 8b       	std	Z+17, r23	; 0x11
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
    4c78:	1d 96       	adiw	r26, 0x0d	; 13
    4c7a:	8d 91       	ld	r24, X+
    4c7c:	9c 91       	ld	r25, X
    4c7e:	c8 96       	adiw	r24, 0x38	; 56
    4c80:	0e 94 ce 12 	call	0x259c	; 0x259c <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
    4c84:	d4 01       	movw	r26, r8
    4c86:	1a 96       	adiw	r26, 0x0a	; 10
    4c88:	0c 91       	ld	r16, X
    4c8a:	1a 97       	sbiw	r26, 0x0a	; 10
    4c8c:	1b 96       	adiw	r26, 0x0b	; 11
    4c8e:	1c 91       	ld	r17, X
    4c90:	1b 97       	sbiw	r26, 0x0b	; 11
    4c92:	1c 96       	adiw	r26, 0x0c	; 12
    4c94:	2c 91       	ld	r18, X
    4c96:	1c 97       	sbiw	r26, 0x0c	; 12
    4c98:	1d 96       	adiw	r26, 0x0d	; 13
    4c9a:	3c 91       	ld	r19, X
    4c9c:	1d 97       	sbiw	r26, 0x0d	; 13
    4c9e:	1e 96       	adiw	r26, 0x0e	; 14
    4ca0:	4c 91       	ld	r20, X
    4ca2:	1e 97       	sbiw	r26, 0x0e	; 14
    4ca4:	1f 96       	adiw	r26, 0x0f	; 15
    4ca6:	5c 91       	ld	r21, X
    4ca8:	1f 97       	sbiw	r26, 0x0f	; 15
    4caa:	50 96       	adiw	r26, 0x10	; 16
    4cac:	6c 91       	ld	r22, X
    4cae:	50 97       	sbiw	r26, 0x10	; 16
    4cb0:	51 96       	adiw	r26, 0x11	; 17
    4cb2:	7c 91       	ld	r23, X
    4cb4:	f3 01       	movw	r30, r6
    4cb6:	85 85       	ldd	r24, Z+13	; 0x0d
    4cb8:	96 85       	ldd	r25, Z+14	; 0x0e
    4cba:	88 96       	adiw	r24, 0x28	; 40
    4cbc:	0e 94 ce 12 	call	0x259c	; 0x259c <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;			/* Update the allocation status */
    4cc0:	d3 01       	movw	r26, r6
    4cc2:	1d 96       	adiw	r26, 0x0d	; 13
    4cc4:	ed 91       	ld	r30, X+
    4cc6:	fc 91       	ld	r31, X
    4cc8:	d4 01       	movw	r26, r8
    4cca:	15 96       	adiw	r26, 0x05	; 5
    4ccc:	8c 91       	ld	r24, X
    4cce:	81 60       	ori	r24, 0x01	; 1
    4cd0:	81 a3       	std	Z+33, r24	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
    4cd2:	ce 01       	movw	r24, r28
    4cd4:	01 96       	adiw	r24, 0x01	; 1
    4cd6:	0e 94 1e 23 	call	0x463c	; 0x463c <store_xdir>
    4cda:	8c 01       	movw	r16, r24
				if (res != FR_OK) return res;
    4cdc:	89 2b       	or	r24, r25
    4cde:	09 f0       	breq	.+2      	; 0x4ce2 <dir_register+0x1bc>
    4ce0:	54 c0       	rjmp	.+168    	; 0x4d8a <dir_register+0x264>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
    4ce2:	f3 01       	movw	r30, r6
    4ce4:	c3 84       	ldd	r12, Z+11	; 0x0b
    4ce6:	d4 84       	ldd	r13, Z+12	; 0x0c
    4ce8:	e5 84       	ldd	r14, Z+13	; 0x0d
    4cea:	f6 84       	ldd	r15, Z+14	; 0x0e
	mem_set(dirb, 0, 2 * SZDIRE);
    4cec:	40 e4       	ldi	r20, 0x40	; 64
    4cee:	50 e0       	ldi	r21, 0x00	; 0
    4cf0:	70 e0       	ldi	r23, 0x00	; 0
    4cf2:	60 e0       	ldi	r22, 0x00	; 0
    4cf4:	c7 01       	movw	r24, r14
    4cf6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
    4cfa:	85 e8       	ldi	r24, 0x85	; 133
    4cfc:	d7 01       	movw	r26, r14
    4cfe:	8c 93       	st	X, r24
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
    4d00:	80 ec       	ldi	r24, 0xC0	; 192
    4d02:	90 96       	adiw	r26, 0x20	; 32
    4d04:	8c 93       	st	X, r24
	nlen = nc1 = 0; wc = 1;
    4d06:	80 e0       	ldi	r24, 0x00	; 0
    4d08:	21 e0       	ldi	r18, 0x01	; 1
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
	i = SZDIRE * 2;	/* Top of file_name entries */
    4d0c:	40 e4       	ldi	r20, 0x40	; 64
    4d0e:	50 e0       	ldi	r21, 0x00	; 0
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
    4d10:	91 ec       	ldi	r25, 0xC1	; 193
    4d12:	64 e0       	ldi	r22, 0x04	; 4
    4d14:	70 e0       	ldi	r23, 0x00	; 0
    4d16:	6e 19       	sub	r22, r14
    4d18:	7f 09       	sbc	r23, r15
    4d1a:	f7 01       	movw	r30, r14
    4d1c:	e4 0f       	add	r30, r20
    4d1e:	f5 1f       	adc	r31, r21
    4d20:	90 83       	st	Z, r25
    4d22:	11 82       	std	Z+1, r1	; 0x01
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
    4d24:	21 15       	cp	r18, r1
    4d26:	31 05       	cpc	r19, r1
    4d28:	61 f0       	breq	.+24     	; 0x4d42 <dir_register+0x21c>
    4d2a:	a5 2d       	mov	r26, r5
    4d2c:	b0 e0       	ldi	r27, 0x00	; 0
    4d2e:	aa 0f       	add	r26, r26
    4d30:	bb 1f       	adc	r27, r27
    4d32:	ac 0d       	add	r26, r12
    4d34:	bd 1d       	adc	r27, r13
    4d36:	2d 91       	ld	r18, X+
    4d38:	3c 91       	ld	r19, X
    4d3a:	21 15       	cp	r18, r1
    4d3c:	31 05       	cpc	r19, r1
    4d3e:	09 f0       	breq	.+2      	; 0x4d42 <dir_register+0x21c>
    4d40:	53 94       	inc	r5
	*ptr++ = (BYTE)val; val >>= 8;
    4d42:	22 83       	std	Z+2, r18	; 0x02
	*ptr++ = (BYTE)val;
    4d44:	33 83       	std	Z+3, r19	; 0x03
			i += 2;
    4d46:	ab 01       	movw	r20, r22
    4d48:	4e 0f       	add	r20, r30
    4d4a:	5f 1f       	adc	r21, r31
		} while (i % SZDIRE != 0);
    4d4c:	32 96       	adiw	r30, 0x02	; 2
    4d4e:	da 01       	movw	r26, r20
    4d50:	af 71       	andi	r26, 0x1F	; 31
    4d52:	bb 27       	eor	r27, r27
    4d54:	ab 2b       	or	r26, r27
    4d56:	31 f7       	brne	.-52     	; 0x4d24 <dir_register+0x1fe>
		nc1++;
    4d58:	e1 e0       	ldi	r30, 0x01	; 1
    4d5a:	e8 0f       	add	r30, r24
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
    4d5c:	a5 2d       	mov	r26, r5
    4d5e:	b0 e0       	ldi	r27, 0x00	; 0
    4d60:	aa 0f       	add	r26, r26
    4d62:	bb 1f       	adc	r27, r27
    4d64:	ac 0d       	add	r26, r12
    4d66:	bd 1d       	adc	r27, r13
    4d68:	0d 91       	ld	r16, X+
    4d6a:	1c 91       	ld	r17, X
    4d6c:	01 15       	cp	r16, r1
    4d6e:	11 05       	cpc	r17, r1
    4d70:	b1 f4       	brne	.+44     	; 0x4d9e <dir_register+0x278>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
    4d72:	f7 01       	movw	r30, r14
    4d74:	53 a2       	std	Z+35, r5	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
    4d76:	8e 5f       	subi	r24, 0xFE	; 254
    4d78:	81 83       	std	Z+1, r24	; 0x01
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
    4d7a:	c6 01       	movw	r24, r12
    4d7c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
    4d80:	d7 01       	movw	r26, r14
    4d82:	95 96       	adiw	r26, 0x25	; 37
    4d84:	9c 93       	st	X, r25
    4d86:	8e 93       	st	-X, r24
    4d88:	94 97       	sbiw	r26, 0x24	; 36
}
    4d8a:	c8 01       	movw	r24, r16
    4d8c:	ce 5a       	subi	r28, 0xAE	; 174
    4d8e:	df 4f       	sbci	r29, 0xFF	; 255
    4d90:	e2 e1       	ldi	r30, 0x12	; 18
    4d92:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
    4d96:	bf ef       	ldi	r27, 0xFF	; 255
    4d98:	eb 1a       	sub	r14, r27
    4d9a:	fb 0a       	sbc	r15, r27
    4d9c:	dd ce       	rjmp	.-582    	; 0x4b58 <dir_register+0x32>
		nc1++;
    4d9e:	8e 2f       	mov	r24, r30
    4da0:	bc cf       	rjmp	.-136    	; 0x4d1a <dir_register+0x1f4>
	mem_cpy(sn, dp->fn, 12);
    4da2:	24 01       	movw	r4, r8
    4da4:	b4 e3       	ldi	r27, 0x34	; 52
    4da6:	4b 0e       	add	r4, r27
    4da8:	51 1c       	adc	r5, r1
	if (cnt != 0) {
    4daa:	4c e0       	ldi	r20, 0x0C	; 12
    4dac:	50 e0       	ldi	r21, 0x00	; 0
    4dae:	b2 01       	movw	r22, r4
    4db0:	8e 01       	movw	r16, r28
    4db2:	0f 5f       	subi	r16, 0xFF	; 255
    4db4:	1f 4f       	sbci	r17, 0xFF	; 255
    4db6:	c8 01       	movw	r24, r16
    4db8:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4dbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4dbe:	2e 96       	adiw	r28, 0x0e	; 14
    4dc0:	0f af       	std	Y+63, r16	; 0x3f
    4dc2:	2e 97       	sbiw	r28, 0x0e	; 14
    4dc4:	2f 96       	adiw	r28, 0x0f	; 15
    4dc6:	1f af       	std	Y+63, r17	; 0x3f
    4dc8:	2f 97       	sbiw	r28, 0x0f	; 15
    4dca:	60 96       	adiw	r28, 0x10	; 16
    4dcc:	4f ae       	std	Y+63, r4	; 0x3f
    4dce:	60 97       	sbiw	r28, 0x10	; 16
    4dd0:	61 96       	adiw	r28, 0x11	; 17
    4dd2:	5f ae       	std	Y+63, r5	; 0x3f
    4dd4:	61 97       	sbiw	r28, 0x11	; 17
    4dd6:	80 ff       	sbrs	r24, 0
    4dd8:	3e c1       	rjmp	.+636    	; 0x5056 <dir_register+0x530>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
    4dda:	80 e4       	ldi	r24, 0x40	; 64
    4ddc:	f4 01       	movw	r30, r8
    4dde:	87 af       	std	Z+63, r24	; 0x3f
    4de0:	a1 2c       	mov	r10, r1
    4de2:	b1 2c       	mov	r11, r1
    4de4:	65 01       	movw	r12, r10
    4de6:	a3 94       	inc	r10
    4de8:	85 01       	movw	r16, r10
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
    4dea:	d3 01       	movw	r26, r6
    4dec:	1b 96       	adiw	r26, 0x0b	; 11
    4dee:	2c 90       	ld	r2, X
    4df0:	1b 97       	sbiw	r26, 0x0b	; 11
    4df2:	1c 96       	adiw	r26, 0x0c	; 12
    4df4:	3c 90       	ld	r3, X
	if (cnt != 0) {
    4df6:	4b e0       	ldi	r20, 0x0B	; 11
    4df8:	50 e0       	ldi	r21, 0x00	; 0
    4dfa:	2e 96       	adiw	r28, 0x0e	; 14
    4dfc:	6f ad       	ldd	r22, Y+63	; 0x3f
    4dfe:	2e 97       	sbiw	r28, 0x0e	; 14
    4e00:	2f 96       	adiw	r28, 0x0f	; 15
    4e02:	7f ad       	ldd	r23, Y+63	; 0x3f
    4e04:	2f 97       	sbiw	r28, 0x0f	; 15
    4e06:	c2 01       	movw	r24, r4
    4e08:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
    4e0c:	f1 01       	movw	r30, r2
		while (*lfn) {	/* Create a CRC as hash value */
    4e0e:	b6 01       	movw	r22, r12
    4e10:	a5 01       	movw	r20, r10
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
    4e12:	06 30       	cpi	r16, 0x06	; 6
    4e14:	11 05       	cpc	r17, r1
    4e16:	08 f0       	brcs	.+2      	; 0x4e1a <dir_register+0x2f4>
    4e18:	74 c0       	rjmp	.+232    	; 0x4f02 <dir_register+0x3dc>
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	eb 5b       	subi	r30, 0xBB	; 187
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
		while (*lfn) {	/* Create a CRC as hash value */
    4e20:	87 e0       	ldi	r24, 0x07	; 7
    4e22:	90 e0       	ldi	r25, 0x00	; 0
    4e24:	af 01       	movw	r20, r30
		c = (BYTE)((seq % 16) + '0');
    4e26:	30 2f       	mov	r19, r16
    4e28:	3f 70       	andi	r19, 0x0F	; 15
    4e2a:	20 e3       	ldi	r18, 0x30	; 48
    4e2c:	23 0f       	add	r18, r19
		if (c > '9') c += 7;
    4e2e:	2a 33       	cpi	r18, 0x3A	; 58
    4e30:	10 f0       	brcs	.+4      	; 0x4e36 <dir_register+0x310>
    4e32:	27 e3       	ldi	r18, 0x37	; 55
    4e34:	23 0f       	add	r18, r19
		ns[i--] = c;
    4e36:	01 97       	sbiw	r24, 0x01	; 1
    4e38:	27 83       	std	Z+7, r18	; 0x07
		seq /= 16;
    4e3a:	98 01       	movw	r18, r16
    4e3c:	64 e0       	ldi	r22, 0x04	; 4
    4e3e:	36 95       	lsr	r19
    4e40:	27 95       	ror	r18
    4e42:	6a 95       	dec	r22
    4e44:	e1 f7       	brne	.-8      	; 0x4e3e <dir_register+0x318>
	} while (seq);
    4e46:	31 97       	sbiw	r30, 0x01	; 1
    4e48:	00 31       	cpi	r16, 0x10	; 16
    4e4a:	11 05       	cpc	r17, r1
    4e4c:	08 f0       	brcs	.+2      	; 0x4e50 <dir_register+0x32a>
    4e4e:	5f c0       	rjmp	.+190    	; 0x4f0e <dir_register+0x3e8>
	ns[i] = '~';
    4e50:	fa 01       	movw	r30, r20
    4e52:	e8 0f       	add	r30, r24
    4e54:	f9 1f       	adc	r31, r25
    4e56:	2e e7       	ldi	r18, 0x7E	; 126
    4e58:	20 83       	st	Z, r18
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4e5a:	60 96       	adiw	r28, 0x10	; 16
    4e5c:	ef ad       	ldd	r30, Y+63	; 0x3f
    4e5e:	60 97       	sbiw	r28, 0x10	; 16
    4e60:	61 96       	adiw	r28, 0x11	; 17
    4e62:	ff ad       	ldd	r31, Y+63	; 0x3f
    4e64:	61 97       	sbiw	r28, 0x11	; 17
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	28 17       	cp	r18, r24
    4e6c:	39 07       	cpc	r19, r25
    4e6e:	39 f0       	breq	.+14     	; 0x4e7e <dir_register+0x358>
    4e70:	a1 91       	ld	r26, Z+
    4e72:	b9 01       	movw	r22, r18
    4e74:	6f 5f       	subi	r22, 0xFF	; 255
    4e76:	7f 4f       	sbci	r23, 0xFF	; 255
    4e78:	a0 32       	cpi	r26, 0x20	; 32
    4e7a:	09 f0       	breq	.+2      	; 0x4e7e <dir_register+0x358>
    4e7c:	4a c0       	rjmp	.+148    	; 0x4f12 <dir_register+0x3ec>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4e7e:	60 e2       	ldi	r22, 0x20	; 32
    4e80:	88 30       	cpi	r24, 0x08	; 8
    4e82:	91 05       	cpc	r25, r1
    4e84:	28 f4       	brcc	.+10     	; 0x4e90 <dir_register+0x36a>
    4e86:	fa 01       	movw	r30, r20
    4e88:	e8 0f       	add	r30, r24
    4e8a:	f9 1f       	adc	r31, r25
    4e8c:	60 81       	ld	r22, Z
    4e8e:	01 96       	adiw	r24, 0x01	; 1
    4e90:	2f 5f       	subi	r18, 0xFF	; 255
    4e92:	3f 4f       	sbci	r19, 0xFF	; 255
    4e94:	f4 01       	movw	r30, r8
    4e96:	e2 0f       	add	r30, r18
    4e98:	f3 1f       	adc	r31, r19
    4e9a:	63 ab       	std	Z+51, r22	; 0x33
	} while (j < 8);
    4e9c:	28 30       	cpi	r18, 0x08	; 8
    4e9e:	31 05       	cpc	r19, r1
    4ea0:	70 f3       	brcs	.-36     	; 0x4e7e <dir_register+0x358>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
    4ea2:	c4 01       	movw	r24, r8
    4ea4:	0e 94 cd 23 	call	0x479a	; 0x479a <dir_find>
    4ea8:	8c 01       	movw	r16, r24
			if (res != FR_OK) break;
    4eaa:	00 97       	sbiw	r24, 0x00	; 0
    4eac:	09 f0       	breq	.+2      	; 0x4eb0 <dir_register+0x38a>
    4eae:	cc c0       	rjmp	.+408    	; 0x5048 <dir_register+0x522>
		for (n = 1; n < 100; n++) {
    4eb0:	3f ef       	ldi	r19, 0xFF	; 255
    4eb2:	a3 1a       	sub	r10, r19
    4eb4:	b3 0a       	sbc	r11, r19
    4eb6:	c3 0a       	sbc	r12, r19
    4eb8:	d3 0a       	sbc	r13, r19
    4eba:	84 e6       	ldi	r24, 0x64	; 100
    4ebc:	a8 16       	cp	r10, r24
    4ebe:	b1 04       	cpc	r11, r1
    4ec0:	c1 04       	cpc	r12, r1
    4ec2:	d1 04       	cpc	r13, r1
    4ec4:	09 f0       	breq	.+2      	; 0x4ec8 <dir_register+0x3a2>
    4ec6:	90 cf       	rjmp	.-224    	; 0x4de8 <dir_register+0x2c2>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4ec8:	07 e0       	ldi	r16, 0x07	; 7
    4eca:	10 e0       	ldi	r17, 0x00	; 0
    4ecc:	5e cf       	rjmp	.-324    	; 0x4d8a <dir_register+0x264>
    4ece:	20 e1       	ldi	r18, 0x10	; 16
    4ed0:	30 e0       	ldi	r19, 0x00	; 0
				sreg = (sreg << 1) + (wc & 1);
    4ed2:	44 0f       	add	r20, r20
    4ed4:	55 1f       	adc	r21, r21
    4ed6:	66 1f       	adc	r22, r22
    4ed8:	77 1f       	adc	r23, r23
    4eda:	dc 01       	movw	r26, r24
    4edc:	a1 70       	andi	r26, 0x01	; 1
    4ede:	bb 27       	eor	r27, r27
    4ee0:	4a 0f       	add	r20, r26
    4ee2:	5b 1f       	adc	r21, r27
    4ee4:	61 1d       	adc	r22, r1
    4ee6:	71 1d       	adc	r23, r1
				wc >>= 1;
    4ee8:	96 95       	lsr	r25
    4eea:	87 95       	ror	r24
				if (sreg & 0x10000) sreg ^= 0x11021;
    4eec:	60 ff       	sbrs	r22, 0
    4eee:	06 c0       	rjmp	.+12     	; 0x4efc <dir_register+0x3d6>
    4ef0:	b1 e2       	ldi	r27, 0x21	; 33
    4ef2:	4b 27       	eor	r20, r27
    4ef4:	b0 e1       	ldi	r27, 0x10	; 16
    4ef6:	5b 27       	eor	r21, r27
    4ef8:	b1 e0       	ldi	r27, 0x01	; 1
    4efa:	6b 27       	eor	r22, r27
			for (i = 0; i < 16; i++) {
    4efc:	21 50       	subi	r18, 0x01	; 1
    4efe:	31 09       	sbc	r19, r1
    4f00:	41 f7       	brne	.-48     	; 0x4ed2 <dir_register+0x3ac>
		while (*lfn) {	/* Create a CRC as hash value */
    4f02:	81 91       	ld	r24, Z+
    4f04:	91 91       	ld	r25, Z+
    4f06:	00 97       	sbiw	r24, 0x00	; 0
    4f08:	11 f7       	brne	.-60     	; 0x4ece <dir_register+0x3a8>
		seq = (UINT)sreg;
    4f0a:	8a 01       	movw	r16, r20
    4f0c:	86 cf       	rjmp	.-244    	; 0x4e1a <dir_register+0x2f4>
		seq /= 16;
    4f0e:	89 01       	movw	r16, r18
    4f10:	8a cf       	rjmp	.-236    	; 0x4e26 <dir_register+0x300>
    4f12:	9b 01       	movw	r18, r22
    4f14:	aa cf       	rjmp	.-172    	; 0x4e6a <dir_register+0x344>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
    4f16:	ee 24       	eor	r14, r14
    4f18:	e3 94       	inc	r14
    4f1a:	f1 2c       	mov	r15, r1
    4f1c:	a9 c0       	rjmp	.+338    	; 0x5070 <dir_register+0x54a>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
    4f1e:	f4 01       	movw	r30, r8
    4f20:	46 a1       	ldd	r20, Z+38	; 0x26
    4f22:	57 a1       	ldd	r21, Z+39	; 0x27
    4f24:	60 a5       	ldd	r22, Z+40	; 0x28
    4f26:	71 a5       	ldd	r23, Z+41	; 0x29
    4f28:	c7 01       	movw	r24, r14
    4f2a:	b5 e0       	ldi	r27, 0x05	; 5
    4f2c:	88 0f       	add	r24, r24
    4f2e:	99 1f       	adc	r25, r25
    4f30:	ba 95       	dec	r27
    4f32:	e1 f7       	brne	.-8      	; 0x4f2c <dir_register+0x406>
    4f34:	48 1b       	sub	r20, r24
    4f36:	59 0b       	sbc	r21, r25
    4f38:	61 09       	sbc	r22, r1
    4f3a:	71 09       	sbc	r23, r1
    4f3c:	c4 01       	movw	r24, r8
    4f3e:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    4f42:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    4f44:	89 2b       	or	r24, r25
    4f46:	09 f0       	breq	.+2      	; 0x4f4a <dir_register+0x424>
    4f48:	20 cf       	rjmp	.-448    	; 0x4d8a <dir_register+0x264>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
    4f4a:	c2 01       	movw	r24, r4
    4f4c:	0e 94 4f 13 	call	0x269e	; 0x269e <sum_sfn>
    4f50:	28 2e       	mov	r2, r24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4f52:	ef e0       	ldi	r30, 0x0F	; 15
    4f54:	3e 2e       	mov	r3, r30
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    4f56:	fd e0       	ldi	r31, 0x0D	; 13
    4f58:	af 2e       	mov	r10, r31
    4f5a:	aa ea       	ldi	r26, 0xAA	; 170
    4f5c:	ca 2e       	mov	r12, r26
    4f5e:	a1 e0       	ldi	r26, 0x01	; 1
    4f60:	da 2e       	mov	r13, r26
				fs->wflag = 1;
    4f62:	bb 24       	eor	r11, r11
    4f64:	b3 94       	inc	r11
				res = move_window(fs, dp->sect);
    4f66:	d4 01       	movw	r26, r8
    4f68:	9e 96       	adiw	r26, 0x2e	; 46
    4f6a:	4d 91       	ld	r20, X+
    4f6c:	5d 91       	ld	r21, X+
    4f6e:	6d 91       	ld	r22, X+
    4f70:	7c 91       	ld	r23, X
    4f72:	d1 97       	sbiw	r26, 0x31	; 49
    4f74:	c3 01       	movw	r24, r6
    4f76:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    4f7a:	8c 01       	movw	r16, r24
				if (res != FR_OK) break;
    4f7c:	89 2b       	or	r24, r25
    4f7e:	09 f0       	breq	.+2      	; 0x4f82 <dir_register+0x45c>
    4f80:	04 cf       	rjmp	.-504    	; 0x4d8a <dir_register+0x264>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
    4f82:	6e 2d       	mov	r22, r14
    4f84:	d4 01       	movw	r26, r8
    4f86:	d2 96       	adiw	r26, 0x32	; 50
    4f88:	ed 91       	ld	r30, X+
    4f8a:	fc 91       	ld	r31, X
    4f8c:	d3 01       	movw	r26, r6
    4f8e:	1b 96       	adiw	r26, 0x0b	; 11
    4f90:	4d 91       	ld	r20, X+
    4f92:	5c 91       	ld	r21, X
	dir[LDIR_Chksum] = sum;			/* Set checksum */
    4f94:	25 86       	std	Z+13, r2	; 0x0d
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4f96:	33 86       	std	Z+11, r3	; 0x0b
	dir[LDIR_Type] = 0;
    4f98:	14 86       	std	Z+12, r1	; 0x0c
	*ptr++ = (BYTE)val; val >>= 8;
    4f9a:	12 8e       	std	Z+26, r1	; 0x1a
	*ptr++ = (BYTE)val;
    4f9c:	13 8e       	std	Z+27, r1	; 0x1b
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    4f9e:	8e 2d       	mov	r24, r14
    4fa0:	81 50       	subi	r24, 0x01	; 1
    4fa2:	99 0b       	sbc	r25, r25
    4fa4:	9c 01       	movw	r18, r24
    4fa6:	a2 9e       	mul	r10, r18
    4fa8:	c0 01       	movw	r24, r0
    4faa:	a3 9e       	mul	r10, r19
    4fac:	90 0d       	add	r25, r0
    4fae:	11 24       	eor	r1, r1
	s = wc = 0;
    4fb0:	ad e9       	ldi	r26, 0x9D	; 157
    4fb2:	b1 e0       	ldi	r27, 0x01	; 1
    4fb4:	63 96       	adiw	r28, 0x13	; 19
    4fb6:	bf af       	std	Y+63, r27	; 0x3f
    4fb8:	ae af       	std	Y+62, r26	; 0x3e
    4fba:	63 97       	sbiw	r28, 0x13	; 19
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    4fbc:	0f 3f       	cpi	r16, 0xFF	; 255
    4fbe:	10 07       	cpc	r17, r16
    4fc0:	49 f0       	breq	.+18     	; 0x4fd4 <dir_register+0x4ae>
    4fc2:	9c 01       	movw	r18, r24
    4fc4:	22 0f       	add	r18, r18
    4fc6:	33 1f       	adc	r19, r19
    4fc8:	24 0f       	add	r18, r20
    4fca:	35 1f       	adc	r19, r21
    4fcc:	d9 01       	movw	r26, r18
    4fce:	0d 91       	ld	r16, X+
    4fd0:	1c 91       	ld	r17, X
    4fd2:	01 96       	adiw	r24, 0x01	; 1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    4fd4:	63 96       	adiw	r28, 0x13	; 19
    4fd6:	ae ad       	ldd	r26, Y+62	; 0x3e
    4fd8:	bf ad       	ldd	r27, Y+63	; 0x3f
    4fda:	63 97       	sbiw	r28, 0x13	; 19
    4fdc:	2d 91       	ld	r18, X+
    4fde:	63 96       	adiw	r28, 0x13	; 19
    4fe0:	bf af       	std	Y+63, r27	; 0x3f
    4fe2:	ae af       	std	Y+62, r26	; 0x3e
    4fe4:	63 97       	sbiw	r28, 0x13	; 19
	*ptr++ = (BYTE)val; val >>= 8;
    4fe6:	2e 0f       	add	r18, r30
    4fe8:	3f 2f       	mov	r19, r31
    4fea:	31 1d       	adc	r19, r1
    4fec:	d9 01       	movw	r26, r18
    4fee:	0d 93       	st	X+, r16
    4ff0:	1c 93       	st	X, r17
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
    4ff2:	01 15       	cp	r16, r1
    4ff4:	11 05       	cpc	r17, r1
    4ff6:	11 f4       	brne	.+4      	; 0x4ffc <dir_register+0x4d6>
    4ff8:	0f ef       	ldi	r16, 0xFF	; 255
    4ffa:	1f ef       	ldi	r17, 0xFF	; 255
	} while (++s < 13);
    4ffc:	63 96       	adiw	r28, 0x13	; 19
    4ffe:	2e ad       	ldd	r18, Y+62	; 0x3e
    5000:	3f ad       	ldd	r19, Y+63	; 0x3f
    5002:	63 97       	sbiw	r28, 0x13	; 19
    5004:	c2 16       	cp	r12, r18
    5006:	d3 06       	cpc	r13, r19
    5008:	c9 f6       	brne	.-78     	; 0x4fbc <dir_register+0x496>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
    500a:	0f 3f       	cpi	r16, 0xFF	; 255
    500c:	1f 4f       	sbci	r17, 0xFF	; 255
    500e:	49 f0       	breq	.+18     	; 0x5022 <dir_register+0x4fc>
    5010:	88 0f       	add	r24, r24
    5012:	99 1f       	adc	r25, r25
    5014:	84 0f       	add	r24, r20
    5016:	95 1f       	adc	r25, r21
    5018:	dc 01       	movw	r26, r24
    501a:	8d 91       	ld	r24, X+
    501c:	9c 91       	ld	r25, X
    501e:	89 2b       	or	r24, r25
    5020:	09 f4       	brne	.+2      	; 0x5024 <dir_register+0x4fe>
    5022:	60 64       	ori	r22, 0x40	; 64
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    5024:	60 83       	st	Z, r22
				fs->wflag = 1;
    5026:	f3 01       	movw	r30, r6
    5028:	b3 82       	std	Z+3, r11	; 0x03
				res = dir_next(dp, 0);	/* Next entry */
    502a:	70 e0       	ldi	r23, 0x00	; 0
    502c:	60 e0       	ldi	r22, 0x00	; 0
    502e:	c4 01       	movw	r24, r8
    5030:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    5034:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --nent);
    5036:	89 2b       	or	r24, r25
    5038:	09 f0       	breq	.+2      	; 0x503c <dir_register+0x516>
    503a:	a7 ce       	rjmp	.-690    	; 0x4d8a <dir_register+0x264>
    503c:	f1 e0       	ldi	r31, 0x01	; 1
    503e:	ef 1a       	sub	r14, r31
    5040:	f1 08       	sbc	r15, r1
    5042:	09 f0       	breq	.+2      	; 0x5046 <dir_register+0x520>
    5044:	90 cf       	rjmp	.-224    	; 0x4f66 <dir_register+0x440>
    5046:	21 c0       	rjmp	.+66     	; 0x508a <dir_register+0x564>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    5048:	04 97       	sbiw	r24, 0x04	; 4
    504a:	09 f0       	breq	.+2      	; 0x504e <dir_register+0x528>
    504c:	9e ce       	rjmp	.-708    	; 0x4d8a <dir_register+0x264>
		dp->fn[NSFLAG] = sn[NSFLAG];
    504e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5050:	d4 01       	movw	r26, r8
    5052:	df 96       	adiw	r26, 0x3f	; 63
    5054:	8c 93       	st	X, r24
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
    5056:	8c 85       	ldd	r24, Y+12	; 0x0c
    5058:	81 ff       	sbrs	r24, 1
    505a:	5d cf       	rjmp	.-326    	; 0x4f16 <dir_register+0x3f0>
    505c:	c7 01       	movw	r24, r14
    505e:	0c 96       	adiw	r24, 0x0c	; 12
    5060:	6d e0       	ldi	r22, 0x0D	; 13
    5062:	70 e0       	ldi	r23, 0x00	; 0
    5064:	0e 94 6c 59 	call	0xb2d8	; 0xb2d8 <__udivmodhi4>
    5068:	7b 01       	movw	r14, r22
    506a:	bf ef       	ldi	r27, 0xFF	; 255
    506c:	eb 1a       	sub	r14, r27
    506e:	fb 0a       	sbc	r15, r27
	res = dir_alloc(dp, nent);		/* Allocate entries */
    5070:	b7 01       	movw	r22, r14
    5072:	c4 01       	movw	r24, r8
    5074:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <dir_alloc>
    5078:	8c 01       	movw	r16, r24
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
    507a:	89 2b       	or	r24, r25
    507c:	09 f0       	breq	.+2      	; 0x5080 <dir_register+0x55a>
    507e:	85 ce       	rjmp	.-758    	; 0x4d8a <dir_register+0x264>
    5080:	e1 e0       	ldi	r30, 0x01	; 1
    5082:	ee 1a       	sub	r14, r30
    5084:	f1 08       	sbc	r15, r1
    5086:	09 f0       	breq	.+2      	; 0x508a <dir_register+0x564>
    5088:	4a cf       	rjmp	.-364    	; 0x4f1e <dir_register+0x3f8>
		res = move_window(fs, dp->sect);
    508a:	d4 01       	movw	r26, r8
    508c:	9e 96       	adiw	r26, 0x2e	; 46
    508e:	4d 91       	ld	r20, X+
    5090:	5d 91       	ld	r21, X+
    5092:	6d 91       	ld	r22, X+
    5094:	7c 91       	ld	r23, X
    5096:	d1 97       	sbiw	r26, 0x31	; 49
    5098:	c3 01       	movw	r24, r6
    509a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    509e:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    50a0:	89 2b       	or	r24, r25
    50a2:	09 f0       	breq	.+2      	; 0x50a6 <dir_register+0x580>
    50a4:	72 ce       	rjmp	.-796    	; 0x4d8a <dir_register+0x264>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    50a6:	40 e2       	ldi	r20, 0x20	; 32
    50a8:	50 e0       	ldi	r21, 0x00	; 0
    50aa:	70 e0       	ldi	r23, 0x00	; 0
    50ac:	60 e0       	ldi	r22, 0x00	; 0
    50ae:	d4 01       	movw	r26, r8
    50b0:	d2 96       	adiw	r26, 0x32	; 50
    50b2:	8d 91       	ld	r24, X+
    50b4:	9c 91       	ld	r25, X
    50b6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
	if (cnt != 0) {
    50ba:	4b e0       	ldi	r20, 0x0B	; 11
    50bc:	50 e0       	ldi	r21, 0x00	; 0
    50be:	b2 01       	movw	r22, r4
    50c0:	f4 01       	movw	r30, r8
    50c2:	82 a9       	ldd	r24, Z+50	; 0x32
    50c4:	93 a9       	ldd	r25, Z+51	; 0x33
    50c6:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
    50ca:	d4 01       	movw	r26, r8
    50cc:	d2 96       	adiw	r26, 0x32	; 50
    50ce:	ed 91       	ld	r30, X+
    50d0:	fc 91       	ld	r31, X
    50d2:	d3 97       	sbiw	r26, 0x33	; 51
    50d4:	df 96       	adiw	r26, 0x3f	; 63
    50d6:	8c 91       	ld	r24, X
    50d8:	88 71       	andi	r24, 0x18	; 24
    50da:	84 87       	std	Z+12, r24	; 0x0c
			fs->wflag = 1;
    50dc:	81 e0       	ldi	r24, 0x01	; 1
    50de:	f3 01       	movw	r30, r6
    50e0:	83 83       	std	Z+3, r24	; 0x03
    50e2:	53 ce       	rjmp	.-858    	; 0x4d8a <dir_register+0x264>

000050e4 <mount_volume>:
{
    50e4:	af e2       	ldi	r26, 0x2F	; 47
    50e6:	b0 e0       	ldi	r27, 0x00	; 0
    50e8:	e8 e7       	ldi	r30, 0x78	; 120
    50ea:	f8 e2       	ldi	r31, 0x28	; 40
    50ec:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    50f0:	6b 01       	movw	r12, r22
    50f2:	14 2f       	mov	r17, r20
	*rfs = 0;
    50f4:	db 01       	movw	r26, r22
    50f6:	1d 92       	st	X+, r1
    50f8:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    50fa:	0e 94 84 13 	call	0x2708	; 0x2708 <get_ldnumber>
    50fe:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    5100:	8b e0       	ldi	r24, 0x0B	; 11
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	f7 fc       	sbrc	r15, 7
    5106:	21 c0       	rjmp	.+66     	; 0x514a <mount_volume+0x66>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    5108:	f7 01       	movw	r30, r14
    510a:	ee 0f       	add	r30, r30
    510c:	ff 1f       	adc	r31, r31
    510e:	ea 5b       	subi	r30, 0xBA	; 186
    5110:	fe 4d       	sbci	r31, 0xDE	; 222
    5112:	80 80       	ld	r8, Z
    5114:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    5116:	8c e0       	ldi	r24, 0x0C	; 12
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	81 14       	cp	r8, r1
    511c:	91 04       	cpc	r9, r1
    511e:	a9 f0       	breq	.+42     	; 0x514a <mount_volume+0x66>
	*rfs = fs;							/* Return pointer to the filesystem object */
    5120:	f6 01       	movw	r30, r12
    5122:	91 82       	std	Z+1, r9	; 0x01
    5124:	80 82       	st	Z, r8
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    5126:	1e 7f       	andi	r17, 0xFE	; 254
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    5128:	d4 01       	movw	r26, r8
    512a:	8c 91       	ld	r24, X
    512c:	88 23       	and	r24, r24
    512e:	89 f0       	breq	.+34     	; 0x5152 <mount_volume+0x6e>
		stat = disk_status(fs->pdrv);
    5130:	11 96       	adiw	r26, 0x01	; 1
    5132:	8c 91       	ld	r24, X
    5134:	0e 94 66 0b 	call	0x16cc	; 0x16cc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    5138:	80 fd       	sbrc	r24, 0
    513a:	0b c0       	rjmp	.+22     	; 0x5152 <mount_volume+0x6e>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    513c:	11 23       	and	r17, r17
    513e:	09 f4       	brne	.+2      	; 0x5142 <mount_volume+0x5e>
    5140:	56 c2       	rjmp	.+1196   	; 0x55ee <mount_volume+0x50a>
    5142:	82 ff       	sbrs	r24, 2
    5144:	54 c2       	rjmp	.+1192   	; 0x55ee <mount_volume+0x50a>
				return FR_WRITE_PROTECTED;
    5146:	8a e0       	ldi	r24, 0x0A	; 10
    5148:	90 e0       	ldi	r25, 0x00	; 0
}
    514a:	af 96       	adiw	r28, 0x2f	; 47
    514c:	e2 e1       	ldi	r30, 0x12	; 18
    514e:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
	fs->fs_type = 0;					/* Clear the filesystem object */
    5152:	f4 01       	movw	r30, r8
    5154:	10 82       	st	Z, r1
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
    5156:	e1 82       	std	Z+1, r14	; 0x01
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
    5158:	8e 2d       	mov	r24, r14
    515a:	0e 94 6d 0b 	call	0x16da	; 0x16da <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    515e:	80 fd       	sbrc	r24, 0
    5160:	11 c4       	rjmp	.+2082   	; 0x5984 <mount_volume+0x8a0>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    5162:	11 23       	and	r17, r17
    5164:	11 f0       	breq	.+4      	; 0x516a <mount_volume+0x86>
    5166:	82 fd       	sbrc	r24, 2
    5168:	ee cf       	rjmp	.-36     	; 0x5146 <mount_volume+0x62>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
    516a:	40 e0       	ldi	r20, 0x00	; 0
    516c:	50 e0       	ldi	r21, 0x00	; 0
    516e:	ba 01       	movw	r22, r20
    5170:	c4 01       	movw	r24, r8
    5172:	0e 94 65 1a 	call	0x34ca	; 0x34ca <check_fs>
    5176:	9c 01       	movw	r18, r24
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
    5178:	82 30       	cpi	r24, 0x02	; 2
    517a:	91 05       	cpc	r25, r1
    517c:	09 f0       	breq	.+2      	; 0x5180 <mount_volume+0x9c>
    517e:	85 c1       	rjmp	.+778    	; 0x548a <mount_volume+0x3a6>
    5180:	74 01       	movw	r14, r8
    5182:	f3 ef       	ldi	r31, 0xF3	; 243
    5184:	ef 1a       	sub	r14, r31
    5186:	fd ef       	ldi	r31, 0xFD	; 253
    5188:	ff 0a       	sbc	r15, r31
    518a:	8e 01       	movw	r16, r28
    518c:	0f 5f       	subi	r16, 0xFF	; 255
    518e:	1f 4f       	sbci	r17, 0xFF	; 255
    5190:	54 01       	movw	r10, r8
    5192:	23 eb       	ldi	r18, 0xB3	; 179
    5194:	a2 1a       	sub	r10, r18
    5196:	2d ef       	ldi	r18, 0xFD	; 253
    5198:	b2 0a       	sbc	r11, r18
    519a:	68 01       	movw	r12, r16
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
    519c:	c7 01       	movw	r24, r14
    519e:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    51a2:	d6 01       	movw	r26, r12
    51a4:	6d 93       	st	X+, r22
    51a6:	7d 93       	st	X+, r23
    51a8:	8d 93       	st	X+, r24
    51aa:	9d 93       	st	X+, r25
    51ac:	6d 01       	movw	r12, r26
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
    51ae:	b0 e1       	ldi	r27, 0x10	; 16
    51b0:	eb 0e       	add	r14, r27
    51b2:	f1 1c       	adc	r15, r1
    51b4:	ea 14       	cp	r14, r10
    51b6:	fb 04       	cpc	r15, r11
    51b8:	89 f7       	brne	.-30     	; 0x519c <mount_volume+0xb8>
    51ba:	78 01       	movw	r14, r16
    51bc:	e0 e1       	ldi	r30, 0x10	; 16
    51be:	ee 0e       	add	r14, r30
    51c0:	f1 1c       	adc	r15, r1
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    51c2:	d8 01       	movw	r26, r16
    51c4:	4d 91       	ld	r20, X+
    51c6:	5d 91       	ld	r21, X+
    51c8:	6d 91       	ld	r22, X+
    51ca:	7d 91       	ld	r23, X+
    51cc:	8d 01       	movw	r16, r26
    51ce:	23 e0       	ldi	r18, 0x03	; 3
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	41 15       	cp	r20, r1
    51d4:	51 05       	cpc	r21, r1
    51d6:	61 05       	cpc	r22, r1
    51d8:	71 05       	cpc	r23, r1
    51da:	09 f4       	brne	.+2      	; 0x51de <mount_volume+0xfa>
    51dc:	4e c1       	rjmp	.+668    	; 0x547a <mount_volume+0x396>
    51de:	c4 01       	movw	r24, r8
    51e0:	0e 94 65 1a 	call	0x34ca	; 0x34ca <check_fs>
    51e4:	9c 01       	movw	r18, r24
	} while (part == 0 && fmt >= 2 && ++i < 4);
    51e6:	02 97       	sbiw	r24, 0x02	; 2
    51e8:	08 f0       	brcs	.+2      	; 0x51ec <mount_volume+0x108>
    51ea:	47 c1       	rjmp	.+654    	; 0x547a <mount_volume+0x396>
	bsect = fs->winsect;					/* Volume location */
    51ec:	f4 01       	movw	r30, r8
    51ee:	ed 5b       	subi	r30, 0xBD	; 189
    51f0:	ff 4f       	sbci	r31, 0xFF	; 255
    51f2:	40 80       	ld	r4, Z
    51f4:	51 80       	ldd	r5, Z+1	; 0x01
    51f6:	62 80       	ldd	r6, Z+2	; 0x02
    51f8:	73 80       	ldd	r7, Z+3	; 0x03
	if (fmt == 1) {
    51fa:	3f 96       	adiw	r30, 0x0f	; 15
    51fc:	21 30       	cpi	r18, 0x01	; 1
    51fe:	31 05       	cpc	r19, r1
    5200:	09 f0       	breq	.+2      	; 0x5204 <mount_volume+0x120>
    5202:	f8 c1       	rjmp	.+1008   	; 0x55f4 <mount_volume+0x510>
    5204:	94 01       	movw	r18, r8
    5206:	29 57       	subi	r18, 0x79	; 121
    5208:	3f 4f       	sbci	r19, 0xFF	; 255
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
    520a:	81 91       	ld	r24, Z+
    520c:	81 11       	cpse	r24, r1
    520e:	46 c1       	rjmp	.+652    	; 0x549c <mount_volume+0x3b8>
    5210:	e2 17       	cp	r30, r18
    5212:	f3 07       	cpc	r31, r19
    5214:	d1 f7       	brne	.-12     	; 0x520a <mount_volume+0x126>
	rv = rv << 8 | ptr[0];
    5216:	f4 01       	movw	r30, r8
    5218:	e1 55       	subi	r30, 0x51	; 81
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
    521c:	80 81       	ld	r24, Z
    521e:	91 81       	ldd	r25, Z+1	; 0x01
    5220:	81 15       	cp	r24, r1
    5222:	91 40       	sbci	r25, 0x01	; 1
    5224:	09 f0       	breq	.+2      	; 0x5228 <mount_volume+0x144>
    5226:	3a c1       	rjmp	.+628    	; 0x549c <mount_volume+0x3b8>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
    5228:	f4 01       	movw	r30, r8
    522a:	ed 54       	subi	r30, 0x4D	; 77
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	80 81       	ld	r24, Z
    5230:	89 30       	cpi	r24, 0x09	; 9
    5232:	09 f0       	breq	.+2      	; 0x5236 <mount_volume+0x152>
    5234:	33 c1       	rjmp	.+614    	; 0x549c <mount_volume+0x3b8>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
    5236:	c4 01       	movw	r24, r8
    5238:	81 57       	subi	r24, 0x71	; 113
    523a:	9f 4f       	sbci	r25, 0xFF	; 255
    523c:	0e 94 c4 12 	call	0x2588	; 0x2588 <ld_qword>
    5240:	59 01       	movw	r10, r18
    5242:	6a 01       	movw	r12, r20
    5244:	7b 01       	movw	r14, r22
    5246:	8c 01       	movw	r16, r24
    5248:	a3 01       	movw	r20, r6
    524a:	92 01       	movw	r18, r4
    524c:	60 e0       	ldi	r22, 0x00	; 0
    524e:	70 e0       	ldi	r23, 0x00	; 0
    5250:	cb 01       	movw	r24, r22
    5252:	49 8a       	std	Y+17, r4	; 0x11
    5254:	3a 8b       	std	Y+18, r19	; 0x12
    5256:	6b 8a       	std	Y+19, r6	; 0x13
    5258:	5c 8b       	std	Y+20, r21	; 0x14
    525a:	6d 8b       	std	Y+21, r22	; 0x15
    525c:	7e 8b       	std	Y+22, r23	; 0x16
    525e:	8f 8b       	std	Y+23, r24	; 0x17
    5260:	98 8f       	std	Y+24, r25	; 0x18
    5262:	60 e0       	ldi	r22, 0x00	; 0
    5264:	70 e0       	ldi	r23, 0x00	; 0
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	0e 94 88 5a 	call	0xb510	; 0xb510 <__adddi3>
    526e:	29 a3       	std	Y+33, r18	; 0x21
    5270:	3d a3       	std	Y+37, r19	; 0x25
    5272:	49 a7       	std	Y+41, r20	; 0x29
    5274:	5d a7       	std	Y+45, r21	; 0x2d
    5276:	36 2e       	mov	r3, r22
    5278:	27 2e       	mov	r2, r23
    527a:	8e a7       	std	Y+46, r24	; 0x2e
    527c:	9f a7       	std	Y+47, r25	; 0x2f
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
    527e:	2f 3f       	cpi	r18, 0xFF	; 255
    5280:	3f 4f       	sbci	r19, 0xFF	; 255
    5282:	4f 4f       	sbci	r20, 0xFF	; 255
    5284:	5f 4f       	sbci	r21, 0xFF	; 255
    5286:	61 05       	cpc	r22, r1
    5288:	71 05       	cpc	r23, r1
    528a:	81 05       	cpc	r24, r1
    528c:	91 05       	cpc	r25, r1
    528e:	11 f0       	breq	.+4      	; 0x5294 <mount_volume+0x1b0>
    5290:	08 f0       	brcs	.+2      	; 0x5294 <mount_volume+0x1b0>
    5292:	04 c1       	rjmp	.+520    	; 0x549c <mount_volume+0x3b8>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
    5294:	c4 01       	movw	r24, r8
    5296:	85 56       	subi	r24, 0x65	; 101
    5298:	9f 4f       	sbci	r25, 0xFF	; 255
    529a:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    529e:	f4 01       	movw	r30, r8
    52a0:	63 a7       	std	Z+43, r22	; 0x2b
    52a2:	74 a7       	std	Z+44, r23	; 0x2c
    52a4:	85 a7       	std	Z+45, r24	; 0x2d
    52a6:	96 a7       	std	Z+46, r25	; 0x2e
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
    52a8:	eb 54       	subi	r30, 0x4B	; 75
    52aa:	ff 4f       	sbci	r31, 0xFF	; 255
    52ac:	80 81       	ld	r24, Z
    52ae:	d4 01       	movw	r26, r8
    52b0:	12 96       	adiw	r26, 0x02	; 2
    52b2:	8c 93       	st	X, r24
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
    52b4:	81 30       	cpi	r24, 0x01	; 1
    52b6:	09 f0       	breq	.+2      	; 0x52ba <mount_volume+0x1d6>
    52b8:	f1 c0       	rjmp	.+482    	; 0x549c <mount_volume+0x3b8>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
    52ba:	31 97       	sbiw	r30, 0x01	; 1
    52bc:	80 81       	ld	r24, Z
    52be:	01 e0       	ldi	r16, 0x01	; 1
    52c0:	10 e0       	ldi	r17, 0x00	; 0
    52c2:	02 c0       	rjmp	.+4      	; 0x52c8 <mount_volume+0x1e4>
    52c4:	00 0f       	add	r16, r16
    52c6:	11 1f       	adc	r17, r17
    52c8:	8a 95       	dec	r24
    52ca:	e2 f7       	brpl	.-8      	; 0x52c4 <mount_volume+0x1e0>
    52cc:	f4 01       	movw	r30, r8
    52ce:	12 87       	std	Z+10, r17	; 0x0a
    52d0:	01 87       	std	Z+9, r16	; 0x09
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
    52d2:	01 15       	cp	r16, r1
    52d4:	11 05       	cpc	r17, r1
    52d6:	09 f4       	brne	.+2      	; 0x52da <mount_volume+0x1f6>
    52d8:	e1 c0       	rjmp	.+450    	; 0x549c <mount_volume+0x3b8>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
    52da:	c4 01       	movw	r24, r8
    52dc:	8d 55       	subi	r24, 0x5D	; 93
    52de:	9f 4f       	sbci	r25, 0xFF	; 255
    52e0:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    52e4:	6b 01       	movw	r12, r22
    52e6:	7c 01       	movw	r14, r24
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
    52e8:	fe ef       	ldi	r31, 0xFE	; 254
    52ea:	cf 16       	cp	r12, r31
    52ec:	ff ef       	ldi	r31, 0xFF	; 255
    52ee:	df 06       	cpc	r13, r31
    52f0:	ef 06       	cpc	r14, r31
    52f2:	ff e7       	ldi	r31, 0x7F	; 127
    52f4:	ff 06       	cpc	r15, r31
    52f6:	08 f0       	brcs	.+2      	; 0x52fa <mount_volume+0x216>
    52f8:	d1 c0       	rjmp	.+418    	; 0x549c <mount_volume+0x3b8>
		fs->n_fatent = nclst + 2;
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	02 96       	adiw	r24, 0x02	; 2
    5300:	a1 1d       	adc	r26, r1
    5302:	b1 1d       	adc	r27, r1
    5304:	f4 01       	movw	r30, r8
    5306:	87 a3       	std	Z+39, r24	; 0x27
    5308:	90 a7       	std	Z+40, r25	; 0x28
    530a:	a1 a7       	std	Z+41, r26	; 0x29
    530c:	b2 a7       	std	Z+42, r27	; 0x2a
		fs->volbase = bsect;
    530e:	47 a6       	std	Z+47, r4	; 0x2f
    5310:	50 aa       	std	Z+48, r5	; 0x30
    5312:	61 aa       	std	Z+49, r6	; 0x31
    5314:	72 aa       	std	Z+50, r7	; 0x32
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
    5316:	c4 01       	movw	r24, r8
    5318:	81 56       	subi	r24, 0x61	; 97
    531a:	9f 4f       	sbci	r25, 0xFF	; 255
    531c:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    5320:	64 0d       	add	r22, r4
    5322:	75 1d       	adc	r23, r5
    5324:	86 1d       	adc	r24, r6
    5326:	97 1d       	adc	r25, r7
    5328:	69 8b       	std	Y+17, r22	; 0x11
    532a:	7a 8b       	std	Y+18, r23	; 0x12
    532c:	8b 8b       	std	Y+19, r24	; 0x13
    532e:	9c 8b       	std	Y+20, r25	; 0x14
    5330:	f4 01       	movw	r30, r8
    5332:	63 af       	std	Z+59, r22	; 0x3b
    5334:	74 af       	std	Z+60, r23	; 0x3c
    5336:	85 af       	std	Z+61, r24	; 0x3d
    5338:	96 af       	std	Z+62, r25	; 0x3e
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
    533a:	c4 01       	movw	r24, r8
    533c:	89 56       	subi	r24, 0x69	; 105
    533e:	9f 4f       	sbci	r25, 0xFF	; 255
    5340:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    5344:	46 0e       	add	r4, r22
    5346:	57 1e       	adc	r5, r23
    5348:	68 1e       	adc	r6, r24
    534a:	79 1e       	adc	r7, r25
    534c:	d4 01       	movw	r26, r8
    534e:	d3 96       	adiw	r26, 0x33	; 51
    5350:	4d 92       	st	X+, r4
    5352:	5d 92       	st	X+, r5
    5354:	6d 92       	st	X+, r6
    5356:	7c 92       	st	X, r7
    5358:	d6 97       	sbiw	r26, 0x36	; 54
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
    535a:	d8 01       	movw	r26, r16
    535c:	a7 01       	movw	r20, r14
    535e:	96 01       	movw	r18, r12
    5360:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    5364:	9b 01       	movw	r18, r22
    5366:	ac 01       	movw	r20, r24
    5368:	60 e0       	ldi	r22, 0x00	; 0
    536a:	70 e0       	ldi	r23, 0x00	; 0
    536c:	cb 01       	movw	r24, r22
    536e:	29 8f       	std	Y+25, r18	; 0x19
    5370:	3a 8f       	std	Y+26, r19	; 0x1a
    5372:	4b 8f       	std	Y+27, r20	; 0x1b
    5374:	5c 8f       	std	Y+28, r21	; 0x1c
    5376:	6d 8f       	std	Y+29, r22	; 0x1d
    5378:	7e 8f       	std	Y+30, r23	; 0x1e
    537a:	8f 8f       	std	Y+31, r24	; 0x1f
    537c:	98 a3       	std	Y+32, r25	; 0x20
    537e:	49 89       	ldd	r20, Y+17	; 0x11
    5380:	5a 89       	ldd	r21, Y+18	; 0x12
    5382:	6b 89       	ldd	r22, Y+19	; 0x13
    5384:	7c 89       	ldd	r23, Y+20	; 0x14
    5386:	9a 01       	movw	r18, r20
    5388:	ab 01       	movw	r20, r22
    538a:	60 e0       	ldi	r22, 0x00	; 0
    538c:	70 e0       	ldi	r23, 0x00	; 0
    538e:	cb 01       	movw	r24, r22
    5390:	29 8b       	std	Y+17, r18	; 0x11
    5392:	3a 8b       	std	Y+18, r19	; 0x12
    5394:	4b 8b       	std	Y+19, r20	; 0x13
    5396:	5c 8b       	std	Y+20, r21	; 0x14
    5398:	6d 8b       	std	Y+21, r22	; 0x15
    539a:	7e 8b       	std	Y+22, r23	; 0x16
    539c:	8f 8b       	std	Y+23, r24	; 0x17
    539e:	98 8f       	std	Y+24, r25	; 0x18
    53a0:	29 8d       	ldd	r18, Y+25	; 0x19
    53a2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    53a4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    53a6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    53a8:	60 e0       	ldi	r22, 0x00	; 0
    53aa:	70 e0       	ldi	r23, 0x00	; 0
    53ac:	80 e0       	ldi	r24, 0x00	; 0
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	a9 88       	ldd	r10, Y+17	; 0x11
    53b2:	ba 88       	ldd	r11, Y+18	; 0x12
    53b4:	cb 88       	ldd	r12, Y+19	; 0x13
    53b6:	dc 88       	ldd	r13, Y+20	; 0x14
    53b8:	e1 2c       	mov	r14, r1
    53ba:	f1 2c       	mov	r15, r1
    53bc:	00 e0       	ldi	r16, 0x00	; 0
    53be:	10 e0       	ldi	r17, 0x00	; 0
    53c0:	0e 94 88 5a 	call	0xb510	; 0xb510 <__adddi3>
    53c4:	a9 a0       	ldd	r10, Y+33	; 0x21
    53c6:	bd a0       	ldd	r11, Y+37	; 0x25
    53c8:	c9 a4       	ldd	r12, Y+41	; 0x29
    53ca:	dd a4       	ldd	r13, Y+45	; 0x2d
    53cc:	e3 2c       	mov	r14, r3
    53ce:	f2 2c       	mov	r15, r2
    53d0:	0e a5       	ldd	r16, Y+46	; 0x2e
    53d2:	1f a5       	ldd	r17, Y+47	; 0x2f
    53d4:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    53d8:	11 f0       	breq	.+4      	; 0x53de <mount_volume+0x2fa>
    53da:	08 f0       	brcs	.+2      	; 0x53de <mount_volume+0x2fa>
    53dc:	5f c0       	rjmp	.+190    	; 0x549c <mount_volume+0x3b8>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
    53de:	c4 01       	movw	r24, r8
    53e0:	89 55       	subi	r24, 0x59	; 89
    53e2:	9f 4f       	sbci	r25, 0xFF	; 255
    53e4:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    53e8:	d4 01       	movw	r26, r8
    53ea:	d7 96       	adiw	r26, 0x37	; 55
    53ec:	6d 93       	st	X+, r22
    53ee:	7d 93       	st	X+, r23
    53f0:	8d 93       	st	X+, r24
    53f2:	9c 93       	st	X, r25
    53f4:	da 97       	sbiw	r26, 0x3a	; 58
		so = i = 0;
    53f6:	c1 2c       	mov	r12, r1
    53f8:	d1 2c       	mov	r13, r1
    53fa:	76 01       	movw	r14, r12
    53fc:	41 2c       	mov	r4, r1
    53fe:	51 2c       	mov	r5, r1
    5400:	32 01       	movw	r6, r4
			if (i == 0) {
    5402:	c1 14       	cp	r12, r1
    5404:	d1 04       	cpc	r13, r1
    5406:	e1 04       	cpc	r14, r1
    5408:	f1 04       	cpc	r15, r1
    540a:	29 f5       	brne	.+74     	; 0x5456 <mount_volume+0x372>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
    540c:	f4 01       	movw	r30, r8
    540e:	81 85       	ldd	r24, Z+9	; 0x09
    5410:	92 85       	ldd	r25, Z+10	; 0x0a
    5412:	b0 e0       	ldi	r27, 0x00	; 0
    5414:	a0 e0       	ldi	r26, 0x00	; 0
    5416:	48 16       	cp	r4, r24
    5418:	59 06       	cpc	r5, r25
    541a:	6a 06       	cpc	r6, r26
    541c:	7b 06       	cpc	r7, r27
    541e:	f0 f5       	brcc	.+124    	; 0x549c <mount_volume+0x3b8>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
    5420:	47 a9       	ldd	r20, Z+55	; 0x37
    5422:	50 ad       	ldd	r21, Z+56	; 0x38
    5424:	61 ad       	ldd	r22, Z+57	; 0x39
    5426:	72 ad       	ldd	r23, Z+58	; 0x3a
    5428:	c4 01       	movw	r24, r8
    542a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    542e:	69 8b       	std	Y+17, r22	; 0x11
    5430:	7a 8b       	std	Y+18, r23	; 0x12
    5432:	8b 8b       	std	Y+19, r24	; 0x13
    5434:	9c 8b       	std	Y+20, r25	; 0x14
    5436:	ab 01       	movw	r20, r22
    5438:	bc 01       	movw	r22, r24
    543a:	44 0d       	add	r20, r4
    543c:	55 1d       	adc	r21, r5
    543e:	66 1d       	adc	r22, r6
    5440:	77 1d       	adc	r23, r7
    5442:	c4 01       	movw	r24, r8
    5444:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    5448:	89 2b       	or	r24, r25
    544a:	11 f5       	brne	.+68     	; 0x5490 <mount_volume+0x3ac>
				so++;
    544c:	ff ef       	ldi	r31, 0xFF	; 255
    544e:	4f 1a       	sub	r4, r31
    5450:	5f 0a       	sbc	r5, r31
    5452:	6f 0a       	sbc	r6, r31
    5454:	7f 0a       	sbc	r7, r31
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
    5456:	f4 01       	movw	r30, r8
    5458:	ec 0d       	add	r30, r12
    545a:	fd 1d       	adc	r31, r13
    545c:	e9 5b       	subi	r30, 0xB9	; 185
    545e:	ff 4f       	sbci	r31, 0xFF	; 255
    5460:	80 81       	ld	r24, Z
    5462:	81 38       	cpi	r24, 0x81	; 129
    5464:	f1 f0       	breq	.+60     	; 0x54a2 <mount_volume+0x3be>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
    5466:	20 e2       	ldi	r18, 0x20	; 32
    5468:	c2 0e       	add	r12, r18
    546a:	d1 1c       	adc	r13, r1
    546c:	e1 1c       	adc	r14, r1
    546e:	f1 1c       	adc	r15, r1
    5470:	31 e0       	ldi	r19, 0x01	; 1
    5472:	d3 22       	and	r13, r19
    5474:	ee 24       	eor	r14, r14
    5476:	ff 24       	eor	r15, r15
			if (i == 0) {
    5478:	c4 cf       	rjmp	.-120    	; 0x5402 <mount_volume+0x31e>
	} while (part == 0 && fmt >= 2 && ++i < 4);
    547a:	0e 15       	cp	r16, r14
    547c:	1f 05       	cpc	r17, r15
    547e:	09 f0       	breq	.+2      	; 0x5482 <mount_volume+0x39e>
    5480:	a0 ce       	rjmp	.-704    	; 0x51c2 <mount_volume+0xde>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    5482:	24 30       	cpi	r18, 0x04	; 4
    5484:	31 05       	cpc	r19, r1
    5486:	51 f4       	brne	.+20     	; 0x549c <mount_volume+0x3b8>
    5488:	03 c0       	rjmp	.+6      	; 0x5490 <mount_volume+0x3ac>
    548a:	84 30       	cpi	r24, 0x04	; 4
    548c:	91 05       	cpc	r25, r1
    548e:	19 f4       	brne	.+6      	; 0x5496 <mount_volume+0x3b2>
    5490:	81 e0       	ldi	r24, 0x01	; 1
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	5a ce       	rjmp	.-844    	; 0x514a <mount_volume+0x66>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    5496:	02 97       	sbiw	r24, 0x02	; 2
    5498:	08 f4       	brcc	.+2      	; 0x549c <mount_volume+0x3b8>
    549a:	a8 ce       	rjmp	.-688    	; 0x51ec <mount_volume+0x108>
    549c:	8d e0       	ldi	r24, 0x0D	; 13
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	54 ce       	rjmp	.-856    	; 0x514a <mount_volume+0x66>
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
    54a2:	84 01       	movw	r16, r8
    54a4:	09 5b       	subi	r16, 0xB9	; 185
    54a6:	1f 4f       	sbci	r17, 0xFF	; 255
    54a8:	44 e1       	ldi	r20, 0x14	; 20
    54aa:	c4 0e       	add	r12, r20
    54ac:	d1 1c       	adc	r13, r1
    54ae:	c8 01       	movw	r24, r16
    54b0:	8c 0d       	add	r24, r12
    54b2:	9d 1d       	adc	r25, r13
    54b4:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    54b8:	6b 01       	movw	r12, r22
    54ba:	7c 01       	movw	r14, r24
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
    54bc:	52 e0       	ldi	r21, 0x02	; 2
    54be:	c5 16       	cp	r12, r21
    54c0:	d1 04       	cpc	r13, r1
    54c2:	e1 04       	cpc	r14, r1
    54c4:	f1 04       	cpc	r15, r1
    54c6:	50 f3       	brcs	.-44     	; 0x549c <mount_volume+0x3b8>
    54c8:	f4 01       	movw	r30, r8
    54ca:	87 a1       	ldd	r24, Z+39	; 0x27
    54cc:	90 a5       	ldd	r25, Z+40	; 0x28
    54ce:	a1 a5       	ldd	r26, Z+41	; 0x29
    54d0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    54d2:	c8 16       	cp	r12, r24
    54d4:	d9 06       	cpc	r13, r25
    54d6:	ea 06       	cpc	r14, r26
    54d8:	fb 06       	cpc	r15, r27
    54da:	00 f7       	brcc	.-64     	; 0x549c <mount_volume+0x3b8>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
    54dc:	54 01       	movw	r10, r8
    54de:	ff e3       	ldi	r31, 0x3F	; 63
    54e0:	af 0e       	add	r10, r31
    54e2:	b1 1c       	adc	r11, r1
    54e4:	f4 01       	movw	r30, r8
    54e6:	a1 85       	ldd	r26, Z+9	; 0x09
    54e8:	b2 85       	ldd	r27, Z+10	; 0x0a
    54ea:	a7 01       	movw	r20, r14
    54ec:	96 01       	movw	r18, r12
    54ee:	22 50       	subi	r18, 0x02	; 2
    54f0:	31 09       	sbc	r19, r1
    54f2:	41 09       	sbc	r20, r1
    54f4:	51 09       	sbc	r21, r1
    54f6:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    54fa:	69 8b       	std	Y+17, r22	; 0x11
    54fc:	7a 8b       	std	Y+18, r23	; 0x12
    54fe:	8b 8b       	std	Y+19, r24	; 0x13
    5500:	9c 8b       	std	Y+20, r25	; 0x14
    5502:	83 ad       	ldd	r24, Z+59	; 0x3b
    5504:	94 ad       	ldd	r25, Z+60	; 0x3c
    5506:	a5 ad       	ldd	r26, Z+61	; 0x3d
    5508:	b6 ad       	ldd	r27, Z+62	; 0x3e
    550a:	29 89       	ldd	r18, Y+17	; 0x11
    550c:	3a 89       	ldd	r19, Y+18	; 0x12
    550e:	4b 89       	ldd	r20, Y+19	; 0x13
    5510:	5c 89       	ldd	r21, Y+20	; 0x14
    5512:	82 0f       	add	r24, r18
    5514:	93 1f       	adc	r25, r19
    5516:	a4 1f       	adc	r26, r20
    5518:	b5 1f       	adc	r27, r21
    551a:	f5 01       	movw	r30, r10
    551c:	80 83       	st	Z, r24
    551e:	91 83       	std	Z+1, r25	; 0x01
    5520:	a2 83       	std	Z+2, r26	; 0x02
    5522:	b3 83       	std	Z+3, r27	; 0x03
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
    5524:	f4 01       	movw	r30, r8
    5526:	83 a9       	ldd	r24, Z+51	; 0x33
    5528:	94 a9       	ldd	r25, Z+52	; 0x34
    552a:	a5 a9       	ldd	r26, Z+53	; 0x35
    552c:	b6 a9       	ldd	r27, Z+54	; 0x36
    552e:	b7 01       	movw	r22, r14
    5530:	a6 01       	movw	r20, r12
    5532:	e7 e0       	ldi	r30, 0x07	; 7
    5534:	76 95       	lsr	r23
    5536:	67 95       	ror	r22
    5538:	57 95       	ror	r21
    553a:	47 95       	ror	r20
    553c:	ea 95       	dec	r30
    553e:	d1 f7       	brne	.-12     	; 0x5534 <mount_volume+0x450>
    5540:	48 0f       	add	r20, r24
    5542:	59 1f       	adc	r21, r25
    5544:	6a 1f       	adc	r22, r26
    5546:	7b 1f       	adc	r23, r27
    5548:	c4 01       	movw	r24, r8
    554a:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    554e:	89 2b       	or	r24, r25
    5550:	09 f0       	breq	.+2      	; 0x5554 <mount_volume+0x470>
    5552:	9e cf       	rjmp	.-196    	; 0x5490 <mount_volume+0x3ac>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
    5554:	c6 01       	movw	r24, r12
    5556:	8f 77       	andi	r24, 0x7F	; 127
    5558:	99 27       	eor	r25, r25
    555a:	88 0f       	add	r24, r24
    555c:	99 1f       	adc	r25, r25
    555e:	88 0f       	add	r24, r24
    5560:	99 1f       	adc	r25, r25
    5562:	80 0f       	add	r24, r16
    5564:	91 1f       	adc	r25, r17
    5566:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    556a:	46 2f       	mov	r20, r22
    556c:	57 2f       	mov	r21, r23
    556e:	bc 01       	movw	r22, r24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
    5570:	4f 3f       	cpi	r20, 0xFF	; 255
    5572:	ff ef       	ldi	r31, 0xFF	; 255
    5574:	5f 07       	cpc	r21, r31
    5576:	6f 07       	cpc	r22, r31
    5578:	7f 07       	cpc	r23, r31
    557a:	59 f0       	breq	.+22     	; 0x5592 <mount_volume+0x4ae>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
    557c:	2f ef       	ldi	r18, 0xFF	; 255
    557e:	c2 1a       	sub	r12, r18
    5580:	d2 0a       	sbc	r13, r18
    5582:	e2 0a       	sbc	r14, r18
    5584:	f2 0a       	sbc	r15, r18
    5586:	4c 15       	cp	r20, r12
    5588:	5d 05       	cpc	r21, r13
    558a:	6e 05       	cpc	r22, r14
    558c:	7f 05       	cpc	r23, r15
    558e:	51 f2       	breq	.-108    	; 0x5524 <mount_volume+0x440>
    5590:	85 cf       	rjmp	.-246    	; 0x549c <mount_volume+0x3b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    5592:	d4 01       	movw	r26, r8
    5594:	53 96       	adiw	r26, 0x13	; 19
    5596:	4d 93       	st	X+, r20
    5598:	5d 93       	st	X+, r21
    559a:	6d 93       	st	X+, r22
    559c:	7c 93       	st	X, r23
    559e:	56 97       	sbiw	r26, 0x16	; 22
    55a0:	f4 01       	movw	r30, r8
    55a2:	47 87       	std	Z+15, r20	; 0x0f
    55a4:	50 8b       	std	Z+16, r21	; 0x10
    55a6:	61 8b       	std	Z+17, r22	; 0x11
    55a8:	72 8b       	std	Z+18, r23	; 0x12
		fmt = FS_EXFAT;			/* FAT sub-type */
    55aa:	04 e0       	ldi	r16, 0x04	; 4
    55ac:	10 e0       	ldi	r17, 0x00	; 0
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
    55ae:	d4 01       	movw	r26, r8
    55b0:	0c 93       	st	X, r16
	fs->id = ++Fsid;		/* Volume mount ID */
    55b2:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <Fsid>
    55b6:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <Fsid+0x1>
    55ba:	01 96       	adiw	r24, 0x01	; 1
    55bc:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <Fsid+0x1>
    55c0:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <Fsid>
    55c4:	16 96       	adiw	r26, 0x06	; 6
    55c6:	9c 93       	st	X, r25
    55c8:	8e 93       	st	-X, r24
    55ca:	15 97       	sbiw	r26, 0x05	; 5
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
    55cc:	83 ee       	ldi	r24, 0xE3	; 227
    55ce:	9c e1       	ldi	r25, 0x1C	; 28
    55d0:	1c 96       	adiw	r26, 0x0c	; 12
    55d2:	9c 93       	st	X, r25
    55d4:	8e 93       	st	-X, r24
    55d6:	1b 97       	sbiw	r26, 0x0b	; 11
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
    55d8:	83 ee       	ldi	r24, 0xE3	; 227
    55da:	9e e1       	ldi	r25, 0x1E	; 30
    55dc:	1e 96       	adiw	r26, 0x0e	; 14
    55de:	9c 93       	st	X, r25
    55e0:	8e 93       	st	-X, r24
    55e2:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->cdir = 0;			/* Initialize current directory */
    55e4:	f4 01       	movw	r30, r8
    55e6:	17 8a       	std	Z+23, r1	; 0x17
    55e8:	10 8e       	std	Z+24, r1	; 0x18
    55ea:	11 8e       	std	Z+25, r1	; 0x19
    55ec:	12 8e       	std	Z+26, r1	; 0x1a
			return FR_OK;				/* The filesystem object is already valid */
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	ab cd       	rjmp	.-1194   	; 0x514a <mount_volume+0x66>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    55f4:	80 81       	ld	r24, Z
    55f6:	91 81       	ldd	r25, Z+1	; 0x01
    55f8:	81 15       	cp	r24, r1
    55fa:	92 40       	sbci	r25, 0x02	; 2
    55fc:	09 f0       	breq	.+2      	; 0x5600 <mount_volume+0x51c>
    55fe:	4e cf       	rjmp	.-356    	; 0x549c <mount_volume+0x3b8>
	rv = rv << 8 | ptr[0];
    5600:	f4 01       	movw	r30, r8
    5602:	e3 5a       	subi	r30, 0xA3	; 163
    5604:	ff 4f       	sbci	r31, 0xFF	; 255
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    5606:	80 81       	ld	r24, Z
    5608:	91 81       	ldd	r25, Z+1	; 0x01
    560a:	9c 01       	movw	r18, r24
    560c:	50 e0       	ldi	r21, 0x00	; 0
    560e:	40 e0       	ldi	r20, 0x00	; 0
    5610:	29 8b       	std	Y+17, r18	; 0x11
    5612:	3a 8b       	std	Y+18, r19	; 0x12
    5614:	4b 8b       	std	Y+19, r20	; 0x13
    5616:	5c 8b       	std	Y+20, r21	; 0x14
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    5618:	89 2b       	or	r24, r25
    561a:	49 f4       	brne	.+18     	; 0x562e <mount_volume+0x54a>
    561c:	c4 01       	movw	r24, r8
    561e:	85 59       	subi	r24, 0x95	; 149
    5620:	9f 4f       	sbci	r25, 0xFF	; 255
    5622:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    5626:	69 8b       	std	Y+17, r22	; 0x11
    5628:	7a 8b       	std	Y+18, r23	; 0x12
    562a:	8b 8b       	std	Y+19, r24	; 0x13
    562c:	9c 8b       	std	Y+20, r25	; 0x14
		fs->fsize = fasize;
    562e:	49 89       	ldd	r20, Y+17	; 0x11
    5630:	5a 89       	ldd	r21, Y+18	; 0x12
    5632:	6b 89       	ldd	r22, Y+19	; 0x13
    5634:	7c 89       	ldd	r23, Y+20	; 0x14
    5636:	d4 01       	movw	r26, r8
    5638:	9b 96       	adiw	r26, 0x2b	; 43
    563a:	4d 93       	st	X+, r20
    563c:	5d 93       	st	X+, r21
    563e:	6d 93       	st	X+, r22
    5640:	7c 93       	st	X, r23
    5642:	9e 97       	sbiw	r26, 0x2e	; 46
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    5644:	f4 01       	movw	r30, r8
    5646:	e9 5a       	subi	r30, 0xA9	; 169
    5648:	ff 4f       	sbci	r31, 0xFF	; 255
    564a:	00 81       	ld	r16, Z
    564c:	f4 01       	movw	r30, r8
    564e:	02 83       	std	Z+2, r16	; 0x02
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    5650:	8f ef       	ldi	r24, 0xFF	; 255
    5652:	80 0f       	add	r24, r16
    5654:	82 30       	cpi	r24, 0x02	; 2
    5656:	08 f0       	brcs	.+2      	; 0x565a <mount_volume+0x576>
    5658:	21 cf       	rjmp	.-446    	; 0x549c <mount_volume+0x3b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    565a:	ec 5a       	subi	r30, 0xAC	; 172
    565c:	ff 4f       	sbci	r31, 0xFF	; 255
    565e:	10 81       	ld	r17, Z
    5660:	81 2f       	mov	r24, r17
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	1a 96       	adiw	r26, 0x0a	; 10
    5666:	9c 93       	st	X, r25
    5668:	8e 93       	st	-X, r24
    566a:	19 97       	sbiw	r26, 0x09	; 9
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    566c:	00 97       	sbiw	r24, 0x00	; 0
    566e:	09 f4       	brne	.+2      	; 0x5672 <mount_volume+0x58e>
    5670:	15 cf       	rjmp	.-470    	; 0x549c <mount_volume+0x3b8>
    5672:	9c 01       	movw	r18, r24
    5674:	21 50       	subi	r18, 0x01	; 1
    5676:	31 09       	sbc	r19, r1
    5678:	82 23       	and	r24, r18
    567a:	93 23       	and	r25, r19
    567c:	89 2b       	or	r24, r25
    567e:	09 f0       	breq	.+2      	; 0x5682 <mount_volume+0x59e>
    5680:	0d cf       	rjmp	.-486    	; 0x549c <mount_volume+0x3b8>
	rv = rv << 8 | ptr[0];
    5682:	34 96       	adiw	r30, 0x04	; 4
    5684:	20 80       	ld	r2, Z
    5686:	31 80       	ldd	r3, Z+1	; 0x01
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    5688:	f4 01       	movw	r30, r8
    568a:	30 86       	std	Z+8, r3	; 0x08
    568c:	27 82       	std	Z+7, r2	; 0x07
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    568e:	c1 01       	movw	r24, r2
    5690:	8f 70       	andi	r24, 0x0F	; 15
    5692:	99 27       	eor	r25, r25
    5694:	89 2b       	or	r24, r25
    5696:	09 f0       	breq	.+2      	; 0x569a <mount_volume+0x5b6>
    5698:	01 cf       	rjmp	.-510    	; 0x549c <mount_volume+0x3b8>
	rv = rv << 8 | ptr[0];
    569a:	e6 5a       	subi	r30, 0xA6	; 166
    569c:	ff 4f       	sbci	r31, 0xFF	; 255
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    569e:	80 81       	ld	r24, Z
    56a0:	91 81       	ldd	r25, Z+1	; 0x01
    56a2:	6c 01       	movw	r12, r24
    56a4:	f1 2c       	mov	r15, r1
    56a6:	e1 2c       	mov	r14, r1
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    56a8:	89 2b       	or	r24, r25
    56aa:	39 f4       	brne	.+14     	; 0x56ba <mount_volume+0x5d6>
    56ac:	c4 01       	movw	r24, r8
    56ae:	89 59       	subi	r24, 0x99	; 153
    56b0:	9f 4f       	sbci	r25, 0xFF	; 255
    56b2:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    56b6:	6b 01       	movw	r12, r22
    56b8:	7c 01       	movw	r14, r24
	rv = rv << 8 | ptr[0];
    56ba:	f4 01       	movw	r30, r8
    56bc:	eb 5a       	subi	r30, 0xAB	; 171
    56be:	ff 4f       	sbci	r31, 0xFF	; 255
    56c0:	01 90       	ld	r0, Z+
    56c2:	f0 81       	ld	r31, Z
    56c4:	e0 2d       	mov	r30, r0
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    56c6:	30 97       	sbiw	r30, 0x00	; 0
    56c8:	09 f4       	brne	.+2      	; 0x56cc <mount_volume+0x5e8>
    56ca:	e8 ce       	rjmp	.-560    	; 0x549c <mount_volume+0x3b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    56cc:	a0 2f       	mov	r26, r16
    56ce:	b0 e0       	ldi	r27, 0x00	; 0
    56d0:	29 89       	ldd	r18, Y+17	; 0x11
    56d2:	3a 89       	ldd	r19, Y+18	; 0x12
    56d4:	4b 89       	ldd	r20, Y+19	; 0x13
    56d6:	5c 89       	ldd	r21, Y+20	; 0x14
    56d8:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    56dc:	69 a7       	std	Y+41, r22	; 0x29
    56de:	7a a7       	std	Y+42, r23	; 0x2a
    56e0:	8b a7       	std	Y+43, r24	; 0x2b
    56e2:	9c a7       	std	Y+44, r25	; 0x2c
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    56e4:	9f 01       	movw	r18, r30
    56e6:	50 e0       	ldi	r21, 0x00	; 0
    56e8:	40 e0       	ldi	r20, 0x00	; 0
    56ea:	29 a3       	std	Y+33, r18	; 0x21
    56ec:	3a a3       	std	Y+34, r19	; 0x22
    56ee:	4b a3       	std	Y+35, r20	; 0x23
    56f0:	5c a3       	std	Y+36, r21	; 0x24
    56f2:	c1 01       	movw	r24, r2
    56f4:	64 e0       	ldi	r22, 0x04	; 4
    56f6:	96 95       	lsr	r25
    56f8:	87 95       	ror	r24
    56fa:	6a 95       	dec	r22
    56fc:	e1 f7       	brne	.-8      	; 0x56f6 <mount_volume+0x612>
    56fe:	28 0f       	add	r18, r24
    5700:	39 1f       	adc	r19, r25
    5702:	41 1d       	adc	r20, r1
    5704:	51 1d       	adc	r21, r1
    5706:	da 01       	movw	r26, r20
    5708:	c9 01       	movw	r24, r18
    570a:	49 a5       	ldd	r20, Y+41	; 0x29
    570c:	5a a5       	ldd	r21, Y+42	; 0x2a
    570e:	6b a5       	ldd	r22, Y+43	; 0x2b
    5710:	7c a5       	ldd	r23, Y+44	; 0x2c
    5712:	48 0f       	add	r20, r24
    5714:	59 1f       	adc	r21, r25
    5716:	6a 1f       	adc	r22, r26
    5718:	7b 1f       	adc	r23, r27
    571a:	49 8f       	std	Y+25, r20	; 0x19
    571c:	5a 8f       	std	Y+26, r21	; 0x1a
    571e:	6b 8f       	std	Y+27, r22	; 0x1b
    5720:	7c 8f       	std	Y+28, r23	; 0x1c
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    5722:	c4 16       	cp	r12, r20
    5724:	d5 06       	cpc	r13, r21
    5726:	e6 06       	cpc	r14, r22
    5728:	f7 06       	cpc	r15, r23
    572a:	08 f4       	brcc	.+2      	; 0x572e <mount_volume+0x64a>
    572c:	b7 ce       	rjmp	.-658    	; 0x549c <mount_volume+0x3b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    572e:	d7 01       	movw	r26, r14
    5730:	c6 01       	movw	r24, r12
    5732:	84 1b       	sub	r24, r20
    5734:	95 0b       	sbc	r25, r21
    5736:	a6 0b       	sbc	r26, r22
    5738:	b7 0b       	sbc	r27, r23
    573a:	8d a3       	std	Y+37, r24	; 0x25
    573c:	9e a3       	std	Y+38, r25	; 0x26
    573e:	af a3       	std	Y+39, r26	; 0x27
    5740:	b8 a7       	std	Y+40, r27	; 0x28
    5742:	c1 2e       	mov	r12, r17
    5744:	d1 2c       	mov	r13, r1
    5746:	f1 2c       	mov	r15, r1
    5748:	e1 2c       	mov	r14, r1
    574a:	bc 01       	movw	r22, r24
    574c:	cd 01       	movw	r24, r26
    574e:	a7 01       	movw	r20, r14
    5750:	96 01       	movw	r18, r12
    5752:	0e 94 80 59 	call	0xb300	; 0xb300 <__udivmodsi4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    5756:	6d a1       	ldd	r22, Y+37	; 0x25
    5758:	7e a1       	ldd	r23, Y+38	; 0x26
    575a:	8f a1       	ldd	r24, Y+39	; 0x27
    575c:	98 a5       	ldd	r25, Y+40	; 0x28
    575e:	6c 15       	cp	r22, r12
    5760:	7d 05       	cpc	r23, r13
    5762:	8e 05       	cpc	r24, r14
    5764:	9f 05       	cpc	r25, r15
    5766:	08 f4       	brcc	.+2      	; 0x576a <mount_volume+0x686>
    5768:	99 ce       	rjmp	.-718    	; 0x549c <mount_volume+0x3b8>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    576a:	26 3f       	cpi	r18, 0xF6	; 246
    576c:	7f ef       	ldi	r23, 0xFF	; 255
    576e:	37 07       	cpc	r19, r23
    5770:	47 07       	cpc	r20, r23
    5772:	7f e0       	ldi	r23, 0x0F	; 15
    5774:	57 07       	cpc	r21, r23
    5776:	08 f0       	brcs	.+2      	; 0x577a <mount_volume+0x696>
    5778:	91 ce       	rjmp	.-734    	; 0x549c <mount_volume+0x3b8>
    577a:	03 e0       	ldi	r16, 0x03	; 3
    577c:	10 e0       	ldi	r17, 0x00	; 0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    577e:	26 3f       	cpi	r18, 0xF6	; 246
    5780:	8f ef       	ldi	r24, 0xFF	; 255
    5782:	38 07       	cpc	r19, r24
    5784:	41 05       	cpc	r20, r1
    5786:	51 05       	cpc	r21, r1
    5788:	50 f4       	brcc	.+20     	; 0x579e <mount_volume+0x6ba>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    578a:	01 e0       	ldi	r16, 0x01	; 1
    578c:	10 e0       	ldi	r17, 0x00	; 0
    578e:	26 3f       	cpi	r18, 0xF6	; 246
    5790:	6f e0       	ldi	r22, 0x0F	; 15
    5792:	36 07       	cpc	r19, r22
    5794:	41 05       	cpc	r20, r1
    5796:	51 05       	cpc	r21, r1
    5798:	10 f0       	brcs	.+4      	; 0x579e <mount_volume+0x6ba>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    579a:	02 e0       	ldi	r16, 0x02	; 2
    579c:	10 e0       	ldi	r17, 0x00	; 0
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    579e:	69 01       	movw	r12, r18
    57a0:	7a 01       	movw	r14, r20
    57a2:	92 e0       	ldi	r25, 0x02	; 2
    57a4:	c9 0e       	add	r12, r25
    57a6:	d1 1c       	adc	r13, r1
    57a8:	e1 1c       	adc	r14, r1
    57aa:	f1 1c       	adc	r15, r1
    57ac:	d4 01       	movw	r26, r8
    57ae:	97 96       	adiw	r26, 0x27	; 39
    57b0:	cd 92       	st	X+, r12
    57b2:	dd 92       	st	X+, r13
    57b4:	ed 92       	st	X+, r14
    57b6:	fc 92       	st	X, r15
    57b8:	9a 97       	sbiw	r26, 0x2a	; 42
		fs->volbase = bsect;							/* Volume start sector */
    57ba:	f4 01       	movw	r30, r8
    57bc:	47 a6       	std	Z+47, r4	; 0x2f
    57be:	50 aa       	std	Z+48, r5	; 0x30
    57c0:	61 aa       	std	Z+49, r6	; 0x31
    57c2:	72 aa       	std	Z+50, r7	; 0x32
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    57c4:	89 a1       	ldd	r24, Y+33	; 0x21
    57c6:	9a a1       	ldd	r25, Y+34	; 0x22
    57c8:	ab a1       	ldd	r26, Y+35	; 0x23
    57ca:	bc a1       	ldd	r27, Y+36	; 0x24
    57cc:	84 0d       	add	r24, r4
    57ce:	95 1d       	adc	r25, r5
    57d0:	a6 1d       	adc	r26, r6
    57d2:	b7 1d       	adc	r27, r7
    57d4:	83 ab       	std	Z+51, r24	; 0x33
    57d6:	94 ab       	std	Z+52, r25	; 0x34
    57d8:	a5 ab       	std	Z+53, r26	; 0x35
    57da:	b6 ab       	std	Z+54, r27	; 0x36
		fs->database = bsect + sysect;					/* Data start sector */
    57dc:	49 8d       	ldd	r20, Y+25	; 0x19
    57de:	5a 8d       	ldd	r21, Y+26	; 0x1a
    57e0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    57e2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    57e4:	44 0d       	add	r20, r4
    57e6:	55 1d       	adc	r21, r5
    57e8:	66 1d       	adc	r22, r6
    57ea:	77 1d       	adc	r23, r7
    57ec:	43 af       	std	Z+59, r20	; 0x3b
    57ee:	54 af       	std	Z+60, r21	; 0x3c
    57f0:	65 af       	std	Z+61, r22	; 0x3d
    57f2:	76 af       	std	Z+62, r23	; 0x3e
		if (fmt == FS_FAT32) {
    57f4:	03 30       	cpi	r16, 0x03	; 3
    57f6:	11 05       	cpc	r17, r1
    57f8:	09 f0       	breq	.+2      	; 0x57fc <mount_volume+0x718>
    57fa:	92 c0       	rjmp	.+292    	; 0x5920 <mount_volume+0x83c>
	rv = rv << 8 | ptr[0];
    57fc:	ef 58       	subi	r30, 0x8F	; 143
    57fe:	ff 4f       	sbci	r31, 0xFF	; 255
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    5800:	80 81       	ld	r24, Z
    5802:	91 81       	ldd	r25, Z+1	; 0x01
    5804:	28 2a       	or	r2, r24
    5806:	39 2a       	or	r3, r25
    5808:	21 14       	cp	r2, r1
    580a:	31 04       	cpc	r3, r1
    580c:	09 f0       	breq	.+2      	; 0x5810 <mount_volume+0x72c>
    580e:	46 ce       	rjmp	.-884    	; 0x549c <mount_volume+0x3b8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    5810:	c4 01       	movw	r24, r8
    5812:	8d 58       	subi	r24, 0x8D	; 141
    5814:	9f 4f       	sbci	r25, 0xFF	; 255
    5816:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    581a:	d4 01       	movw	r26, r8
    581c:	d7 96       	adiw	r26, 0x37	; 55
    581e:	6d 93       	st	X+, r22
    5820:	7d 93       	st	X+, r23
    5822:	8d 93       	st	X+, r24
    5824:	9c 93       	st	X, r25
    5826:	da 97       	sbiw	r26, 0x3a	; 58
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    5828:	42 e0       	ldi	r20, 0x02	; 2
    582a:	cc 0c       	add	r12, r12
    582c:	dd 1c       	adc	r13, r13
    582e:	ee 1c       	adc	r14, r14
    5830:	ff 1c       	adc	r15, r15
    5832:	4a 95       	dec	r20
    5834:	d1 f7       	brne	.-12     	; 0x582a <mount_volume+0x746>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    5836:	2f ef       	ldi	r18, 0xFF	; 255
    5838:	c2 0e       	add	r12, r18
    583a:	21 e0       	ldi	r18, 0x01	; 1
    583c:	d2 1e       	adc	r13, r18
    583e:	e1 1c       	adc	r14, r1
    5840:	f1 1c       	adc	r15, r1
    5842:	89 e0       	ldi	r24, 0x09	; 9
    5844:	f6 94       	lsr	r15
    5846:	e7 94       	ror	r14
    5848:	d7 94       	ror	r13
    584a:	c7 94       	ror	r12
    584c:	8a 95       	dec	r24
    584e:	d1 f7       	brne	.-12     	; 0x5844 <mount_volume+0x760>
    5850:	49 89       	ldd	r20, Y+17	; 0x11
    5852:	5a 89       	ldd	r21, Y+18	; 0x12
    5854:	6b 89       	ldd	r22, Y+19	; 0x13
    5856:	7c 89       	ldd	r23, Y+20	; 0x14
    5858:	4c 15       	cp	r20, r12
    585a:	5d 05       	cpc	r21, r13
    585c:	6e 05       	cpc	r22, r14
    585e:	7f 05       	cpc	r23, r15
    5860:	08 f4       	brcc	.+2      	; 0x5864 <mount_volume+0x780>
    5862:	1c ce       	rjmp	.-968    	; 0x549c <mount_volume+0x3b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    5864:	8f ef       	ldi	r24, 0xFF	; 255
    5866:	9f ef       	ldi	r25, 0xFF	; 255
    5868:	dc 01       	movw	r26, r24
    586a:	f4 01       	movw	r30, r8
    586c:	83 8b       	std	Z+19, r24	; 0x13
    586e:	94 8b       	std	Z+20, r25	; 0x14
    5870:	a5 8b       	std	Z+21, r26	; 0x15
    5872:	b6 8b       	std	Z+22, r27	; 0x16
    5874:	87 87       	std	Z+15, r24	; 0x0f
    5876:	90 8b       	std	Z+16, r25	; 0x10
    5878:	a1 8b       	std	Z+17, r26	; 0x11
    587a:	b2 8b       	std	Z+18, r27	; 0x12
		fs->fsi_flag = 0x80;
    587c:	80 e8       	ldi	r24, 0x80	; 128
    587e:	84 83       	std	Z+4, r24	; 0x04
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    5880:	03 30       	cpi	r16, 0x03	; 3
    5882:	11 05       	cpc	r17, r1
    5884:	09 f0       	breq	.+2      	; 0x5888 <mount_volume+0x7a4>
    5886:	93 ce       	rjmp	.-730    	; 0x55ae <mount_volume+0x4ca>
	rv = rv << 8 | ptr[0];
    5888:	e9 58       	subi	r30, 0x89	; 137
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    588c:	80 81       	ld	r24, Z
    588e:	91 81       	ldd	r25, Z+1	; 0x01
    5890:	01 97       	sbiw	r24, 0x01	; 1
    5892:	09 f0       	breq	.+2      	; 0x5896 <mount_volume+0x7b2>
    5894:	8c ce       	rjmp	.-744    	; 0x55ae <mount_volume+0x4ca>
			&& move_window(fs, bsect + 1) == FR_OK)
    5896:	b3 01       	movw	r22, r6
    5898:	a2 01       	movw	r20, r4
    589a:	4f 5f       	subi	r20, 0xFF	; 255
    589c:	5f 4f       	sbci	r21, 0xFF	; 255
    589e:	6f 4f       	sbci	r22, 0xFF	; 255
    58a0:	7f 4f       	sbci	r23, 0xFF	; 255
    58a2:	c4 01       	movw	r24, r8
    58a4:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    58a8:	89 2b       	or	r24, r25
    58aa:	09 f0       	breq	.+2      	; 0x58ae <mount_volume+0x7ca>
    58ac:	80 ce       	rjmp	.-768    	; 0x55ae <mount_volume+0x4ca>
			fs->fsi_flag = 0;
    58ae:	d4 01       	movw	r26, r8
    58b0:	14 96       	adiw	r26, 0x04	; 4
    58b2:	1c 92       	st	X, r1
	rv = rv << 8 | ptr[0];
    58b4:	f4 01       	movw	r30, r8
    58b6:	eb 5b       	subi	r30, 0xBB	; 187
    58b8:	fd 4f       	sbci	r31, 0xFD	; 253
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    58ba:	80 81       	ld	r24, Z
    58bc:	91 81       	ldd	r25, Z+1	; 0x01
    58be:	85 35       	cpi	r24, 0x55	; 85
    58c0:	9a 4a       	sbci	r25, 0xAA	; 170
    58c2:	09 f0       	breq	.+2      	; 0x58c6 <mount_volume+0x7e2>
    58c4:	74 ce       	rjmp	.-792    	; 0x55ae <mount_volume+0x4ca>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    58c6:	c4 01       	movw	r24, r8
    58c8:	89 5b       	subi	r24, 0xB9	; 185
    58ca:	9f 4f       	sbci	r25, 0xFF	; 255
    58cc:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    58d0:	62 35       	cpi	r22, 0x52	; 82
    58d2:	72 45       	sbci	r23, 0x52	; 82
    58d4:	81 46       	sbci	r24, 0x61	; 97
    58d6:	91 44       	sbci	r25, 0x41	; 65
    58d8:	09 f0       	breq	.+2      	; 0x58dc <mount_volume+0x7f8>
    58da:	69 ce       	rjmp	.-814    	; 0x55ae <mount_volume+0x4ca>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    58dc:	c4 01       	movw	r24, r8
    58de:	85 5d       	subi	r24, 0xD5	; 213
    58e0:	9d 4f       	sbci	r25, 0xFD	; 253
    58e2:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    58e6:	62 37       	cpi	r22, 0x72	; 114
    58e8:	72 47       	sbci	r23, 0x72	; 114
    58ea:	81 44       	sbci	r24, 0x41	; 65
    58ec:	91 46       	sbci	r25, 0x61	; 97
    58ee:	09 f0       	breq	.+2      	; 0x58f2 <mount_volume+0x80e>
    58f0:	5e ce       	rjmp	.-836    	; 0x55ae <mount_volume+0x4ca>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    58f2:	c4 01       	movw	r24, r8
    58f4:	81 5d       	subi	r24, 0xD1	; 209
    58f6:	9d 4f       	sbci	r25, 0xFD	; 253
    58f8:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    58fc:	d4 01       	movw	r26, r8
    58fe:	53 96       	adiw	r26, 0x13	; 19
    5900:	6d 93       	st	X+, r22
    5902:	7d 93       	st	X+, r23
    5904:	8d 93       	st	X+, r24
    5906:	9c 93       	st	X, r25
    5908:	56 97       	sbiw	r26, 0x16	; 22
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    590a:	c4 01       	movw	r24, r8
    590c:	8d 5c       	subi	r24, 0xCD	; 205
    590e:	9d 4f       	sbci	r25, 0xFD	; 253
    5910:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    5914:	f4 01       	movw	r30, r8
    5916:	67 87       	std	Z+15, r22	; 0x0f
    5918:	70 8b       	std	Z+16, r23	; 0x10
    591a:	81 8b       	std	Z+17, r24	; 0x11
    591c:	92 8b       	std	Z+18, r25	; 0x12
    591e:	47 ce       	rjmp	.-882    	; 0x55ae <mount_volume+0x4ca>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    5920:	21 14       	cp	r2, r1
    5922:	31 04       	cpc	r3, r1
    5924:	09 f4       	brne	.+2      	; 0x5928 <mount_volume+0x844>
    5926:	ba cd       	rjmp	.-1164   	; 0x549c <mount_volume+0x3b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    5928:	29 a5       	ldd	r18, Y+41	; 0x29
    592a:	3a a5       	ldd	r19, Y+42	; 0x2a
    592c:	4b a5       	ldd	r20, Y+43	; 0x2b
    592e:	5c a5       	ldd	r21, Y+44	; 0x2c
    5930:	82 0f       	add	r24, r18
    5932:	93 1f       	adc	r25, r19
    5934:	a4 1f       	adc	r26, r20
    5936:	b5 1f       	adc	r27, r21
    5938:	87 ab       	std	Z+55, r24	; 0x37
    593a:	90 af       	std	Z+56, r25	; 0x38
    593c:	a1 af       	std	Z+57, r26	; 0x39
    593e:	b2 af       	std	Z+58, r27	; 0x3a
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    5940:	02 30       	cpi	r16, 0x02	; 2
    5942:	11 05       	cpc	r17, r1
    5944:	29 f4       	brne	.+10     	; 0x5950 <mount_volume+0x86c>
    5946:	cc 0c       	add	r12, r12
    5948:	dd 1c       	adc	r13, r13
    594a:	ee 1c       	adc	r14, r14
    594c:	ff 1c       	adc	r15, r15
    594e:	73 cf       	rjmp	.-282    	; 0x5836 <mount_volume+0x752>
    5950:	a3 e0       	ldi	r26, 0x03	; 3
    5952:	b0 e0       	ldi	r27, 0x00	; 0
    5954:	a7 01       	movw	r20, r14
    5956:	96 01       	movw	r18, r12
    5958:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    595c:	69 8f       	std	Y+25, r22	; 0x19
    595e:	7a 8f       	std	Y+26, r23	; 0x1a
    5960:	8b 8f       	std	Y+27, r24	; 0x1b
    5962:	9c 8f       	std	Y+28, r25	; 0x1c
    5964:	dc 01       	movw	r26, r24
    5966:	cb 01       	movw	r24, r22
    5968:	b6 95       	lsr	r27
    596a:	a7 95       	ror	r26
    596c:	97 95       	ror	r25
    596e:	87 95       	ror	r24
    5970:	f1 e0       	ldi	r31, 0x01	; 1
    5972:	cf 22       	and	r12, r31
    5974:	dd 24       	eor	r13, r13
    5976:	ee 24       	eor	r14, r14
    5978:	ff 24       	eor	r15, r15
    597a:	c8 0e       	add	r12, r24
    597c:	d9 1e       	adc	r13, r25
    597e:	ea 1e       	adc	r14, r26
    5980:	fb 1e       	adc	r15, r27
    5982:	59 cf       	rjmp	.-334    	; 0x5836 <mount_volume+0x752>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    5984:	83 e0       	ldi	r24, 0x03	; 3
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	e0 cb       	rjmp	.-2112   	; 0x514a <mount_volume+0x66>

0000598a <init_alloc_info.isra.0>:
static void init_alloc_info (
    598a:	0f 93       	push	r16
    598c:	1f 93       	push	r17
    598e:	cf 93       	push	r28
    5990:	df 93       	push	r29
    5992:	8c 01       	movw	r16, r24
    5994:	eb 01       	movw	r28, r22
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
    5996:	c4 96       	adiw	r24, 0x34	; 52
    5998:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    599c:	6e 83       	std	Y+6, r22	; 0x06
    599e:	7f 83       	std	Y+7, r23	; 0x07
    59a0:	88 87       	std	Y+8, r24	; 0x08
    59a2:	99 87       	std	Y+9, r25	; 0x09
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
    59a4:	c8 01       	movw	r24, r16
    59a6:	c8 96       	adiw	r24, 0x38	; 56
    59a8:	0e 94 c4 12 	call	0x2588	; 0x2588 <ld_qword>
    59ac:	2a 87       	std	Y+10, r18	; 0x0a
    59ae:	3b 87       	std	Y+11, r19	; 0x0b
    59b0:	4c 87       	std	Y+12, r20	; 0x0c
    59b2:	5d 87       	std	Y+13, r21	; 0x0d
    59b4:	6e 87       	std	Y+14, r22	; 0x0e
    59b6:	7f 87       	std	Y+15, r23	; 0x0f
    59b8:	88 8b       	std	Y+16, r24	; 0x10
    59ba:	99 8b       	std	Y+17, r25	; 0x11
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
    59bc:	d8 01       	movw	r26, r16
    59be:	91 96       	adiw	r26, 0x21	; 33
    59c0:	8c 91       	ld	r24, X
    59c2:	82 70       	andi	r24, 0x02	; 2
    59c4:	8d 83       	std	Y+5, r24	; 0x05
	obj->n_frag = 0;										/* No last fragment info */
    59c6:	1e 8a       	std	Y+22, r1	; 0x16
    59c8:	1f 8a       	std	Y+23, r1	; 0x17
    59ca:	18 8e       	std	Y+24, r1	; 0x18
    59cc:	19 8e       	std	Y+25, r1	; 0x19
}
    59ce:	df 91       	pop	r29
    59d0:	cf 91       	pop	r28
    59d2:	1f 91       	pop	r17
    59d4:	0f 91       	pop	r16
    59d6:	08 95       	ret

000059d8 <ld_clust.isra.0>:
static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
    59d8:	0f 93       	push	r16
    59da:	1f 93       	push	r17
    59dc:	28 2f       	mov	r18, r24
    59de:	fb 01       	movw	r30, r22
	cl = ld_word(dir + DIR_FstClusLO);
    59e0:	62 8d       	ldd	r22, Z+26	; 0x1a
    59e2:	73 8d       	ldd	r23, Z+27	; 0x1b
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	80 e0       	ldi	r24, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    59e8:	23 30       	cpi	r18, 0x03	; 3
    59ea:	59 f4       	brne	.+22     	; 0x5a02 <ld_clust.isra.0+0x2a>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    59ec:	04 89       	ldd	r16, Z+20	; 0x14
    59ee:	15 89       	ldd	r17, Z+21	; 0x15
    59f0:	30 e0       	ldi	r19, 0x00	; 0
    59f2:	20 e0       	ldi	r18, 0x00	; 0
    59f4:	98 01       	movw	r18, r16
    59f6:	11 27       	eor	r17, r17
    59f8:	00 27       	eor	r16, r16
    59fa:	60 2b       	or	r22, r16
    59fc:	71 2b       	or	r23, r17
    59fe:	82 2b       	or	r24, r18
    5a00:	93 2b       	or	r25, r19
}
    5a02:	1f 91       	pop	r17
    5a04:	0f 91       	pop	r16
    5a06:	08 95       	ret

00005a08 <follow_path>:
{
    5a08:	a7 e5       	ldi	r26, 0x57	; 87
    5a0a:	b0 e0       	ldi	r27, 0x00	; 0
    5a0c:	ea e0       	ldi	r30, 0x0A	; 10
    5a0e:	fd e2       	ldi	r31, 0x2D	; 45
    5a10:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    5a14:	8c 01       	movw	r16, r24
    5a16:	2b 01       	movw	r4, r22
	FATFS *fs = dp->obj.fs;
    5a18:	dc 01       	movw	r26, r24
    5a1a:	0d 90       	ld	r0, X+
    5a1c:	bc 91       	ld	r27, X
    5a1e:	a0 2d       	mov	r26, r0
    5a20:	2c 96       	adiw	r28, 0x0c	; 12
    5a22:	bf af       	std	Y+63, r27	; 0x3f
    5a24:	ae af       	std	Y+62, r26	; 0x3e
    5a26:	2c 97       	sbiw	r28, 0x0c	; 12
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
    5a28:	fb 01       	movw	r30, r22
    5a2a:	80 81       	ld	r24, Z
    5a2c:	8f 32       	cpi	r24, 0x2F	; 47
    5a2e:	11 f0       	breq	.+4      	; 0x5a34 <follow_path+0x2c>
    5a30:	8c 35       	cpi	r24, 0x5C	; 92
    5a32:	81 f4       	brne	.+32     	; 0x5a54 <follow_path+0x4c>
    5a34:	92 01       	movw	r18, r4
    5a36:	29 01       	movw	r4, r18
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    5a38:	d9 01       	movw	r26, r18
    5a3a:	8c 91       	ld	r24, X
    5a3c:	2f 5f       	subi	r18, 0xFF	; 255
    5a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a40:	8f 32       	cpi	r24, 0x2F	; 47
    5a42:	c9 f3       	breq	.-14     	; 0x5a36 <follow_path+0x2e>
    5a44:	8c 35       	cpi	r24, 0x5C	; 92
    5a46:	b9 f3       	breq	.-18     	; 0x5a36 <follow_path+0x2e>
		dp->obj.sclust = 0;					/* Start from root directory */
    5a48:	f8 01       	movw	r30, r16
    5a4a:	16 82       	std	Z+6, r1	; 0x06
    5a4c:	17 82       	std	Z+7, r1	; 0x07
    5a4e:	10 86       	std	Z+8, r1	; 0x08
    5a50:	11 86       	std	Z+9, r1	; 0x09
    5a52:	0d c0       	rjmp	.+26     	; 0x5a6e <follow_path+0x66>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
    5a54:	2c 96       	adiw	r28, 0x0c	; 12
    5a56:	ee ad       	ldd	r30, Y+62	; 0x3e
    5a58:	ff ad       	ldd	r31, Y+63	; 0x3f
    5a5a:	2c 97       	sbiw	r28, 0x0c	; 12
    5a5c:	87 89       	ldd	r24, Z+23	; 0x17
    5a5e:	90 8d       	ldd	r25, Z+24	; 0x18
    5a60:	a1 8d       	ldd	r26, Z+25	; 0x19
    5a62:	b2 8d       	ldd	r27, Z+26	; 0x1a
    5a64:	f8 01       	movw	r30, r16
    5a66:	86 83       	std	Z+6, r24	; 0x06
    5a68:	97 83       	std	Z+7, r25	; 0x07
    5a6a:	a0 87       	std	Z+8, r26	; 0x08
    5a6c:	b1 87       	std	Z+9, r27	; 0x09
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
    5a6e:	d8 01       	movw	r26, r16
    5a70:	56 96       	adiw	r26, 0x16	; 22
    5a72:	1d 92       	st	X+, r1
    5a74:	1d 92       	st	X+, r1
    5a76:	1d 92       	st	X+, r1
    5a78:	1c 92       	st	X, r1
    5a7a:	59 97       	sbiw	r26, 0x19	; 25
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
    5a7c:	2c 96       	adiw	r28, 0x0c	; 12
    5a7e:	ee ad       	ldd	r30, Y+62	; 0x3e
    5a80:	ff ad       	ldd	r31, Y+63	; 0x3f
    5a82:	2c 97       	sbiw	r28, 0x0c	; 12
    5a84:	80 81       	ld	r24, Z
    5a86:	84 30       	cpi	r24, 0x04	; 4
    5a88:	09 f0       	breq	.+2      	; 0x5a8c <follow_path+0x84>
    5a8a:	58 c0       	rjmp	.+176    	; 0x5b3c <follow_path+0x134>
    5a8c:	16 96       	adiw	r26, 0x06	; 6
    5a8e:	8d 91       	ld	r24, X+
    5a90:	9d 91       	ld	r25, X+
    5a92:	0d 90       	ld	r0, X+
    5a94:	bc 91       	ld	r27, X
    5a96:	a0 2d       	mov	r26, r0
    5a98:	89 2b       	or	r24, r25
    5a9a:	8a 2b       	or	r24, r26
    5a9c:	8b 2b       	or	r24, r27
    5a9e:	09 f4       	brne	.+2      	; 0x5aa2 <follow_path+0x9a>
    5aa0:	4d c0       	rjmp	.+154    	; 0x5b3c <follow_path+0x134>
		dp->obj.c_scl = fs->cdc_scl;
    5aa2:	83 8d       	ldd	r24, Z+27	; 0x1b
    5aa4:	94 8d       	ldd	r25, Z+28	; 0x1c
    5aa6:	a5 8d       	ldd	r26, Z+29	; 0x1d
    5aa8:	b6 8d       	ldd	r27, Z+30	; 0x1e
    5aaa:	f8 01       	movw	r30, r16
    5aac:	82 8f       	std	Z+26, r24	; 0x1a
    5aae:	93 8f       	std	Z+27, r25	; 0x1b
    5ab0:	a4 8f       	std	Z+28, r26	; 0x1c
    5ab2:	b5 8f       	std	Z+29, r27	; 0x1d
		dp->obj.c_size = fs->cdc_size;
    5ab4:	2c 96       	adiw	r28, 0x0c	; 12
    5ab6:	ee ad       	ldd	r30, Y+62	; 0x3e
    5ab8:	ff ad       	ldd	r31, Y+63	; 0x3f
    5aba:	2c 97       	sbiw	r28, 0x0c	; 12
    5abc:	87 8d       	ldd	r24, Z+31	; 0x1f
    5abe:	90 a1       	ldd	r25, Z+32	; 0x20
    5ac0:	a1 a1       	ldd	r26, Z+33	; 0x21
    5ac2:	b2 a1       	ldd	r27, Z+34	; 0x22
    5ac4:	f8 01       	movw	r30, r16
    5ac6:	86 8f       	std	Z+30, r24	; 0x1e
    5ac8:	97 8f       	std	Z+31, r25	; 0x1f
    5aca:	a0 a3       	std	Z+32, r26	; 0x20
    5acc:	b1 a3       	std	Z+33, r27	; 0x21
		dp->obj.c_ofs = fs->cdc_ofs;
    5ace:	2c 96       	adiw	r28, 0x0c	; 12
    5ad0:	ee ad       	ldd	r30, Y+62	; 0x3e
    5ad2:	ff ad       	ldd	r31, Y+63	; 0x3f
    5ad4:	2c 97       	sbiw	r28, 0x0c	; 12
    5ad6:	83 a1       	ldd	r24, Z+35	; 0x23
    5ad8:	94 a1       	ldd	r25, Z+36	; 0x24
    5ada:	a5 a1       	ldd	r26, Z+37	; 0x25
    5adc:	b6 a1       	ldd	r27, Z+38	; 0x26
    5ade:	f8 01       	movw	r30, r16
    5ae0:	82 a3       	std	Z+34, r24	; 0x22
    5ae2:	93 a3       	std	Z+35, r25	; 0x23
    5ae4:	a4 a3       	std	Z+36, r26	; 0x24
    5ae6:	b5 a3       	std	Z+37, r27	; 0x25
		res = load_obj_xdir(&dj, &dp->obj);
    5ae8:	b8 01       	movw	r22, r16
    5aea:	ce 01       	movw	r24, r28
    5aec:	01 96       	adiw	r24, 0x01	; 1
    5aee:	0e 94 91 21 	call	0x4322	; 0x4322 <load_obj_xdir>
    5af2:	9c 01       	movw	r18, r24
		if (res != FR_OK) return res;
    5af4:	89 2b       	or	r24, r25
    5af6:	09 f0       	breq	.+2      	; 0x5afa <follow_path+0xf2>
    5af8:	8b c0       	rjmp	.+278    	; 0x5c10 <follow_path+0x208>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
    5afa:	2c 96       	adiw	r28, 0x0c	; 12
    5afc:	ae ad       	ldd	r26, Y+62	; 0x3e
    5afe:	bf ad       	ldd	r27, Y+63	; 0x3f
    5b00:	2c 97       	sbiw	r28, 0x0c	; 12
    5b02:	1d 96       	adiw	r26, 0x0d	; 13
    5b04:	ed 90       	ld	r14, X+
    5b06:	fc 90       	ld	r15, X
    5b08:	c7 01       	movw	r24, r14
    5b0a:	c8 96       	adiw	r24, 0x38	; 56
    5b0c:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    5b10:	29 96       	adiw	r28, 0x09	; 9
    5b12:	6c af       	std	Y+60, r22	; 0x3c
    5b14:	7d af       	std	Y+61, r23	; 0x3d
    5b16:	8e af       	std	Y+62, r24	; 0x3e
    5b18:	9f af       	std	Y+63, r25	; 0x3f
    5b1a:	29 97       	sbiw	r28, 0x09	; 9
    5b1c:	9b 01       	movw	r18, r22
    5b1e:	ac 01       	movw	r20, r24
    5b20:	f8 01       	movw	r30, r16
    5b22:	62 87       	std	Z+10, r22	; 0x0a
    5b24:	33 87       	std	Z+11, r19	; 0x0b
    5b26:	84 87       	std	Z+12, r24	; 0x0c
    5b28:	55 87       	std	Z+13, r21	; 0x0d
    5b2a:	16 86       	std	Z+14, r1	; 0x0e
    5b2c:	17 86       	std	Z+15, r1	; 0x0f
    5b2e:	10 8a       	std	Z+16, r1	; 0x10
    5b30:	11 8a       	std	Z+17, r1	; 0x11
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
    5b32:	d7 01       	movw	r26, r14
    5b34:	91 96       	adiw	r26, 0x21	; 33
    5b36:	8c 91       	ld	r24, X
    5b38:	82 70       	andi	r24, 0x02	; 2
    5b3a:	85 83       	std	Z+5, r24	; 0x05
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    5b3c:	f2 01       	movw	r30, r4
    5b3e:	80 81       	ld	r24, Z
    5b40:	80 32       	cpi	r24, 0x20	; 32
    5b42:	08 f4       	brcc	.+2      	; 0x5b46 <follow_path+0x13e>
    5b44:	5b c0       	rjmp	.+182    	; 0x5bfc <follow_path+0x1f4>
	mem_set(dp->fn, ' ', 11);
    5b46:	98 01       	movw	r18, r16
    5b48:	2c 5c       	subi	r18, 0xCC	; 204
    5b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b4c:	62 96       	adiw	r28, 0x12	; 18
    5b4e:	3f af       	std	Y+63, r19	; 0x3f
    5b50:	2e af       	std	Y+62, r18	; 0x3e
    5b52:	62 97       	sbiw	r28, 0x12	; 18
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    5b54:	2c 96       	adiw	r28, 0x0c	; 12
    5b56:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b58:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b5a:	2c 97       	sbiw	r28, 0x0c	; 12
    5b5c:	89 5b       	subi	r24, 0xB9	; 185
    5b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b60:	64 96       	adiw	r28, 0x14	; 20
    5b62:	9f af       	std	Y+63, r25	; 0x3f
    5b64:	8e af       	std	Y+62, r24	; 0x3e
    5b66:	64 97       	sbiw	r28, 0x14	; 20
				dp->obj.c_ofs = dp->blk_ofs;
    5b68:	d8 01       	movw	r26, r16
    5b6a:	a0 5c       	subi	r26, 0xC0	; 192
    5b6c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b6e:	66 96       	adiw	r28, 0x16	; 22
    5b70:	bf af       	std	Y+63, r27	; 0x3f
    5b72:	ae af       	std	Y+62, r26	; 0x3e
    5b74:	66 97       	sbiw	r28, 0x16	; 22
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
    5b76:	5a 82       	std	Y+2, r5	; 0x02
    5b78:	49 82       	std	Y+1, r4	; 0x01
    5b7a:	d8 01       	movw	r26, r16
    5b7c:	ed 91       	ld	r30, X+
    5b7e:	fc 91       	ld	r31, X
    5b80:	63 84       	ldd	r6, Z+11	; 0x0b
    5b82:	74 84       	ldd	r7, Z+12	; 0x0c
    5b84:	f1 2c       	mov	r15, r1
    5b86:	e1 2c       	mov	r14, r1
		uc = tchar2uni(&p);			/* Get a character */
    5b88:	ce 01       	movw	r24, r28
    5b8a:	01 96       	adiw	r24, 0x01	; 1
    5b8c:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <tchar2uni>
    5b90:	46 2f       	mov	r20, r22
    5b92:	57 2f       	mov	r21, r23
    5b94:	bc 01       	movw	r22, r24
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
    5b96:	4f 3f       	cpi	r20, 0xFF	; 255
    5b98:	bf ef       	ldi	r27, 0xFF	; 255
    5b9a:	5b 07       	cpc	r21, r27
    5b9c:	6b 07       	cpc	r22, r27
    5b9e:	7b 07       	cpc	r23, r27
    5ba0:	51 f1       	breq	.+84     	; 0x5bf6 <follow_path+0x1ee>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
    5ba2:	41 15       	cp	r20, r1
    5ba4:	51 05       	cpc	r21, r1
    5ba6:	e1 e0       	ldi	r30, 0x01	; 1
    5ba8:	6e 07       	cpc	r22, r30
    5baa:	71 05       	cpc	r23, r1
    5bac:	58 f0       	brcs	.+22     	; 0x5bc4 <follow_path+0x1bc>
    5bae:	f7 01       	movw	r30, r14
    5bb0:	ee 0f       	add	r30, r30
    5bb2:	ff 1f       	adc	r31, r31
    5bb4:	e6 0d       	add	r30, r6
    5bb6:	f7 1d       	adc	r31, r7
    5bb8:	91 83       	std	Z+1, r25	; 0x01
    5bba:	80 83       	st	Z, r24
    5bbc:	97 01       	movw	r18, r14
    5bbe:	2f 5f       	subi	r18, 0xFF	; 255
    5bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    5bc2:	79 01       	movw	r14, r18
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
    5bc4:	40 32       	cpi	r20, 0x20	; 32
    5bc6:	51 05       	cpc	r21, r1
    5bc8:	08 f4       	brcc	.+2      	; 0x5bcc <follow_path+0x1c4>
    5bca:	8b c0       	rjmp	.+278    	; 0x5ce2 <follow_path+0x2da>
    5bcc:	4f 32       	cpi	r20, 0x2F	; 47
    5bce:	51 05       	cpc	r21, r1
    5bd0:	b9 f1       	breq	.+110    	; 0x5c40 <follow_path+0x238>
    5bd2:	4c 35       	cpi	r20, 0x5C	; 92
    5bd4:	51 05       	cpc	r21, r1
    5bd6:	a1 f1       	breq	.+104    	; 0x5c40 <follow_path+0x238>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
    5bd8:	40 38       	cpi	r20, 0x80	; 128
    5bda:	51 05       	cpc	r21, r1
    5bdc:	f8 f4       	brcc	.+62     	; 0x5c1c <follow_path+0x214>
    5bde:	9a 01       	movw	r18, r20
	while (*str && *str != chr) str++;
    5be0:	ee ec       	ldi	r30, 0xCE	; 206
    5be2:	f1 e0       	ldi	r31, 0x01	; 1
    5be4:	81 91       	ld	r24, Z+
    5be6:	88 23       	and	r24, r24
    5be8:	c9 f0       	breq	.+50     	; 0x5c1c <follow_path+0x214>
    5bea:	08 2e       	mov	r0, r24
    5bec:	00 0c       	add	r0, r0
    5bee:	99 0b       	sbc	r25, r25
    5bf0:	28 17       	cp	r18, r24
    5bf2:	39 07       	cpc	r19, r25
    5bf4:	b9 f7       	brne	.-18     	; 0x5be4 <follow_path+0x1dc>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
    5bf6:	26 e0       	ldi	r18, 0x06	; 6
    5bf8:	30 e0       	ldi	r19, 0x00	; 0
    5bfa:	0a c0       	rjmp	.+20     	; 0x5c10 <follow_path+0x208>
		dp->fn[NSFLAG] = NS_NONAME;
    5bfc:	80 e8       	ldi	r24, 0x80	; 128
    5bfe:	f8 01       	movw	r30, r16
    5c00:	87 af       	std	Z+63, r24	; 0x3f
		res = dir_sdi(dp, 0);
    5c02:	40 e0       	ldi	r20, 0x00	; 0
    5c04:	50 e0       	ldi	r21, 0x00	; 0
    5c06:	ba 01       	movw	r22, r20
    5c08:	c8 01       	movw	r24, r16
    5c0a:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    5c0e:	9c 01       	movw	r18, r24
}
    5c10:	c9 01       	movw	r24, r18
    5c12:	c9 5a       	subi	r28, 0xA9	; 169
    5c14:	df 4f       	sbci	r29, 0xFF	; 255
    5c16:	e2 e1       	ldi	r30, 0x12	; 18
    5c18:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
    5c1c:	3f ef       	ldi	r19, 0xFF	; 255
    5c1e:	e3 16       	cp	r14, r19
    5c20:	f1 04       	cpc	r15, r1
    5c22:	48 f7       	brcc	.-46     	; 0x5bf6 <follow_path+0x1ee>
		lfn[di++] = wc;					/* Store the Unicode character */
    5c24:	f7 01       	movw	r30, r14
    5c26:	ee 0f       	add	r30, r30
    5c28:	ff 1f       	adc	r31, r31
    5c2a:	e6 0d       	add	r30, r6
    5c2c:	f7 1d       	adc	r31, r7
    5c2e:	51 83       	std	Z+1, r21	; 0x01
    5c30:	40 83       	st	Z, r20
    5c32:	c7 01       	movw	r24, r14
    5c34:	01 96       	adiw	r24, 0x01	; 1
    5c36:	7c 01       	movw	r14, r24
		uc = tchar2uni(&p);			/* Get a character */
    5c38:	a7 cf       	rjmp	.-178    	; 0x5b88 <follow_path+0x180>
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
    5c3a:	31 96       	adiw	r30, 0x01	; 1
    5c3c:	fa 83       	std	Y+2, r31	; 0x02
    5c3e:	e9 83       	std	Y+1, r30	; 0x01
    5c40:	e9 81       	ldd	r30, Y+1	; 0x01
    5c42:	fa 81       	ldd	r31, Y+2	; 0x02
    5c44:	80 81       	ld	r24, Z
    5c46:	8f 32       	cpi	r24, 0x2F	; 47
    5c48:	c1 f3       	breq	.-16     	; 0x5c3a <follow_path+0x232>
    5c4a:	8c 35       	cpi	r24, 0x5C	; 92
    5c4c:	b1 f3       	breq	.-20     	; 0x5c3a <follow_path+0x232>
		cf = 0;					/* Next segment follows */
    5c4e:	26 96       	adiw	r28, 0x06	; 6
    5c50:	1f ae       	std	Y+63, r1	; 0x3f
    5c52:	26 97       	sbiw	r28, 0x06	; 6
	*path = p;					/* Return pointer to the next segment */
    5c54:	49 80       	ldd	r4, Y+1	; 0x01
    5c56:	5a 80       	ldd	r5, Y+2	; 0x02
	if ((di == 1 && lfn[di - 1] == '.') ||
    5c58:	a1 e0       	ldi	r26, 0x01	; 1
    5c5a:	ea 16       	cp	r14, r26
    5c5c:	f1 04       	cpc	r15, r1
    5c5e:	09 f0       	breq	.+2      	; 0x5c62 <follow_path+0x25a>
    5c60:	45 c0       	rjmp	.+138    	; 0x5cec <follow_path+0x2e4>
    5c62:	f3 01       	movw	r30, r6
    5c64:	80 81       	ld	r24, Z
    5c66:	91 81       	ldd	r25, Z+1	; 0x01
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
    5c68:	8e 97       	sbiw	r24, 0x2e	; 46
    5c6a:	09 f0       	breq	.+2      	; 0x5c6e <follow_path+0x266>
    5c6c:	5c c0       	rjmp	.+184    	; 0x5d26 <follow_path+0x31e>
		lfn[di] = 0;
    5c6e:	c7 01       	movw	r24, r14
    5c70:	88 0f       	add	r24, r24
    5c72:	99 1f       	adc	r25, r25
    5c74:	68 0e       	add	r6, r24
    5c76:	79 1e       	adc	r7, r25
    5c78:	f3 01       	movw	r30, r6
    5c7a:	11 82       	std	Z+1, r1	; 0x01
    5c7c:	10 82       	st	Z, r1
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
    5c7e:	f8 01       	movw	r30, r16
    5c80:	f4 96       	adiw	r30, 0x34	; 52
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	80 e0       	ldi	r24, 0x00	; 0
			dp->fn[i] = (i < di) ? '.' : ' ';
    5c86:	20 e2       	ldi	r18, 0x20	; 32
    5c88:	8e 15       	cp	r24, r14
    5c8a:	9f 05       	cpc	r25, r15
    5c8c:	08 f4       	brcc	.+2      	; 0x5c90 <follow_path+0x288>
    5c8e:	2e e2       	ldi	r18, 0x2E	; 46
    5c90:	21 93       	st	Z+, r18
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
    5c92:	01 96       	adiw	r24, 0x01	; 1
    5c94:	8b 30       	cpi	r24, 0x0B	; 11
    5c96:	91 05       	cpc	r25, r1
    5c98:	b1 f7       	brne	.-20     	; 0x5c86 <follow_path+0x27e>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
    5c9a:	26 96       	adiw	r28, 0x06	; 6
    5c9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c9e:	26 97       	sbiw	r28, 0x06	; 6
    5ca0:	80 62       	ori	r24, 0x20	; 32
    5ca2:	d8 01       	movw	r26, r16
    5ca4:	df 96       	adiw	r26, 0x3f	; 63
    5ca6:	8c 93       	st	X, r24
			res = dir_find(dp);				/* Find an object with the segment name */
    5ca8:	c8 01       	movw	r24, r16
    5caa:	0e 94 cd 23 	call	0x479a	; 0x479a <dir_find>
    5cae:	9c 01       	movw	r18, r24
			ns = dp->fn[NSFLAG];
    5cb0:	d8 01       	movw	r26, r16
    5cb2:	df 96       	adiw	r26, 0x3f	; 63
    5cb4:	8c 91       	ld	r24, X
    5cb6:	df 97       	sbiw	r26, 0x3f	; 63
			if (res != FR_OK) {				/* Failed to find the object */
    5cb8:	21 15       	cp	r18, r1
    5cba:	31 05       	cpc	r19, r1
    5cbc:	09 f4       	brne	.+2      	; 0x5cc0 <follow_path+0x2b8>
    5cbe:	98 c1       	rjmp	.+816    	; 0x5ff0 <follow_path+0x5e8>
				if (res == FR_NO_FILE) {	/* Object is not found */
    5cc0:	24 30       	cpi	r18, 0x04	; 4
    5cc2:	31 05       	cpc	r19, r1
    5cc4:	09 f0       	breq	.+2      	; 0x5cc8 <follow_path+0x2c0>
    5cc6:	a4 cf       	rjmp	.-184    	; 0x5c10 <follow_path+0x208>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
    5cc8:	98 2f       	mov	r25, r24
    5cca:	94 70       	andi	r25, 0x04	; 4
    5ccc:	85 ff       	sbrs	r24, 5
    5cce:	8b c1       	rjmp	.+790    	; 0x5fe6 <follow_path+0x5de>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
    5cd0:	99 23       	and	r25, r25
    5cd2:	09 f4       	brne	.+2      	; 0x5cd6 <follow_path+0x2ce>
    5cd4:	50 cf       	rjmp	.-352    	; 0x5b76 <follow_path+0x16e>
						dp->fn[NSFLAG] = NS_NONAME;
    5cd6:	80 e8       	ldi	r24, 0x80	; 128
    5cd8:	df 96       	adiw	r26, 0x3f	; 63
    5cda:	8c 93       	st	X, r24
						res = FR_OK;
    5cdc:	30 e0       	ldi	r19, 0x00	; 0
    5cde:	20 e0       	ldi	r18, 0x00	; 0
    5ce0:	97 cf       	rjmp	.-210    	; 0x5c10 <follow_path+0x208>
		cf = NS_LAST;			/* Set last segment flag */
    5ce2:	94 e0       	ldi	r25, 0x04	; 4
    5ce4:	26 96       	adiw	r28, 0x06	; 6
    5ce6:	9f af       	std	Y+63, r25	; 0x3f
    5ce8:	26 97       	sbiw	r28, 0x06	; 6
    5cea:	b4 cf       	rjmp	.-152    	; 0x5c54 <follow_path+0x24c>
	if ((di == 1 && lfn[di - 1] == '.') ||
    5cec:	f2 e0       	ldi	r31, 0x02	; 2
    5cee:	ef 16       	cp	r14, r31
    5cf0:	f1 04       	cpc	r15, r1
    5cf2:	c9 f4       	brne	.+50     	; 0x5d26 <follow_path+0x31e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
    5cf4:	d3 01       	movw	r26, r6
    5cf6:	12 96       	adiw	r26, 0x02	; 2
    5cf8:	8d 91       	ld	r24, X+
    5cfa:	9c 91       	ld	r25, X
    5cfc:	13 97       	sbiw	r26, 0x03	; 3
    5cfe:	8e 97       	sbiw	r24, 0x2e	; 46
    5d00:	91 f4       	brne	.+36     	; 0x5d26 <follow_path+0x31e>
    5d02:	8d 91       	ld	r24, X+
    5d04:	9c 91       	ld	r25, X
    5d06:	b0 cf       	rjmp	.-160    	; 0x5c68 <follow_path+0x260>
		wc = lfn[di - 1];
    5d08:	fc 01       	movw	r30, r24
    5d0a:	32 97       	sbiw	r30, 0x02	; 2
    5d0c:	e6 0d       	add	r30, r6
    5d0e:	f7 1d       	adc	r31, r7
    5d10:	20 81       	ld	r18, Z
    5d12:	31 81       	ldd	r19, Z+1	; 0x01
		if (wc != ' ' && wc != '.') break;
    5d14:	20 32       	cpi	r18, 0x20	; 32
    5d16:	31 05       	cpc	r19, r1
    5d18:	19 f0       	breq	.+6      	; 0x5d20 <follow_path+0x318>
    5d1a:	2e 32       	cpi	r18, 0x2E	; 46
    5d1c:	31 05       	cpc	r19, r1
    5d1e:	49 f4       	brne	.+18     	; 0x5d32 <follow_path+0x32a>
		di--;
    5d20:	b1 e0       	ldi	r27, 0x01	; 1
    5d22:	eb 1a       	sub	r14, r27
    5d24:	f1 08       	sbc	r15, r1
	while (di) {						/* Snip off trailing spaces and dots if exist */
    5d26:	c7 01       	movw	r24, r14
    5d28:	88 0f       	add	r24, r24
    5d2a:	99 1f       	adc	r25, r25
    5d2c:	e1 14       	cp	r14, r1
    5d2e:	f1 04       	cpc	r15, r1
    5d30:	59 f7       	brne	.-42     	; 0x5d08 <follow_path+0x300>
	lfn[di] = 0;							/* LFN is created into the working buffer */
    5d32:	86 0d       	add	r24, r6
    5d34:	97 1d       	adc	r25, r7
    5d36:	fc 01       	movw	r30, r24
    5d38:	11 82       	std	Z+1, r1	; 0x01
    5d3a:	10 82       	st	Z, r1
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
    5d3c:	e1 14       	cp	r14, r1
    5d3e:	f1 04       	cpc	r15, r1
    5d40:	09 f4       	brne	.+2      	; 0x5d44 <follow_path+0x33c>
    5d42:	59 cf       	rjmp	.-334    	; 0x5bf6 <follow_path+0x1ee>
    5d44:	f3 01       	movw	r30, r6
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
    5d46:	30 e0       	ldi	r19, 0x00	; 0
    5d48:	20 e0       	ldi	r18, 0x00	; 0
    5d4a:	81 91       	ld	r24, Z+
    5d4c:	91 91       	ld	r25, Z+
    5d4e:	49 01       	movw	r8, r18
    5d50:	2f 5f       	subi	r18, 0xFF	; 255
    5d52:	3f 4f       	sbci	r19, 0xFF	; 255
    5d54:	80 32       	cpi	r24, 0x20	; 32
    5d56:	91 05       	cpc	r25, r1
    5d58:	c1 f3       	breq	.-16     	; 0x5d4a <follow_path+0x342>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
    5d5a:	81 14       	cp	r8, r1
    5d5c:	91 04       	cpc	r9, r1
    5d5e:	11 f4       	brne	.+4      	; 0x5d64 <follow_path+0x35c>
    5d60:	8e 97       	sbiw	r24, 0x2e	; 46
    5d62:	39 f4       	brne	.+14     	; 0x5d72 <follow_path+0x36a>
    5d64:	26 96       	adiw	r28, 0x06	; 6
    5d66:	ff ad       	ldd	r31, Y+63	; 0x3f
    5d68:	26 97       	sbiw	r28, 0x06	; 6
    5d6a:	f3 60       	ori	r31, 0x03	; 3
    5d6c:	26 96       	adiw	r28, 0x06	; 6
    5d6e:	ff af       	std	Y+63, r31	; 0x3f
    5d70:	26 97       	sbiw	r28, 0x06	; 6
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
    5d72:	f7 01       	movw	r30, r14
    5d74:	ee 0f       	add	r30, r30
    5d76:	ff 1f       	adc	r31, r31
    5d78:	32 97       	sbiw	r30, 0x02	; 2
    5d7a:	e6 0d       	add	r30, r6
    5d7c:	f7 1d       	adc	r31, r7
    5d7e:	80 81       	ld	r24, Z
    5d80:	91 81       	ldd	r25, Z+1	; 0x01
    5d82:	8e 97       	sbiw	r24, 0x2e	; 46
    5d84:	21 f0       	breq	.+8      	; 0x5d8e <follow_path+0x386>
    5d86:	21 e0       	ldi	r18, 0x01	; 1
    5d88:	e2 1a       	sub	r14, r18
    5d8a:	f1 08       	sbc	r15, r1
    5d8c:	91 f7       	brne	.-28     	; 0x5d72 <follow_path+0x36a>
	mem_set(dp->fn, ' ', 11);
    5d8e:	4b e0       	ldi	r20, 0x0B	; 11
    5d90:	50 e0       	ldi	r21, 0x00	; 0
    5d92:	60 e2       	ldi	r22, 0x20	; 32
    5d94:	70 e0       	ldi	r23, 0x00	; 0
    5d96:	62 96       	adiw	r28, 0x12	; 18
    5d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d9c:	62 97       	sbiw	r28, 0x12	; 18
    5d9e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
	i = b = 0; ni = 8;
    5da2:	48 e0       	ldi	r20, 0x08	; 8
    5da4:	c4 2e       	mov	r12, r20
    5da6:	d1 2c       	mov	r13, r1
    5da8:	a1 2c       	mov	r10, r1
    5daa:	b1 2c       	mov	r11, r1
    5dac:	2a 96       	adiw	r28, 0x0a	; 10
    5dae:	1f ae       	std	Y+63, r1	; 0x3f
    5db0:	2a 97       	sbiw	r28, 0x0a	; 10
			continue;
    5db2:	67 96       	adiw	r28, 0x17	; 23
    5db4:	ef ae       	std	Y+63, r14	; 0x3f
    5db6:	67 97       	sbiw	r28, 0x17	; 23
    5db8:	68 96       	adiw	r28, 0x18	; 24
    5dba:	ff ae       	std	Y+63, r15	; 0x3f
    5dbc:	68 97       	sbiw	r28, 0x18	; 24
		wc = lfn[si++];					/* Get an LFN character */
    5dbe:	14 01       	movw	r2, r8
    5dc0:	3f ef       	ldi	r19, 0xFF	; 255
    5dc2:	23 1a       	sub	r2, r19
    5dc4:	33 0a       	sbc	r3, r19
    5dc6:	88 0c       	add	r8, r8
    5dc8:	99 1c       	adc	r9, r9
    5dca:	f3 01       	movw	r30, r6
    5dcc:	e8 0d       	add	r30, r8
    5dce:	f9 1d       	adc	r31, r9
    5dd0:	20 81       	ld	r18, Z
    5dd2:	31 81       	ldd	r19, Z+1	; 0x01
		if (wc == 0) break;				/* Break on end of the LFN */
    5dd4:	21 15       	cp	r18, r1
    5dd6:	31 05       	cpc	r19, r1
    5dd8:	79 f1       	breq	.+94     	; 0x5e38 <follow_path+0x430>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
    5dda:	20 32       	cpi	r18, 0x20	; 32
    5ddc:	31 05       	cpc	r19, r1
    5dde:	39 f0       	breq	.+14     	; 0x5dee <follow_path+0x3e6>
    5de0:	2e 32       	cpi	r18, 0x2E	; 46
    5de2:	31 05       	cpc	r19, r1
    5de4:	69 f4       	brne	.+26     	; 0x5e00 <follow_path+0x3f8>
    5de6:	2e 14       	cp	r2, r14
    5de8:	3f 04       	cpc	r3, r15
    5dea:	09 f4       	brne	.+2      	; 0x5dee <follow_path+0x3e6>
    5dec:	4c c1       	rjmp	.+664    	; 0x6086 <follow_path+0x67e>
			cf |= NS_LOSS | NS_LFN;
    5dee:	26 96       	adiw	r28, 0x06	; 6
    5df0:	8f ad       	ldd	r24, Y+63	; 0x3f
    5df2:	26 97       	sbiw	r28, 0x06	; 6
    5df4:	83 60       	ori	r24, 0x03	; 3
    5df6:	26 96       	adiw	r28, 0x06	; 6
    5df8:	8f af       	std	Y+63, r24	; 0x3f
    5dfa:	26 97       	sbiw	r28, 0x06	; 6
		dp->fn[i++] = (BYTE)wc;
    5dfc:	41 01       	movw	r8, r2
    5dfe:	df cf       	rjmp	.-66     	; 0x5dbe <follow_path+0x3b6>
		if (i >= ni || si == di) {		/* End of field? */
    5e00:	ac 14       	cp	r10, r12
    5e02:	bd 04       	cpc	r11, r13
    5e04:	50 f4       	brcc	.+20     	; 0x5e1a <follow_path+0x412>
    5e06:	2e 14       	cp	r2, r14
    5e08:	3f 04       	cpc	r3, r15
    5e0a:	09 f0       	breq	.+2      	; 0x5e0e <follow_path+0x406>
    5e0c:	82 c0       	rjmp	.+260    	; 0x5f12 <follow_path+0x50a>
			if (ni == 11) {				/* Name extension overflow? */
    5e0e:	bb e0       	ldi	r27, 0x0B	; 11
    5e10:	cb 16       	cp	r12, r27
    5e12:	d1 04       	cpc	r13, r1
    5e14:	09 f0       	breq	.+2      	; 0x5e18 <follow_path+0x410>
    5e16:	68 c0       	rjmp	.+208    	; 0x5ee8 <follow_path+0x4e0>
    5e18:	05 c0       	rjmp	.+10     	; 0x5e24 <follow_path+0x41c>
    5e1a:	9b e0       	ldi	r25, 0x0B	; 11
    5e1c:	c9 16       	cp	r12, r25
    5e1e:	d1 04       	cpc	r13, r1
    5e20:	09 f0       	breq	.+2      	; 0x5e24 <follow_path+0x41c>
    5e22:	54 c0       	rjmp	.+168    	; 0x5ecc <follow_path+0x4c4>
				cf |= NS_LOSS | NS_LFN;
    5e24:	26 96       	adiw	r28, 0x06	; 6
    5e26:	af ad       	ldd	r26, Y+63	; 0x3f
    5e28:	26 97       	sbiw	r28, 0x06	; 6
    5e2a:	a3 60       	ori	r26, 0x03	; 3
    5e2c:	26 96       	adiw	r28, 0x06	; 6
    5e2e:	af af       	std	Y+63, r26	; 0x3f
    5e30:	26 97       	sbiw	r28, 0x06	; 6
				break;
    5e32:	2b e0       	ldi	r18, 0x0B	; 11
    5e34:	c2 2e       	mov	r12, r18
    5e36:	d1 2c       	mov	r13, r1
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    5e38:	d8 01       	movw	r26, r16
    5e3a:	d4 96       	adiw	r26, 0x34	; 52
    5e3c:	8c 91       	ld	r24, X
    5e3e:	d4 97       	sbiw	r26, 0x34	; 52
    5e40:	85 3e       	cpi	r24, 0xE5	; 229
    5e42:	19 f4       	brne	.+6      	; 0x5e4a <follow_path+0x442>
    5e44:	85 e0       	ldi	r24, 0x05	; 5
    5e46:	d4 96       	adiw	r26, 0x34	; 52
    5e48:	8c 93       	st	X, r24
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
    5e4a:	b8 e0       	ldi	r27, 0x08	; 8
    5e4c:	cb 16       	cp	r12, r27
    5e4e:	d1 04       	cpc	r13, r1
    5e50:	41 f4       	brne	.+16     	; 0x5e62 <follow_path+0x45a>
    5e52:	2a 96       	adiw	r28, 0x0a	; 10
    5e54:	af ac       	ldd	r10, Y+63	; 0x3f
    5e56:	2a 97       	sbiw	r28, 0x0a	; 10
    5e58:	aa 0c       	add	r10, r10
    5e5a:	aa 0c       	add	r10, r10
    5e5c:	2a 96       	adiw	r28, 0x0a	; 10
    5e5e:	af ae       	std	Y+63, r10	; 0x3f
    5e60:	2a 97       	sbiw	r28, 0x0a	; 10
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
    5e62:	2a 96       	adiw	r28, 0x0a	; 10
    5e64:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e66:	2a 97       	sbiw	r28, 0x0a	; 10
    5e68:	8c 70       	andi	r24, 0x0C	; 12
    5e6a:	8c 30       	cpi	r24, 0x0C	; 12
    5e6c:	31 f0       	breq	.+12     	; 0x5e7a <follow_path+0x472>
    5e6e:	2a 96       	adiw	r28, 0x0a	; 10
    5e70:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e72:	2a 97       	sbiw	r28, 0x0a	; 10
    5e74:	83 70       	andi	r24, 0x03	; 3
    5e76:	83 30       	cpi	r24, 0x03	; 3
    5e78:	39 f4       	brne	.+14     	; 0x5e88 <follow_path+0x480>
    5e7a:	26 96       	adiw	r28, 0x06	; 6
    5e7c:	2f ad       	ldd	r18, Y+63	; 0x3f
    5e7e:	26 97       	sbiw	r28, 0x06	; 6
    5e80:	22 60       	ori	r18, 0x02	; 2
    5e82:	26 96       	adiw	r28, 0x06	; 6
    5e84:	2f af       	std	Y+63, r18	; 0x3f
    5e86:	26 97       	sbiw	r28, 0x06	; 6
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
    5e88:	26 96       	adiw	r28, 0x06	; 6
    5e8a:	af ac       	ldd	r10, Y+63	; 0x3f
    5e8c:	26 97       	sbiw	r28, 0x06	; 6
    5e8e:	a1 fc       	sbrc	r10, 1
    5e90:	16 c0       	rjmp	.+44     	; 0x5ebe <follow_path+0x4b6>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
    5e92:	2a 96       	adiw	r28, 0x0a	; 10
    5e94:	bf ac       	ldd	r11, Y+63	; 0x3f
    5e96:	2a 97       	sbiw	r28, 0x0a	; 10
    5e98:	b0 fe       	sbrs	r11, 0
    5e9a:	05 c0       	rjmp	.+10     	; 0x5ea6 <follow_path+0x49e>
    5e9c:	2a 2d       	mov	r18, r10
    5e9e:	20 61       	ori	r18, 0x10	; 16
    5ea0:	26 96       	adiw	r28, 0x06	; 6
    5ea2:	2f af       	std	Y+63, r18	; 0x3f
    5ea4:	26 97       	sbiw	r28, 0x06	; 6
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
    5ea6:	2a 96       	adiw	r28, 0x0a	; 10
    5ea8:	af ac       	ldd	r10, Y+63	; 0x3f
    5eaa:	2a 97       	sbiw	r28, 0x0a	; 10
    5eac:	a2 fe       	sbrs	r10, 2
    5eae:	07 c0       	rjmp	.+14     	; 0x5ebe <follow_path+0x4b6>
    5eb0:	26 96       	adiw	r28, 0x06	; 6
    5eb2:	2f ad       	ldd	r18, Y+63	; 0x3f
    5eb4:	26 97       	sbiw	r28, 0x06	; 6
    5eb6:	28 60       	ori	r18, 0x08	; 8
    5eb8:	26 96       	adiw	r28, 0x06	; 6
    5eba:	2f af       	std	Y+63, r18	; 0x3f
    5ebc:	26 97       	sbiw	r28, 0x06	; 6
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
    5ebe:	26 96       	adiw	r28, 0x06	; 6
    5ec0:	af ac       	ldd	r10, Y+63	; 0x3f
    5ec2:	26 97       	sbiw	r28, 0x06	; 6
    5ec4:	d8 01       	movw	r26, r16
    5ec6:	df 96       	adiw	r26, 0x3f	; 63
    5ec8:	ac 92       	st	X, r10
			if (res != FR_OK) break;
    5eca:	ee ce       	rjmp	.-548    	; 0x5ca8 <follow_path+0x2a0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
    5ecc:	2e 14       	cp	r2, r14
    5ece:	3f 04       	cpc	r3, r15
    5ed0:	59 f0       	breq	.+22     	; 0x5ee8 <follow_path+0x4e0>
    5ed2:	26 96       	adiw	r28, 0x06	; 6
    5ed4:	bf ad       	ldd	r27, Y+63	; 0x3f
    5ed6:	26 97       	sbiw	r28, 0x06	; 6
    5ed8:	b3 60       	ori	r27, 0x03	; 3
    5eda:	26 96       	adiw	r28, 0x06	; 6
    5edc:	bf af       	std	Y+63, r27	; 0x3f
    5ede:	26 97       	sbiw	r28, 0x06	; 6
			if (si > di) break;						/* No name extension? */
    5ee0:	e2 14       	cp	r14, r2
    5ee2:	f3 04       	cpc	r15, r3
    5ee4:	08 f4       	brcc	.+2      	; 0x5ee8 <follow_path+0x4e0>
    5ee6:	a8 cf       	rjmp	.-176    	; 0x5e38 <follow_path+0x430>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
    5ee8:	2a 96       	adiw	r28, 0x0a	; 10
    5eea:	af ac       	ldd	r10, Y+63	; 0x3f
    5eec:	2a 97       	sbiw	r28, 0x0a	; 10
    5eee:	aa 0c       	add	r10, r10
    5ef0:	aa 0c       	add	r10, r10
    5ef2:	2a 96       	adiw	r28, 0x0a	; 10
    5ef4:	af ae       	std	Y+63, r10	; 0x3f
    5ef6:	2a 97       	sbiw	r28, 0x0a	; 10
			continue;
    5ef8:	67 96       	adiw	r28, 0x17	; 23
    5efa:	2f ac       	ldd	r2, Y+63	; 0x3f
    5efc:	67 97       	sbiw	r28, 0x17	; 23
    5efe:	68 96       	adiw	r28, 0x18	; 24
    5f00:	3f ac       	ldd	r3, Y+63	; 0x3f
    5f02:	68 97       	sbiw	r28, 0x18	; 24
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
    5f04:	8b e0       	ldi	r24, 0x0B	; 11
    5f06:	c8 2e       	mov	r12, r24
    5f08:	d1 2c       	mov	r13, r1
    5f0a:	98 e0       	ldi	r25, 0x08	; 8
    5f0c:	a9 2e       	mov	r10, r25
    5f0e:	b1 2c       	mov	r11, r1
			continue;
    5f10:	75 cf       	rjmp	.-278    	; 0x5dfc <follow_path+0x3f4>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
    5f12:	20 38       	cpi	r18, 0x80	; 128
    5f14:	31 05       	cpc	r19, r1
    5f16:	20 f1       	brcs	.+72     	; 0x5f60 <follow_path+0x558>
			cf |= NS_LFN;	/* LFN entry needs to be created */
    5f18:	26 96       	adiw	r28, 0x06	; 6
    5f1a:	9f ac       	ldd	r9, Y+63	; 0x3f
    5f1c:	26 97       	sbiw	r28, 0x06	; 6
    5f1e:	68 94       	set
    5f20:	91 f8       	bld	r9, 1
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
    5f22:	c9 01       	movw	r24, r18
    5f24:	b0 e0       	ldi	r27, 0x00	; 0
    5f26:	a0 e0       	ldi	r26, 0x00	; 0
    5f28:	60 96       	adiw	r28, 0x10	; 16
    5f2a:	8c af       	std	Y+60, r24	; 0x3c
    5f2c:	9d af       	std	Y+61, r25	; 0x3d
    5f2e:	ae af       	std	Y+62, r26	; 0x3e
    5f30:	bf af       	std	Y+63, r27	; 0x3f
    5f32:	60 97       	sbiw	r28, 0x10	; 16
    5f34:	45 eb       	ldi	r20, 0xB5	; 181
    5f36:	51 e0       	ldi	r21, 0x01	; 1
    5f38:	b9 01       	movw	r22, r18
    5f3a:	cd 01       	movw	r24, r26
    5f3c:	0e 94 ca 4b 	call	0x9794	; 0x9794 <ff_uni2oem>
    5f40:	9c 01       	movw	r18, r24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
    5f42:	87 ff       	sbrs	r24, 7
    5f44:	23 c0       	rjmp	.+70     	; 0x5f8c <follow_path+0x584>
    5f46:	2f 77       	andi	r18, 0x7F	; 127
    5f48:	33 27       	eor	r19, r19
    5f4a:	f9 01       	movw	r30, r18
    5f4c:	e3 5e       	subi	r30, 0xE3	; 227
    5f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    5f50:	20 81       	ld	r18, Z
    5f52:	30 e0       	ldi	r19, 0x00	; 0
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
    5f54:	26 96       	adiw	r28, 0x06	; 6
    5f56:	9f ae       	std	Y+63, r9	; 0x3f
    5f58:	26 97       	sbiw	r28, 0x06	; 6
    5f5a:	21 15       	cp	r18, r1
    5f5c:	31 05       	cpc	r19, r1
    5f5e:	61 f0       	breq	.+24     	; 0x5f78 <follow_path+0x570>
	while (*str && *str != chr) str++;
    5f60:	e7 ed       	ldi	r30, 0xD7	; 215
    5f62:	f1 e0       	ldi	r31, 0x01	; 1
    5f64:	81 91       	ld	r24, Z+
    5f66:	88 23       	and	r24, r24
    5f68:	09 f4       	brne	.+2      	; 0x5f6c <follow_path+0x564>
    5f6a:	97 c0       	rjmp	.+302    	; 0x609a <follow_path+0x692>
    5f6c:	08 2e       	mov	r0, r24
    5f6e:	00 0c       	add	r0, r0
    5f70:	99 0b       	sbc	r25, r25
    5f72:	82 17       	cp	r24, r18
    5f74:	93 07       	cpc	r25, r19
    5f76:	b1 f7       	brne	.-20     	; 0x5f64 <follow_path+0x55c>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    5f78:	26 96       	adiw	r28, 0x06	; 6
    5f7a:	bf ad       	ldd	r27, Y+63	; 0x3f
    5f7c:	26 97       	sbiw	r28, 0x06	; 6
    5f7e:	b3 60       	ori	r27, 0x03	; 3
    5f80:	26 96       	adiw	r28, 0x06	; 6
    5f82:	bf af       	std	Y+63, r27	; 0x3f
    5f84:	26 97       	sbiw	r28, 0x06	; 6
    5f86:	2f e5       	ldi	r18, 0x5F	; 95
    5f88:	30 e0       	ldi	r19, 0x00	; 0
    5f8a:	1c c0       	rjmp	.+56     	; 0x5fc4 <follow_path+0x5bc>
		if (wc >= 0x100) {				/* Is this a DBC? */
    5f8c:	8f 3f       	cpi	r24, 0xFF	; 255
    5f8e:	91 05       	cpc	r25, r1
    5f90:	09 f3       	breq	.-62     	; 0x5f54 <follow_path+0x54c>
    5f92:	00 f3       	brcs	.-64     	; 0x5f54 <follow_path+0x54c>
			if (i >= ni - 1) {			/* Field overflow? */
    5f94:	c6 01       	movw	r24, r12
    5f96:	01 97       	sbiw	r24, 0x01	; 1
    5f98:	a8 16       	cp	r10, r24
    5f9a:	b9 06       	cpc	r11, r25
    5f9c:	48 f0       	brcs	.+18     	; 0x5fb0 <follow_path+0x5a8>
				cf |= NS_LOSS | NS_LFN;
    5f9e:	26 96       	adiw	r28, 0x06	; 6
    5fa0:	9f ad       	ldd	r25, Y+63	; 0x3f
    5fa2:	26 97       	sbiw	r28, 0x06	; 6
    5fa4:	93 60       	ori	r25, 0x03	; 3
    5fa6:	26 96       	adiw	r28, 0x06	; 6
    5fa8:	9f af       	std	Y+63, r25	; 0x3f
    5faa:	26 97       	sbiw	r28, 0x06	; 6
				i = ni; continue;		/* Next field */
    5fac:	56 01       	movw	r10, r12
    5fae:	26 cf       	rjmp	.-436    	; 0x5dfc <follow_path+0x3f4>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
    5fb0:	f8 01       	movw	r30, r16
    5fb2:	ea 0d       	add	r30, r10
    5fb4:	fb 1d       	adc	r31, r11
    5fb6:	34 ab       	std	Z+52, r19	; 0x34
    5fb8:	d5 01       	movw	r26, r10
    5fba:	11 96       	adiw	r26, 0x01	; 1
    5fbc:	5d 01       	movw	r10, r26
    5fbe:	26 96       	adiw	r28, 0x06	; 6
    5fc0:	9f ae       	std	Y+63, r9	; 0x3f
    5fc2:	26 97       	sbiw	r28, 0x06	; 6
		dp->fn[i++] = (BYTE)wc;
    5fc4:	f8 01       	movw	r30, r16
    5fc6:	ea 0d       	add	r30, r10
    5fc8:	fb 1d       	adc	r31, r11
    5fca:	24 ab       	std	Z+52, r18	; 0x34
    5fcc:	95 01       	movw	r18, r10
    5fce:	2f 5f       	subi	r18, 0xFF	; 255
    5fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd2:	59 01       	movw	r10, r18
    5fd4:	13 cf       	rjmp	.-474    	; 0x5dfc <follow_path+0x3f4>
					b |= 2;
    5fd6:	2a 96       	adiw	r28, 0x0a	; 10
    5fd8:	ef ad       	ldd	r30, Y+63	; 0x3f
    5fda:	2a 97       	sbiw	r28, 0x0a	; 10
    5fdc:	e2 60       	ori	r30, 0x02	; 2
    5fde:	2a 96       	adiw	r28, 0x0a	; 10
    5fe0:	ef af       	std	Y+63, r30	; 0x3f
    5fe2:	2a 97       	sbiw	r28, 0x0a	; 10
				if (IsLower(wc)) {		/* ASCII lower case? */
    5fe4:	ef cf       	rjmp	.-34     	; 0x5fc4 <follow_path+0x5bc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    5fe6:	91 11       	cpse	r25, r1
    5fe8:	13 ce       	rjmp	.-986    	; 0x5c10 <follow_path+0x208>
    5fea:	25 e0       	ldi	r18, 0x05	; 5
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	10 ce       	rjmp	.-992    	; 0x5c10 <follow_path+0x208>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    5ff0:	82 fd       	sbrc	r24, 2
    5ff2:	0e ce       	rjmp	.-996    	; 0x5c10 <follow_path+0x208>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    5ff4:	f8 01       	movw	r30, r16
    5ff6:	84 81       	ldd	r24, Z+4	; 0x04
    5ff8:	84 ff       	sbrs	r24, 4
    5ffa:	f7 cf       	rjmp	.-18     	; 0x5fea <follow_path+0x5e2>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
    5ffc:	2c 96       	adiw	r28, 0x0c	; 12
    5ffe:	ae ad       	ldd	r26, Y+62	; 0x3e
    6000:	bf ad       	ldd	r27, Y+63	; 0x3f
    6002:	2c 97       	sbiw	r28, 0x0c	; 12
    6004:	8c 91       	ld	r24, X
    6006:	84 30       	cpi	r24, 0x04	; 4
    6008:	59 f5       	brne	.+86     	; 0x6060 <follow_path+0x658>
				dp->obj.c_scl = dp->obj.sclust;
    600a:	86 81       	ldd	r24, Z+6	; 0x06
    600c:	97 81       	ldd	r25, Z+7	; 0x07
    600e:	a0 85       	ldd	r26, Z+8	; 0x08
    6010:	b1 85       	ldd	r27, Z+9	; 0x09
    6012:	82 8f       	std	Z+26, r24	; 0x1a
    6014:	93 8f       	std	Z+27, r25	; 0x1b
    6016:	a4 8f       	std	Z+28, r26	; 0x1c
    6018:	b5 8f       	std	Z+29, r27	; 0x1d
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
    601a:	82 85       	ldd	r24, Z+10	; 0x0a
    601c:	93 85       	ldd	r25, Z+11	; 0x0b
    601e:	a4 85       	ldd	r26, Z+12	; 0x0c
    6020:	b5 85       	ldd	r27, Z+13	; 0x0d
    6022:	88 27       	eor	r24, r24
    6024:	25 81       	ldd	r18, Z+5	; 0x05
    6026:	82 2b       	or	r24, r18
    6028:	86 8f       	std	Z+30, r24	; 0x1e
    602a:	97 8f       	std	Z+31, r25	; 0x1f
    602c:	a0 a3       	std	Z+32, r26	; 0x20
    602e:	b1 a3       	std	Z+33, r27	; 0x21
				dp->obj.c_ofs = dp->blk_ofs;
    6030:	66 96       	adiw	r28, 0x16	; 22
    6032:	ee ad       	ldd	r30, Y+62	; 0x3e
    6034:	ff ad       	ldd	r31, Y+63	; 0x3f
    6036:	66 97       	sbiw	r28, 0x16	; 22
    6038:	80 81       	ld	r24, Z
    603a:	91 81       	ldd	r25, Z+1	; 0x01
    603c:	a2 81       	ldd	r26, Z+2	; 0x02
    603e:	b3 81       	ldd	r27, Z+3	; 0x03
    6040:	f8 01       	movw	r30, r16
    6042:	82 a3       	std	Z+34, r24	; 0x22
    6044:	93 a3       	std	Z+35, r25	; 0x23
    6046:	a4 a3       	std	Z+36, r26	; 0x24
    6048:	b5 a3       	std	Z+37, r27	; 0x25
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
    604a:	b8 01       	movw	r22, r16
    604c:	2c 96       	adiw	r28, 0x0c	; 12
    604e:	ae ad       	ldd	r26, Y+62	; 0x3e
    6050:	bf ad       	ldd	r27, Y+63	; 0x3f
    6052:	2c 97       	sbiw	r28, 0x0c	; 12
    6054:	1d 96       	adiw	r26, 0x0d	; 13
    6056:	8d 91       	ld	r24, X+
    6058:	9c 91       	ld	r25, X
    605a:	0e 94 c5 2c 	call	0x598a	; 0x598a <init_alloc_info.isra.0>
    605e:	8b cd       	rjmp	.-1258   	; 0x5b76 <follow_path+0x16e>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    6060:	66 a1       	ldd	r22, Z+38	; 0x26
    6062:	77 a1       	ldd	r23, Z+39	; 0x27
    6064:	71 70       	andi	r23, 0x01	; 1
    6066:	64 96       	adiw	r28, 0x14	; 20
    6068:	ae ac       	ldd	r10, Y+62	; 0x3e
    606a:	bf ac       	ldd	r11, Y+63	; 0x3f
    606c:	64 97       	sbiw	r28, 0x14	; 20
    606e:	6a 0d       	add	r22, r10
    6070:	7b 1d       	adc	r23, r11
    6072:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    6076:	d8 01       	movw	r26, r16
    6078:	16 96       	adiw	r26, 0x06	; 6
    607a:	6d 93       	st	X+, r22
    607c:	7d 93       	st	X+, r23
    607e:	8d 93       	st	X+, r24
    6080:	9c 93       	st	X, r25
    6082:	19 97       	sbiw	r26, 0x09	; 9
    6084:	78 cd       	rjmp	.-1296   	; 0x5b76 <follow_path+0x16e>
		if (i >= ni || si == di) {		/* End of field? */
    6086:	ac 14       	cp	r10, r12
    6088:	bd 04       	cpc	r11, r13
    608a:	08 f4       	brcc	.+2      	; 0x608e <follow_path+0x686>
    608c:	c0 ce       	rjmp	.-640    	; 0x5e0e <follow_path+0x406>
			if (ni == 11) {				/* Name extension overflow? */
    608e:	eb e0       	ldi	r30, 0x0B	; 11
    6090:	ce 16       	cp	r12, r30
    6092:	d1 04       	cpc	r13, r1
    6094:	09 f0       	breq	.+2      	; 0x6098 <follow_path+0x690>
    6096:	28 cf       	rjmp	.-432    	; 0x5ee8 <follow_path+0x4e0>
    6098:	c5 ce       	rjmp	.-630    	; 0x5e24 <follow_path+0x41c>
				if (IsUpper(wc)) {		/* ASCII upper case? */
    609a:	c9 01       	movw	r24, r18
    609c:	81 54       	subi	r24, 0x41	; 65
    609e:	91 09       	sbc	r25, r1
    60a0:	4a 97       	sbiw	r24, 0x1a	; 26
    60a2:	08 f4       	brcc	.+2      	; 0x60a6 <follow_path+0x69e>
    60a4:	98 cf       	rjmp	.-208    	; 0x5fd6 <follow_path+0x5ce>
				if (IsLower(wc)) {		/* ASCII lower case? */
    60a6:	c9 01       	movw	r24, r18
    60a8:	81 56       	subi	r24, 0x61	; 97
    60aa:	91 09       	sbc	r25, r1
    60ac:	4a 97       	sbiw	r24, 0x1a	; 26
    60ae:	08 f0       	brcs	.+2      	; 0x60b2 <follow_path+0x6aa>
    60b0:	89 cf       	rjmp	.-238    	; 0x5fc4 <follow_path+0x5bc>
					b |= 1; wc -= 0x20;
    60b2:	2a 96       	adiw	r28, 0x0a	; 10
    60b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    60b6:	2a 97       	sbiw	r28, 0x0a	; 10
    60b8:	f1 60       	ori	r31, 0x01	; 1
    60ba:	2a 96       	adiw	r28, 0x0a	; 10
    60bc:	ff af       	std	Y+63, r31	; 0x3f
    60be:	2a 97       	sbiw	r28, 0x0a	; 10
    60c0:	20 52       	subi	r18, 0x20	; 32
    60c2:	31 09       	sbc	r19, r1
    60c4:	7f cf       	rjmp	.-258    	; 0x5fc4 <follow_path+0x5bc>

000060c6 <sync_fs>:
{
    60c6:	ef 92       	push	r14
    60c8:	ff 92       	push	r15
    60ca:	0f 93       	push	r16
    60cc:	1f 93       	push	r17
    60ce:	cf 93       	push	r28
    60d0:	df 93       	push	r29
    60d2:	ec 01       	movw	r28, r24
	res = sync_window(fs);
    60d4:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <sync_window>
	if (res == FR_OK) {
    60d8:	00 97       	sbiw	r24, 0x00	; 0
    60da:	09 f0       	breq	.+2      	; 0x60de <sync_fs+0x18>
    60dc:	63 c0       	rjmp	.+198    	; 0x61a4 <sync_fs+0xde>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    60de:	88 81       	ld	r24, Y
    60e0:	83 30       	cpi	r24, 0x03	; 3
    60e2:	09 f0       	breq	.+2      	; 0x60e6 <sync_fs+0x20>
    60e4:	53 c0       	rjmp	.+166    	; 0x618c <sync_fs+0xc6>
    60e6:	8c 81       	ldd	r24, Y+4	; 0x04
    60e8:	81 30       	cpi	r24, 0x01	; 1
    60ea:	09 f0       	breq	.+2      	; 0x60ee <sync_fs+0x28>
    60ec:	4f c0       	rjmp	.+158    	; 0x618c <sync_fs+0xc6>
			mem_set(fs->win, 0, sizeof fs->win);
    60ee:	40 e0       	ldi	r20, 0x00	; 0
    60f0:	52 e0       	ldi	r21, 0x02	; 2
    60f2:	70 e0       	ldi	r23, 0x00	; 0
    60f4:	60 e0       	ldi	r22, 0x00	; 0
    60f6:	7e 01       	movw	r14, r28
    60f8:	87 e4       	ldi	r24, 0x47	; 71
    60fa:	e8 0e       	add	r14, r24
    60fc:	f1 1c       	adc	r15, r1
    60fe:	c7 01       	movw	r24, r14
    6100:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
    6104:	85 e5       	ldi	r24, 0x55	; 85
    6106:	fe 01       	movw	r30, r28
    6108:	eb 5b       	subi	r30, 0xBB	; 187
    610a:	fd 4f       	sbci	r31, 0xFD	; 253
    610c:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    610e:	8a ea       	ldi	r24, 0xAA	; 170
    6110:	31 96       	adiw	r30, 0x01	; 1
    6112:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    6114:	82 e5       	ldi	r24, 0x52	; 82
    6116:	f7 01       	movw	r30, r14
    6118:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    611a:	31 96       	adiw	r30, 0x01	; 1
    611c:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    611e:	81 e6       	ldi	r24, 0x61	; 97
    6120:	31 96       	adiw	r30, 0x01	; 1
    6122:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    6124:	91 e4       	ldi	r25, 0x41	; 65
    6126:	31 96       	adiw	r30, 0x01	; 1
    6128:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val; val >>= 8;
    612a:	22 e7       	ldi	r18, 0x72	; 114
    612c:	ef 51       	subi	r30, 0x1F	; 31
    612e:	fe 4f       	sbci	r31, 0xFE	; 254
    6130:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    6132:	31 96       	adiw	r30, 0x01	; 1
    6134:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    6136:	31 96       	adiw	r30, 0x01	; 1
    6138:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    613a:	31 96       	adiw	r30, 0x01	; 1
    613c:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    613e:	8b 89       	ldd	r24, Y+19	; 0x13
    6140:	9c 89       	ldd	r25, Y+20	; 0x14
    6142:	ad 89       	ldd	r26, Y+21	; 0x15
    6144:	be 89       	ldd	r27, Y+22	; 0x16
    6146:	31 96       	adiw	r30, 0x01	; 1
    6148:	80 83       	st	Z, r24
    614a:	91 83       	std	Z+1, r25	; 0x01
    614c:	a2 83       	std	Z+2, r26	; 0x02
    614e:	b3 83       	std	Z+3, r27	; 0x03
    6150:	8f 85       	ldd	r24, Y+15	; 0x0f
    6152:	98 89       	ldd	r25, Y+16	; 0x10
    6154:	a9 89       	ldd	r26, Y+17	; 0x11
    6156:	ba 89       	ldd	r27, Y+18	; 0x12
    6158:	34 96       	adiw	r30, 0x04	; 4
    615a:	80 83       	st	Z, r24
    615c:	91 83       	std	Z+1, r25	; 0x01
    615e:	a2 83       	std	Z+2, r26	; 0x02
    6160:	b3 83       	std	Z+3, r27	; 0x03
			fs->winsect = fs->volbase + 1;
    6162:	2f a5       	ldd	r18, Y+47	; 0x2f
    6164:	38 a9       	ldd	r19, Y+48	; 0x30
    6166:	49 a9       	ldd	r20, Y+49	; 0x31
    6168:	5a a9       	ldd	r21, Y+50	; 0x32
    616a:	2f 5f       	subi	r18, 0xFF	; 255
    616c:	3f 4f       	sbci	r19, 0xFF	; 255
    616e:	4f 4f       	sbci	r20, 0xFF	; 255
    6170:	5f 4f       	sbci	r21, 0xFF	; 255
    6172:	e0 5f       	subi	r30, 0xF0	; 240
    6174:	f1 40       	sbci	r31, 0x01	; 1
    6176:	20 83       	st	Z, r18
    6178:	31 83       	std	Z+1, r19	; 0x01
    617a:	42 83       	std	Z+2, r20	; 0x02
    617c:	53 83       	std	Z+3, r21	; 0x03
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    617e:	01 e0       	ldi	r16, 0x01	; 1
    6180:	10 e0       	ldi	r17, 0x00	; 0
    6182:	b7 01       	movw	r22, r14
    6184:	89 81       	ldd	r24, Y+1	; 0x01
    6186:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
			fs->fsi_flag = 0;
    618a:	1c 82       	std	Y+4, r1	; 0x04
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    618c:	50 e0       	ldi	r21, 0x00	; 0
    618e:	40 e0       	ldi	r20, 0x00	; 0
    6190:	60 e0       	ldi	r22, 0x00	; 0
    6192:	89 81       	ldd	r24, Y+1	; 0x01
    6194:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    6198:	21 e0       	ldi	r18, 0x01	; 1
    619a:	89 2b       	or	r24, r25
    619c:	09 f4       	brne	.+2      	; 0x61a0 <sync_fs+0xda>
    619e:	20 e0       	ldi	r18, 0x00	; 0
	res = sync_window(fs);
    61a0:	82 2f       	mov	r24, r18
    61a2:	90 e0       	ldi	r25, 0x00	; 0
}
    61a4:	cd b7       	in	r28, 0x3d	; 61
    61a6:	de b7       	in	r29, 0x3e	; 62
    61a8:	e6 e0       	ldi	r30, 0x06	; 6
    61aa:	0c 94 5c 5a 	jmp	0xb4b8	; 0xb4b8 <__epilogue_restores__+0x18>

000061ae <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    61ae:	a6 e0       	ldi	r26, 0x06	; 6
    61b0:	b0 e0       	ldi	r27, 0x00	; 0
    61b2:	ed ed       	ldi	r30, 0xDD	; 221
    61b4:	f0 e3       	ldi	r31, 0x30	; 48
    61b6:	0c 94 43 5a 	jmp	0xb486	; 0xb486 <__prologue_saves__+0x1e>
    61ba:	9c 83       	std	Y+4, r25	; 0x04
    61bc:	8b 83       	std	Y+3, r24	; 0x03
    61be:	7e 83       	std	Y+6, r23	; 0x06
    61c0:	6d 83       	std	Y+5, r22	; 0x05
    61c2:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    61c4:	7a 83       	std	Y+2, r23	; 0x02
    61c6:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    61c8:	ce 01       	movw	r24, r28
    61ca:	01 96       	adiw	r24, 0x01	; 1
    61cc:	0e 94 84 13 	call	0x2708	; 0x2708 <get_ldnumber>
    61d0:	9c 01       	movw	r18, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    61d2:	97 fd       	sbrc	r25, 7
    61d4:	24 c0       	rjmp	.+72     	; 0x621e <f_mount+0x70>
	cfs = FatFs[vol];					/* Pointer to fs object */
    61d6:	22 0f       	add	r18, r18
    61d8:	33 1f       	adc	r19, r19
    61da:	f9 01       	movw	r30, r18
    61dc:	ea 5b       	subi	r30, 0xBA	; 186
    61de:	fe 4d       	sbci	r31, 0xDE	; 222
    61e0:	01 90       	ld	r0, Z+
    61e2:	f0 81       	ld	r31, Z
    61e4:	e0 2d       	mov	r30, r0

	if (cfs) {
    61e6:	30 97       	sbiw	r30, 0x00	; 0
    61e8:	09 f0       	breq	.+2      	; 0x61ec <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    61ea:	10 82       	st	Z, r1
	}

	if (fs) {
    61ec:	eb 81       	ldd	r30, Y+3	; 0x03
    61ee:	fc 81       	ldd	r31, Y+4	; 0x04
    61f0:	30 97       	sbiw	r30, 0x00	; 0
    61f2:	09 f0       	breq	.+2      	; 0x61f6 <f_mount+0x48>
		fs->fs_type = 0;				/* Clear new fs object */
    61f4:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    61f6:	2a 5b       	subi	r18, 0xBA	; 186
    61f8:	3e 4d       	sbci	r19, 0xDE	; 222
    61fa:	d9 01       	movw	r26, r18
    61fc:	ed 93       	st	X+, r30
    61fe:	fc 93       	st	X, r31

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    6200:	80 e0       	ldi	r24, 0x00	; 0
    6202:	11 23       	and	r17, r17
    6204:	69 f0       	breq	.+26     	; 0x6220 <f_mount+0x72>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    6206:	40 e0       	ldi	r20, 0x00	; 0
    6208:	be 01       	movw	r22, r28
    620a:	6d 5f       	subi	r22, 0xFD	; 253
    620c:	7f 4f       	sbci	r23, 0xFF	; 255
    620e:	ce 01       	movw	r24, r28
    6210:	05 96       	adiw	r24, 0x05	; 5
    6212:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
	LEAVE_FF(fs, res);
}
    6216:	26 96       	adiw	r28, 0x06	; 6
    6218:	e3 e0       	ldi	r30, 0x03	; 3
    621a:	0c 94 5f 5a 	jmp	0xb4be	; 0xb4be <__epilogue_restores__+0x1e>
	if (vol < 0) return FR_INVALID_DRIVE;
    621e:	8b e0       	ldi	r24, 0x0B	; 11
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	f9 cf       	rjmp	.-14     	; 0x6216 <f_mount+0x68>

00006224 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    6224:	ad e5       	ldi	r26, 0x5D	; 93
    6226:	b0 e0       	ldi	r27, 0x00	; 0
    6228:	e8 e1       	ldi	r30, 0x18	; 24
    622a:	f1 e3       	ldi	r31, 0x31	; 49
    622c:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    6230:	4c 01       	movw	r8, r24
    6232:	29 96       	adiw	r28, 0x09	; 9
    6234:	7f af       	std	Y+63, r23	; 0x3f
    6236:	6e af       	std	Y+62, r22	; 0x3e
    6238:	29 97       	sbiw	r28, 0x09	; 9
    623a:	14 2f       	mov	r17, r20
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    623c:	89 2b       	or	r24, r25
    623e:	09 f4       	brne	.+2      	; 0x6242 <f_open+0x1e>
    6240:	78 c3       	rjmp	.+1776   	; 0x6932 <f_open+0x70e>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    6242:	04 2f       	mov	r16, r20
    6244:	0f 73       	andi	r16, 0x3F	; 63
    6246:	2a 96       	adiw	r28, 0x0a	; 10
    6248:	0f af       	std	Y+63, r16	; 0x3f
    624a:	2a 97       	sbiw	r28, 0x0a	; 10
	res = mount_volume(&path, &fs, mode);
    624c:	40 2f       	mov	r20, r16
    624e:	be 01       	movw	r22, r28
    6250:	6b 5b       	subi	r22, 0xBB	; 187
    6252:	7f 4f       	sbci	r23, 0xFF	; 255
    6254:	ce 01       	movw	r24, r28
    6256:	89 5b       	subi	r24, 0xB9	; 185
    6258:	9f 4f       	sbci	r25, 0xFF	; 255
    625a:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    625e:	66 96       	adiw	r28, 0x16	; 22
    6260:	8f af       	std	Y+63, r24	; 0x3f
    6262:	66 97       	sbiw	r28, 0x16	; 22
    6264:	67 96       	adiw	r28, 0x17	; 23
    6266:	9f af       	std	Y+63, r25	; 0x3f
    6268:	67 97       	sbiw	r28, 0x17	; 23
	if (res == FR_OK) {
    626a:	67 96       	adiw	r28, 0x17	; 23
    626c:	2e ad       	ldd	r18, Y+62	; 0x3e
    626e:	3f ad       	ldd	r19, Y+63	; 0x3f
    6270:	67 97       	sbiw	r28, 0x17	; 23
    6272:	23 2b       	or	r18, r19
    6274:	09 f0       	breq	.+2      	; 0x6278 <f_open+0x54>
    6276:	52 c3       	rjmp	.+1700   	; 0x691c <f_open+0x6f8>
		dj.obj.fs = fs;
    6278:	27 96       	adiw	r28, 0x07	; 7
    627a:	8e ad       	ldd	r24, Y+62	; 0x3e
    627c:	9f ad       	ldd	r25, Y+63	; 0x3f
    627e:	27 97       	sbiw	r28, 0x07	; 7
    6280:	9a 83       	std	Y+2, r25	; 0x02
    6282:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    6284:	29 96       	adiw	r28, 0x09	; 9
    6286:	6e ad       	ldd	r22, Y+62	; 0x3e
    6288:	7f ad       	ldd	r23, Y+63	; 0x3f
    628a:	29 97       	sbiw	r28, 0x09	; 9
    628c:	ae 01       	movw	r20, r28
    628e:	4f 5f       	subi	r20, 0xFF	; 255
    6290:	5f 4f       	sbci	r21, 0xFF	; 255
    6292:	3a 01       	movw	r6, r20
    6294:	ca 01       	movw	r24, r20
    6296:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    629a:	9c 01       	movw	r18, r24
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    629c:	f6 2c       	mov	r15, r6
    629e:	e7 2c       	mov	r14, r7
    62a0:	89 2b       	or	r24, r25
    62a2:	39 f4       	brne	.+14     	; 0x62b2 <f_open+0x8e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    62a4:	21 96       	adiw	r28, 0x01	; 1
    62a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    62a8:	21 97       	sbiw	r28, 0x01	; 1
    62aa:	87 ff       	sbrs	r24, 7
    62ac:	02 c0       	rjmp	.+4      	; 0x62b2 <f_open+0x8e>
				res = FR_INVALID_NAME;
    62ae:	26 e0       	ldi	r18, 0x06	; 6
    62b0:	30 e0       	ldi	r19, 0x00	; 0
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    62b2:	81 2f       	mov	r24, r17
    62b4:	8c 71       	andi	r24, 0x1C	; 28
    62b6:	09 f4       	brne	.+2      	; 0x62ba <f_open+0x96>
    62b8:	a2 c2       	rjmp	.+1348   	; 0x67fe <f_open+0x5da>
			if (res != FR_OK) {					/* No file, create new */
    62ba:	21 15       	cp	r18, r1
    62bc:	31 05       	cpc	r19, r1
    62be:	09 f4       	brne	.+2      	; 0x62c2 <f_open+0x9e>
    62c0:	8e c0       	rjmp	.+284    	; 0x63de <f_open+0x1ba>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    62c2:	24 30       	cpi	r18, 0x04	; 4
    62c4:	31 05       	cpc	r19, r1
    62c6:	09 f0       	breq	.+2      	; 0x62ca <f_open+0xa6>
    62c8:	82 c0       	rjmp	.+260    	; 0x63ce <f_open+0x1aa>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    62ca:	8f 2d       	mov	r24, r15
    62cc:	9e 2d       	mov	r25, r14
    62ce:	0e 94 93 25 	call	0x4b26	; 0x4b26 <dir_register>
    62d2:	9c 01       	movw	r18, r24
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    62d4:	89 2b       	or	r24, r25
    62d6:	09 f0       	breq	.+2      	; 0x62da <f_open+0xb6>
    62d8:	7a c0       	rjmp	.+244    	; 0x63ce <f_open+0x1aa>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    62da:	2a 96       	adiw	r28, 0x0a	; 10
    62dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    62de:	2a 97       	sbiw	r28, 0x0a	; 10
    62e0:	58 60       	ori	r21, 0x08	; 8
    62e2:	2a 96       	adiw	r28, 0x0a	; 10
    62e4:	5f af       	std	Y+63, r21	; 0x3f
    62e6:	2a 97       	sbiw	r28, 0x0a	; 10
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
    62e8:	27 96       	adiw	r28, 0x07	; 7
    62ea:	2e ac       	ldd	r2, Y+62	; 0x3e
    62ec:	3f ac       	ldd	r3, Y+63	; 0x3f
    62ee:	27 97       	sbiw	r28, 0x07	; 7
    62f0:	d1 01       	movw	r26, r2
    62f2:	8c 91       	ld	r24, X
    62f4:	84 30       	cpi	r24, 0x04	; 4
    62f6:	09 f0       	breq	.+2      	; 0x62fa <f_open+0xd6>
    62f8:	26 c2       	rjmp	.+1100   	; 0x6746 <f_open+0x522>
					/* Get current allocation info */
					fp->obj.fs = fs;
    62fa:	f4 01       	movw	r30, r8
    62fc:	31 82       	std	Z+1, r3	; 0x01
    62fe:	20 82       	st	Z, r2
					init_alloc_info(fs, &fp->obj);
    6300:	b4 01       	movw	r22, r8
    6302:	1d 96       	adiw	r26, 0x0d	; 13
    6304:	8d 91       	ld	r24, X+
    6306:	9c 91       	ld	r25, X
    6308:	0e 94 c5 2c 	call	0x598a	; 0x598a <init_alloc_info.isra.0>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
    630c:	27 96       	adiw	r28, 0x07	; 7
    630e:	ee ad       	ldd	r30, Y+62	; 0x3e
    6310:	ff ad       	ldd	r31, Y+63	; 0x3f
    6312:	27 97       	sbiw	r28, 0x07	; 7
    6314:	85 85       	ldd	r24, Z+13	; 0x0d
    6316:	96 85       	ldd	r25, Z+14	; 0x0e
    6318:	4e e1       	ldi	r20, 0x1E	; 30
    631a:	50 e0       	ldi	r21, 0x00	; 0
    631c:	70 e0       	ldi	r23, 0x00	; 0
    631e:	60 e0       	ldi	r22, 0x00	; 0
    6320:	02 96       	adiw	r24, 0x02	; 2
    6322:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
    6326:	27 96       	adiw	r28, 0x07	; 7
    6328:	ee ad       	ldd	r30, Y+62	; 0x3e
    632a:	ff ad       	ldd	r31, Y+63	; 0x3f
    632c:	27 97       	sbiw	r28, 0x07	; 7
    632e:	85 85       	ldd	r24, Z+13	; 0x0d
    6330:	96 85       	ldd	r25, Z+14	; 0x0e
    6332:	4a e1       	ldi	r20, 0x1A	; 26
    6334:	50 e0       	ldi	r21, 0x00	; 0
    6336:	70 e0       	ldi	r23, 0x00	; 0
    6338:	60 e0       	ldi	r22, 0x00	; 0
    633a:	86 96       	adiw	r24, 0x26	; 38
    633c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
    6340:	27 96       	adiw	r28, 0x07	; 7
    6342:	ae ad       	ldd	r26, Y+62	; 0x3e
    6344:	bf ad       	ldd	r27, Y+63	; 0x3f
    6346:	27 97       	sbiw	r28, 0x07	; 7
    6348:	1d 96       	adiw	r26, 0x0d	; 13
    634a:	ed 91       	ld	r30, X+
    634c:	fc 91       	ld	r31, X
    634e:	1e 97       	sbiw	r26, 0x0e	; 14
    6350:	80 e2       	ldi	r24, 0x20	; 32
    6352:	84 83       	std	Z+4, r24	; 0x04
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
    6354:	1d 96       	adiw	r26, 0x0d	; 13
    6356:	ed 91       	ld	r30, X+
    6358:	fc 91       	ld	r31, X
    635a:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val; val >>= 8;
    635c:	10 86       	std	Z+8, r1	; 0x08
	*ptr++ = (BYTE)val; val >>= 8;
    635e:	11 86       	std	Z+9, r1	; 0x09
	*ptr++ = (BYTE)val; val >>= 8;
    6360:	81 e2       	ldi	r24, 0x21	; 33
    6362:	82 87       	std	Z+10, r24	; 0x0a
	*ptr++ = (BYTE)val;
    6364:	8c e4       	ldi	r24, 0x4C	; 76
    6366:	83 87       	std	Z+11, r24	; 0x0b
					fs->dirbuf[XDIR_GenFlags] = 1;
    6368:	1d 96       	adiw	r26, 0x0d	; 13
    636a:	ed 91       	ld	r30, X+
    636c:	fc 91       	ld	r31, X
    636e:	81 e0       	ldi	r24, 0x01	; 1
    6370:	81 a3       	std	Z+33, r24	; 0x21
					res = store_xdir(&dj);
    6372:	8f 2d       	mov	r24, r15
    6374:	9e 2d       	mov	r25, r14
    6376:	0e 94 1e 23 	call	0x463c	; 0x463c <store_xdir>
    637a:	9c 01       	movw	r18, r24
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
    637c:	89 2b       	or	r24, r25
    637e:	39 f5       	brne	.+78     	; 0x63ce <f_open+0x1aa>
    6380:	d4 01       	movw	r26, r8
    6382:	16 96       	adiw	r26, 0x06	; 6
    6384:	4d 91       	ld	r20, X+
    6386:	5d 91       	ld	r21, X+
    6388:	6d 91       	ld	r22, X+
    638a:	7c 91       	ld	r23, X
    638c:	19 97       	sbiw	r26, 0x09	; 9
    638e:	41 15       	cp	r20, r1
    6390:	51 05       	cpc	r21, r1
    6392:	61 05       	cpc	r22, r1
    6394:	71 05       	cpc	r23, r1
    6396:	59 f1       	breq	.+86     	; 0x63ee <f_open+0x1ca>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    6398:	00 e0       	ldi	r16, 0x00	; 0
    639a:	10 e0       	ldi	r17, 0x00	; 0
    639c:	98 01       	movw	r18, r16
    639e:	c4 01       	movw	r24, r8
    63a0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <remove_chain>
    63a4:	9c 01       	movw	r18, r24
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
    63a6:	27 96       	adiw	r28, 0x07	; 7
    63a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    63aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    63ac:	27 97       	sbiw	r28, 0x07	; 7
    63ae:	f4 01       	movw	r30, r8
    63b0:	86 81       	ldd	r24, Z+6	; 0x06
    63b2:	97 81       	ldd	r25, Z+7	; 0x07
    63b4:	a0 85       	ldd	r26, Z+8	; 0x08
    63b6:	b1 85       	ldd	r27, Z+9	; 0x09
    63b8:	01 97       	sbiw	r24, 0x01	; 1
    63ba:	a1 09       	sbc	r26, r1
    63bc:	b1 09       	sbc	r27, r1
    63be:	fa 01       	movw	r30, r20
    63c0:	87 87       	std	Z+15, r24	; 0x0f
    63c2:	90 8b       	std	Z+16, r25	; 0x10
    63c4:	a1 8b       	std	Z+17, r26	; 0x11
    63c6:	b2 8b       	std	Z+18, r27	; 0x12
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    63c8:	21 15       	cp	r18, r1
    63ca:	31 05       	cpc	r19, r1
    63cc:	81 f0       	breq	.+32     	; 0x63ee <f_open+0x1ca>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    63ce:	d4 01       	movw	r26, r8
    63d0:	1d 92       	st	X+, r1
    63d2:	1c 92       	st	X, r1
    63d4:	67 96       	adiw	r28, 0x17	; 23
    63d6:	3f af       	std	Y+63, r19	; 0x3f
    63d8:	2e af       	std	Y+62, r18	; 0x3e
    63da:	67 97       	sbiw	r28, 0x17	; 23
    63dc:	ab c1       	rjmp	.+854    	; 0x6734 <f_open+0x510>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    63de:	8d 81       	ldd	r24, Y+5	; 0x05
    63e0:	81 71       	andi	r24, 0x11	; 17
    63e2:	09 f0       	breq	.+2      	; 0x63e6 <f_open+0x1c2>
    63e4:	17 c2       	rjmp	.+1070   	; 0x6814 <f_open+0x5f0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    63e6:	12 fd       	sbrc	r17, 2
    63e8:	9e c2       	rjmp	.+1340   	; 0x6926 <f_open+0x702>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    63ea:	13 fd       	sbrc	r17, 3
    63ec:	7d cf       	rjmp	.-262    	; 0x62e8 <f_open+0xc4>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    63ee:	2a 96       	adiw	r28, 0x0a	; 10
    63f0:	1f ad       	ldd	r17, Y+63	; 0x3f
    63f2:	2a 97       	sbiw	r28, 0x0a	; 10
    63f4:	13 ff       	sbrs	r17, 3
    63f6:	04 c0       	rjmp	.+8      	; 0x6400 <f_open+0x1dc>
    63f8:	10 64       	ori	r17, 0x40	; 64
    63fa:	2a 96       	adiw	r28, 0x0a	; 10
    63fc:	1f af       	std	Y+63, r17	; 0x3f
    63fe:	2a 97       	sbiw	r28, 0x0a	; 10
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    6400:	27 96       	adiw	r28, 0x07	; 7
    6402:	ee ad       	ldd	r30, Y+62	; 0x3e
    6404:	ff ad       	ldd	r31, Y+63	; 0x3f
    6406:	27 97       	sbiw	r28, 0x07	; 7
    6408:	df 01       	movw	r26, r30
    640a:	ad 5b       	subi	r26, 0xBD	; 189
    640c:	bf 4f       	sbci	r27, 0xFF	; 255
    640e:	4d 91       	ld	r20, X+
    6410:	5d 91       	ld	r21, X+
    6412:	6d 91       	ld	r22, X+
    6414:	7c 91       	ld	r23, X
    6416:	d4 01       	movw	r26, r8
    6418:	d8 96       	adiw	r26, 0x38	; 56
    641a:	4d 93       	st	X+, r20
    641c:	5d 93       	st	X+, r21
    641e:	6d 93       	st	X+, r22
    6420:	7c 93       	st	X, r23
    6422:	db 97       	sbiw	r26, 0x3b	; 59
			fp->dir_ptr = dj.dir;
    6424:	0b a9       	ldd	r16, Y+51	; 0x33
    6426:	1c a9       	ldd	r17, Y+52	; 0x34
    6428:	dd 96       	adiw	r26, 0x3d	; 61
    642a:	1c 93       	st	X, r17
    642c:	0e 93       	st	-X, r16
    642e:	dc 97       	sbiw	r26, 0x3c	; 60
			if (fs->fs_type == FS_EXFAT) {
    6430:	80 81       	ld	r24, Z
    6432:	84 30       	cpi	r24, 0x04	; 4
    6434:	09 f0       	breq	.+2      	; 0x6438 <f_open+0x214>
    6436:	f1 c1       	rjmp	.+994    	; 0x681a <f_open+0x5f6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
    6438:	4f 81       	ldd	r20, Y+7	; 0x07
    643a:	58 85       	ldd	r21, Y+8	; 0x08
    643c:	69 85       	ldd	r22, Y+9	; 0x09
    643e:	7a 85       	ldd	r23, Y+10	; 0x0a
    6440:	5a 96       	adiw	r26, 0x1a	; 26
    6442:	4d 93       	st	X+, r20
    6444:	5d 93       	st	X+, r21
    6446:	6d 93       	st	X+, r22
    6448:	7c 93       	st	X, r23
    644a:	5d 97       	sbiw	r26, 0x1d	; 29
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
    644c:	8b 85       	ldd	r24, Y+11	; 0x0b
    644e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6450:	ad 85       	ldd	r26, Y+13	; 0x0d
    6452:	be 85       	ldd	r27, Y+14	; 0x0e
    6454:	88 27       	eor	r24, r24
    6456:	2e 81       	ldd	r18, Y+6	; 0x06
    6458:	ac 01       	movw	r20, r24
    645a:	bd 01       	movw	r22, r26
    645c:	42 2b       	or	r20, r18
    645e:	d4 01       	movw	r26, r8
    6460:	5e 96       	adiw	r26, 0x1e	; 30
    6462:	4d 93       	st	X+, r20
    6464:	5d 93       	st	X+, r21
    6466:	6d 93       	st	X+, r22
    6468:	7c 93       	st	X, r23
    646a:	91 97       	sbiw	r26, 0x21	; 33
				fp->obj.c_ofs = dj.blk_ofs;
    646c:	25 96       	adiw	r28, 0x05	; 5
    646e:	4c ad       	ldd	r20, Y+60	; 0x3c
    6470:	5d ad       	ldd	r21, Y+61	; 0x3d
    6472:	6e ad       	ldd	r22, Y+62	; 0x3e
    6474:	7f ad       	ldd	r23, Y+63	; 0x3f
    6476:	25 97       	sbiw	r28, 0x05	; 5
    6478:	92 96       	adiw	r26, 0x22	; 34
    647a:	4d 93       	st	X+, r20
    647c:	5d 93       	st	X+, r21
    647e:	6d 93       	st	X+, r22
    6480:	7c 93       	st	X, r23
    6482:	95 97       	sbiw	r26, 0x25	; 37
				init_alloc_info(fs, &fp->obj);
    6484:	b4 01       	movw	r22, r8
    6486:	85 85       	ldd	r24, Z+13	; 0x0d
    6488:	96 85       	ldd	r25, Z+14	; 0x0e
    648a:	0e 94 c5 2c 	call	0x598a	; 0x598a <init_alloc_info.isra.0>
			fp->obj.fs = fs;	 	/* Validate the file object */
    648e:	27 96       	adiw	r28, 0x07	; 7
    6490:	ee ad       	ldd	r30, Y+62	; 0x3e
    6492:	ff ad       	ldd	r31, Y+63	; 0x3f
    6494:	27 97       	sbiw	r28, 0x07	; 7
    6496:	d4 01       	movw	r26, r8
    6498:	11 96       	adiw	r26, 0x01	; 1
    649a:	fc 93       	st	X, r31
    649c:	ee 93       	st	-X, r30
			fp->obj.id = fs->id;
    649e:	85 81       	ldd	r24, Z+5	; 0x05
    64a0:	96 81       	ldd	r25, Z+6	; 0x06
    64a2:	13 96       	adiw	r26, 0x03	; 3
    64a4:	9c 93       	st	X, r25
    64a6:	8e 93       	st	-X, r24
    64a8:	12 97       	sbiw	r26, 0x02	; 2
			fp->flag = mode;		/* Set file access mode */
    64aa:	2a 96       	adiw	r28, 0x0a	; 10
    64ac:	ef ad       	ldd	r30, Y+63	; 0x3f
    64ae:	2a 97       	sbiw	r28, 0x0a	; 10
    64b0:	96 96       	adiw	r26, 0x26	; 38
    64b2:	ec 93       	st	X, r30
    64b4:	96 97       	sbiw	r26, 0x26	; 38
			fp->err = 0;			/* Clear error flag */
    64b6:	97 96       	adiw	r26, 0x27	; 39
    64b8:	1c 92       	st	X, r1
    64ba:	97 97       	sbiw	r26, 0x27	; 39
			fp->sect = 0;			/* Invalidate current data sector */
    64bc:	d4 96       	adiw	r26, 0x34	; 52
    64be:	1d 92       	st	X+, r1
    64c0:	1d 92       	st	X+, r1
    64c2:	1d 92       	st	X+, r1
    64c4:	1c 92       	st	X, r1
    64c6:	d7 97       	sbiw	r26, 0x37	; 55
			fp->fptr = 0;			/* Set file pointer top of the file */
    64c8:	98 96       	adiw	r26, 0x28	; 40
    64ca:	1c 92       	st	X, r1
    64cc:	98 97       	sbiw	r26, 0x28	; 40
    64ce:	99 96       	adiw	r26, 0x29	; 41
    64d0:	1c 92       	st	X, r1
    64d2:	99 97       	sbiw	r26, 0x29	; 41
    64d4:	9a 96       	adiw	r26, 0x2a	; 42
    64d6:	1c 92       	st	X, r1
    64d8:	9a 97       	sbiw	r26, 0x2a	; 42
    64da:	9b 96       	adiw	r26, 0x2b	; 43
    64dc:	1c 92       	st	X, r1
    64de:	9b 97       	sbiw	r26, 0x2b	; 43
    64e0:	9c 96       	adiw	r26, 0x2c	; 44
    64e2:	1c 92       	st	X, r1
    64e4:	9c 97       	sbiw	r26, 0x2c	; 44
    64e6:	9d 96       	adiw	r26, 0x2d	; 45
    64e8:	1c 92       	st	X, r1
    64ea:	9d 97       	sbiw	r26, 0x2d	; 45
    64ec:	9e 96       	adiw	r26, 0x2e	; 46
    64ee:	1c 92       	st	X, r1
    64f0:	9e 97       	sbiw	r26, 0x2e	; 46
    64f2:	9f 96       	adiw	r26, 0x2f	; 47
    64f4:	1c 92       	st	X, r1
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
    64f6:	f4 01       	movw	r30, r8
    64f8:	fe 96       	adiw	r30, 0x3e	; 62
    64fa:	6e 96       	adiw	r28, 0x1e	; 30
    64fc:	ff af       	std	Y+63, r31	; 0x3f
    64fe:	ee af       	std	Y+62, r30	; 0x3e
    6500:	6e 97       	sbiw	r28, 0x1e	; 30
    6502:	40 e0       	ldi	r20, 0x00	; 0
    6504:	52 e0       	ldi	r21, 0x02	; 2
    6506:	70 e0       	ldi	r23, 0x00	; 0
    6508:	60 e0       	ldi	r22, 0x00	; 0
    650a:	cf 01       	movw	r24, r30
    650c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    6510:	2a 96       	adiw	r28, 0x0a	; 10
    6512:	ff ad       	ldd	r31, Y+63	; 0x3f
    6514:	2a 97       	sbiw	r28, 0x0a	; 10
    6516:	f5 ff       	sbrs	r31, 5
    6518:	0d c1       	rjmp	.+538    	; 0x6734 <f_open+0x510>
    651a:	d4 01       	movw	r26, r8
    651c:	1a 96       	adiw	r26, 0x0a	; 10
    651e:	2c 90       	ld	r2, X
    6520:	1a 97       	sbiw	r26, 0x0a	; 10
    6522:	1b 96       	adiw	r26, 0x0b	; 11
    6524:	bc 91       	ld	r27, X
    6526:	62 96       	adiw	r28, 0x12	; 18
    6528:	bf af       	std	Y+63, r27	; 0x3f
    652a:	62 97       	sbiw	r28, 0x12	; 18
    652c:	f4 01       	movw	r30, r8
    652e:	f4 85       	ldd	r31, Z+12	; 0x0c
    6530:	68 96       	adiw	r28, 0x18	; 24
    6532:	ff af       	std	Y+63, r31	; 0x3f
    6534:	68 97       	sbiw	r28, 0x18	; 24
    6536:	d4 01       	movw	r26, r8
    6538:	1d 96       	adiw	r26, 0x0d	; 13
    653a:	bc 91       	ld	r27, X
    653c:	69 96       	adiw	r28, 0x19	; 25
    653e:	bf af       	std	Y+63, r27	; 0x3f
    6540:	69 97       	sbiw	r28, 0x19	; 25
    6542:	f4 01       	movw	r30, r8
    6544:	f6 85       	ldd	r31, Z+14	; 0x0e
    6546:	6a 96       	adiw	r28, 0x1a	; 26
    6548:	ff af       	std	Y+63, r31	; 0x3f
    654a:	6a 97       	sbiw	r28, 0x1a	; 26
    654c:	d4 01       	movw	r26, r8
    654e:	1f 96       	adiw	r26, 0x0f	; 15
    6550:	bc 91       	ld	r27, X
    6552:	6b 96       	adiw	r28, 0x1b	; 27
    6554:	bf af       	std	Y+63, r27	; 0x3f
    6556:	6b 97       	sbiw	r28, 0x1b	; 27
    6558:	f4 01       	movw	r30, r8
    655a:	f0 89       	ldd	r31, Z+16	; 0x10
    655c:	6c 96       	adiw	r28, 0x1c	; 28
    655e:	ff af       	std	Y+63, r31	; 0x3f
    6560:	6c 97       	sbiw	r28, 0x1c	; 28
    6562:	d4 01       	movw	r26, r8
    6564:	51 96       	adiw	r26, 0x11	; 17
    6566:	3c 90       	ld	r3, X
    6568:	22 2d       	mov	r18, r2
    656a:	62 96       	adiw	r28, 0x12	; 18
    656c:	3f ad       	ldd	r19, Y+63	; 0x3f
    656e:	62 97       	sbiw	r28, 0x12	; 18
    6570:	68 96       	adiw	r28, 0x18	; 24
    6572:	4f ad       	ldd	r20, Y+63	; 0x3f
    6574:	68 97       	sbiw	r28, 0x18	; 24
    6576:	69 96       	adiw	r28, 0x19	; 25
    6578:	5f ad       	ldd	r21, Y+63	; 0x3f
    657a:	69 97       	sbiw	r28, 0x19	; 25
    657c:	6a 96       	adiw	r28, 0x1a	; 26
    657e:	6f ad       	ldd	r22, Y+63	; 0x3f
    6580:	6a 97       	sbiw	r28, 0x1a	; 26
    6582:	6b 96       	adiw	r28, 0x1b	; 27
    6584:	7f ad       	ldd	r23, Y+63	; 0x3f
    6586:	6b 97       	sbiw	r28, 0x1b	; 27
    6588:	8f 2f       	mov	r24, r31
    658a:	93 2d       	mov	r25, r3
    658c:	a0 e0       	ldi	r26, 0x00	; 0
    658e:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    6592:	09 f4       	brne	.+2      	; 0x6596 <f_open+0x372>
    6594:	cf c0       	rjmp	.+414    	; 0x6734 <f_open+0x510>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    6596:	f4 01       	movw	r30, r8
    6598:	20 a6       	std	Z+40, r2	; 0x28
    659a:	31 a7       	std	Z+41, r19	; 0x29
    659c:	42 a7       	std	Z+42, r20	; 0x2a
    659e:	53 a7       	std	Z+43, r21	; 0x2b
    65a0:	64 a7       	std	Z+44, r22	; 0x2c
    65a2:	75 a7       	std	Z+45, r23	; 0x2d
    65a4:	86 a7       	std	Z+46, r24	; 0x2e
    65a6:	37 a6       	std	Z+47, r3	; 0x2f
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    65a8:	27 96       	adiw	r28, 0x07	; 7
    65aa:	ee ad       	ldd	r30, Y+62	; 0x3e
    65ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    65ae:	27 97       	sbiw	r28, 0x07	; 7
    65b0:	81 85       	ldd	r24, Z+9	; 0x09
    65b2:	92 85       	ldd	r25, Z+10	; 0x0a
    65b4:	b0 e0       	ldi	r27, 0x00	; 0
    65b6:	a0 e0       	ldi	r26, 0x00	; 0
    65b8:	29 e0       	ldi	r18, 0x09	; 9
    65ba:	88 0f       	add	r24, r24
    65bc:	99 1f       	adc	r25, r25
    65be:	aa 1f       	adc	r26, r26
    65c0:	bb 1f       	adc	r27, r27
    65c2:	2a 95       	dec	r18
    65c4:	d1 f7       	brne	.-12     	; 0x65ba <f_open+0x396>
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    65c6:	f4 01       	movw	r30, r8
    65c8:	46 80       	ldd	r4, Z+6	; 0x06
    65ca:	57 80       	ldd	r5, Z+7	; 0x07
    65cc:	60 84       	ldd	r6, Z+8	; 0x08
    65ce:	71 84       	ldd	r7, Z+9	; 0x09
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    65d0:	8c 01       	movw	r16, r24
    65d2:	9d 01       	movw	r18, r26
    65d4:	40 e0       	ldi	r20, 0x00	; 0
    65d6:	50 e0       	ldi	r21, 0x00	; 0
    65d8:	ba 01       	movw	r22, r20
    65da:	2a 96       	adiw	r28, 0x0a	; 10
    65dc:	8f af       	std	Y+63, r24	; 0x3f
    65de:	2a 97       	sbiw	r28, 0x0a	; 10
    65e0:	2b 96       	adiw	r28, 0x0b	; 11
    65e2:	1f af       	std	Y+63, r17	; 0x3f
    65e4:	2b 97       	sbiw	r28, 0x0b	; 11
    65e6:	2c 96       	adiw	r28, 0x0c	; 12
    65e8:	af af       	std	Y+63, r26	; 0x3f
    65ea:	2c 97       	sbiw	r28, 0x0c	; 12
    65ec:	2d 96       	adiw	r28, 0x0d	; 13
    65ee:	3f af       	std	Y+63, r19	; 0x3f
    65f0:	2d 97       	sbiw	r28, 0x0d	; 13
    65f2:	2e 96       	adiw	r28, 0x0e	; 14
    65f4:	4f af       	std	Y+63, r20	; 0x3f
    65f6:	2e 97       	sbiw	r28, 0x0e	; 14
    65f8:	2f 96       	adiw	r28, 0x0f	; 15
    65fa:	5f af       	std	Y+63, r21	; 0x3f
    65fc:	2f 97       	sbiw	r28, 0x0f	; 15
    65fe:	60 96       	adiw	r28, 0x10	; 16
    6600:	6f af       	std	Y+63, r22	; 0x3f
    6602:	60 97       	sbiw	r28, 0x10	; 16
    6604:	61 96       	adiw	r28, 0x11	; 17
    6606:	7f af       	std	Y+63, r23	; 0x3f
    6608:	61 97       	sbiw	r28, 0x11	; 17
    660a:	2a 96       	adiw	r28, 0x0a	; 10
    660c:	2f ad       	ldd	r18, Y+63	; 0x3f
    660e:	2a 97       	sbiw	r28, 0x0a	; 10
    6610:	2b 96       	adiw	r28, 0x0b	; 11
    6612:	3f ad       	ldd	r19, Y+63	; 0x3f
    6614:	2b 97       	sbiw	r28, 0x0b	; 11
    6616:	2c 96       	adiw	r28, 0x0c	; 12
    6618:	4f ad       	ldd	r20, Y+63	; 0x3f
    661a:	2c 97       	sbiw	r28, 0x0c	; 12
    661c:	2d 96       	adiw	r28, 0x0d	; 13
    661e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6620:	2d 97       	sbiw	r28, 0x0d	; 13
    6622:	60 e0       	ldi	r22, 0x00	; 0
    6624:	70 e0       	ldi	r23, 0x00	; 0
    6626:	80 e0       	ldi	r24, 0x00	; 0
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	a2 2c       	mov	r10, r2
    662c:	62 96       	adiw	r28, 0x12	; 18
    662e:	bf ac       	ldd	r11, Y+63	; 0x3f
    6630:	62 97       	sbiw	r28, 0x12	; 18
    6632:	68 96       	adiw	r28, 0x18	; 24
    6634:	cf ac       	ldd	r12, Y+63	; 0x3f
    6636:	68 97       	sbiw	r28, 0x18	; 24
    6638:	69 96       	adiw	r28, 0x19	; 25
    663a:	df ac       	ldd	r13, Y+63	; 0x3f
    663c:	69 97       	sbiw	r28, 0x19	; 25
    663e:	6a 96       	adiw	r28, 0x1a	; 26
    6640:	ef ac       	ldd	r14, Y+63	; 0x3f
    6642:	6a 97       	sbiw	r28, 0x1a	; 26
    6644:	6b 96       	adiw	r28, 0x1b	; 27
    6646:	ff ac       	ldd	r15, Y+63	; 0x3f
    6648:	6b 97       	sbiw	r28, 0x1b	; 27
    664a:	6c 96       	adiw	r28, 0x1c	; 28
    664c:	0f ad       	ldd	r16, Y+63	; 0x3f
    664e:	6c 97       	sbiw	r28, 0x1c	; 28
    6650:	13 2d       	mov	r17, r3
    6652:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    6656:	08 f4       	brcc	.+2      	; 0x665a <f_open+0x436>
    6658:	0d c1       	rjmp	.+538    	; 0x6874 <f_open+0x650>
    665a:	30 e0       	ldi	r19, 0x00	; 0
    665c:	20 e0       	ldi	r18, 0x00	; 0
				fp->clust = clst;
    665e:	d4 01       	movw	r26, r8
    6660:	d0 96       	adiw	r26, 0x30	; 48
    6662:	4d 92       	st	X+, r4
    6664:	5d 92       	st	X+, r5
    6666:	6d 92       	st	X+, r6
    6668:	7c 92       	st	X, r7
    666a:	d3 97       	sbiw	r26, 0x33	; 51
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    666c:	21 15       	cp	r18, r1
    666e:	31 05       	cpc	r19, r1
    6670:	09 f0       	breq	.+2      	; 0x6674 <f_open+0x450>
    6672:	ad ce       	rjmp	.-678    	; 0x63ce <f_open+0x1aa>
    6674:	22 2d       	mov	r18, r2
    6676:	62 96       	adiw	r28, 0x12	; 18
    6678:	3f ad       	ldd	r19, Y+63	; 0x3f
    667a:	62 97       	sbiw	r28, 0x12	; 18
    667c:	31 70       	andi	r19, 0x01	; 1
    667e:	40 e0       	ldi	r20, 0x00	; 0
    6680:	50 e0       	ldi	r21, 0x00	; 0
    6682:	60 e0       	ldi	r22, 0x00	; 0
    6684:	70 e0       	ldi	r23, 0x00	; 0
    6686:	80 e0       	ldi	r24, 0x00	; 0
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	a0 e0       	ldi	r26, 0x00	; 0
    668c:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    6690:	09 f4       	brne	.+2      	; 0x6694 <f_open+0x470>
    6692:	50 c0       	rjmp	.+160    	; 0x6734 <f_open+0x510>
					sc = clst2sect(fs, clst);
    6694:	27 96       	adiw	r28, 0x07	; 7
    6696:	ee ad       	ldd	r30, Y+62	; 0x3e
    6698:	ff ad       	ldd	r31, Y+63	; 0x3f
    669a:	27 97       	sbiw	r28, 0x07	; 7
    669c:	2b 96       	adiw	r28, 0x0b	; 11
    669e:	ff af       	std	Y+63, r31	; 0x3f
    66a0:	ee af       	std	Y+62, r30	; 0x3e
    66a2:	2b 97       	sbiw	r28, 0x0b	; 11
    66a4:	b3 01       	movw	r22, r6
    66a6:	a2 01       	movw	r20, r4
    66a8:	cf 01       	movw	r24, r30
    66aa:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    66ae:	2b 01       	movw	r4, r22
    66b0:	3c 01       	movw	r6, r24
						res = FR_INT_ERR;
    66b2:	22 e0       	ldi	r18, 0x02	; 2
    66b4:	30 e0       	ldi	r19, 0x00	; 0
					if (sc == 0) {
    66b6:	41 14       	cp	r4, r1
    66b8:	51 04       	cpc	r5, r1
    66ba:	61 04       	cpc	r6, r1
    66bc:	71 04       	cpc	r7, r1
    66be:	09 f4       	brne	.+2      	; 0x66c2 <f_open+0x49e>
    66c0:	86 ce       	rjmp	.-756    	; 0x63ce <f_open+0x1aa>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    66c2:	22 2d       	mov	r18, r2
    66c4:	62 96       	adiw	r28, 0x12	; 18
    66c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    66c8:	62 97       	sbiw	r28, 0x12	; 18
    66ca:	68 96       	adiw	r28, 0x18	; 24
    66cc:	4f ad       	ldd	r20, Y+63	; 0x3f
    66ce:	68 97       	sbiw	r28, 0x18	; 24
    66d0:	69 96       	adiw	r28, 0x19	; 25
    66d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    66d4:	69 97       	sbiw	r28, 0x19	; 25
    66d6:	6a 96       	adiw	r28, 0x1a	; 26
    66d8:	6f ad       	ldd	r22, Y+63	; 0x3f
    66da:	6a 97       	sbiw	r28, 0x1a	; 26
    66dc:	6b 96       	adiw	r28, 0x1b	; 27
    66de:	7f ad       	ldd	r23, Y+63	; 0x3f
    66e0:	6b 97       	sbiw	r28, 0x1b	; 27
    66e2:	6c 96       	adiw	r28, 0x1c	; 28
    66e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    66e6:	6c 97       	sbiw	r28, 0x1c	; 28
    66e8:	93 2d       	mov	r25, r3
    66ea:	09 e0       	ldi	r16, 0x09	; 9
    66ec:	0e 94 6d 5a 	call	0xb4da	; 0xb4da <__lshrdi3>
    66f0:	59 01       	movw	r10, r18
    66f2:	6a 01       	movw	r12, r20
    66f4:	7b 01       	movw	r14, r22
    66f6:	a3 01       	movw	r20, r6
    66f8:	92 01       	movw	r18, r4
    66fa:	2a 0d       	add	r18, r10
    66fc:	3b 1d       	adc	r19, r11
    66fe:	4c 1d       	adc	r20, r12
    6700:	5d 1d       	adc	r21, r13
    6702:	d4 01       	movw	r26, r8
    6704:	d4 96       	adiw	r26, 0x34	; 52
    6706:	2d 93       	st	X+, r18
    6708:	3d 93       	st	X+, r19
    670a:	4d 93       	st	X+, r20
    670c:	5c 93       	st	X, r21
    670e:	d7 97       	sbiw	r26, 0x37	; 55
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    6710:	01 e0       	ldi	r16, 0x01	; 1
    6712:	10 e0       	ldi	r17, 0x00	; 0
    6714:	6e 96       	adiw	r28, 0x1e	; 30
    6716:	6e ad       	ldd	r22, Y+62	; 0x3e
    6718:	7f ad       	ldd	r23, Y+63	; 0x3f
    671a:	6e 97       	sbiw	r28, 0x1e	; 30
    671c:	2b 96       	adiw	r28, 0x0b	; 11
    671e:	ee ad       	ldd	r30, Y+62	; 0x3e
    6720:	ff ad       	ldd	r31, Y+63	; 0x3f
    6722:	2b 97       	sbiw	r28, 0x0b	; 11
    6724:	81 81       	ldd	r24, Z+1	; 0x01
    6726:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <disk_read>
    672a:	21 e0       	ldi	r18, 0x01	; 1
    672c:	30 e0       	ldi	r19, 0x00	; 0
    672e:	89 2b       	or	r24, r25
    6730:	09 f0       	breq	.+2      	; 0x6734 <f_open+0x510>
    6732:	4d ce       	rjmp	.-870    	; 0x63ce <f_open+0x1aa>

	LEAVE_FF(fs, res);
}
    6734:	67 96       	adiw	r28, 0x17	; 23
    6736:	8e ad       	ldd	r24, Y+62	; 0x3e
    6738:	9f ad       	ldd	r25, Y+63	; 0x3f
    673a:	67 97       	sbiw	r28, 0x17	; 23
    673c:	c3 5a       	subi	r28, 0xA3	; 163
    673e:	df 4f       	sbci	r29, 0xFF	; 255
    6740:	e2 e1       	ldi	r30, 0x12	; 18
    6742:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    6746:	0b a9       	ldd	r16, Y+51	; 0x33
    6748:	1c a9       	ldd	r17, Y+52	; 0x34
    674a:	b8 01       	movw	r22, r16
    674c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    6750:	2b 01       	movw	r4, r22
    6752:	3c 01       	movw	r6, r24
	*ptr++ = (BYTE)val; val >>= 8;
    6754:	d8 01       	movw	r26, r16
    6756:	1e 96       	adiw	r26, 0x0e	; 14
    6758:	1c 92       	st	X, r1
    675a:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val; val >>= 8;
    675c:	1f 96       	adiw	r26, 0x0f	; 15
    675e:	1c 92       	st	X, r1
    6760:	1f 97       	sbiw	r26, 0x0f	; 15
	*ptr++ = (BYTE)val; val >>= 8;
    6762:	81 e2       	ldi	r24, 0x21	; 33
    6764:	50 96       	adiw	r26, 0x10	; 16
    6766:	8c 93       	st	X, r24
    6768:	50 97       	sbiw	r26, 0x10	; 16
	*ptr++ = (BYTE)val;
    676a:	8c e4       	ldi	r24, 0x4C	; 76
    676c:	51 96       	adiw	r26, 0x11	; 17
    676e:	8c 93       	st	X, r24
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    6770:	eb a9       	ldd	r30, Y+51	; 0x33
    6772:	fc a9       	ldd	r31, Y+52	; 0x34
    6774:	80 e2       	ldi	r24, 0x20	; 32
    6776:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    6778:	eb a9       	ldd	r30, Y+51	; 0x33
    677a:	fc a9       	ldd	r31, Y+52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
    677c:	12 8e       	std	Z+26, r1	; 0x1a
	*ptr++ = (BYTE)val;
    677e:	13 8e       	std	Z+27, r1	; 0x1b
	if (fs->fs_type == FS_FAT32) {
    6780:	d1 01       	movw	r26, r2
    6782:	8c 91       	ld	r24, X
    6784:	83 30       	cpi	r24, 0x03	; 3
    6786:	11 f4       	brne	.+4      	; 0x678c <f_open+0x568>
	*ptr++ = (BYTE)val; val >>= 8;
    6788:	14 8a       	std	Z+20, r1	; 0x14
	*ptr++ = (BYTE)val;
    678a:	15 8a       	std	Z+21, r1	; 0x15
					st_dword(dj.dir + DIR_FileSize, 0);
    678c:	eb a9       	ldd	r30, Y+51	; 0x33
    678e:	fc a9       	ldd	r31, Y+52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
    6790:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    6792:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    6794:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    6796:	17 8e       	std	Z+31, r1	; 0x1f
					fs->wflag = 1;
    6798:	81 e0       	ldi	r24, 0x01	; 1
    679a:	f1 01       	movw	r30, r2
    679c:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    679e:	41 14       	cp	r4, r1
    67a0:	51 04       	cpc	r5, r1
    67a2:	61 04       	cpc	r6, r1
    67a4:	71 04       	cpc	r7, r1
    67a6:	09 f4       	brne	.+2      	; 0x67aa <f_open+0x586>
    67a8:	22 ce       	rjmp	.-956    	; 0x63ee <f_open+0x1ca>
						sc = fs->winsect;
    67aa:	ed 5b       	subi	r30, 0xBD	; 189
    67ac:	ff 4f       	sbci	r31, 0xFF	; 255
    67ae:	a0 80       	ld	r10, Z
    67b0:	b1 80       	ldd	r11, Z+1	; 0x01
    67b2:	c2 80       	ldd	r12, Z+2	; 0x02
    67b4:	d3 80       	ldd	r13, Z+3	; 0x03
						res = remove_chain(&dj.obj, cl, 0);
    67b6:	00 e0       	ldi	r16, 0x00	; 0
    67b8:	10 e0       	ldi	r17, 0x00	; 0
    67ba:	98 01       	movw	r18, r16
    67bc:	b3 01       	movw	r22, r6
    67be:	a2 01       	movw	r20, r4
    67c0:	8f 2d       	mov	r24, r15
    67c2:	9e 2d       	mov	r25, r14
    67c4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <remove_chain>
    67c8:	9c 01       	movw	r18, r24
						if (res == FR_OK) {
    67ca:	89 2b       	or	r24, r25
    67cc:	09 f0       	breq	.+2      	; 0x67d0 <f_open+0x5ac>
    67ce:	ff cd       	rjmp	.-1026   	; 0x63ce <f_open+0x1aa>
							res = move_window(fs, sc);
    67d0:	b6 01       	movw	r22, r12
    67d2:	a5 01       	movw	r20, r10
    67d4:	27 96       	adiw	r28, 0x07	; 7
    67d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    67d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    67da:	27 97       	sbiw	r28, 0x07	; 7
    67dc:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    67e0:	9c 01       	movw	r18, r24
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    67e2:	27 96       	adiw	r28, 0x07	; 7
    67e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    67e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    67e8:	27 97       	sbiw	r28, 0x07	; 7
    67ea:	01 e0       	ldi	r16, 0x01	; 1
    67ec:	40 1a       	sub	r4, r16
    67ee:	51 08       	sbc	r5, r1
    67f0:	61 08       	sbc	r6, r1
    67f2:	71 08       	sbc	r7, r1
    67f4:	47 86       	std	Z+15, r4	; 0x0f
    67f6:	50 8a       	std	Z+16, r5	; 0x10
    67f8:	61 8a       	std	Z+17, r6	; 0x11
    67fa:	72 8a       	std	Z+18, r7	; 0x12
    67fc:	e5 cd       	rjmp	.-1078   	; 0x63c8 <f_open+0x1a4>
			if (res == FR_OK) {					/* Is the object exsiting? */
    67fe:	21 15       	cp	r18, r1
    6800:	31 05       	cpc	r19, r1
    6802:	09 f0       	breq	.+2      	; 0x6806 <f_open+0x5e2>
    6804:	e4 cd       	rjmp	.-1080   	; 0x63ce <f_open+0x1aa>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    6806:	8d 81       	ldd	r24, Y+5	; 0x05
    6808:	84 fd       	sbrc	r24, 4
    680a:	90 c0       	rjmp	.+288    	; 0x692c <f_open+0x708>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    680c:	11 ff       	sbrs	r17, 1
    680e:	ef cd       	rjmp	.-1058   	; 0x63ee <f_open+0x1ca>
    6810:	80 ff       	sbrs	r24, 0
    6812:	ed cd       	rjmp	.-1062   	; 0x63ee <f_open+0x1ca>
					res = FR_DENIED;
    6814:	27 e0       	ldi	r18, 0x07	; 7
    6816:	30 e0       	ldi	r19, 0x00	; 0
    6818:	da cd       	rjmp	.-1100   	; 0x63ce <f_open+0x1aa>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    681a:	b8 01       	movw	r22, r16
    681c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    6820:	f4 01       	movw	r30, r8
    6822:	66 83       	std	Z+6, r22	; 0x06
    6824:	77 83       	std	Z+7, r23	; 0x07
    6826:	80 87       	std	Z+8, r24	; 0x08
    6828:	91 87       	std	Z+9, r25	; 0x09
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    682a:	c8 01       	movw	r24, r16
    682c:	4c 96       	adiw	r24, 0x1c	; 28
    682e:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    6832:	65 96       	adiw	r28, 0x15	; 21
    6834:	6c af       	std	Y+60, r22	; 0x3c
    6836:	7d af       	std	Y+61, r23	; 0x3d
    6838:	8e af       	std	Y+62, r24	; 0x3e
    683a:	9f af       	std	Y+63, r25	; 0x3f
    683c:	65 97       	sbiw	r28, 0x15	; 21
    683e:	8b 01       	movw	r16, r22
    6840:	9c 01       	movw	r18, r24
    6842:	d4 01       	movw	r26, r8
    6844:	1a 96       	adiw	r26, 0x0a	; 10
    6846:	6c 93       	st	X, r22
    6848:	1a 97       	sbiw	r26, 0x0a	; 10
    684a:	1b 96       	adiw	r26, 0x0b	; 11
    684c:	1c 93       	st	X, r17
    684e:	1b 97       	sbiw	r26, 0x0b	; 11
    6850:	1c 96       	adiw	r26, 0x0c	; 12
    6852:	8c 93       	st	X, r24
    6854:	1c 97       	sbiw	r26, 0x0c	; 12
    6856:	1d 96       	adiw	r26, 0x0d	; 13
    6858:	3c 93       	st	X, r19
    685a:	1d 97       	sbiw	r26, 0x0d	; 13
    685c:	1e 96       	adiw	r26, 0x0e	; 14
    685e:	1c 92       	st	X, r1
    6860:	1e 97       	sbiw	r26, 0x0e	; 14
    6862:	1f 96       	adiw	r26, 0x0f	; 15
    6864:	1c 92       	st	X, r1
    6866:	1f 97       	sbiw	r26, 0x0f	; 15
    6868:	50 96       	adiw	r26, 0x10	; 16
    686a:	1c 92       	st	X, r1
    686c:	50 97       	sbiw	r26, 0x10	; 16
    686e:	51 96       	adiw	r26, 0x11	; 17
    6870:	1c 92       	st	X, r1
    6872:	0d ce       	rjmp	.-998    	; 0x648e <f_open+0x26a>
					clst = get_fat(&fp->obj, clst);
    6874:	b3 01       	movw	r22, r6
    6876:	a2 01       	movw	r20, r4
    6878:	c4 01       	movw	r24, r8
    687a:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    687e:	2b 01       	movw	r4, r22
    6880:	3c 01       	movw	r6, r24
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    6882:	22 2d       	mov	r18, r2
    6884:	62 96       	adiw	r28, 0x12	; 18
    6886:	3f ad       	ldd	r19, Y+63	; 0x3f
    6888:	62 97       	sbiw	r28, 0x12	; 18
    688a:	68 96       	adiw	r28, 0x18	; 24
    688c:	4f ad       	ldd	r20, Y+63	; 0x3f
    688e:	68 97       	sbiw	r28, 0x18	; 24
    6890:	69 96       	adiw	r28, 0x19	; 25
    6892:	5f ad       	ldd	r21, Y+63	; 0x3f
    6894:	69 97       	sbiw	r28, 0x19	; 25
    6896:	6a 96       	adiw	r28, 0x1a	; 26
    6898:	6f ad       	ldd	r22, Y+63	; 0x3f
    689a:	6a 97       	sbiw	r28, 0x1a	; 26
    689c:	6b 96       	adiw	r28, 0x1b	; 27
    689e:	7f ad       	ldd	r23, Y+63	; 0x3f
    68a0:	6b 97       	sbiw	r28, 0x1b	; 27
    68a2:	6c 96       	adiw	r28, 0x1c	; 28
    68a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    68a6:	6c 97       	sbiw	r28, 0x1c	; 28
    68a8:	93 2d       	mov	r25, r3
    68aa:	2a 96       	adiw	r28, 0x0a	; 10
    68ac:	af ac       	ldd	r10, Y+63	; 0x3f
    68ae:	2a 97       	sbiw	r28, 0x0a	; 10
    68b0:	2b 96       	adiw	r28, 0x0b	; 11
    68b2:	bf ac       	ldd	r11, Y+63	; 0x3f
    68b4:	2b 97       	sbiw	r28, 0x0b	; 11
    68b6:	2c 96       	adiw	r28, 0x0c	; 12
    68b8:	cf ac       	ldd	r12, Y+63	; 0x3f
    68ba:	2c 97       	sbiw	r28, 0x0c	; 12
    68bc:	2d 96       	adiw	r28, 0x0d	; 13
    68be:	df ac       	ldd	r13, Y+63	; 0x3f
    68c0:	2d 97       	sbiw	r28, 0x0d	; 13
    68c2:	e1 2c       	mov	r14, r1
    68c4:	f1 2c       	mov	r15, r1
    68c6:	00 e0       	ldi	r16, 0x00	; 0
    68c8:	10 e0       	ldi	r17, 0x00	; 0
    68ca:	0e 94 9d 5a 	call	0xb53a	; 0xb53a <__subdi3>
    68ce:	22 2e       	mov	r2, r18
    68d0:	62 96       	adiw	r28, 0x12	; 18
    68d2:	3f af       	std	Y+63, r19	; 0x3f
    68d4:	62 97       	sbiw	r28, 0x12	; 18
    68d6:	68 96       	adiw	r28, 0x18	; 24
    68d8:	4f af       	std	Y+63, r20	; 0x3f
    68da:	68 97       	sbiw	r28, 0x18	; 24
    68dc:	69 96       	adiw	r28, 0x19	; 25
    68de:	5f af       	std	Y+63, r21	; 0x3f
    68e0:	69 97       	sbiw	r28, 0x19	; 25
    68e2:	6a 96       	adiw	r28, 0x1a	; 26
    68e4:	6f af       	std	Y+63, r22	; 0x3f
    68e6:	6a 97       	sbiw	r28, 0x1a	; 26
    68e8:	6b 96       	adiw	r28, 0x1b	; 27
    68ea:	7f af       	std	Y+63, r23	; 0x3f
    68ec:	6b 97       	sbiw	r28, 0x1b	; 27
    68ee:	6c 96       	adiw	r28, 0x1c	; 28
    68f0:	8f af       	std	Y+63, r24	; 0x3f
    68f2:	6c 97       	sbiw	r28, 0x1c	; 28
    68f4:	39 2e       	mov	r3, r25
					if (clst <= 1) res = FR_INT_ERR;
    68f6:	12 e0       	ldi	r17, 0x02	; 2
    68f8:	41 16       	cp	r4, r17
    68fa:	51 04       	cpc	r5, r1
    68fc:	61 04       	cpc	r6, r1
    68fe:	71 04       	cpc	r7, r1
    6900:	50 f0       	brcs	.+20     	; 0x6916 <f_open+0x6f2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    6902:	2f ef       	ldi	r18, 0xFF	; 255
    6904:	42 16       	cp	r4, r18
    6906:	52 06       	cpc	r5, r18
    6908:	62 06       	cpc	r6, r18
    690a:	72 06       	cpc	r7, r18
    690c:	09 f0       	breq	.+2      	; 0x6910 <f_open+0x6ec>
    690e:	7d ce       	rjmp	.-774    	; 0x660a <f_open+0x3e6>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    6910:	21 e0       	ldi	r18, 0x01	; 1
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	a4 ce       	rjmp	.-696    	; 0x665e <f_open+0x43a>
					if (clst <= 1) res = FR_INT_ERR;
    6916:	22 e0       	ldi	r18, 0x02	; 2
    6918:	30 e0       	ldi	r19, 0x00	; 0
    691a:	a1 ce       	rjmp	.-702    	; 0x665e <f_open+0x43a>
    691c:	67 96       	adiw	r28, 0x17	; 23
    691e:	2e ad       	ldd	r18, Y+62	; 0x3e
    6920:	3f ad       	ldd	r19, Y+63	; 0x3f
    6922:	67 97       	sbiw	r28, 0x17	; 23
    6924:	54 cd       	rjmp	.-1368   	; 0x63ce <f_open+0x1aa>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    6926:	28 e0       	ldi	r18, 0x08	; 8
    6928:	30 e0       	ldi	r19, 0x00	; 0
    692a:	51 cd       	rjmp	.-1374   	; 0x63ce <f_open+0x1aa>
					res = FR_NO_FILE;
    692c:	24 e0       	ldi	r18, 0x04	; 4
    692e:	30 e0       	ldi	r19, 0x00	; 0
    6930:	4e cd       	rjmp	.-1380   	; 0x63ce <f_open+0x1aa>
	if (!fp) return FR_INVALID_OBJECT;
    6932:	e9 e0       	ldi	r30, 0x09	; 9
    6934:	f0 e0       	ldi	r31, 0x00	; 0
    6936:	67 96       	adiw	r28, 0x17	; 23
    6938:	ff af       	std	Y+63, r31	; 0x3f
    693a:	ee af       	std	Y+62, r30	; 0x3e
    693c:	67 97       	sbiw	r28, 0x17	; 23
    693e:	fa ce       	rjmp	.-524    	; 0x6734 <f_open+0x510>

00006940 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    6940:	a0 e1       	ldi	r26, 0x10	; 16
    6942:	b0 e0       	ldi	r27, 0x00	; 0
    6944:	e6 ea       	ldi	r30, 0xA6	; 166
    6946:	f4 e3       	ldi	r31, 0x34	; 52
    6948:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    694c:	4c 01       	movw	r8, r24
    694e:	6b 87       	std	Y+11, r22	; 0x0b
    6950:	7c 87       	std	Y+12, r23	; 0x0c
    6952:	2a 01       	movw	r4, r20
    6954:	2d 87       	std	Y+13, r18	; 0x0d
    6956:	3e 87       	std	Y+14, r19	; 0x0e
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    6958:	ad 85       	ldd	r26, Y+13	; 0x0d
    695a:	be 85       	ldd	r27, Y+14	; 0x0e
    695c:	1d 92       	st	X+, r1
    695e:	1c 92       	st	X, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    6960:	be 01       	movw	r22, r28
    6962:	6f 5f       	subi	r22, 0xFF	; 255
    6964:	7f 4f       	sbci	r23, 0xFF	; 255
    6966:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
    696a:	3c 01       	movw	r6, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    696c:	89 2b       	or	r24, r25
    696e:	09 f0       	breq	.+2      	; 0x6972 <f_read+0x32>
    6970:	9f c0       	rjmp	.+318    	; 0x6ab0 <f_read+0x170>
    6972:	f4 01       	movw	r30, r8
    6974:	87 a1       	ldd	r24, Z+39	; 0x27
    6976:	68 2e       	mov	r6, r24
    6978:	71 2c       	mov	r7, r1
    697a:	81 11       	cpse	r24, r1
    697c:	99 c0       	rjmp	.+306    	; 0x6ab0 <f_read+0x170>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    697e:	86 a1       	ldd	r24, Z+38	; 0x26
    6980:	80 ff       	sbrs	r24, 0
    6982:	b4 c1       	rjmp	.+872    	; 0x6cec <f_read+0x3ac>
	remain = fp->obj.objsize - fp->fptr;
    6984:	22 85       	ldd	r18, Z+10	; 0x0a
    6986:	33 85       	ldd	r19, Z+11	; 0x0b
    6988:	44 85       	ldd	r20, Z+12	; 0x0c
    698a:	55 85       	ldd	r21, Z+13	; 0x0d
    698c:	66 85       	ldd	r22, Z+14	; 0x0e
    698e:	77 85       	ldd	r23, Z+15	; 0x0f
    6990:	80 89       	ldd	r24, Z+16	; 0x10
    6992:	91 89       	ldd	r25, Z+17	; 0x11
    6994:	a0 a4       	ldd	r10, Z+40	; 0x28
    6996:	b1 a4       	ldd	r11, Z+41	; 0x29
    6998:	c2 a4       	ldd	r12, Z+42	; 0x2a
    699a:	d3 a4       	ldd	r13, Z+43	; 0x2b
    699c:	e4 a4       	ldd	r14, Z+44	; 0x2c
    699e:	f5 a4       	ldd	r15, Z+45	; 0x2d
    69a0:	06 a5       	ldd	r16, Z+46	; 0x2e
    69a2:	17 a5       	ldd	r17, Z+47	; 0x2f
    69a4:	0e 94 9d 5a 	call	0xb53a	; 0xb53a <__subdi3>
    69a8:	f2 2f       	mov	r31, r18
    69aa:	e3 2f       	mov	r30, r19
    69ac:	6a 01       	movw	r12, r20
    69ae:	7b 01       	movw	r14, r22
    69b0:	8c 01       	movw	r16, r24
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    69b2:	92 01       	movw	r18, r4
    69b4:	40 e0       	ldi	r20, 0x00	; 0
    69b6:	50 e0       	ldi	r21, 0x00	; 0
    69b8:	60 e0       	ldi	r22, 0x00	; 0
    69ba:	70 e0       	ldi	r23, 0x00	; 0
    69bc:	80 e0       	ldi	r24, 0x00	; 0
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	af 2e       	mov	r10, r31
    69c2:	be 2e       	mov	r11, r30
    69c4:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    69c8:	19 f0       	breq	.+6      	; 0x69d0 <f_read+0x90>
    69ca:	10 f0       	brcs	.+4      	; 0x69d0 <f_read+0x90>
    69cc:	4f 2e       	mov	r4, r31
    69ce:	5e 2e       	mov	r5, r30
{
    69d0:	32 01       	movw	r6, r4
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    69d2:	94 01       	movw	r18, r8
    69d4:	22 5c       	subi	r18, 0xC2	; 194
    69d6:	3f 4f       	sbci	r19, 0xFF	; 255
    69d8:	38 8b       	std	Y+16, r19	; 0x10
    69da:	2f 87       	std	Y+15, r18	; 0x0f
	for ( ;  btr;								/* Repeat until btr bytes read */
    69dc:	61 14       	cp	r6, r1
    69de:	71 04       	cpc	r7, r1
    69e0:	09 f4       	brne	.+2      	; 0x69e4 <f_read+0xa4>
    69e2:	66 c0       	rjmp	.+204    	; 0x6ab0 <f_read+0x170>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    69e4:	d4 01       	movw	r26, r8
    69e6:	98 96       	adiw	r26, 0x28	; 40
    69e8:	fc 91       	ld	r31, X
    69ea:	98 97       	sbiw	r26, 0x28	; 40
    69ec:	99 96       	adiw	r26, 0x29	; 41
    69ee:	ec 91       	ld	r30, X
    69f0:	99 97       	sbiw	r26, 0x29	; 41
    69f2:	9a 96       	adiw	r26, 0x2a	; 42
    69f4:	cc 90       	ld	r12, X
    69f6:	9a 97       	sbiw	r26, 0x2a	; 42
    69f8:	9b 96       	adiw	r26, 0x2b	; 43
    69fa:	dc 90       	ld	r13, X
    69fc:	9b 97       	sbiw	r26, 0x2b	; 43
    69fe:	9c 96       	adiw	r26, 0x2c	; 44
    6a00:	1c 91       	ld	r17, X
    6a02:	9c 97       	sbiw	r26, 0x2c	; 44
    6a04:	9d 96       	adiw	r26, 0x2d	; 45
    6a06:	5c 90       	ld	r5, X
    6a08:	9d 97       	sbiw	r26, 0x2d	; 45
    6a0a:	9e 96       	adiw	r26, 0x2e	; 46
    6a0c:	bc 90       	ld	r11, X
    6a0e:	9e 97       	sbiw	r26, 0x2e	; 46
    6a10:	9f 96       	adiw	r26, 0x2f	; 47
    6a12:	ac 90       	ld	r10, X
    6a14:	3e 2f       	mov	r19, r30
    6a16:	31 70       	andi	r19, 0x01	; 1
    6a18:	2f 2f       	mov	r18, r31
    6a1a:	40 e0       	ldi	r20, 0x00	; 0
    6a1c:	50 e0       	ldi	r21, 0x00	; 0
    6a1e:	60 e0       	ldi	r22, 0x00	; 0
    6a20:	70 e0       	ldi	r23, 0x00	; 0
    6a22:	80 e0       	ldi	r24, 0x00	; 0
    6a24:	90 e0       	ldi	r25, 0x00	; 0
    6a26:	a0 e0       	ldi	r26, 0x00	; 0
    6a28:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    6a2c:	09 f0       	breq	.+2      	; 0x6a30 <f_read+0xf0>
    6a2e:	46 c1       	rjmp	.+652    	; 0x6cbc <f_read+0x37c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    6a30:	89 81       	ldd	r24, Y+1	; 0x01
    6a32:	9a 81       	ldd	r25, Y+2	; 0x02
    6a34:	dc 01       	movw	r26, r24
    6a36:	19 96       	adiw	r26, 0x09	; 9
    6a38:	ed 90       	ld	r14, X+
    6a3a:	fc 90       	ld	r15, X
    6a3c:	b1 e0       	ldi	r27, 0x01	; 1
    6a3e:	eb 1a       	sub	r14, r27
    6a40:	f1 08       	sbc	r15, r1
    6a42:	3e 2f       	mov	r19, r30
    6a44:	a6 01       	movw	r20, r12
    6a46:	61 2f       	mov	r22, r17
    6a48:	75 2d       	mov	r23, r5
    6a4a:	8b 2d       	mov	r24, r11
    6a4c:	9a 2d       	mov	r25, r10
    6a4e:	09 e0       	ldi	r16, 0x09	; 9
    6a50:	0e 94 6d 5a 	call	0xb4da	; 0xb4da <__lshrdi3>
    6a54:	2b 83       	std	Y+3, r18	; 0x03
    6a56:	3c 83       	std	Y+4, r19	; 0x04
    6a58:	4d 83       	std	Y+5, r20	; 0x05
    6a5a:	5e 83       	std	Y+6, r21	; 0x06
    6a5c:	6f 83       	std	Y+7, r22	; 0x07
    6a5e:	78 87       	std	Y+8, r23	; 0x08
    6a60:	89 87       	std	Y+9, r24	; 0x09
    6a62:	9a 87       	std	Y+10, r25	; 0x0a
    6a64:	2b 81       	ldd	r18, Y+3	; 0x03
    6a66:	3c 81       	ldd	r19, Y+4	; 0x04
    6a68:	e2 22       	and	r14, r18
    6a6a:	f3 22       	and	r15, r19
			if (csect == 0) {					/* On the cluster boundary? */
    6a6c:	e1 14       	cp	r14, r1
    6a6e:	f1 04       	cpc	r15, r1
    6a70:	09 f0       	breq	.+2      	; 0x6a74 <f_read+0x134>
    6a72:	43 c0       	rjmp	.+134    	; 0x6afa <f_read+0x1ba>
				if (fp->fptr == 0) {			/* On the top of the file? */
    6a74:	2f 2f       	mov	r18, r31
    6a76:	3e 2f       	mov	r19, r30
    6a78:	a6 01       	movw	r20, r12
    6a7a:	61 2f       	mov	r22, r17
    6a7c:	75 2d       	mov	r23, r5
    6a7e:	8b 2d       	mov	r24, r11
    6a80:	9a 2d       	mov	r25, r10
    6a82:	a0 e0       	ldi	r26, 0x00	; 0
    6a84:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    6a88:	c1 f4       	brne	.+48     	; 0x6aba <f_read+0x17a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    6a8a:	d4 01       	movw	r26, r8
    6a8c:	16 96       	adiw	r26, 0x06	; 6
    6a8e:	4d 91       	ld	r20, X+
    6a90:	5d 91       	ld	r21, X+
    6a92:	6d 91       	ld	r22, X+
    6a94:	7c 91       	ld	r23, X
    6a96:	19 97       	sbiw	r26, 0x09	; 9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    6a98:	42 30       	cpi	r20, 0x02	; 2
    6a9a:	51 05       	cpc	r21, r1
    6a9c:	61 05       	cpc	r22, r1
    6a9e:	71 05       	cpc	r23, r1
    6aa0:	c0 f4       	brcc	.+48     	; 0x6ad2 <f_read+0x192>
    6aa2:	82 e0       	ldi	r24, 0x02	; 2
    6aa4:	d4 01       	movw	r26, r8
    6aa6:	97 96       	adiw	r26, 0x27	; 39
    6aa8:	8c 93       	st	X, r24
    6aaa:	52 e0       	ldi	r21, 0x02	; 2
    6aac:	65 2e       	mov	r6, r21
    6aae:	71 2c       	mov	r7, r1
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    6ab0:	c3 01       	movw	r24, r6
    6ab2:	60 96       	adiw	r28, 0x10	; 16
    6ab4:	e2 e1       	ldi	r30, 0x12	; 18
    6ab6:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    6aba:	f4 01       	movw	r30, r8
    6abc:	40 a9       	ldd	r20, Z+48	; 0x30
    6abe:	51 a9       	ldd	r21, Z+49	; 0x31
    6ac0:	62 a9       	ldd	r22, Z+50	; 0x32
    6ac2:	73 a9       	ldd	r23, Z+51	; 0x33
    6ac4:	c4 01       	movw	r24, r8
    6ac6:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    6aca:	46 2f       	mov	r20, r22
    6acc:	57 2f       	mov	r21, r23
    6ace:	bc 01       	movw	r22, r24
    6ad0:	e3 cf       	rjmp	.-58     	; 0x6a98 <f_read+0x158>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    6ad2:	4f 3f       	cpi	r20, 0xFF	; 255
    6ad4:	bf ef       	ldi	r27, 0xFF	; 255
    6ad6:	5b 07       	cpc	r21, r27
    6ad8:	6b 07       	cpc	r22, r27
    6ada:	7b 07       	cpc	r23, r27
    6adc:	39 f4       	brne	.+14     	; 0x6aec <f_read+0x1ac>
    6ade:	81 e0       	ldi	r24, 0x01	; 1
    6ae0:	f4 01       	movw	r30, r8
    6ae2:	87 a3       	std	Z+39, r24	; 0x27
    6ae4:	66 24       	eor	r6, r6
    6ae6:	63 94       	inc	r6
    6ae8:	71 2c       	mov	r7, r1
    6aea:	e2 cf       	rjmp	.-60     	; 0x6ab0 <f_read+0x170>
				fp->clust = clst;				/* Update current cluster */
    6aec:	d4 01       	movw	r26, r8
    6aee:	d0 96       	adiw	r26, 0x30	; 48
    6af0:	4d 93       	st	X+, r20
    6af2:	5d 93       	st	X+, r21
    6af4:	6d 93       	st	X+, r22
    6af6:	7c 93       	st	X, r23
    6af8:	d3 97       	sbiw	r26, 0x33	; 51
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    6afa:	a9 80       	ldd	r10, Y+1	; 0x01
    6afc:	ba 80       	ldd	r11, Y+2	; 0x02
    6afe:	f4 01       	movw	r30, r8
    6b00:	40 a9       	ldd	r20, Z+48	; 0x30
    6b02:	51 a9       	ldd	r21, Z+49	; 0x31
    6b04:	62 a9       	ldd	r22, Z+50	; 0x32
    6b06:	73 a9       	ldd	r23, Z+51	; 0x33
    6b08:	c5 01       	movw	r24, r10
    6b0a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    6b0e:	8b 01       	movw	r16, r22
    6b10:	9c 01       	movw	r18, r24
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    6b12:	01 15       	cp	r16, r1
    6b14:	11 05       	cpc	r17, r1
    6b16:	21 05       	cpc	r18, r1
    6b18:	31 05       	cpc	r19, r1
    6b1a:	19 f2       	breq	.-122    	; 0x6aa2 <f_read+0x162>
			sect += csect;
    6b1c:	1b 01       	movw	r2, r22
    6b1e:	2c 01       	movw	r4, r24
    6b20:	2e 0c       	add	r2, r14
    6b22:	3f 1c       	adc	r3, r15
    6b24:	41 1c       	adc	r4, r1
    6b26:	51 1c       	adc	r5, r1
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    6b28:	61 14       	cp	r6, r1
    6b2a:	f2 e0       	ldi	r31, 0x02	; 2
    6b2c:	7f 06       	cpc	r7, r31
    6b2e:	08 f4       	brcc	.+2      	; 0x6b32 <f_read+0x1f2>
    6b30:	90 c0       	rjmp	.+288    	; 0x6c52 <f_read+0x312>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    6b32:	63 01       	movw	r12, r6
    6b34:	cd 2c       	mov	r12, r13
    6b36:	dd 24       	eor	r13, r13
    6b38:	c6 94       	lsr	r12
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    6b3a:	d5 01       	movw	r26, r10
    6b3c:	19 96       	adiw	r26, 0x09	; 9
    6b3e:	8d 91       	ld	r24, X+
    6b40:	9c 91       	ld	r25, X
    6b42:	97 01       	movw	r18, r14
    6b44:	2c 0d       	add	r18, r12
    6b46:	3d 1d       	adc	r19, r13
    6b48:	82 17       	cp	r24, r18
    6b4a:	93 07       	cpc	r25, r19
    6b4c:	18 f4       	brcc	.+6      	; 0x6b54 <f_read+0x214>
					cc = fs->csize - csect;
    6b4e:	6c 01       	movw	r12, r24
    6b50:	ce 18       	sub	r12, r14
    6b52:	df 08       	sbc	r13, r15
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    6b54:	86 01       	movw	r16, r12
    6b56:	a2 01       	movw	r20, r4
    6b58:	91 01       	movw	r18, r2
    6b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b5e:	f5 01       	movw	r30, r10
    6b60:	81 81       	ldd	r24, Z+1	; 0x01
    6b62:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <disk_read>
    6b66:	89 2b       	or	r24, r25
    6b68:	09 f0       	breq	.+2      	; 0x6b6c <f_read+0x22c>
    6b6a:	b9 cf       	rjmp	.-142    	; 0x6ade <f_read+0x19e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    6b6c:	d4 01       	movw	r26, r8
    6b6e:	96 96       	adiw	r26, 0x26	; 38
    6b70:	8c 91       	ld	r24, X
    6b72:	96 97       	sbiw	r26, 0x26	; 38
    6b74:	87 ff       	sbrs	r24, 7
    6b76:	1f c0       	rjmp	.+62     	; 0x6bb6 <f_read+0x276>
    6b78:	d4 96       	adiw	r26, 0x34	; 52
    6b7a:	8d 91       	ld	r24, X+
    6b7c:	9d 91       	ld	r25, X+
    6b7e:	0d 90       	ld	r0, X+
    6b80:	bc 91       	ld	r27, X
    6b82:	a0 2d       	mov	r26, r0
    6b84:	82 19       	sub	r24, r2
    6b86:	93 09       	sbc	r25, r3
    6b88:	a4 09       	sbc	r26, r4
    6b8a:	b5 09       	sbc	r27, r5
    6b8c:	a6 01       	movw	r20, r12
    6b8e:	70 e0       	ldi	r23, 0x00	; 0
    6b90:	60 e0       	ldi	r22, 0x00	; 0
    6b92:	84 17       	cp	r24, r20
    6b94:	95 07       	cpc	r25, r21
    6b96:	a6 07       	cpc	r26, r22
    6b98:	b7 07       	cpc	r27, r23
    6b9a:	68 f4       	brcc	.+26     	; 0x6bb6 <f_read+0x276>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
    6b9c:	98 2f       	mov	r25, r24
    6b9e:	88 27       	eor	r24, r24
    6ba0:	99 0f       	add	r25, r25
    6ba2:	40 e0       	ldi	r20, 0x00	; 0
    6ba4:	52 e0       	ldi	r21, 0x02	; 2
    6ba6:	6f 85       	ldd	r22, Y+15	; 0x0f
    6ba8:	78 89       	ldd	r23, Y+16	; 0x10
    6baa:	eb 85       	ldd	r30, Y+11	; 0x0b
    6bac:	fc 85       	ldd	r31, Y+12	; 0x0c
    6bae:	8e 0f       	add	r24, r30
    6bb0:	9f 1f       	adc	r25, r31
    6bb2:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    6bb6:	dc 2c       	mov	r13, r12
    6bb8:	cc 24       	eor	r12, r12
    6bba:	dd 0c       	add	r13, r13
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
    6bbc:	6c 18       	sub	r6, r12
    6bbe:	7d 08       	sbc	r7, r13
    6bc0:	ad 85       	ldd	r26, Y+13	; 0x0d
    6bc2:	be 85       	ldd	r27, Y+14	; 0x0e
    6bc4:	8d 91       	ld	r24, X+
    6bc6:	9c 91       	ld	r25, X
    6bc8:	11 97       	sbiw	r26, 0x01	; 1
    6bca:	8c 0d       	add	r24, r12
    6bcc:	9d 1d       	adc	r25, r13
    6bce:	8d 93       	st	X+, r24
    6bd0:	9c 93       	st	X, r25
    6bd2:	eb 85       	ldd	r30, Y+11	; 0x0b
    6bd4:	fc 85       	ldd	r31, Y+12	; 0x0c
    6bd6:	ec 0d       	add	r30, r12
    6bd8:	fd 1d       	adc	r31, r13
    6bda:	fc 87       	std	Y+12, r31	; 0x0c
    6bdc:	eb 87       	std	Y+11, r30	; 0x0b
    6bde:	96 01       	movw	r18, r12
    6be0:	40 e0       	ldi	r20, 0x00	; 0
    6be2:	50 e0       	ldi	r21, 0x00	; 0
    6be4:	60 e0       	ldi	r22, 0x00	; 0
    6be6:	70 e0       	ldi	r23, 0x00	; 0
    6be8:	80 e0       	ldi	r24, 0x00	; 0
    6bea:	90 e0       	ldi	r25, 0x00	; 0
    6bec:	d4 01       	movw	r26, r8
    6bee:	98 96       	adiw	r26, 0x28	; 40
    6bf0:	ac 90       	ld	r10, X
    6bf2:	98 97       	sbiw	r26, 0x28	; 40
    6bf4:	99 96       	adiw	r26, 0x29	; 41
    6bf6:	bc 90       	ld	r11, X
    6bf8:	99 97       	sbiw	r26, 0x29	; 41
    6bfa:	9a 96       	adiw	r26, 0x2a	; 42
    6bfc:	cc 90       	ld	r12, X
    6bfe:	9a 97       	sbiw	r26, 0x2a	; 42
    6c00:	9b 96       	adiw	r26, 0x2b	; 43
    6c02:	dc 90       	ld	r13, X
    6c04:	9b 97       	sbiw	r26, 0x2b	; 43
    6c06:	9c 96       	adiw	r26, 0x2c	; 44
    6c08:	ec 90       	ld	r14, X
    6c0a:	9c 97       	sbiw	r26, 0x2c	; 44
    6c0c:	9d 96       	adiw	r26, 0x2d	; 45
    6c0e:	fc 90       	ld	r15, X
    6c10:	9d 97       	sbiw	r26, 0x2d	; 45
    6c12:	9e 96       	adiw	r26, 0x2e	; 46
    6c14:	0c 91       	ld	r16, X
    6c16:	9e 97       	sbiw	r26, 0x2e	; 46
    6c18:	9f 96       	adiw	r26, 0x2f	; 47
    6c1a:	1c 91       	ld	r17, X
    6c1c:	9f 97       	sbiw	r26, 0x2f	; 47
    6c1e:	0e 94 88 5a 	call	0xb510	; 0xb510 <__adddi3>
    6c22:	98 96       	adiw	r26, 0x28	; 40
    6c24:	2c 93       	st	X, r18
    6c26:	98 97       	sbiw	r26, 0x28	; 40
    6c28:	99 96       	adiw	r26, 0x29	; 41
    6c2a:	3c 93       	st	X, r19
    6c2c:	99 97       	sbiw	r26, 0x29	; 41
    6c2e:	9a 96       	adiw	r26, 0x2a	; 42
    6c30:	4c 93       	st	X, r20
    6c32:	9a 97       	sbiw	r26, 0x2a	; 42
    6c34:	9b 96       	adiw	r26, 0x2b	; 43
    6c36:	5c 93       	st	X, r21
    6c38:	9b 97       	sbiw	r26, 0x2b	; 43
    6c3a:	9c 96       	adiw	r26, 0x2c	; 44
    6c3c:	6c 93       	st	X, r22
    6c3e:	9c 97       	sbiw	r26, 0x2c	; 44
    6c40:	9d 96       	adiw	r26, 0x2d	; 45
    6c42:	7c 93       	st	X, r23
    6c44:	9d 97       	sbiw	r26, 0x2d	; 45
    6c46:	9e 96       	adiw	r26, 0x2e	; 46
    6c48:	8c 93       	st	X, r24
    6c4a:	9e 97       	sbiw	r26, 0x2e	; 46
    6c4c:	9f 96       	adiw	r26, 0x2f	; 47
    6c4e:	9c 93       	st	X, r25
    6c50:	c5 ce       	rjmp	.-630    	; 0x69dc <f_read+0x9c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
    6c52:	d4 01       	movw	r26, r8
    6c54:	d4 96       	adiw	r26, 0x34	; 52
    6c56:	2d 91       	ld	r18, X+
    6c58:	3d 91       	ld	r19, X+
    6c5a:	4d 91       	ld	r20, X+
    6c5c:	5c 91       	ld	r21, X
    6c5e:	d7 97       	sbiw	r26, 0x37	; 55
    6c60:	22 15       	cp	r18, r2
    6c62:	33 05       	cpc	r19, r3
    6c64:	44 05       	cpc	r20, r4
    6c66:	55 05       	cpc	r21, r5
    6c68:	21 f1       	breq	.+72     	; 0x6cb2 <f_read+0x372>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
    6c6a:	96 96       	adiw	r26, 0x26	; 38
    6c6c:	8c 91       	ld	r24, X
    6c6e:	87 ff       	sbrs	r24, 7
    6c70:	12 c0       	rjmp	.+36     	; 0x6c96 <f_read+0x356>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    6c72:	01 e0       	ldi	r16, 0x01	; 1
    6c74:	10 e0       	ldi	r17, 0x00	; 0
    6c76:	6f 85       	ldd	r22, Y+15	; 0x0f
    6c78:	78 89       	ldd	r23, Y+16	; 0x10
    6c7a:	f5 01       	movw	r30, r10
    6c7c:	81 81       	ldd	r24, Z+1	; 0x01
    6c7e:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    6c82:	89 2b       	or	r24, r25
    6c84:	09 f0       	breq	.+2      	; 0x6c88 <f_read+0x348>
    6c86:	2b cf       	rjmp	.-426    	; 0x6ade <f_read+0x19e>
					fp->flag &= (BYTE)~FA_DIRTY;
    6c88:	d4 01       	movw	r26, r8
    6c8a:	96 96       	adiw	r26, 0x26	; 38
    6c8c:	8c 91       	ld	r24, X
    6c8e:	96 97       	sbiw	r26, 0x26	; 38
    6c90:	8f 77       	andi	r24, 0x7F	; 127
    6c92:	96 96       	adiw	r26, 0x26	; 38
    6c94:	8c 93       	st	X, r24
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    6c96:	e9 81       	ldd	r30, Y+1	; 0x01
    6c98:	fa 81       	ldd	r31, Y+2	; 0x02
    6c9a:	01 e0       	ldi	r16, 0x01	; 1
    6c9c:	10 e0       	ldi	r17, 0x00	; 0
    6c9e:	a2 01       	movw	r20, r4
    6ca0:	91 01       	movw	r18, r2
    6ca2:	6f 85       	ldd	r22, Y+15	; 0x0f
    6ca4:	78 89       	ldd	r23, Y+16	; 0x10
    6ca6:	81 81       	ldd	r24, Z+1	; 0x01
    6ca8:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <disk_read>
    6cac:	89 2b       	or	r24, r25
    6cae:	09 f0       	breq	.+2      	; 0x6cb2 <f_read+0x372>
    6cb0:	16 cf       	rjmp	.-468    	; 0x6ade <f_read+0x19e>
			fp->sect = sect;
    6cb2:	f4 01       	movw	r30, r8
    6cb4:	24 aa       	std	Z+52, r2	; 0x34
    6cb6:	35 aa       	std	Z+53, r3	; 0x35
    6cb8:	46 aa       	std	Z+54, r4	; 0x36
    6cba:	57 aa       	std	Z+55, r5	; 0x37
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    6cbc:	d4 01       	movw	r26, r8
    6cbe:	98 96       	adiw	r26, 0x28	; 40
    6cc0:	6d 91       	ld	r22, X+
    6cc2:	7c 91       	ld	r23, X
    6cc4:	71 70       	andi	r23, 0x01	; 1
    6cc6:	80 e0       	ldi	r24, 0x00	; 0
    6cc8:	92 e0       	ldi	r25, 0x02	; 2
    6cca:	86 1b       	sub	r24, r22
    6ccc:	97 0b       	sbc	r25, r23
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
    6cce:	63 01       	movw	r12, r6
    6cd0:	86 15       	cp	r24, r6
    6cd2:	97 05       	cpc	r25, r7
    6cd4:	08 f4       	brcc	.+2      	; 0x6cd8 <f_read+0x398>
    6cd6:	6c 01       	movw	r12, r24
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    6cd8:	ef 85       	ldd	r30, Y+15	; 0x0f
    6cda:	f8 89       	ldd	r31, Y+16	; 0x10
    6cdc:	6e 0f       	add	r22, r30
    6cde:	7f 1f       	adc	r23, r31
    6ce0:	a6 01       	movw	r20, r12
    6ce2:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ce4:	9c 85       	ldd	r25, Y+12	; 0x0c
    6ce6:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
}
    6cea:	68 cf       	rjmp	.-304    	; 0x6bbc <f_read+0x27c>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    6cec:	87 e0       	ldi	r24, 0x07	; 7
    6cee:	68 2e       	mov	r6, r24
    6cf0:	71 2c       	mov	r7, r1
    6cf2:	de ce       	rjmp	.-580    	; 0x6ab0 <f_read+0x170>

00006cf4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    6cf4:	a5 e1       	ldi	r26, 0x15	; 21
    6cf6:	b0 e0       	ldi	r27, 0x00	; 0
    6cf8:	e0 e8       	ldi	r30, 0x80	; 128
    6cfa:	f6 e3       	ldi	r31, 0x36	; 54
    6cfc:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    6d00:	4c 01       	movw	r8, r24
    6d02:	69 87       	std	Y+9, r22	; 0x09
    6d04:	7a 87       	std	Y+10, r23	; 0x0a
    6d06:	4b 83       	std	Y+3, r20	; 0x03
    6d08:	5c 83       	std	Y+4, r21	; 0x04
    6d0a:	2b 87       	std	Y+11, r18	; 0x0b
    6d0c:	3c 87       	std	Y+12, r19	; 0x0c
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    6d0e:	ab 85       	ldd	r26, Y+11	; 0x0b
    6d10:	bc 85       	ldd	r27, Y+12	; 0x0c
    6d12:	1d 92       	st	X+, r1
    6d14:	1c 92       	st	X, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    6d16:	be 01       	movw	r22, r28
    6d18:	6f 5f       	subi	r22, 0xFF	; 255
    6d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d1c:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
    6d20:	8f 83       	std	Y+7, r24	; 0x07
    6d22:	98 87       	std	Y+8, r25	; 0x08
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    6d24:	ef 81       	ldd	r30, Y+7	; 0x07
    6d26:	f8 85       	ldd	r31, Y+8	; 0x08
    6d28:	ef 2b       	or	r30, r31
    6d2a:	09 f0       	breq	.+2      	; 0x6d2e <f_write+0x3a>
    6d2c:	a8 c0       	rjmp	.+336    	; 0x6e7e <f_write+0x18a>
    6d2e:	d4 01       	movw	r26, r8
    6d30:	97 96       	adiw	r26, 0x27	; 39
    6d32:	8c 91       	ld	r24, X
    6d34:	97 97       	sbiw	r26, 0x27	; 39
    6d36:	e8 2f       	mov	r30, r24
    6d38:	f0 e0       	ldi	r31, 0x00	; 0
    6d3a:	f8 87       	std	Y+8, r31	; 0x08
    6d3c:	ef 83       	std	Y+7, r30	; 0x07
    6d3e:	81 11       	cpse	r24, r1
    6d40:	9e c0       	rjmp	.+316    	; 0x6e7e <f_write+0x18a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    6d42:	96 96       	adiw	r26, 0x26	; 38
    6d44:	8c 91       	ld	r24, X
    6d46:	96 97       	sbiw	r26, 0x26	; 38
    6d48:	81 ff       	sbrs	r24, 1
    6d4a:	3b c2       	rjmp	.+1142   	; 0x71c2 <f_write+0x4ce>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    6d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    6d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    6d50:	80 81       	ld	r24, Z
    6d52:	84 30       	cpi	r24, 0x04	; 4
    6d54:	f1 f0       	breq	.+60     	; 0x6d92 <f_write+0x9e>
    6d56:	98 96       	adiw	r26, 0x28	; 40
    6d58:	0c 91       	ld	r16, X
    6d5a:	98 97       	sbiw	r26, 0x28	; 40
    6d5c:	99 96       	adiw	r26, 0x29	; 41
    6d5e:	1c 91       	ld	r17, X
    6d60:	99 97       	sbiw	r26, 0x29	; 41
    6d62:	9a 96       	adiw	r26, 0x2a	; 42
    6d64:	2c 91       	ld	r18, X
    6d66:	9a 97       	sbiw	r26, 0x2a	; 42
    6d68:	9b 96       	adiw	r26, 0x2b	; 43
    6d6a:	3c 91       	ld	r19, X
    6d6c:	eb 81       	ldd	r30, Y+3	; 0x03
    6d6e:	fc 81       	ldd	r31, Y+4	; 0x04
    6d70:	cf 01       	movw	r24, r30
    6d72:	b0 e0       	ldi	r27, 0x00	; 0
    6d74:	a0 e0       	ldi	r26, 0x00	; 0
    6d76:	80 0f       	add	r24, r16
    6d78:	91 1f       	adc	r25, r17
    6d7a:	a2 1f       	adc	r26, r18
    6d7c:	b3 1f       	adc	r27, r19
    6d7e:	80 17       	cp	r24, r16
    6d80:	91 07       	cpc	r25, r17
    6d82:	a2 07       	cpc	r26, r18
    6d84:	b3 07       	cpc	r27, r19
    6d86:	28 f4       	brcc	.+10     	; 0x6d92 <f_write+0x9e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    6d88:	c8 01       	movw	r24, r16
    6d8a:	80 95       	com	r24
    6d8c:	90 95       	com	r25
    6d8e:	9c 83       	std	Y+4, r25	; 0x04
    6d90:	8b 83       	std	Y+3, r24	; 0x03
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    6d92:	d4 01       	movw	r26, r8
    6d94:	de 96       	adiw	r26, 0x3e	; 62
    6d96:	be 87       	std	Y+14, r27	; 0x0e
    6d98:	ad 87       	std	Y+13, r26	; 0x0d
	for ( ;  btw;							/* Repeat until all data written */
    6d9a:	2b 81       	ldd	r18, Y+3	; 0x03
    6d9c:	3c 81       	ldd	r19, Y+4	; 0x04
    6d9e:	23 2b       	or	r18, r19
    6da0:	09 f4       	brne	.+2      	; 0x6da4 <f_write+0xb0>
    6da2:	69 c0       	rjmp	.+210    	; 0x6e76 <f_write+0x182>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    6da4:	d4 01       	movw	r26, r8
    6da6:	98 96       	adiw	r26, 0x28	; 40
    6da8:	fc 91       	ld	r31, X
    6daa:	98 97       	sbiw	r26, 0x28	; 40
    6dac:	99 96       	adiw	r26, 0x29	; 41
    6dae:	ec 91       	ld	r30, X
    6db0:	99 97       	sbiw	r26, 0x29	; 41
    6db2:	9a 96       	adiw	r26, 0x2a	; 42
    6db4:	bc 91       	ld	r27, X
    6db6:	bd 83       	std	Y+5, r27	; 0x05
    6db8:	d4 01       	movw	r26, r8
    6dba:	9b 96       	adiw	r26, 0x2b	; 43
    6dbc:	4c 90       	ld	r4, X
    6dbe:	9b 97       	sbiw	r26, 0x2b	; 43
    6dc0:	9c 96       	adiw	r26, 0x2c	; 44
    6dc2:	5c 90       	ld	r5, X
    6dc4:	9c 97       	sbiw	r26, 0x2c	; 44
    6dc6:	9d 96       	adiw	r26, 0x2d	; 45
    6dc8:	6c 90       	ld	r6, X
    6dca:	9d 97       	sbiw	r26, 0x2d	; 45
    6dcc:	9e 96       	adiw	r26, 0x2e	; 46
    6dce:	7c 90       	ld	r7, X
    6dd0:	9e 97       	sbiw	r26, 0x2e	; 46
    6dd2:	9f 96       	adiw	r26, 0x2f	; 47
    6dd4:	bc 91       	ld	r27, X
    6dd6:	bf 87       	std	Y+15, r27	; 0x0f
    6dd8:	3e 2f       	mov	r19, r30
    6dda:	31 70       	andi	r19, 0x01	; 1
    6ddc:	2f 2f       	mov	r18, r31
    6dde:	40 e0       	ldi	r20, 0x00	; 0
    6de0:	50 e0       	ldi	r21, 0x00	; 0
    6de2:	60 e0       	ldi	r22, 0x00	; 0
    6de4:	70 e0       	ldi	r23, 0x00	; 0
    6de6:	80 e0       	ldi	r24, 0x00	; 0
    6de8:	90 e0       	ldi	r25, 0x00	; 0
    6dea:	a0 e0       	ldi	r26, 0x00	; 0
    6dec:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    6df0:	09 f0       	breq	.+2      	; 0x6df4 <f_write+0x100>
    6df2:	c7 c1       	rjmp	.+910    	; 0x7182 <f_write+0x48e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    6df4:	89 81       	ldd	r24, Y+1	; 0x01
    6df6:	9a 81       	ldd	r25, Y+2	; 0x02
    6df8:	dc 01       	movw	r26, r24
    6dfa:	19 96       	adiw	r26, 0x09	; 9
    6dfc:	2d 90       	ld	r2, X+
    6dfe:	3c 90       	ld	r3, X
    6e00:	b1 e0       	ldi	r27, 0x01	; 1
    6e02:	2b 1a       	sub	r2, r27
    6e04:	31 08       	sbc	r3, r1
    6e06:	3e 2f       	mov	r19, r30
    6e08:	4d 81       	ldd	r20, Y+5	; 0x05
    6e0a:	54 2d       	mov	r21, r4
    6e0c:	65 2d       	mov	r22, r5
    6e0e:	76 2d       	mov	r23, r6
    6e10:	87 2d       	mov	r24, r7
    6e12:	9f 85       	ldd	r25, Y+15	; 0x0f
    6e14:	09 e0       	ldi	r16, 0x09	; 9
    6e16:	0e 94 6d 5a 	call	0xb4da	; 0xb4da <__lshrdi3>
    6e1a:	59 01       	movw	r10, r18
    6e1c:	6a 01       	movw	r12, r20
    6e1e:	7b 01       	movw	r14, r22
    6e20:	8c 01       	movw	r16, r24
    6e22:	22 22       	and	r2, r18
    6e24:	3b 20       	and	r3, r11
			if (csect == 0) {				/* On the cluster boundary? */
    6e26:	21 14       	cp	r2, r1
    6e28:	31 04       	cpc	r3, r1
    6e2a:	09 f0       	breq	.+2      	; 0x6e2e <f_write+0x13a>
    6e2c:	67 c0       	rjmp	.+206    	; 0x6efc <f_write+0x208>
				if (fp->fptr == 0) {		/* On the top of the file? */
    6e2e:	2f 2f       	mov	r18, r31
    6e30:	3e 2f       	mov	r19, r30
    6e32:	4d 81       	ldd	r20, Y+5	; 0x05
    6e34:	54 2d       	mov	r21, r4
    6e36:	65 2d       	mov	r22, r5
    6e38:	76 2d       	mov	r23, r6
    6e3a:	87 2d       	mov	r24, r7
    6e3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    6e3e:	a0 e0       	ldi	r26, 0x00	; 0
    6e40:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    6e44:	11 f5       	brne	.+68     	; 0x6e8a <f_write+0x196>
					clst = fp->obj.sclust;	/* Follow from the origin */
    6e46:	f4 01       	movw	r30, r8
    6e48:	46 81       	ldd	r20, Z+6	; 0x06
    6e4a:	57 81       	ldd	r21, Z+7	; 0x07
    6e4c:	60 85       	ldd	r22, Z+8	; 0x08
    6e4e:	71 85       	ldd	r23, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    6e50:	41 15       	cp	r20, r1
    6e52:	51 05       	cpc	r21, r1
    6e54:	61 05       	cpc	r22, r1
    6e56:	71 05       	cpc	r23, r1
    6e58:	01 f5       	brne	.+64     	; 0x6e9a <f_write+0x1a6>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    6e5a:	40 e0       	ldi	r20, 0x00	; 0
    6e5c:	50 e0       	ldi	r21, 0x00	; 0
    6e5e:	ba 01       	movw	r22, r20
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    6e60:	c4 01       	movw	r24, r8
    6e62:	0e 94 28 1c 	call	0x3850	; 0x3850 <create_chain>
    6e66:	46 2f       	mov	r20, r22
    6e68:	57 2f       	mov	r21, r23
    6e6a:	bc 01       	movw	r22, r24
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    6e6c:	41 15       	cp	r20, r1
    6e6e:	51 05       	cpc	r21, r1
    6e70:	61 05       	cpc	r22, r1
    6e72:	71 05       	cpc	r23, r1
    6e74:	91 f4       	brne	.+36     	; 0x6e9a <f_write+0x1a6>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    6e76:	f4 01       	movw	r30, r8
    6e78:	86 a1       	ldd	r24, Z+38	; 0x26
    6e7a:	80 64       	ori	r24, 0x40	; 64
    6e7c:	86 a3       	std	Z+38, r24	; 0x26

	LEAVE_FF(fs, FR_OK);
}
    6e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    6e80:	98 85       	ldd	r25, Y+8	; 0x08
    6e82:	65 96       	adiw	r28, 0x15	; 21
    6e84:	e2 e1       	ldi	r30, 0x12	; 18
    6e86:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    6e8a:	d4 01       	movw	r26, r8
    6e8c:	d0 96       	adiw	r26, 0x30	; 48
    6e8e:	4d 91       	ld	r20, X+
    6e90:	5d 91       	ld	r21, X+
    6e92:	6d 91       	ld	r22, X+
    6e94:	7c 91       	ld	r23, X
    6e96:	d3 97       	sbiw	r26, 0x33	; 51
    6e98:	e3 cf       	rjmp	.-58     	; 0x6e60 <f_write+0x16c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    6e9a:	41 30       	cpi	r20, 0x01	; 1
    6e9c:	51 05       	cpc	r21, r1
    6e9e:	61 05       	cpc	r22, r1
    6ea0:	71 05       	cpc	r23, r1
    6ea2:	49 f4       	brne	.+18     	; 0x6eb6 <f_write+0x1c2>
    6ea4:	82 e0       	ldi	r24, 0x02	; 2
    6ea6:	d4 01       	movw	r26, r8
    6ea8:	97 96       	adiw	r26, 0x27	; 39
    6eaa:	8c 93       	st	X, r24
    6eac:	e2 e0       	ldi	r30, 0x02	; 2
    6eae:	f0 e0       	ldi	r31, 0x00	; 0
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    6eb0:	f8 87       	std	Y+8, r31	; 0x08
    6eb2:	ef 83       	std	Y+7, r30	; 0x07
    6eb4:	e4 cf       	rjmp	.-56     	; 0x6e7e <f_write+0x18a>
    6eb6:	4f 3f       	cpi	r20, 0xFF	; 255
    6eb8:	ff ef       	ldi	r31, 0xFF	; 255
    6eba:	5f 07       	cpc	r21, r31
    6ebc:	6f 07       	cpc	r22, r31
    6ebe:	7f 07       	cpc	r23, r31
    6ec0:	39 f4       	brne	.+14     	; 0x6ed0 <f_write+0x1dc>
    6ec2:	81 e0       	ldi	r24, 0x01	; 1
    6ec4:	d4 01       	movw	r26, r8
    6ec6:	97 96       	adiw	r26, 0x27	; 39
    6ec8:	8c 93       	st	X, r24
    6eca:	e1 e0       	ldi	r30, 0x01	; 1
    6ecc:	f0 e0       	ldi	r31, 0x00	; 0
    6ece:	f0 cf       	rjmp	.-32     	; 0x6eb0 <f_write+0x1bc>
				fp->clust = clst;			/* Update current cluster */
    6ed0:	d4 01       	movw	r26, r8
    6ed2:	d0 96       	adiw	r26, 0x30	; 48
    6ed4:	4d 93       	st	X+, r20
    6ed6:	5d 93       	st	X+, r21
    6ed8:	6d 93       	st	X+, r22
    6eda:	7c 93       	st	X, r23
    6edc:	d3 97       	sbiw	r26, 0x33	; 51
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    6ede:	16 96       	adiw	r26, 0x06	; 6
    6ee0:	8d 91       	ld	r24, X+
    6ee2:	9d 91       	ld	r25, X+
    6ee4:	0d 90       	ld	r0, X+
    6ee6:	bc 91       	ld	r27, X
    6ee8:	a0 2d       	mov	r26, r0
    6eea:	89 2b       	or	r24, r25
    6eec:	8a 2b       	or	r24, r26
    6eee:	8b 2b       	or	r24, r27
    6ef0:	29 f4       	brne	.+10     	; 0x6efc <f_write+0x208>
    6ef2:	f4 01       	movw	r30, r8
    6ef4:	46 83       	std	Z+6, r20	; 0x06
    6ef6:	57 83       	std	Z+7, r21	; 0x07
    6ef8:	60 87       	std	Z+8, r22	; 0x08
    6efa:	71 87       	std	Z+9, r23	; 0x09
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
    6efc:	d4 01       	movw	r26, r8
    6efe:	96 96       	adiw	r26, 0x26	; 38
    6f00:	8c 91       	ld	r24, X
    6f02:	96 97       	sbiw	r26, 0x26	; 38
    6f04:	87 ff       	sbrs	r24, 7
    6f06:	15 c0       	rjmp	.+42     	; 0x6f32 <f_write+0x23e>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    6f08:	d4 96       	adiw	r26, 0x34	; 52
    6f0a:	2d 91       	ld	r18, X+
    6f0c:	3d 91       	ld	r19, X+
    6f0e:	4d 91       	ld	r20, X+
    6f10:	5c 91       	ld	r21, X
    6f12:	d7 97       	sbiw	r26, 0x37	; 55
    6f14:	e9 81       	ldd	r30, Y+1	; 0x01
    6f16:	fa 81       	ldd	r31, Y+2	; 0x02
    6f18:	01 e0       	ldi	r16, 0x01	; 1
    6f1a:	10 e0       	ldi	r17, 0x00	; 0
    6f1c:	6d 85       	ldd	r22, Y+13	; 0x0d
    6f1e:	7e 85       	ldd	r23, Y+14	; 0x0e
    6f20:	81 81       	ldd	r24, Z+1	; 0x01
    6f22:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    6f26:	89 2b       	or	r24, r25
    6f28:	61 f6       	brne	.-104    	; 0x6ec2 <f_write+0x1ce>
				fp->flag &= (BYTE)~FA_DIRTY;
    6f2a:	f4 01       	movw	r30, r8
    6f2c:	86 a1       	ldd	r24, Z+38	; 0x26
    6f2e:	8f 77       	andi	r24, 0x7F	; 127
    6f30:	86 a3       	std	Z+38, r24	; 0x26
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    6f32:	29 81       	ldd	r18, Y+1	; 0x01
    6f34:	3a 81       	ldd	r19, Y+2	; 0x02
    6f36:	3e 83       	std	Y+6, r19	; 0x06
    6f38:	2d 83       	std	Y+5, r18	; 0x05
    6f3a:	d4 01       	movw	r26, r8
    6f3c:	d0 96       	adiw	r26, 0x30	; 48
    6f3e:	4d 91       	ld	r20, X+
    6f40:	5d 91       	ld	r21, X+
    6f42:	6d 91       	ld	r22, X+
    6f44:	7c 91       	ld	r23, X
    6f46:	d3 97       	sbiw	r26, 0x33	; 51
    6f48:	c9 01       	movw	r24, r18
    6f4a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    6f4e:	2b 01       	movw	r4, r22
    6f50:	3c 01       	movw	r6, r24
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    6f52:	41 14       	cp	r4, r1
    6f54:	51 04       	cpc	r5, r1
    6f56:	61 04       	cpc	r6, r1
    6f58:	71 04       	cpc	r7, r1
    6f5a:	09 f4       	brne	.+2      	; 0x6f5e <f_write+0x26a>
    6f5c:	a3 cf       	rjmp	.-186    	; 0x6ea4 <f_write+0x1b0>
			sect += csect;
    6f5e:	42 0c       	add	r4, r2
    6f60:	53 1c       	adc	r5, r3
    6f62:	61 1c       	adc	r6, r1
    6f64:	71 1c       	adc	r7, r1
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    6f66:	eb 81       	ldd	r30, Y+3	; 0x03
    6f68:	fc 81       	ldd	r31, Y+4	; 0x04
    6f6a:	e1 15       	cp	r30, r1
    6f6c:	22 e0       	ldi	r18, 0x02	; 2
    6f6e:	f2 07       	cpc	r31, r18
    6f70:	08 f4       	brcc	.+2      	; 0x6f74 <f_write+0x280>
    6f72:	d5 c0       	rjmp	.+426    	; 0x711e <f_write+0x42a>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    6f74:	7f 01       	movw	r14, r30
    6f76:	ef 2c       	mov	r14, r15
    6f78:	ff 24       	eor	r15, r15
    6f7a:	e6 94       	lsr	r14
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    6f7c:	ad 81       	ldd	r26, Y+5	; 0x05
    6f7e:	be 81       	ldd	r27, Y+6	; 0x06
    6f80:	19 96       	adiw	r26, 0x09	; 9
    6f82:	8d 91       	ld	r24, X+
    6f84:	9c 91       	ld	r25, X
    6f86:	91 01       	movw	r18, r2
    6f88:	2e 0d       	add	r18, r14
    6f8a:	3f 1d       	adc	r19, r15
    6f8c:	82 17       	cp	r24, r18
    6f8e:	93 07       	cpc	r25, r19
    6f90:	18 f4       	brcc	.+6      	; 0x6f98 <f_write+0x2a4>
					cc = fs->csize - csect;
    6f92:	7c 01       	movw	r14, r24
    6f94:	e2 18       	sub	r14, r2
    6f96:	f3 08       	sbc	r15, r3
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    6f98:	87 01       	movw	r16, r14
    6f9a:	a3 01       	movw	r20, r6
    6f9c:	92 01       	movw	r18, r4
    6f9e:	69 85       	ldd	r22, Y+9	; 0x09
    6fa0:	7a 85       	ldd	r23, Y+10	; 0x0a
    6fa2:	ed 81       	ldd	r30, Y+5	; 0x05
    6fa4:	fe 81       	ldd	r31, Y+6	; 0x06
    6fa6:	81 81       	ldd	r24, Z+1	; 0x01
    6fa8:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    6fac:	89 2b       	or	r24, r25
    6fae:	09 f0       	breq	.+2      	; 0x6fb2 <f_write+0x2be>
    6fb0:	88 cf       	rjmp	.-240    	; 0x6ec2 <f_write+0x1ce>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    6fb2:	f4 01       	movw	r30, r8
    6fb4:	84 a9       	ldd	r24, Z+52	; 0x34
    6fb6:	95 a9       	ldd	r25, Z+53	; 0x35
    6fb8:	a6 a9       	ldd	r26, Z+54	; 0x36
    6fba:	b7 a9       	ldd	r27, Z+55	; 0x37
    6fbc:	84 19       	sub	r24, r4
    6fbe:	95 09       	sbc	r25, r5
    6fc0:	a6 09       	sbc	r26, r6
    6fc2:	b7 09       	sbc	r27, r7
    6fc4:	a7 01       	movw	r20, r14
    6fc6:	70 e0       	ldi	r23, 0x00	; 0
    6fc8:	60 e0       	ldi	r22, 0x00	; 0
    6fca:	84 17       	cp	r24, r20
    6fcc:	95 07       	cpc	r25, r21
    6fce:	a6 07       	cpc	r26, r22
    6fd0:	b7 07       	cpc	r27, r23
    6fd2:	a0 f4       	brcc	.+40     	; 0x6ffc <f_write+0x308>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
    6fd4:	98 2f       	mov	r25, r24
    6fd6:	88 27       	eor	r24, r24
    6fd8:	99 0f       	add	r25, r25
    6fda:	69 85       	ldd	r22, Y+9	; 0x09
    6fdc:	7a 85       	ldd	r23, Y+10	; 0x0a
    6fde:	68 0f       	add	r22, r24
    6fe0:	79 1f       	adc	r23, r25
    6fe2:	40 e0       	ldi	r20, 0x00	; 0
    6fe4:	52 e0       	ldi	r21, 0x02	; 2
    6fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fea:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
    6fee:	d4 01       	movw	r26, r8
    6ff0:	96 96       	adiw	r26, 0x26	; 38
    6ff2:	8c 91       	ld	r24, X
    6ff4:	96 97       	sbiw	r26, 0x26	; 38
    6ff6:	8f 77       	andi	r24, 0x7F	; 127
    6ff8:	96 96       	adiw	r26, 0x26	; 38
    6ffa:	8c 93       	st	X, r24
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    6ffc:	fe 2c       	mov	r15, r14
    6ffe:	ee 24       	eor	r14, r14
    7000:	ff 0c       	add	r15, r15
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    7002:	eb 81       	ldd	r30, Y+3	; 0x03
    7004:	fc 81       	ldd	r31, Y+4	; 0x04
    7006:	ee 19       	sub	r30, r14
    7008:	ff 09       	sbc	r31, r15
    700a:	fc 83       	std	Y+4, r31	; 0x04
    700c:	eb 83       	std	Y+3, r30	; 0x03
    700e:	ab 85       	ldd	r26, Y+11	; 0x0b
    7010:	bc 85       	ldd	r27, Y+12	; 0x0c
    7012:	8d 91       	ld	r24, X+
    7014:	9c 91       	ld	r25, X
    7016:	11 97       	sbiw	r26, 0x01	; 1
    7018:	8e 0d       	add	r24, r14
    701a:	9f 1d       	adc	r25, r15
    701c:	8d 93       	st	X+, r24
    701e:	9c 93       	st	X, r25
    7020:	e9 85       	ldd	r30, Y+9	; 0x09
    7022:	fa 85       	ldd	r31, Y+10	; 0x0a
    7024:	ee 0d       	add	r30, r14
    7026:	ff 1d       	adc	r31, r15
    7028:	fa 87       	std	Y+10, r31	; 0x0a
    702a:	e9 87       	std	Y+9, r30	; 0x09
    702c:	97 01       	movw	r18, r14
    702e:	40 e0       	ldi	r20, 0x00	; 0
    7030:	50 e0       	ldi	r21, 0x00	; 0
    7032:	60 e0       	ldi	r22, 0x00	; 0
    7034:	70 e0       	ldi	r23, 0x00	; 0
    7036:	80 e0       	ldi	r24, 0x00	; 0
    7038:	90 e0       	ldi	r25, 0x00	; 0
    703a:	d4 01       	movw	r26, r8
    703c:	98 96       	adiw	r26, 0x28	; 40
    703e:	ac 90       	ld	r10, X
    7040:	98 97       	sbiw	r26, 0x28	; 40
    7042:	99 96       	adiw	r26, 0x29	; 41
    7044:	bc 90       	ld	r11, X
    7046:	99 97       	sbiw	r26, 0x29	; 41
    7048:	9a 96       	adiw	r26, 0x2a	; 42
    704a:	cc 90       	ld	r12, X
    704c:	9a 97       	sbiw	r26, 0x2a	; 42
    704e:	9b 96       	adiw	r26, 0x2b	; 43
    7050:	dc 90       	ld	r13, X
    7052:	9b 97       	sbiw	r26, 0x2b	; 43
    7054:	9c 96       	adiw	r26, 0x2c	; 44
    7056:	ec 90       	ld	r14, X
    7058:	9c 97       	sbiw	r26, 0x2c	; 44
    705a:	9d 96       	adiw	r26, 0x2d	; 45
    705c:	fc 90       	ld	r15, X
    705e:	9d 97       	sbiw	r26, 0x2d	; 45
    7060:	9e 96       	adiw	r26, 0x2e	; 46
    7062:	0c 91       	ld	r16, X
    7064:	9e 97       	sbiw	r26, 0x2e	; 46
    7066:	9f 96       	adiw	r26, 0x2f	; 47
    7068:	1c 91       	ld	r17, X
    706a:	0e 94 88 5a 	call	0xb510	; 0xb510 <__adddi3>
    706e:	29 01       	movw	r4, r18
    7070:	3a 01       	movw	r6, r20
    7072:	b6 2f       	mov	r27, r22
    7074:	a7 2f       	mov	r26, r23
    7076:	8c 8b       	std	Y+20, r24	; 0x14
    7078:	9d 8b       	std	Y+21, r25	; 0x15
    707a:	f4 01       	movw	r30, r8
    707c:	20 a7       	std	Z+40, r18	; 0x28
    707e:	51 a6       	std	Z+41, r5	; 0x29
    7080:	42 a7       	std	Z+42, r20	; 0x2a
    7082:	73 a6       	std	Z+43, r7	; 0x2b
    7084:	64 a7       	std	Z+44, r22	; 0x2c
    7086:	75 a7       	std	Z+45, r23	; 0x2d
    7088:	86 a7       	std	Z+46, r24	; 0x2e
    708a:	97 a7       	std	Z+47, r25	; 0x2f
    708c:	22 84       	ldd	r2, Z+10	; 0x0a
    708e:	33 84       	ldd	r3, Z+11	; 0x0b
    7090:	f4 85       	ldd	r31, Z+12	; 0x0c
    7092:	fd 83       	std	Y+5, r31	; 0x05
    7094:	f4 01       	movw	r30, r8
    7096:	f5 85       	ldd	r31, Z+13	; 0x0d
    7098:	ff 87       	std	Y+15, r31	; 0x0f
    709a:	f4 01       	movw	r30, r8
    709c:	f6 85       	ldd	r31, Z+14	; 0x0e
    709e:	f8 8b       	std	Y+16, r31	; 0x10
    70a0:	f4 01       	movw	r30, r8
    70a2:	f7 85       	ldd	r31, Z+15	; 0x0f
    70a4:	f9 8b       	std	Y+17, r31	; 0x11
    70a6:	f4 01       	movw	r30, r8
    70a8:	f0 89       	ldd	r31, Z+16	; 0x10
    70aa:	fa 8b       	std	Y+18, r31	; 0x12
    70ac:	f4 01       	movw	r30, r8
    70ae:	f1 89       	ldd	r31, Z+17	; 0x11
    70b0:	fb 8b       	std	Y+19, r31	; 0x13
    70b2:	91 01       	movw	r18, r2
    70b4:	4d 81       	ldd	r20, Y+5	; 0x05
    70b6:	5f 85       	ldd	r21, Y+15	; 0x0f
    70b8:	68 89       	ldd	r22, Y+16	; 0x10
    70ba:	79 89       	ldd	r23, Y+17	; 0x11
    70bc:	8a 89       	ldd	r24, Y+18	; 0x12
    70be:	9f 2f       	mov	r25, r31
    70c0:	52 01       	movw	r10, r4
    70c2:	63 01       	movw	r12, r6
    70c4:	eb 2e       	mov	r14, r27
    70c6:	fa 2e       	mov	r15, r26
    70c8:	0c 89       	ldd	r16, Y+20	; 0x14
    70ca:	1d 89       	ldd	r17, Y+21	; 0x15
    70cc:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    70d0:	38 f4       	brcc	.+14     	; 0x70e0 <f_write+0x3ec>
    70d2:	12 01       	movw	r2, r4
    70d4:	6d 82       	std	Y+5, r6	; 0x05
    70d6:	7f 86       	std	Y+15, r7	; 0x0f
    70d8:	b8 8b       	std	Y+16, r27	; 0x10
    70da:	a9 8b       	std	Y+17, r26	; 0x11
    70dc:	0a 8b       	std	Y+18, r16	; 0x12
    70de:	1b 8b       	std	Y+19, r17	; 0x13
    70e0:	d4 01       	movw	r26, r8
    70e2:	1a 96       	adiw	r26, 0x0a	; 10
    70e4:	2c 92       	st	X, r2
    70e6:	1a 97       	sbiw	r26, 0x0a	; 10
    70e8:	1b 96       	adiw	r26, 0x0b	; 11
    70ea:	3c 92       	st	X, r3
    70ec:	1b 97       	sbiw	r26, 0x0b	; 11
    70ee:	ed 81       	ldd	r30, Y+5	; 0x05
    70f0:	1c 96       	adiw	r26, 0x0c	; 12
    70f2:	ec 93       	st	X, r30
    70f4:	1c 97       	sbiw	r26, 0x0c	; 12
    70f6:	ff 85       	ldd	r31, Y+15	; 0x0f
    70f8:	1d 96       	adiw	r26, 0x0d	; 13
    70fa:	fc 93       	st	X, r31
    70fc:	1d 97       	sbiw	r26, 0x0d	; 13
    70fe:	e8 89       	ldd	r30, Y+16	; 0x10
    7100:	1e 96       	adiw	r26, 0x0e	; 14
    7102:	ec 93       	st	X, r30
    7104:	1e 97       	sbiw	r26, 0x0e	; 14
    7106:	f9 89       	ldd	r31, Y+17	; 0x11
    7108:	1f 96       	adiw	r26, 0x0f	; 15
    710a:	fc 93       	st	X, r31
    710c:	1f 97       	sbiw	r26, 0x0f	; 15
    710e:	ea 89       	ldd	r30, Y+18	; 0x12
    7110:	50 96       	adiw	r26, 0x10	; 16
    7112:	ec 93       	st	X, r30
    7114:	50 97       	sbiw	r26, 0x10	; 16
    7116:	fb 89       	ldd	r31, Y+19	; 0x13
    7118:	51 96       	adiw	r26, 0x11	; 17
    711a:	fc 93       	st	X, r31
    711c:	3e ce       	rjmp	.-900    	; 0x6d9a <f_write+0xa6>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    711e:	f4 01       	movw	r30, r8
    7120:	84 a9       	ldd	r24, Z+52	; 0x34
    7122:	95 a9       	ldd	r25, Z+53	; 0x35
    7124:	a6 a9       	ldd	r26, Z+54	; 0x36
    7126:	b7 a9       	ldd	r27, Z+55	; 0x37
    7128:	84 15       	cp	r24, r4
    712a:	95 05       	cpc	r25, r5
    712c:	a6 05       	cpc	r26, r6
    712e:	b7 05       	cpc	r27, r7
    7130:	19 f1       	breq	.+70     	; 0x7178 <f_write+0x484>
    7132:	22 85       	ldd	r18, Z+10	; 0x0a
    7134:	33 85       	ldd	r19, Z+11	; 0x0b
    7136:	44 85       	ldd	r20, Z+12	; 0x0c
    7138:	55 85       	ldd	r21, Z+13	; 0x0d
    713a:	66 85       	ldd	r22, Z+14	; 0x0e
    713c:	77 85       	ldd	r23, Z+15	; 0x0f
    713e:	a0 a4       	ldd	r10, Z+40	; 0x28
    7140:	b1 a4       	ldd	r11, Z+41	; 0x29
    7142:	c2 a4       	ldd	r12, Z+42	; 0x2a
    7144:	d3 a4       	ldd	r13, Z+43	; 0x2b
    7146:	e4 a4       	ldd	r14, Z+44	; 0x2c
    7148:	f5 a4       	ldd	r15, Z+45	; 0x2d
    714a:	06 a5       	ldd	r16, Z+46	; 0x2e
    714c:	17 a5       	ldd	r17, Z+47	; 0x2f
    714e:	80 89       	ldd	r24, Z+16	; 0x10
    7150:	91 89       	ldd	r25, Z+17	; 0x11
    7152:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    7156:	81 f0       	breq	.+32     	; 0x7178 <f_write+0x484>
    7158:	78 f0       	brcs	.+30     	; 0x7178 <f_write+0x484>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
    715a:	01 e0       	ldi	r16, 0x01	; 1
    715c:	10 e0       	ldi	r17, 0x00	; 0
    715e:	a3 01       	movw	r20, r6
    7160:	92 01       	movw	r18, r4
    7162:	6d 85       	ldd	r22, Y+13	; 0x0d
    7164:	7e 85       	ldd	r23, Y+14	; 0x0e
    7166:	ad 81       	ldd	r26, Y+5	; 0x05
    7168:	be 81       	ldd	r27, Y+6	; 0x06
    716a:	11 96       	adiw	r26, 0x01	; 1
    716c:	8c 91       	ld	r24, X
    716e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <disk_read>
				fp->fptr < fp->obj.objsize &&
    7172:	89 2b       	or	r24, r25
    7174:	09 f0       	breq	.+2      	; 0x7178 <f_write+0x484>
    7176:	a5 ce       	rjmp	.-694    	; 0x6ec2 <f_write+0x1ce>
			fp->sect = sect;
    7178:	f4 01       	movw	r30, r8
    717a:	44 aa       	std	Z+52, r4	; 0x34
    717c:	55 aa       	std	Z+53, r5	; 0x35
    717e:	66 aa       	std	Z+54, r6	; 0x36
    7180:	77 aa       	std	Z+55, r7	; 0x37
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    7182:	d4 01       	movw	r26, r8
    7184:	98 96       	adiw	r26, 0x28	; 40
    7186:	8d 91       	ld	r24, X+
    7188:	9c 91       	ld	r25, X
    718a:	91 70       	andi	r25, 0x01	; 1
    718c:	20 e0       	ldi	r18, 0x00	; 0
    718e:	32 e0       	ldi	r19, 0x02	; 2
    7190:	28 1b       	sub	r18, r24
    7192:	39 0b       	sbc	r19, r25
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
    7194:	eb 80       	ldd	r14, Y+3	; 0x03
    7196:	fc 80       	ldd	r15, Y+4	; 0x04
    7198:	2e 15       	cp	r18, r14
    719a:	3f 05       	cpc	r19, r15
    719c:	08 f4       	brcc	.+2      	; 0x71a0 <f_write+0x4ac>
    719e:	79 01       	movw	r14, r18
	if (cnt != 0) {
    71a0:	a7 01       	movw	r20, r14
    71a2:	69 85       	ldd	r22, Y+9	; 0x09
    71a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    71a6:	ed 85       	ldd	r30, Y+13	; 0x0d
    71a8:	fe 85       	ldd	r31, Y+14	; 0x0e
    71aa:	8e 0f       	add	r24, r30
    71ac:	9f 1f       	adc	r25, r31
    71ae:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
    71b2:	d4 01       	movw	r26, r8
    71b4:	96 96       	adiw	r26, 0x26	; 38
    71b6:	8c 91       	ld	r24, X
    71b8:	96 97       	sbiw	r26, 0x26	; 38
    71ba:	80 68       	ori	r24, 0x80	; 128
    71bc:	96 96       	adiw	r26, 0x26	; 38
    71be:	8c 93       	st	X, r24
    71c0:	20 cf       	rjmp	.-448    	; 0x7002 <f_write+0x30e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    71c2:	47 e0       	ldi	r20, 0x07	; 7
    71c4:	50 e0       	ldi	r21, 0x00	; 0
    71c6:	58 87       	std	Y+8, r21	; 0x08
    71c8:	4f 83       	std	Y+7, r20	; 0x07
    71ca:	59 ce       	rjmp	.-846    	; 0x6e7e <f_write+0x18a>

000071cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    71cc:	a6 e4       	ldi	r26, 0x46	; 70
    71ce:	b0 e0       	ldi	r27, 0x00	; 0
    71d0:	ec ee       	ldi	r30, 0xEC	; 236
    71d2:	f8 e3       	ldi	r31, 0x38	; 56
    71d4:	0c 94 40 5a 	jmp	0xb480	; 0xb480 <__prologue_saves__+0x18>
    71d8:	7c 01       	movw	r14, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    71da:	be 01       	movw	r22, r28
    71dc:	6b 5b       	subi	r22, 0xBB	; 187
    71de:	7f 4f       	sbci	r23, 0xFF	; 255
    71e0:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
    71e4:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    71e6:	89 2b       	or	r24, r25
    71e8:	09 f0       	breq	.+2      	; 0x71ec <f_sync+0x20>
    71ea:	cd c0       	rjmp	.+410    	; 0x7386 <f_sync+0x1ba>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    71ec:	d7 01       	movw	r26, r14
    71ee:	96 96       	adiw	r26, 0x26	; 38
    71f0:	8c 91       	ld	r24, X
    71f2:	96 97       	sbiw	r26, 0x26	; 38
    71f4:	86 ff       	sbrs	r24, 6
    71f6:	c7 c0       	rjmp	.+398    	; 0x7386 <f_sync+0x1ba>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    71f8:	87 ff       	sbrs	r24, 7
    71fa:	1b c0       	rjmp	.+54     	; 0x7232 <f_sync+0x66>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    71fc:	d4 96       	adiw	r26, 0x34	; 52
    71fe:	2d 91       	ld	r18, X+
    7200:	3d 91       	ld	r19, X+
    7202:	4d 91       	ld	r20, X+
    7204:	5c 91       	ld	r21, X
    7206:	d7 97       	sbiw	r26, 0x37	; 55
    7208:	27 96       	adiw	r28, 0x07	; 7
    720a:	ee ad       	ldd	r30, Y+62	; 0x3e
    720c:	ff ad       	ldd	r31, Y+63	; 0x3f
    720e:	27 97       	sbiw	r28, 0x07	; 7
    7210:	01 e0       	ldi	r16, 0x01	; 1
    7212:	10 e0       	ldi	r17, 0x00	; 0
    7214:	b7 01       	movw	r22, r14
    7216:	62 5c       	subi	r22, 0xC2	; 194
    7218:	7f 4f       	sbci	r23, 0xFF	; 255
    721a:	81 81       	ldd	r24, Z+1	; 0x01
    721c:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    7220:	21 e0       	ldi	r18, 0x01	; 1
    7222:	30 e0       	ldi	r19, 0x00	; 0
    7224:	89 2b       	or	r24, r25
    7226:	09 f0       	breq	.+2      	; 0x722a <f_sync+0x5e>
    7228:	ae c0       	rjmp	.+348    	; 0x7386 <f_sync+0x1ba>
				fp->flag &= (BYTE)~FA_DIRTY;
    722a:	f7 01       	movw	r30, r14
    722c:	86 a1       	ldd	r24, Z+38	; 0x26
    722e:	8f 77       	andi	r24, 0x7F	; 127
    7230:	86 a3       	std	Z+38, r24	; 0x26
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
    7232:	27 96       	adiw	r28, 0x07	; 7
    7234:	8e ad       	ldd	r24, Y+62	; 0x3e
    7236:	9f ad       	ldd	r25, Y+63	; 0x3f
    7238:	27 97       	sbiw	r28, 0x07	; 7
    723a:	dc 01       	movw	r26, r24
    723c:	2c 91       	ld	r18, X
    723e:	24 30       	cpi	r18, 0x04	; 4
    7240:	09 f0       	breq	.+2      	; 0x7244 <f_sync+0x78>
    7242:	a7 c0       	rjmp	.+334    	; 0x7392 <f_sync+0x1c6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
    7244:	c7 01       	movw	r24, r14
    7246:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <fill_first_frag>
    724a:	9c 01       	movw	r18, r24
				if (res == FR_OK) {
    724c:	89 2b       	or	r24, r25
    724e:	09 f0       	breq	.+2      	; 0x7252 <f_sync+0x86>
    7250:	9a c0       	rjmp	.+308    	; 0x7386 <f_sync+0x1ba>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
    7252:	f7 01       	movw	r30, r14
    7254:	40 a9       	ldd	r20, Z+48	; 0x30
    7256:	51 a9       	ldd	r21, Z+49	; 0x31
    7258:	62 a9       	ldd	r22, Z+50	; 0x32
    725a:	73 a9       	ldd	r23, Z+51	; 0x33
    725c:	0f ef       	ldi	r16, 0xFF	; 255
    725e:	1f ef       	ldi	r17, 0xFF	; 255
    7260:	98 01       	movw	r18, r16
    7262:	c7 01       	movw	r24, r14
    7264:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <fill_last_frag>
    7268:	9c 01       	movw	r18, r24
				}
				if (res == FR_OK) {
    726a:	89 2b       	or	r24, r25
    726c:	09 f0       	breq	.+2      	; 0x7270 <f_sync+0xa4>
    726e:	8b c0       	rjmp	.+278    	; 0x7386 <f_sync+0x1ba>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
    7270:	b7 01       	movw	r22, r14
    7272:	ce 01       	movw	r24, r28
    7274:	01 96       	adiw	r24, 0x01	; 1
    7276:	0e 94 91 21 	call	0x4322	; 0x4322 <load_obj_xdir>
    727a:	9c 01       	movw	r18, r24
					if (res == FR_OK) {
    727c:	89 2b       	or	r24, r25
    727e:	09 f0       	breq	.+2      	; 0x7282 <f_sync+0xb6>
    7280:	82 c0       	rjmp	.+260    	; 0x7386 <f_sync+0x1ba>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
    7282:	27 96       	adiw	r28, 0x07	; 7
    7284:	ee ad       	ldd	r30, Y+62	; 0x3e
    7286:	ff ad       	ldd	r31, Y+63	; 0x3f
    7288:	27 97       	sbiw	r28, 0x07	; 7
    728a:	a5 85       	ldd	r26, Z+13	; 0x0d
    728c:	b6 85       	ldd	r27, Z+14	; 0x0e
    728e:	14 96       	adiw	r26, 0x04	; 4
    7290:	8c 91       	ld	r24, X
    7292:	14 97       	sbiw	r26, 0x04	; 4
    7294:	80 62       	ori	r24, 0x20	; 32
    7296:	14 96       	adiw	r26, 0x04	; 4
    7298:	8c 93       	st	X, r24
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
    729a:	25 85       	ldd	r18, Z+13	; 0x0d
    729c:	36 85       	ldd	r19, Z+14	; 0x0e
    729e:	d7 01       	movw	r26, r14
    72a0:	15 96       	adiw	r26, 0x05	; 5
    72a2:	8c 91       	ld	r24, X
    72a4:	81 60       	ori	r24, 0x01	; 1
    72a6:	d9 01       	movw	r26, r18
    72a8:	91 96       	adiw	r26, 0x21	; 33
    72aa:	8c 93       	st	X, r24
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
    72ac:	d7 01       	movw	r26, r14
    72ae:	16 96       	adiw	r26, 0x06	; 6
    72b0:	4d 91       	ld	r20, X+
    72b2:	5d 91       	ld	r21, X+
    72b4:	6d 91       	ld	r22, X+
    72b6:	7c 91       	ld	r23, X
    72b8:	19 97       	sbiw	r26, 0x09	; 9
    72ba:	a5 85       	ldd	r26, Z+13	; 0x0d
    72bc:	b6 85       	ldd	r27, Z+14	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    72be:	d4 96       	adiw	r26, 0x34	; 52
    72c0:	4d 93       	st	X+, r20
    72c2:	5d 93       	st	X+, r21
    72c4:	6d 93       	st	X+, r22
    72c6:	7c 93       	st	X, r23
    72c8:	d7 97       	sbiw	r26, 0x37	; 55
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
    72ca:	d7 01       	movw	r26, r14
    72cc:	1a 96       	adiw	r26, 0x0a	; 10
    72ce:	0c 91       	ld	r16, X
    72d0:	1a 97       	sbiw	r26, 0x0a	; 10
    72d2:	1b 96       	adiw	r26, 0x0b	; 11
    72d4:	1c 91       	ld	r17, X
    72d6:	1b 97       	sbiw	r26, 0x0b	; 11
    72d8:	1c 96       	adiw	r26, 0x0c	; 12
    72da:	2c 91       	ld	r18, X
    72dc:	1c 97       	sbiw	r26, 0x0c	; 12
    72de:	1d 96       	adiw	r26, 0x0d	; 13
    72e0:	3c 91       	ld	r19, X
    72e2:	1d 97       	sbiw	r26, 0x0d	; 13
    72e4:	1e 96       	adiw	r26, 0x0e	; 14
    72e6:	4c 91       	ld	r20, X
    72e8:	1e 97       	sbiw	r26, 0x0e	; 14
    72ea:	1f 96       	adiw	r26, 0x0f	; 15
    72ec:	5c 91       	ld	r21, X
    72ee:	1f 97       	sbiw	r26, 0x0f	; 15
    72f0:	50 96       	adiw	r26, 0x10	; 16
    72f2:	6c 91       	ld	r22, X
    72f4:	50 97       	sbiw	r26, 0x10	; 16
    72f6:	51 96       	adiw	r26, 0x11	; 17
    72f8:	7c 91       	ld	r23, X
    72fa:	85 85       	ldd	r24, Z+13	; 0x0d
    72fc:	96 85       	ldd	r25, Z+14	; 0x0e
    72fe:	c8 96       	adiw	r24, 0x38	; 56
    7300:	0e 94 ce 12 	call	0x259c	; 0x259c <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
    7304:	f7 01       	movw	r30, r14
    7306:	02 85       	ldd	r16, Z+10	; 0x0a
    7308:	13 85       	ldd	r17, Z+11	; 0x0b
    730a:	24 85       	ldd	r18, Z+12	; 0x0c
    730c:	35 85       	ldd	r19, Z+13	; 0x0d
    730e:	46 85       	ldd	r20, Z+14	; 0x0e
    7310:	57 85       	ldd	r21, Z+15	; 0x0f
    7312:	60 89       	ldd	r22, Z+16	; 0x10
    7314:	71 89       	ldd	r23, Z+17	; 0x11
    7316:	27 96       	adiw	r28, 0x07	; 7
    7318:	ee ad       	ldd	r30, Y+62	; 0x3e
    731a:	ff ad       	ldd	r31, Y+63	; 0x3f
    731c:	27 97       	sbiw	r28, 0x07	; 7
    731e:	85 85       	ldd	r24, Z+13	; 0x0d
    7320:	96 85       	ldd	r25, Z+14	; 0x0e
    7322:	88 96       	adiw	r24, 0x28	; 40
    7324:	0e 94 ce 12 	call	0x259c	; 0x259c <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
    7328:	27 96       	adiw	r28, 0x07	; 7
    732a:	ae ad       	ldd	r26, Y+62	; 0x3e
    732c:	bf ad       	ldd	r27, Y+63	; 0x3f
    732e:	27 97       	sbiw	r28, 0x07	; 7
    7330:	1d 96       	adiw	r26, 0x0d	; 13
    7332:	ed 91       	ld	r30, X+
    7334:	fc 91       	ld	r31, X
    7336:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val; val >>= 8;
    7338:	14 86       	std	Z+12, r1	; 0x0c
	*ptr++ = (BYTE)val; val >>= 8;
    733a:	15 86       	std	Z+13, r1	; 0x0d
	*ptr++ = (BYTE)val; val >>= 8;
    733c:	81 e2       	ldi	r24, 0x21	; 33
    733e:	86 87       	std	Z+14, r24	; 0x0e
	*ptr++ = (BYTE)val;
    7340:	8c e4       	ldi	r24, 0x4C	; 76
    7342:	87 87       	std	Z+15, r24	; 0x0f
						fs->dirbuf[XDIR_ModTime10] = 0;
    7344:	1d 96       	adiw	r26, 0x0d	; 13
    7346:	ed 91       	ld	r30, X+
    7348:	fc 91       	ld	r31, X
    734a:	1e 97       	sbiw	r26, 0x0e	; 14
    734c:	15 8a       	std	Z+21, r1	; 0x15
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
    734e:	1d 96       	adiw	r26, 0x0d	; 13
    7350:	ed 91       	ld	r30, X+
    7352:	fc 91       	ld	r31, X
	*ptr++ = (BYTE)val; val >>= 8;
    7354:	10 8a       	std	Z+16, r1	; 0x10
	*ptr++ = (BYTE)val; val >>= 8;
    7356:	11 8a       	std	Z+17, r1	; 0x11
	*ptr++ = (BYTE)val; val >>= 8;
    7358:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    735a:	13 8a       	std	Z+19, r1	; 0x13
						res = store_xdir(&dj);	/* Restore it to the directory */
    735c:	ce 01       	movw	r24, r28
    735e:	01 96       	adiw	r24, 0x01	; 1
    7360:	0e 94 1e 23 	call	0x463c	; 0x463c <store_xdir>
    7364:	9c 01       	movw	r18, r24
						if (res == FR_OK) {
    7366:	89 2b       	or	r24, r25
    7368:	71 f4       	brne	.+28     	; 0x7386 <f_sync+0x1ba>
							res = sync_fs(fs);
    736a:	27 96       	adiw	r28, 0x07	; 7
    736c:	8e ad       	ldd	r24, Y+62	; 0x3e
    736e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7370:	27 97       	sbiw	r28, 0x07	; 7
    7372:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sync_fs>
    7376:	9c 01       	movw	r18, r24
							fp->flag &= (BYTE)~FA_MODIFIED;
    7378:	d7 01       	movw	r26, r14
    737a:	96 96       	adiw	r26, 0x26	; 38
    737c:	8c 91       	ld	r24, X
    737e:	96 97       	sbiw	r26, 0x26	; 38
    7380:	8f 7b       	andi	r24, 0xBF	; 191
    7382:	96 96       	adiw	r26, 0x26	; 38
    7384:	8c 93       	st	X, r24
			}
		}
	}

	LEAVE_FF(fs, res);
}
    7386:	c9 01       	movw	r24, r18
    7388:	ca 5b       	subi	r28, 0xBA	; 186
    738a:	df 4f       	sbci	r29, 0xFF	; 255
    738c:	e6 e0       	ldi	r30, 0x06	; 6
    738e:	0c 94 5c 5a 	jmp	0xb4b8	; 0xb4b8 <__epilogue_restores__+0x18>
				res = move_window(fs, fp->dir_sect);
    7392:	f7 01       	movw	r30, r14
    7394:	40 ad       	ldd	r20, Z+56	; 0x38
    7396:	51 ad       	ldd	r21, Z+57	; 0x39
    7398:	62 ad       	ldd	r22, Z+58	; 0x3a
    739a:	73 ad       	ldd	r23, Z+59	; 0x3b
    739c:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    73a0:	9c 01       	movw	r18, r24
				if (res == FR_OK) {
    73a2:	89 2b       	or	r24, r25
    73a4:	81 f7       	brne	.-32     	; 0x7386 <f_sync+0x1ba>
					dir = fp->dir_ptr;
    73a6:	d7 01       	movw	r26, r14
    73a8:	dc 96       	adiw	r26, 0x3c	; 60
    73aa:	0d 91       	ld	r16, X+
    73ac:	1c 91       	ld	r17, X
    73ae:	dd 97       	sbiw	r26, 0x3d	; 61
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    73b0:	f8 01       	movw	r30, r16
    73b2:	83 85       	ldd	r24, Z+11	; 0x0b
    73b4:	80 62       	ori	r24, 0x20	; 32
    73b6:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    73b8:	16 96       	adiw	r26, 0x06	; 6
    73ba:	2d 91       	ld	r18, X+
    73bc:	3d 91       	ld	r19, X+
    73be:	4d 91       	ld	r20, X+
    73c0:	5c 91       	ld	r21, X
    73c2:	19 97       	sbiw	r26, 0x09	; 9
    73c4:	b8 01       	movw	r22, r16
    73c6:	8d 91       	ld	r24, X+
    73c8:	9c 91       	ld	r25, X
    73ca:	0e 94 3b 13 	call	0x2676	; 0x2676 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    73ce:	f7 01       	movw	r30, r14
    73d0:	82 85       	ldd	r24, Z+10	; 0x0a
    73d2:	93 85       	ldd	r25, Z+11	; 0x0b
    73d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    73d6:	b5 85       	ldd	r27, Z+13	; 0x0d
	*ptr++ = (BYTE)val; val >>= 8;
    73d8:	f8 01       	movw	r30, r16
    73da:	84 8f       	std	Z+28, r24	; 0x1c
    73dc:	95 8f       	std	Z+29, r25	; 0x1d
    73de:	a6 8f       	std	Z+30, r26	; 0x1e
    73e0:	b7 8f       	std	Z+31, r27	; 0x1f
    73e2:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    73e4:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    73e6:	81 e2       	ldi	r24, 0x21	; 33
    73e8:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    73ea:	8c e4       	ldi	r24, 0x4C	; 76
    73ec:	81 8f       	std	Z+25, r24	; 0x19
	*ptr++ = (BYTE)val; val >>= 8;
    73ee:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    73f0:	13 8a       	std	Z+19, r1	; 0x13
					fs->wflag = 1;
    73f2:	27 96       	adiw	r28, 0x07	; 7
    73f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    73f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    73f8:	27 97       	sbiw	r28, 0x07	; 7
    73fa:	21 e0       	ldi	r18, 0x01	; 1
    73fc:	dc 01       	movw	r26, r24
    73fe:	13 96       	adiw	r26, 0x03	; 3
    7400:	2c 93       	st	X, r18
					res = sync_fs(fs);					/* Restore it to the directory */
    7402:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sync_fs>
    7406:	9c 01       	movw	r18, r24
					fp->flag &= (BYTE)~FA_MODIFIED;
    7408:	f7 01       	movw	r30, r14
    740a:	86 a1       	ldd	r24, Z+38	; 0x26
    740c:	8f 7b       	andi	r24, 0xBF	; 191
    740e:	86 a3       	std	Z+38, r24	; 0x26
    7410:	ba cf       	rjmp	.-140    	; 0x7386 <f_sync+0x1ba>

00007412 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    7412:	a2 e0       	ldi	r26, 0x02	; 2
    7414:	b0 e0       	ldi	r27, 0x00	; 0
    7416:	ef e0       	ldi	r30, 0x0F	; 15
    7418:	fa e3       	ldi	r31, 0x3A	; 58
    741a:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
    741e:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    7420:	0e 94 e6 38 	call	0x71cc	; 0x71cc <f_sync>
    7424:	9c 01       	movw	r18, r24
	if (res == FR_OK)
    7426:	89 2b       	or	r24, r25
    7428:	61 f4       	brne	.+24     	; 0x7442 <f_close+0x30>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    742a:	be 01       	movw	r22, r28
    742c:	6f 5f       	subi	r22, 0xFF	; 255
    742e:	7f 4f       	sbci	r23, 0xFF	; 255
    7430:	c8 01       	movw	r24, r16
    7432:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
    7436:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    7438:	89 2b       	or	r24, r25
    743a:	19 f4       	brne	.+6      	; 0x7442 <f_close+0x30>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    743c:	f8 01       	movw	r30, r16
    743e:	11 82       	std	Z+1, r1	; 0x01
    7440:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    7442:	c9 01       	movw	r24, r18
    7444:	22 96       	adiw	r28, 0x02	; 2
    7446:	e4 e0       	ldi	r30, 0x04	; 4
    7448:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>

0000744c <f_chdrive>:
/*-----------------------------------------------------------------------*/

FRESULT f_chdrive (
	const TCHAR* path		/* Drive number to set */
)
{
    744c:	a2 e0       	ldi	r26, 0x02	; 2
    744e:	b0 e0       	ldi	r27, 0x00	; 0
    7450:	ec e2       	ldi	r30, 0x2C	; 44
    7452:	fa e3       	ldi	r31, 0x3A	; 58
    7454:	0c 94 44 5a 	jmp	0xb488	; 0xb488 <__prologue_saves__+0x20>
    7458:	9a 83       	std	Y+2, r25	; 0x02
    745a:	89 83       	std	Y+1, r24	; 0x01
	int vol;


	/* Get logical drive number */
	vol = get_ldnumber(&path);
    745c:	ce 01       	movw	r24, r28
    745e:	01 96       	adiw	r24, 0x01	; 1
    7460:	0e 94 84 13 	call	0x2708	; 0x2708 <get_ldnumber>
    7464:	9c 01       	movw	r18, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    7466:	8b e0       	ldi	r24, 0x0B	; 11
    7468:	90 e0       	ldi	r25, 0x00	; 0
    746a:	37 fd       	sbrc	r19, 7
    746c:	04 c0       	rjmp	.+8      	; 0x7476 <f_chdrive+0x2a>
	CurrVol = (BYTE)vol;	/* Set it as current volume */
    746e:	20 93 43 21 	sts	0x2143, r18	; 0x802143 <CurrVol>

	return FR_OK;
    7472:	90 e0       	ldi	r25, 0x00	; 0
    7474:	80 e0       	ldi	r24, 0x00	; 0
}
    7476:	22 96       	adiw	r28, 0x02	; 2
    7478:	e2 e0       	ldi	r30, 0x02	; 2
    747a:	0c 94 60 5a 	jmp	0xb4c0	; 0xb4c0 <__epilogue_restores__+0x20>

0000747e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
    747e:	a8 e4       	ldi	r26, 0x48	; 72
    7480:	b0 e0       	ldi	r27, 0x00	; 0
    7482:	e5 e4       	ldi	r30, 0x45	; 69
    7484:	fa e3       	ldi	r31, 0x3A	; 58
    7486:	0c 94 40 5a 	jmp	0xb480	; 0xb480 <__prologue_saves__+0x18>
    748a:	29 96       	adiw	r28, 0x09	; 9
    748c:	9f af       	std	Y+63, r25	; 0x3f
    748e:	8e af       	std	Y+62, r24	; 0x3e
    7490:	29 97       	sbiw	r28, 0x09	; 9
	FATFS *fs;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    7492:	40 e0       	ldi	r20, 0x00	; 0
    7494:	be 01       	movw	r22, r28
    7496:	6b 5b       	subi	r22, 0xBB	; 187
    7498:	7f 4f       	sbci	r23, 0xFF	; 255
    749a:	ce 01       	movw	r24, r28
    749c:	89 5b       	subi	r24, 0xB9	; 185
    749e:	9f 4f       	sbci	r25, 0xFF	; 255
    74a0:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    74a4:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    74a6:	89 2b       	or	r24, r25
    74a8:	f1 f5       	brne	.+124    	; 0x7526 <f_chdir+0xa8>
		dj.obj.fs = fs;
    74aa:	27 96       	adiw	r28, 0x07	; 7
    74ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    74ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    74b0:	27 97       	sbiw	r28, 0x07	; 7
    74b2:	9a 83       	std	Y+2, r25	; 0x02
    74b4:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
    74b6:	29 96       	adiw	r28, 0x09	; 9
    74b8:	6e ad       	ldd	r22, Y+62	; 0x3e
    74ba:	7f ad       	ldd	r23, Y+63	; 0x3f
    74bc:	29 97       	sbiw	r28, 0x09	; 9
    74be:	ce 01       	movw	r24, r28
    74c0:	01 96       	adiw	r24, 0x01	; 1
    74c2:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    74c6:	8c 01       	movw	r16, r24
		if (res == FR_OK) {					/* Follow completed */
    74c8:	00 97       	sbiw	r24, 0x00	; 0
    74ca:	09 f0       	breq	.+2      	; 0x74ce <f_chdir+0x50>
    74cc:	6e c0       	rjmp	.+220    	; 0x75aa <f_chdir+0x12c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
    74ce:	21 96       	adiw	r28, 0x01	; 1
    74d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    74d2:	21 97       	sbiw	r28, 0x01	; 1
    74d4:	87 ff       	sbrs	r24, 7
    74d6:	2d c0       	rjmp	.+90     	; 0x7532 <f_chdir+0xb4>
				fs->cdir = dj.obj.sclust;
    74d8:	27 96       	adiw	r28, 0x07	; 7
    74da:	ee ad       	ldd	r30, Y+62	; 0x3e
    74dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    74de:	27 97       	sbiw	r28, 0x07	; 7
    74e0:	8f 81       	ldd	r24, Y+7	; 0x07
    74e2:	98 85       	ldd	r25, Y+8	; 0x08
    74e4:	a9 85       	ldd	r26, Y+9	; 0x09
    74e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    74e8:	87 8b       	std	Z+23, r24	; 0x17
    74ea:	90 8f       	std	Z+24, r25	; 0x18
    74ec:	a1 8f       	std	Z+25, r26	; 0x19
    74ee:	b2 8f       	std	Z+26, r27	; 0x1a
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
    74f0:	80 81       	ld	r24, Z
    74f2:	84 30       	cpi	r24, 0x04	; 4
    74f4:	c1 f4       	brne	.+48     	; 0x7526 <f_chdir+0xa8>
					fs->cdc_scl = dj.obj.c_scl;
    74f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    74f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    74fa:	ad 8d       	ldd	r26, Y+29	; 0x1d
    74fc:	be 8d       	ldd	r27, Y+30	; 0x1e
    74fe:	83 8f       	std	Z+27, r24	; 0x1b
    7500:	94 8f       	std	Z+28, r25	; 0x1c
    7502:	a5 8f       	std	Z+29, r26	; 0x1d
    7504:	b6 8f       	std	Z+30, r27	; 0x1e
					fs->cdc_size = dj.obj.c_size;
    7506:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7508:	98 a1       	ldd	r25, Y+32	; 0x20
    750a:	a9 a1       	ldd	r26, Y+33	; 0x21
    750c:	ba a1       	ldd	r27, Y+34	; 0x22
    750e:	87 8f       	std	Z+31, r24	; 0x1f
    7510:	90 a3       	std	Z+32, r25	; 0x20
    7512:	a1 a3       	std	Z+33, r26	; 0x21
    7514:	b2 a3       	std	Z+34, r27	; 0x22
					fs->cdc_ofs = dj.obj.c_ofs;
    7516:	8b a1       	ldd	r24, Y+35	; 0x23
    7518:	9c a1       	ldd	r25, Y+36	; 0x24
    751a:	ad a1       	ldd	r26, Y+37	; 0x25
    751c:	be a1       	ldd	r27, Y+38	; 0x26
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
    751e:	83 a3       	std	Z+35, r24	; 0x23
    7520:	94 a3       	std	Z+36, r25	; 0x24
    7522:	a5 a3       	std	Z+37, r26	; 0x25
    7524:	b6 a3       	std	Z+38, r27	; 0x26
		}
#endif
	}

	LEAVE_FF(fs, res);
}
    7526:	c8 01       	movw	r24, r16
    7528:	c8 5b       	subi	r28, 0xB8	; 184
    752a:	df 4f       	sbci	r29, 0xFF	; 255
    752c:	e6 e0       	ldi	r30, 0x06	; 6
    752e:	0c 94 5c 5a 	jmp	0xb4b8	; 0xb4b8 <__epilogue_restores__+0x18>
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
    7532:	8d 81       	ldd	r24, Y+5	; 0x05
    7534:	84 ff       	sbrs	r24, 4
    7536:	3c c0       	rjmp	.+120    	; 0x75b0 <f_chdir+0x132>
					if (fs->fs_type == FS_EXFAT) {
    7538:	27 96       	adiw	r28, 0x07	; 7
    753a:	ee ac       	ldd	r14, Y+62	; 0x3e
    753c:	ff ac       	ldd	r15, Y+63	; 0x3f
    753e:	27 97       	sbiw	r28, 0x07	; 7
    7540:	d7 01       	movw	r26, r14
    7542:	8c 91       	ld	r24, X
    7544:	84 30       	cpi	r24, 0x04	; 4
    7546:	29 f5       	brne	.+74     	; 0x7592 <f_chdir+0x114>
						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
    7548:	1d 96       	adiw	r26, 0x0d	; 13
    754a:	8d 91       	ld	r24, X+
    754c:	9c 91       	ld	r25, X
    754e:	c4 96       	adiw	r24, 0x34	; 52
    7550:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    7554:	f7 01       	movw	r30, r14
    7556:	67 8b       	std	Z+23, r22	; 0x17
    7558:	70 8f       	std	Z+24, r23	; 0x18
    755a:	81 8f       	std	Z+25, r24	; 0x19
    755c:	92 8f       	std	Z+26, r25	; 0x1a
						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
    755e:	8f 81       	ldd	r24, Y+7	; 0x07
    7560:	98 85       	ldd	r25, Y+8	; 0x08
    7562:	a9 85       	ldd	r26, Y+9	; 0x09
    7564:	ba 85       	ldd	r27, Y+10	; 0x0a
    7566:	83 8f       	std	Z+27, r24	; 0x1b
    7568:	94 8f       	std	Z+28, r25	; 0x1c
    756a:	a5 8f       	std	Z+29, r26	; 0x1d
    756c:	b6 8f       	std	Z+30, r27	; 0x1e
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
    756e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7570:	9c 85       	ldd	r25, Y+12	; 0x0c
    7572:	ad 85       	ldd	r26, Y+13	; 0x0d
    7574:	be 85       	ldd	r27, Y+14	; 0x0e
    7576:	88 27       	eor	r24, r24
    7578:	2e 81       	ldd	r18, Y+6	; 0x06
    757a:	82 2b       	or	r24, r18
    757c:	87 8f       	std	Z+31, r24	; 0x1f
    757e:	90 a3       	std	Z+32, r25	; 0x20
    7580:	a1 a3       	std	Z+33, r26	; 0x21
    7582:	b2 a3       	std	Z+34, r27	; 0x22
						fs->cdc_ofs = dj.blk_ofs;
    7584:	25 96       	adiw	r28, 0x05	; 5
    7586:	8c ad       	ldd	r24, Y+60	; 0x3c
    7588:	9d ad       	ldd	r25, Y+61	; 0x3d
    758a:	ae ad       	ldd	r26, Y+62	; 0x3e
    758c:	bf ad       	ldd	r27, Y+63	; 0x3f
    758e:	25 97       	sbiw	r28, 0x05	; 5
    7590:	c6 cf       	rjmp	.-116    	; 0x751e <f_chdir+0xa0>
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
    7592:	6b a9       	ldd	r22, Y+51	; 0x33
    7594:	7c a9       	ldd	r23, Y+52	; 0x34
    7596:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    759a:	d7 01       	movw	r26, r14
    759c:	57 96       	adiw	r26, 0x17	; 23
    759e:	6d 93       	st	X+, r22
    75a0:	7d 93       	st	X+, r23
    75a2:	8d 93       	st	X+, r24
    75a4:	9c 93       	st	X, r25
    75a6:	5a 97       	sbiw	r26, 0x1a	; 26
    75a8:	be cf       	rjmp	.-132    	; 0x7526 <f_chdir+0xa8>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    75aa:	04 97       	sbiw	r24, 0x04	; 4
    75ac:	09 f0       	breq	.+2      	; 0x75b0 <f_chdir+0x132>
    75ae:	bb cf       	rjmp	.-138    	; 0x7526 <f_chdir+0xa8>
					res = FR_NO_PATH;		/* Reached but a file */
    75b0:	05 e0       	ldi	r16, 0x05	; 5
    75b2:	10 e0       	ldi	r17, 0x00	; 0
	LEAVE_FF(fs, res);
    75b4:	b8 cf       	rjmp	.-144    	; 0x7526 <f_chdir+0xa8>

000075b6 <f_getcwd>:
#if FF_FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of buff in unit of TCHAR */
)
{
    75b6:	a6 e6       	ldi	r26, 0x66	; 102
    75b8:	b1 e0       	ldi	r27, 0x01	; 1
    75ba:	e1 ee       	ldi	r30, 0xE1	; 225
    75bc:	fa e3       	ldi	r31, 0x3A	; 58
    75be:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    75c2:	cf 59       	subi	r28, 0x9F	; 159
    75c4:	de 4f       	sbci	r29, 0xFE	; 254
    75c6:	99 83       	std	Y+1, r25	; 0x01
    75c8:	88 83       	st	Y, r24
    75ca:	c1 56       	subi	r28, 0x61	; 97
    75cc:	d1 40       	sbci	r29, 0x01	; 1
    75ce:	7b 01       	movw	r14, r22
	FRESULT res;
	DIR dj;
	FATFS *fs;
	UINT i, n;
	DWORD ccl;
	TCHAR *tp = buff;
    75d0:	a8 2e       	mov	r10, r24
    75d2:	b9 2e       	mov	r11, r25
	FILINFO fno;
	DEF_NAMBUF


	/* Get logical drive */
	buff[0] = 0;	/* Set null string to get current volume */
    75d4:	d5 01       	movw	r26, r10
    75d6:	1c 92       	st	X, r1
	res = mount_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
    75d8:	40 e0       	ldi	r20, 0x00	; 0
    75da:	be 01       	movw	r22, r28
    75dc:	61 5a       	subi	r22, 0xA1	; 161
    75de:	7e 4f       	sbci	r23, 0xFE	; 254
    75e0:	ce 01       	movw	r24, r28
    75e2:	8f 59       	subi	r24, 0x9F	; 159
    75e4:	9e 4f       	sbci	r25, 0xFE	; 254
    75e6:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    75ea:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    75ec:	89 2b       	or	r24, r25
    75ee:	e1 f5       	brne	.+120    	; 0x7668 <f_getcwd+0xb2>
		dj.obj.fs = fs;
    75f0:	c1 5a       	subi	r28, 0xA1	; 161
    75f2:	de 4f       	sbci	r29, 0xFE	; 254
    75f4:	e8 81       	ld	r30, Y
    75f6:	f9 81       	ldd	r31, Y+1	; 0x01
    75f8:	cf 55       	subi	r28, 0x5F	; 95
    75fa:	d1 40       	sbci	r29, 0x01	; 1
    75fc:	c5 5e       	subi	r28, 0xE5	; 229
    75fe:	de 4f       	sbci	r29, 0xFE	; 254
    7600:	f9 83       	std	Y+1, r31	; 0x01
    7602:	e8 83       	st	Y, r30
    7604:	cb 51       	subi	r28, 0x1B	; 27
    7606:	d1 40       	sbci	r29, 0x01	; 1
		INIT_NAMBUF(fs);

		/* Follow parent directories and create the path */
		i = len;			/* Bottom of buffer (directory stack base) */
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
    7608:	80 81       	ld	r24, Z
    760a:	84 30       	cpi	r24, 0x04	; 4
    760c:	a9 f5       	brne	.+106    	; 0x7678 <f_getcwd+0xc2>
				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
				buff[--i] = '/';
			}
		}
		if (res == FR_OK) {
			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
    760e:	67 01       	movw	r12, r14
    7610:	b1 e0       	ldi	r27, 0x01	; 1
    7612:	cb 1a       	sub	r12, r27
    7614:	d1 08       	sbc	r13, r1
    7616:	cf 59       	subi	r28, 0x9F	; 159
    7618:	de 4f       	sbci	r29, 0xFE	; 254
    761a:	e8 81       	ld	r30, Y
    761c:	f9 81       	ldd	r31, Y+1	; 0x01
    761e:	c1 56       	subi	r28, 0x61	; 97
    7620:	d1 40       	sbci	r29, 0x01	; 1
    7622:	ec 0d       	add	r30, r12
    7624:	fd 1d       	adc	r31, r13
    7626:	8f e2       	ldi	r24, 0x2F	; 47
    7628:	80 83       	st	Z, r24
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
    762a:	95 01       	movw	r18, r10
    762c:	c6 01       	movw	r24, r12
#endif
			if (vl == 0) res = FR_NOT_ENOUGH_CORE;
#endif
			/* Add current directory path */
			if (res == FR_OK) {
				do *tp++ = buff[i++]; while (i < len);	/* Copy stacked path string */
    762e:	ac 01       	movw	r20, r24
    7630:	01 96       	adiw	r24, 0x01	; 1
    7632:	f9 01       	movw	r30, r18
    7634:	cf 59       	subi	r28, 0x9F	; 159
    7636:	de 4f       	sbci	r29, 0xFE	; 254
    7638:	a8 81       	ld	r26, Y
    763a:	b9 81       	ldd	r27, Y+1	; 0x01
    763c:	c1 56       	subi	r28, 0x61	; 97
    763e:	d1 40       	sbci	r29, 0x01	; 1
    7640:	a4 0f       	add	r26, r20
    7642:	b5 1f       	adc	r27, r21
    7644:	4c 91       	ld	r20, X
    7646:	40 83       	st	Z, r20
    7648:	2f 5f       	subi	r18, 0xFF	; 255
    764a:	3f 4f       	sbci	r19, 0xFF	; 255
    764c:	8e 15       	cp	r24, r14
    764e:	9f 05       	cpc	r25, r15
    7650:	70 f3       	brcs	.-36     	; 0x762e <f_getcwd+0x78>
    7652:	c6 01       	movw	r24, r12
    7654:	01 96       	adiw	r24, 0x01	; 1
    7656:	e8 16       	cp	r14, r24
    7658:	f9 06       	cpc	r15, r25
    765a:	08 f4       	brcc	.+2      	; 0x765e <f_getcwd+0xa8>
    765c:	db c0       	rjmp	.+438    	; 0x7814 <f_getcwd+0x25e>
    765e:	c7 01       	movw	r24, r14
    7660:	8c 19       	sub	r24, r12
    7662:	9d 09       	sbc	r25, r13
    7664:	a8 0e       	add	r10, r24
    7666:	b9 1e       	adc	r11, r25
			}
		}
		FREE_NAMBUF();
	}

	*tp = 0;
    7668:	d5 01       	movw	r26, r10
    766a:	1c 92       	st	X, r1
	LEAVE_FF(fs, res);
}
    766c:	c8 01       	movw	r24, r16
    766e:	ca 59       	subi	r28, 0x9A	; 154
    7670:	de 4f       	sbci	r29, 0xFE	; 254
    7672:	e2 e1       	ldi	r30, 0x12	; 18
    7674:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
    7678:	87 89       	ldd	r24, Z+23	; 0x17
    767a:	90 8d       	ldd	r25, Z+24	; 0x18
    767c:	a1 8d       	ldd	r26, Z+25	; 0x19
    767e:	b2 8d       	ldd	r27, Z+26	; 0x1a
    7680:	cf 5d       	subi	r28, 0xDF	; 223
    7682:	de 4f       	sbci	r29, 0xFE	; 254
    7684:	88 83       	st	Y, r24
    7686:	99 83       	std	Y+1, r25	; 0x01
    7688:	aa 83       	std	Y+2, r26	; 0x02
    768a:	bb 83       	std	Y+3, r27	; 0x03
    768c:	c1 52       	subi	r28, 0x21	; 33
    768e:	d1 40       	sbci	r29, 0x01	; 1
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
    7690:	67 01       	movw	r12, r14
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
    7692:	fe 01       	movw	r30, r28
    7694:	31 96       	adiw	r30, 0x01	; 1
    7696:	1f 01       	movw	r2, r30
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
    7698:	cf 5d       	subi	r28, 0xDF	; 223
    769a:	de 4f       	sbci	r29, 0xFE	; 254
    769c:	48 80       	ld	r4, Y
    769e:	59 80       	ldd	r5, Y+1	; 0x01
    76a0:	6a 80       	ldd	r6, Y+2	; 0x02
    76a2:	7b 80       	ldd	r7, Y+3	; 0x03
    76a4:	c1 52       	subi	r28, 0x21	; 33
    76a6:	d1 40       	sbci	r29, 0x01	; 1
    76a8:	41 14       	cp	r4, r1
    76aa:	51 04       	cpc	r5, r1
    76ac:	61 04       	cpc	r6, r1
    76ae:	71 04       	cpc	r7, r1
    76b0:	29 f4       	brne	.+10     	; 0x76bc <f_getcwd+0x106>
			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
    76b2:	ce 14       	cp	r12, r14
    76b4:	df 04       	cpc	r13, r15
    76b6:	09 f0       	breq	.+2      	; 0x76ba <f_getcwd+0x104>
    76b8:	b8 cf       	rjmp	.-144    	; 0x762a <f_getcwd+0x74>
    76ba:	a9 cf       	rjmp	.-174    	; 0x760e <f_getcwd+0x58>
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
    76bc:	40 e2       	ldi	r20, 0x20	; 32
    76be:	50 e0       	ldi	r21, 0x00	; 0
    76c0:	60 e0       	ldi	r22, 0x00	; 0
    76c2:	70 e0       	ldi	r23, 0x00	; 0
    76c4:	ce 01       	movw	r24, r28
    76c6:	85 5e       	subi	r24, 0xE5	; 229
    76c8:	9e 4f       	sbci	r25, 0xFE	; 254
    76ca:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    76ce:	9c 01       	movw	r18, r24
				if (res != FR_OK) break;
    76d0:	89 2b       	or	r24, r25
    76d2:	09 f0       	breq	.+2      	; 0x76d6 <f_getcwd+0x120>
    76d4:	a2 c0       	rjmp	.+324    	; 0x781a <f_getcwd+0x264>
				res = move_window(fs, dj.sect);
    76d6:	c7 5b       	subi	r28, 0xB7	; 183
    76d8:	de 4f       	sbci	r29, 0xFE	; 254
    76da:	48 81       	ld	r20, Y
    76dc:	59 81       	ldd	r21, Y+1	; 0x01
    76de:	6a 81       	ldd	r22, Y+2	; 0x02
    76e0:	7b 81       	ldd	r23, Y+3	; 0x03
    76e2:	c9 54       	subi	r28, 0x49	; 73
    76e4:	d1 40       	sbci	r29, 0x01	; 1
    76e6:	c1 5a       	subi	r28, 0xA1	; 161
    76e8:	de 4f       	sbci	r29, 0xFE	; 254
    76ea:	88 81       	ld	r24, Y
    76ec:	99 81       	ldd	r25, Y+1	; 0x01
    76ee:	cf 55       	subi	r28, 0x5F	; 95
    76f0:	d1 40       	sbci	r29, 0x01	; 1
    76f2:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    76f6:	9c 01       	movw	r18, r24
				if (res != FR_OK) break;
    76f8:	89 2b       	or	r24, r25
    76fa:	09 f0       	breq	.+2      	; 0x76fe <f_getcwd+0x148>
    76fc:	8e c0       	rjmp	.+284    	; 0x781a <f_getcwd+0x264>
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
    76fe:	c3 5b       	subi	r28, 0xB3	; 179
    7700:	de 4f       	sbci	r29, 0xFE	; 254
    7702:	68 81       	ld	r22, Y
    7704:	79 81       	ldd	r23, Y+1	; 0x01
    7706:	cd 54       	subi	r28, 0x4D	; 77
    7708:	d1 40       	sbci	r29, 0x01	; 1
    770a:	c1 5a       	subi	r28, 0xA1	; 161
    770c:	de 4f       	sbci	r29, 0xFE	; 254
    770e:	e8 81       	ld	r30, Y
    7710:	f9 81       	ldd	r31, Y+1	; 0x01
    7712:	cf 55       	subi	r28, 0x5F	; 95
    7714:	d1 40       	sbci	r29, 0x01	; 1
    7716:	80 81       	ld	r24, Z
    7718:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    771c:	cf 5d       	subi	r28, 0xDF	; 223
    771e:	de 4f       	sbci	r29, 0xFE	; 254
    7720:	68 83       	st	Y, r22
    7722:	79 83       	std	Y+1, r23	; 0x01
    7724:	8a 83       	std	Y+2, r24	; 0x02
    7726:	9b 83       	std	Y+3, r25	; 0x03
    7728:	c1 52       	subi	r28, 0x21	; 33
    772a:	d1 40       	sbci	r29, 0x01	; 1
				res = dir_sdi(&dj, 0);
    772c:	40 e0       	ldi	r20, 0x00	; 0
    772e:	50 e0       	ldi	r21, 0x00	; 0
    7730:	ba 01       	movw	r22, r20
    7732:	ce 01       	movw	r24, r28
    7734:	85 5e       	subi	r24, 0xE5	; 229
    7736:	9e 4f       	sbci	r25, 0xFE	; 254
    7738:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    773c:	9c 01       	movw	r18, r24
				if (res != FR_OK) break;
    773e:	89 2b       	or	r24, r25
    7740:	09 f0       	breq	.+2      	; 0x7744 <f_getcwd+0x18e>
    7742:	6b c0       	rjmp	.+214    	; 0x781a <f_getcwd+0x264>
					res = DIR_READ_FILE(&dj);
    7744:	70 e0       	ldi	r23, 0x00	; 0
    7746:	60 e0       	ldi	r22, 0x00	; 0
    7748:	ce 01       	movw	r24, r28
    774a:	85 5e       	subi	r24, 0xE5	; 229
    774c:	9e 4f       	sbci	r25, 0xFE	; 254
    774e:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <dir_read>
    7752:	4c 01       	movw	r8, r24
					if (res != FR_OK) break;
    7754:	00 97       	sbiw	r24, 0x00	; 0
    7756:	09 f0       	breq	.+2      	; 0x775a <f_getcwd+0x1a4>
    7758:	65 c0       	rjmp	.+202    	; 0x7824 <f_getcwd+0x26e>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
    775a:	c3 5b       	subi	r28, 0xB3	; 179
    775c:	de 4f       	sbci	r29, 0xFE	; 254
    775e:	68 81       	ld	r22, Y
    7760:	79 81       	ldd	r23, Y+1	; 0x01
    7762:	cd 54       	subi	r28, 0x4D	; 77
    7764:	d1 40       	sbci	r29, 0x01	; 1
    7766:	c1 5a       	subi	r28, 0xA1	; 161
    7768:	de 4f       	sbci	r29, 0xFE	; 254
    776a:	e8 81       	ld	r30, Y
    776c:	f9 81       	ldd	r31, Y+1	; 0x01
    776e:	cf 55       	subi	r28, 0x5F	; 95
    7770:	d1 40       	sbci	r29, 0x01	; 1
    7772:	80 81       	ld	r24, Z
    7774:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    7778:	cd 59       	subi	r28, 0x9D	; 157
    777a:	de 4f       	sbci	r29, 0xFE	; 254
    777c:	68 83       	st	Y, r22
    777e:	79 83       	std	Y+1, r23	; 0x01
    7780:	8a 83       	std	Y+2, r24	; 0x02
    7782:	9b 83       	std	Y+3, r25	; 0x03
    7784:	c3 56       	subi	r28, 0x63	; 99
    7786:	d1 40       	sbci	r29, 0x01	; 1
    7788:	64 15       	cp	r22, r4
    778a:	75 05       	cpc	r23, r5
    778c:	86 05       	cpc	r24, r6
    778e:	97 05       	cpc	r25, r7
    7790:	89 f0       	breq	.+34     	; 0x77b4 <f_getcwd+0x1fe>
					res = dir_next(&dj, 0);
    7792:	70 e0       	ldi	r23, 0x00	; 0
    7794:	60 e0       	ldi	r22, 0x00	; 0
    7796:	ce 01       	movw	r24, r28
    7798:	85 5e       	subi	r24, 0xE5	; 229
    779a:	9e 4f       	sbci	r25, 0xFE	; 254
    779c:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
				} while (res == FR_OK);
    77a0:	00 97       	sbiw	r24, 0x00	; 0
    77a2:	81 f2       	breq	.-96     	; 0x7744 <f_getcwd+0x18e>
    77a4:	8c 01       	movw	r16, r24
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    77a6:	04 30       	cpi	r16, 0x04	; 4
    77a8:	11 05       	cpc	r17, r1
    77aa:	09 f0       	breq	.+2      	; 0x77ae <f_getcwd+0x1f8>
    77ac:	5d cf       	rjmp	.-326    	; 0x7668 <f_getcwd+0xb2>
    77ae:	02 e0       	ldi	r16, 0x02	; 2
    77b0:	10 e0       	ldi	r17, 0x00	; 0
    77b2:	5a cf       	rjmp	.-332    	; 0x7668 <f_getcwd+0xb2>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
    77b4:	b1 01       	movw	r22, r2
    77b6:	ce 01       	movw	r24, r28
    77b8:	85 5e       	subi	r24, 0xE5	; 229
    77ba:	9e 4f       	sbci	r25, 0xFE	; 254
    77bc:	0e 94 fd 13 	call	0x27fa	; 0x27fa <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;	/* Name length */
    77c0:	fe 01       	movw	r30, r28
    77c2:	7b 96       	adiw	r30, 0x1b	; 27
    77c4:	21 91       	ld	r18, Z+
    77c6:	c4 01       	movw	r24, r8
    77c8:	3f ef       	ldi	r19, 0xFF	; 255
    77ca:	83 1a       	sub	r8, r19
    77cc:	93 0a       	sbc	r9, r19
    77ce:	21 11       	cpse	r18, r1
    77d0:	f9 cf       	rjmp	.-14     	; 0x77c4 <f_getcwd+0x20e>
				if (i < n + 1) {	/* Insufficient space to store the path name? */
    77d2:	c8 14       	cp	r12, r8
    77d4:	d9 04       	cpc	r13, r9
    77d6:	18 f1       	brcs	.+70     	; 0x781e <f_getcwd+0x268>
    77d8:	d1 01       	movw	r26, r2
    77da:	a8 0f       	add	r26, r24
    77dc:	b9 1f       	adc	r27, r25
    77de:	96 01       	movw	r18, r12
				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
    77e0:	21 50       	subi	r18, 0x01	; 1
    77e2:	31 09       	sbc	r19, r1
    77e4:	cf 59       	subi	r28, 0x9F	; 159
    77e6:	de 4f       	sbci	r29, 0xFE	; 254
    77e8:	e8 81       	ld	r30, Y
    77ea:	f9 81       	ldd	r31, Y+1	; 0x01
    77ec:	c1 56       	subi	r28, 0x61	; 97
    77ee:	d1 40       	sbci	r29, 0x01	; 1
    77f0:	e2 0f       	add	r30, r18
    77f2:	f3 1f       	adc	r31, r19
    77f4:	a2 15       	cp	r26, r2
    77f6:	b3 05       	cpc	r27, r3
    77f8:	39 f4       	brne	.+14     	; 0x7808 <f_getcwd+0x252>
    77fa:	80 95       	com	r24
    77fc:	90 95       	com	r25
    77fe:	c8 0e       	add	r12, r24
    7800:	d9 1e       	adc	r13, r25
				buff[--i] = '/';
    7802:	8f e2       	ldi	r24, 0x2F	; 47
    7804:	80 83       	st	Z, r24
    7806:	48 cf       	rjmp	.-368    	; 0x7698 <f_getcwd+0xe2>
				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
    7808:	59 96       	adiw	r26, 0x19	; 25
    780a:	4c 91       	ld	r20, X
    780c:	59 97       	sbiw	r26, 0x19	; 25
    780e:	40 83       	st	Z, r20
    7810:	11 97       	sbiw	r26, 0x01	; 1
    7812:	e6 cf       	rjmp	.-52     	; 0x77e0 <f_getcwd+0x22a>
				do *tp++ = buff[i++]; while (i < len);	/* Copy stacked path string */
    7814:	81 e0       	ldi	r24, 0x01	; 1
    7816:	90 e0       	ldi	r25, 0x00	; 0
    7818:	25 cf       	rjmp	.-438    	; 0x7664 <f_getcwd+0xae>
    781a:	89 01       	movw	r16, r18
    781c:	25 cf       	rjmp	.-438    	; 0x7668 <f_getcwd+0xb2>
					res = FR_NOT_ENOUGH_CORE; break;
    781e:	01 e1       	ldi	r16, 0x11	; 17
    7820:	10 e0       	ldi	r17, 0x00	; 0
    7822:	22 cf       	rjmp	.-444    	; 0x7668 <f_getcwd+0xb2>
    7824:	8c 01       	movw	r16, r24
    7826:	bf cf       	rjmp	.-130    	; 0x77a6 <f_getcwd+0x1f0>

00007828 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    7828:	a2 e2       	ldi	r26, 0x22	; 34
    782a:	b0 e0       	ldi	r27, 0x00	; 0
    782c:	ea e1       	ldi	r30, 0x1A	; 26
    782e:	fc e3       	ldi	r31, 0x3C	; 60
    7830:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    7834:	1c 01       	movw	r2, r24
    7836:	0b 87       	std	Y+11, r16	; 0x0b
    7838:	1c 87       	std	Y+12, r17	; 0x0c
    783a:	2d 87       	std	Y+13, r18	; 0x0d
    783c:	3e 87       	std	Y+14, r19	; 0x0e
    783e:	4f 87       	std	Y+15, r20	; 0x0f
    7840:	58 8b       	std	Y+16, r21	; 0x10
    7842:	4b 01       	movw	r8, r22
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
    7844:	be 01       	movw	r22, r28
    7846:	6f 5f       	subi	r22, 0xFF	; 255
    7848:	7f 4f       	sbci	r23, 0xFF	; 255
    784a:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
    784e:	89 8b       	std	Y+17, r24	; 0x11
    7850:	9a 8b       	std	Y+18, r25	; 0x12
	if (res == FR_OK) res = (FRESULT)fp->err;
    7852:	29 89       	ldd	r18, Y+17	; 0x11
    7854:	3a 89       	ldd	r19, Y+18	; 0x12
    7856:	23 2b       	or	r18, r19
    7858:	09 f0       	breq	.+2      	; 0x785c <f_lseek+0x34>
    785a:	e6 c2       	rjmp	.+1484   	; 0x7e28 <f_lseek+0x600>
    785c:	d1 01       	movw	r26, r2
    785e:	97 96       	adiw	r26, 0x27	; 39
    7860:	8c 91       	ld	r24, X
    7862:	97 97       	sbiw	r26, 0x27	; 39
    7864:	e8 2f       	mov	r30, r24
    7866:	f0 e0       	ldi	r31, 0x00	; 0
    7868:	fa 8b       	std	Y+18, r31	; 0x12
    786a:	e9 8b       	std	Y+17, r30	; 0x11
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
    786c:	81 11       	cpse	r24, r1
    786e:	dc c2       	rjmp	.+1464   	; 0x7e28 <f_lseek+0x600>
    7870:	e9 81       	ldd	r30, Y+1	; 0x01
    7872:	fa 81       	ldd	r31, Y+2	; 0x02
    7874:	80 81       	ld	r24, Z
    7876:	84 30       	cpi	r24, 0x04	; 4
    7878:	09 f4       	brne	.+2      	; 0x787c <f_lseek+0x54>
    787a:	2e c1       	rjmp	.+604    	; 0x7ad8 <f_lseek+0x2b0>
#endif

	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
    787c:	e9 81       	ldd	r30, Y+1	; 0x01
    787e:	fa 81       	ldd	r31, Y+2	; 0x02
    7880:	80 81       	ld	r24, Z
    7882:	84 30       	cpi	r24, 0x04	; 4
    7884:	09 f0       	breq	.+2      	; 0x7888 <f_lseek+0x60>
    7886:	3a c1       	rjmp	.+628    	; 0x7afc <f_lseek+0x2d4>
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    7888:	d1 01       	movw	r26, r2
    788a:	1a 96       	adiw	r26, 0x0a	; 10
    788c:	4c 90       	ld	r4, X
    788e:	1a 97       	sbiw	r26, 0x0a	; 10
    7890:	1b 96       	adiw	r26, 0x0b	; 11
    7892:	5c 90       	ld	r5, X
    7894:	1b 97       	sbiw	r26, 0x0b	; 11
    7896:	1c 96       	adiw	r26, 0x0c	; 12
    7898:	6c 90       	ld	r6, X
    789a:	1c 97       	sbiw	r26, 0x0c	; 12
    789c:	1d 96       	adiw	r26, 0x0d	; 13
    789e:	7c 90       	ld	r7, X
    78a0:	1d 97       	sbiw	r26, 0x0d	; 13
    78a2:	1e 96       	adiw	r26, 0x0e	; 14
    78a4:	bc 91       	ld	r27, X
    78a6:	bb 83       	std	Y+3, r27	; 0x03
    78a8:	d1 01       	movw	r26, r2
    78aa:	1f 96       	adiw	r26, 0x0f	; 15
    78ac:	bc 91       	ld	r27, X
    78ae:	bb 8b       	std	Y+19, r27	; 0x13
    78b0:	d1 01       	movw	r26, r2
    78b2:	50 96       	adiw	r26, 0x10	; 16
    78b4:	bc 91       	ld	r27, X
    78b6:	bf 8b       	std	Y+23, r27	; 0x17
    78b8:	d1 01       	movw	r26, r2
    78ba:	51 96       	adiw	r26, 0x11	; 17
    78bc:	bc 91       	ld	r27, X
    78be:	b8 8f       	std	Y+24, r27	; 0x18
    78c0:	92 01       	movw	r18, r4
    78c2:	a3 01       	movw	r20, r6
    78c4:	6b 81       	ldd	r22, Y+3	; 0x03
    78c6:	7b 89       	ldd	r23, Y+19	; 0x13
    78c8:	8f 89       	ldd	r24, Y+23	; 0x17
    78ca:	9b 2f       	mov	r25, r27
    78cc:	ab 84       	ldd	r10, Y+11	; 0x0b
    78ce:	bc 84       	ldd	r11, Y+12	; 0x0c
    78d0:	cd 84       	ldd	r12, Y+13	; 0x0d
    78d2:	de 84       	ldd	r13, Y+14	; 0x0e
    78d4:	ef 84       	ldd	r14, Y+15	; 0x0f
    78d6:	f8 88       	ldd	r15, Y+16	; 0x10
    78d8:	84 01       	movw	r16, r8
    78da:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    78de:	68 f4       	brcc	.+26     	; 0x78fa <f_lseek+0xd2>
    78e0:	d1 01       	movw	r26, r2
    78e2:	96 96       	adiw	r26, 0x26	; 38
    78e4:	8c 91       	ld	r24, X
    78e6:	81 fd       	sbrc	r24, 1
    78e8:	08 c0       	rjmp	.+16     	; 0x78fa <f_lseek+0xd2>
    78ea:	4b 86       	std	Y+11, r4	; 0x0b
    78ec:	5c 86       	std	Y+12, r5	; 0x0c
    78ee:	6d 86       	std	Y+13, r6	; 0x0d
    78f0:	7e 86       	std	Y+14, r7	; 0x0e
    78f2:	6f 87       	std	Y+15, r22	; 0x0f
    78f4:	78 8b       	std	Y+16, r23	; 0x10
    78f6:	8f 88       	ldd	r8, Y+23	; 0x17
    78f8:	99 2e       	mov	r9, r25
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
    78fa:	d1 01       	movw	r26, r2
    78fc:	98 96       	adiw	r26, 0x28	; 40
    78fe:	bc 91       	ld	r27, X
    7900:	bb 83       	std	Y+3, r27	; 0x03
    7902:	d1 01       	movw	r26, r2
    7904:	99 96       	adiw	r26, 0x29	; 41
    7906:	4c 90       	ld	r4, X
    7908:	99 97       	sbiw	r26, 0x29	; 41
    790a:	9a 96       	adiw	r26, 0x2a	; 42
    790c:	5c 90       	ld	r5, X
    790e:	9a 97       	sbiw	r26, 0x2a	; 42
    7910:	9b 96       	adiw	r26, 0x2b	; 43
    7912:	6c 90       	ld	r6, X
    7914:	9b 97       	sbiw	r26, 0x2b	; 43
    7916:	9c 96       	adiw	r26, 0x2c	; 44
    7918:	7c 90       	ld	r7, X
    791a:	9c 97       	sbiw	r26, 0x2c	; 44
    791c:	9d 96       	adiw	r26, 0x2d	; 45
    791e:	bc 91       	ld	r27, X
    7920:	bf 8b       	std	Y+23, r27	; 0x17
    7922:	d1 01       	movw	r26, r2
    7924:	9e 96       	adiw	r26, 0x2e	; 46
    7926:	bc 91       	ld	r27, X
    7928:	b8 8f       	std	Y+24, r27	; 0x18
    792a:	d1 01       	movw	r26, r2
    792c:	9f 96       	adiw	r26, 0x2f	; 47
    792e:	bc 91       	ld	r27, X
    7930:	b9 8f       	std	Y+25, r27	; 0x19
		fp->fptr = nsect = 0;
    7932:	d1 01       	movw	r26, r2
    7934:	98 96       	adiw	r26, 0x28	; 40
    7936:	1c 92       	st	X, r1
    7938:	98 97       	sbiw	r26, 0x28	; 40
    793a:	99 96       	adiw	r26, 0x29	; 41
    793c:	1c 92       	st	X, r1
    793e:	99 97       	sbiw	r26, 0x29	; 41
    7940:	9a 96       	adiw	r26, 0x2a	; 42
    7942:	1c 92       	st	X, r1
    7944:	9a 97       	sbiw	r26, 0x2a	; 42
    7946:	9b 96       	adiw	r26, 0x2b	; 43
    7948:	1c 92       	st	X, r1
    794a:	9b 97       	sbiw	r26, 0x2b	; 43
    794c:	9c 96       	adiw	r26, 0x2c	; 44
    794e:	1c 92       	st	X, r1
    7950:	9c 97       	sbiw	r26, 0x2c	; 44
    7952:	9d 96       	adiw	r26, 0x2d	; 45
    7954:	1c 92       	st	X, r1
    7956:	9d 97       	sbiw	r26, 0x2d	; 45
    7958:	9e 96       	adiw	r26, 0x2e	; 46
    795a:	1c 92       	st	X, r1
    795c:	9e 97       	sbiw	r26, 0x2e	; 46
    795e:	9f 96       	adiw	r26, 0x2f	; 47
    7960:	1c 92       	st	X, r1
		if (ofs > 0) {
    7962:	2b 85       	ldd	r18, Y+11	; 0x0b
    7964:	3c 85       	ldd	r19, Y+12	; 0x0c
    7966:	4d 85       	ldd	r20, Y+13	; 0x0d
    7968:	5e 85       	ldd	r21, Y+14	; 0x0e
    796a:	6f 85       	ldd	r22, Y+15	; 0x0f
    796c:	78 89       	ldd	r23, Y+16	; 0x10
    796e:	c4 01       	movw	r24, r8
    7970:	a0 e0       	ldi	r26, 0x00	; 0
    7972:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    7976:	09 f0       	breq	.+2      	; 0x797a <f_lseek+0x152>
    7978:	e0 c0       	rjmp	.+448    	; 0x7b3a <f_lseek+0x312>
		fp->fptr = nsect = 0;
    797a:	41 2c       	mov	r4, r1
    797c:	51 2c       	mov	r5, r1
    797e:	32 01       	movw	r6, r4
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    7980:	d1 01       	movw	r26, r2
    7982:	98 96       	adiw	r26, 0x28	; 40
    7984:	fc 91       	ld	r31, X
    7986:	98 97       	sbiw	r26, 0x28	; 40
    7988:	99 96       	adiw	r26, 0x29	; 41
    798a:	ec 91       	ld	r30, X
    798c:	99 97       	sbiw	r26, 0x29	; 41
    798e:	9a 96       	adiw	r26, 0x2a	; 42
    7990:	bc 91       	ld	r27, X
    7992:	bb 83       	std	Y+3, r27	; 0x03
    7994:	d1 01       	movw	r26, r2
    7996:	9b 96       	adiw	r26, 0x2b	; 43
    7998:	bc 91       	ld	r27, X
    799a:	bb 87       	std	Y+11, r27	; 0x0b
    799c:	d1 01       	movw	r26, r2
    799e:	9c 96       	adiw	r26, 0x2c	; 44
    79a0:	8c 90       	ld	r8, X
    79a2:	9c 97       	sbiw	r26, 0x2c	; 44
    79a4:	9d 96       	adiw	r26, 0x2d	; 45
    79a6:	9c 90       	ld	r9, X
    79a8:	9d 97       	sbiw	r26, 0x2d	; 45
    79aa:	9e 96       	adiw	r26, 0x2e	; 46
    79ac:	bc 91       	ld	r27, X
    79ae:	bc 87       	std	Y+12, r27	; 0x0c
    79b0:	d1 01       	movw	r26, r2
    79b2:	9f 96       	adiw	r26, 0x2f	; 47
    79b4:	bc 91       	ld	r27, X
    79b6:	bd 87       	std	Y+13, r27	; 0x0d
    79b8:	d1 01       	movw	r26, r2
    79ba:	1a 96       	adiw	r26, 0x0a	; 10
    79bc:	ac 90       	ld	r10, X
    79be:	1a 97       	sbiw	r26, 0x0a	; 10
    79c0:	1b 96       	adiw	r26, 0x0b	; 11
    79c2:	bc 90       	ld	r11, X
    79c4:	1b 97       	sbiw	r26, 0x0b	; 11
    79c6:	1c 96       	adiw	r26, 0x0c	; 12
    79c8:	cc 90       	ld	r12, X
    79ca:	1c 97       	sbiw	r26, 0x0c	; 12
    79cc:	1d 96       	adiw	r26, 0x0d	; 13
    79ce:	dc 90       	ld	r13, X
    79d0:	1d 97       	sbiw	r26, 0x0d	; 13
    79d2:	1e 96       	adiw	r26, 0x0e	; 14
    79d4:	ec 90       	ld	r14, X
    79d6:	1e 97       	sbiw	r26, 0x0e	; 14
    79d8:	1f 96       	adiw	r26, 0x0f	; 15
    79da:	fc 90       	ld	r15, X
    79dc:	1f 97       	sbiw	r26, 0x0f	; 15
    79de:	50 96       	adiw	r26, 0x10	; 16
    79e0:	0c 91       	ld	r16, X
    79e2:	50 97       	sbiw	r26, 0x10	; 16
    79e4:	51 96       	adiw	r26, 0x11	; 17
    79e6:	1c 91       	ld	r17, X
    79e8:	51 97       	sbiw	r26, 0x11	; 17
    79ea:	2f 2f       	mov	r18, r31
    79ec:	3e 2f       	mov	r19, r30
    79ee:	4b 81       	ldd	r20, Y+3	; 0x03
    79f0:	5b 85       	ldd	r21, Y+11	; 0x0b
    79f2:	b4 01       	movw	r22, r8
    79f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    79f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    79f8:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    79fc:	f9 f0       	breq	.+62     	; 0x7a3c <f_lseek+0x214>
    79fe:	f0 f0       	brcs	.+60     	; 0x7a3c <f_lseek+0x214>
			fp->obj.objsize = fp->fptr;
    7a00:	1a 96       	adiw	r26, 0x0a	; 10
    7a02:	fc 93       	st	X, r31
    7a04:	1a 97       	sbiw	r26, 0x0a	; 10
    7a06:	1b 96       	adiw	r26, 0x0b	; 11
    7a08:	ec 93       	st	X, r30
    7a0a:	1b 97       	sbiw	r26, 0x0b	; 11
    7a0c:	1c 96       	adiw	r26, 0x0c	; 12
    7a0e:	4c 93       	st	X, r20
    7a10:	1c 97       	sbiw	r26, 0x0c	; 12
    7a12:	1d 96       	adiw	r26, 0x0d	; 13
    7a14:	5c 93       	st	X, r21
    7a16:	1d 97       	sbiw	r26, 0x0d	; 13
    7a18:	1e 96       	adiw	r26, 0x0e	; 14
    7a1a:	8c 92       	st	X, r8
    7a1c:	1e 97       	sbiw	r26, 0x0e	; 14
    7a1e:	1f 96       	adiw	r26, 0x0f	; 15
    7a20:	9c 92       	st	X, r9
    7a22:	1f 97       	sbiw	r26, 0x0f	; 15
    7a24:	50 96       	adiw	r26, 0x10	; 16
    7a26:	8c 93       	st	X, r24
    7a28:	50 97       	sbiw	r26, 0x10	; 16
    7a2a:	51 96       	adiw	r26, 0x11	; 17
    7a2c:	9c 93       	st	X, r25
    7a2e:	51 97       	sbiw	r26, 0x11	; 17
			fp->flag |= FA_MODIFIED;
    7a30:	96 96       	adiw	r26, 0x26	; 38
    7a32:	8c 91       	ld	r24, X
    7a34:	96 97       	sbiw	r26, 0x26	; 38
    7a36:	80 64       	ori	r24, 0x40	; 64
    7a38:	96 96       	adiw	r26, 0x26	; 38
    7a3a:	8c 93       	st	X, r24
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    7a3c:	3e 2f       	mov	r19, r30
    7a3e:	31 70       	andi	r19, 0x01	; 1
    7a40:	2f 2f       	mov	r18, r31
    7a42:	40 e0       	ldi	r20, 0x00	; 0
    7a44:	50 e0       	ldi	r21, 0x00	; 0
    7a46:	60 e0       	ldi	r22, 0x00	; 0
    7a48:	70 e0       	ldi	r23, 0x00	; 0
    7a4a:	80 e0       	ldi	r24, 0x00	; 0
    7a4c:	90 e0       	ldi	r25, 0x00	; 0
    7a4e:	a0 e0       	ldi	r26, 0x00	; 0
    7a50:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    7a54:	09 f4       	brne	.+2      	; 0x7a58 <f_lseek+0x230>
    7a56:	e8 c1       	rjmp	.+976    	; 0x7e28 <f_lseek+0x600>
    7a58:	d1 01       	movw	r26, r2
    7a5a:	d4 96       	adiw	r26, 0x34	; 52
    7a5c:	2d 91       	ld	r18, X+
    7a5e:	3d 91       	ld	r19, X+
    7a60:	4d 91       	ld	r20, X+
    7a62:	5c 91       	ld	r21, X
    7a64:	d7 97       	sbiw	r26, 0x37	; 55
    7a66:	24 15       	cp	r18, r4
    7a68:	35 05       	cpc	r19, r5
    7a6a:	46 05       	cpc	r20, r6
    7a6c:	57 05       	cpc	r21, r7
    7a6e:	09 f4       	brne	.+2      	; 0x7a72 <f_lseek+0x24a>
    7a70:	db c1       	rjmp	.+950    	; 0x7e28 <f_lseek+0x600>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    7a72:	71 01       	movw	r14, r2
    7a74:	be e3       	ldi	r27, 0x3E	; 62
    7a76:	eb 0e       	add	r14, r27
    7a78:	f1 1c       	adc	r15, r1
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
    7a7a:	f1 01       	movw	r30, r2
    7a7c:	86 a1       	ldd	r24, Z+38	; 0x26
    7a7e:	87 ff       	sbrs	r24, 7
    7a80:	12 c0       	rjmp	.+36     	; 0x7aa6 <f_lseek+0x27e>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    7a82:	e9 81       	ldd	r30, Y+1	; 0x01
    7a84:	fa 81       	ldd	r31, Y+2	; 0x02
    7a86:	01 e0       	ldi	r16, 0x01	; 1
    7a88:	10 e0       	ldi	r17, 0x00	; 0
    7a8a:	b7 01       	movw	r22, r14
    7a8c:	81 81       	ldd	r24, Z+1	; 0x01
    7a8e:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    7a92:	89 2b       	or	r24, r25
    7a94:	09 f0       	breq	.+2      	; 0x7a98 <f_lseek+0x270>
    7a96:	d4 c1       	rjmp	.+936    	; 0x7e40 <f_lseek+0x618>
				fp->flag &= (BYTE)~FA_DIRTY;
    7a98:	d1 01       	movw	r26, r2
    7a9a:	96 96       	adiw	r26, 0x26	; 38
    7a9c:	8c 91       	ld	r24, X
    7a9e:	96 97       	sbiw	r26, 0x26	; 38
    7aa0:	8f 77       	andi	r24, 0x7F	; 127
    7aa2:	96 96       	adiw	r26, 0x26	; 38
    7aa4:	8c 93       	st	X, r24
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    7aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    7aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    7aaa:	01 e0       	ldi	r16, 0x01	; 1
    7aac:	10 e0       	ldi	r17, 0x00	; 0
    7aae:	a3 01       	movw	r20, r6
    7ab0:	92 01       	movw	r18, r4
    7ab2:	b7 01       	movw	r22, r14
    7ab4:	81 81       	ldd	r24, Z+1	; 0x01
    7ab6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <disk_read>
    7aba:	89 8b       	std	Y+17, r24	; 0x11
    7abc:	9a 8b       	std	Y+18, r25	; 0x12
    7abe:	e9 89       	ldd	r30, Y+17	; 0x11
    7ac0:	fa 89       	ldd	r31, Y+18	; 0x12
    7ac2:	ef 2b       	or	r30, r31
    7ac4:	09 f0       	breq	.+2      	; 0x7ac8 <f_lseek+0x2a0>
    7ac6:	bc c1       	rjmp	.+888    	; 0x7e40 <f_lseek+0x618>
#endif
			fp->sect = nsect;
    7ac8:	d1 01       	movw	r26, r2
    7aca:	d4 96       	adiw	r26, 0x34	; 52
    7acc:	4d 92       	st	X+, r4
    7ace:	5d 92       	st	X+, r5
    7ad0:	6d 92       	st	X+, r6
    7ad2:	7c 92       	st	X, r7
    7ad4:	d7 97       	sbiw	r26, 0x37	; 55
    7ad6:	a8 c1       	rjmp	.+848    	; 0x7e28 <f_lseek+0x600>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
    7ad8:	d0 96       	adiw	r26, 0x30	; 48
    7ada:	4d 91       	ld	r20, X+
    7adc:	5d 91       	ld	r21, X+
    7ade:	6d 91       	ld	r22, X+
    7ae0:	7c 91       	ld	r23, X
    7ae2:	d3 97       	sbiw	r26, 0x33	; 51
    7ae4:	0f ef       	ldi	r16, 0xFF	; 255
    7ae6:	1f ef       	ldi	r17, 0xFF	; 255
    7ae8:	98 01       	movw	r18, r16
    7aea:	c1 01       	movw	r24, r2
    7aec:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <fill_last_frag>
	if (res != FR_OK) LEAVE_FF(fs, res);
    7af0:	00 97       	sbiw	r24, 0x00	; 0
    7af2:	09 f4       	brne	.+2      	; 0x7af6 <f_lseek+0x2ce>
    7af4:	c3 ce       	rjmp	.-634    	; 0x787c <f_lseek+0x54>
    7af6:	9a 8b       	std	Y+18, r25	; 0x12
    7af8:	89 8b       	std	Y+17, r24	; 0x11
    7afa:	96 c1       	rjmp	.+812    	; 0x7e28 <f_lseek+0x600>
    7afc:	2b 85       	ldd	r18, Y+11	; 0x0b
    7afe:	3c 85       	ldd	r19, Y+12	; 0x0c
    7b00:	4d 85       	ldd	r20, Y+13	; 0x0d
    7b02:	5e 85       	ldd	r21, Y+14	; 0x0e
    7b04:	6f 85       	ldd	r22, Y+15	; 0x0f
    7b06:	78 89       	ldd	r23, Y+16	; 0x10
    7b08:	c4 01       	movw	r24, r8
    7b0a:	2f 3f       	cpi	r18, 0xFF	; 255
    7b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b0e:	4f 4f       	sbci	r20, 0xFF	; 255
    7b10:	5f 4f       	sbci	r21, 0xFF	; 255
    7b12:	61 05       	cpc	r22, r1
    7b14:	71 05       	cpc	r23, r1
    7b16:	81 05       	cpc	r24, r1
    7b18:	91 05       	cpc	r25, r1
    7b1a:	09 f0       	breq	.+2      	; 0x7b1e <f_lseek+0x2f6>
    7b1c:	08 f4       	brcc	.+2      	; 0x7b20 <f_lseek+0x2f8>
    7b1e:	b4 ce       	rjmp	.-664    	; 0x7888 <f_lseek+0x60>
    7b20:	2f ef       	ldi	r18, 0xFF	; 255
    7b22:	2b 87       	std	Y+11, r18	; 0x0b
    7b24:	3f ef       	ldi	r19, 0xFF	; 255
    7b26:	3c 87       	std	Y+12, r19	; 0x0c
    7b28:	4f ef       	ldi	r20, 0xFF	; 255
    7b2a:	4d 87       	std	Y+13, r20	; 0x0d
    7b2c:	5f ef       	ldi	r21, 0xFF	; 255
    7b2e:	5e 87       	std	Y+14, r21	; 0x0e
    7b30:	1f 86       	std	Y+15, r1	; 0x0f
    7b32:	18 8a       	std	Y+16, r1	; 0x10
    7b34:	81 2c       	mov	r8, r1
    7b36:	91 2c       	mov	r9, r1
    7b38:	a7 ce       	rjmp	.-690    	; 0x7888 <f_lseek+0x60>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    7b3a:	41 85       	ldd	r20, Z+9	; 0x09
    7b3c:	52 85       	ldd	r21, Z+10	; 0x0a
    7b3e:	70 e0       	ldi	r23, 0x00	; 0
    7b40:	60 e0       	ldi	r22, 0x00	; 0
    7b42:	db 01       	movw	r26, r22
    7b44:	ca 01       	movw	r24, r20
    7b46:	29 e0       	ldi	r18, 0x09	; 9
    7b48:	88 0f       	add	r24, r24
    7b4a:	99 1f       	adc	r25, r25
    7b4c:	aa 1f       	adc	r26, r26
    7b4e:	bb 1f       	adc	r27, r27
    7b50:	2a 95       	dec	r18
    7b52:	d1 f7       	brne	.-12     	; 0x7b48 <f_lseek+0x320>
    7b54:	8b 8b       	std	Y+19, r24	; 0x13
    7b56:	9c 8b       	std	Y+20, r25	; 0x14
    7b58:	ad 8b       	std	Y+21, r26	; 0x15
    7b5a:	be 8b       	std	Y+22, r27	; 0x16
			if (ifptr > 0 &&
    7b5c:	2b 81       	ldd	r18, Y+3	; 0x03
    7b5e:	34 2d       	mov	r19, r4
    7b60:	45 2d       	mov	r20, r5
    7b62:	56 2d       	mov	r21, r6
    7b64:	67 2d       	mov	r22, r7
    7b66:	7f 89       	ldd	r23, Y+23	; 0x17
    7b68:	88 8d       	ldd	r24, Y+24	; 0x18
    7b6a:	99 8d       	ldd	r25, Y+25	; 0x19
    7b6c:	a0 e0       	ldi	r26, 0x00	; 0
    7b6e:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    7b72:	09 f4       	brne	.+2      	; 0x7b76 <f_lseek+0x34e>
    7b74:	39 c1       	rjmp	.+626    	; 0x7de8 <f_lseek+0x5c0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    7b76:	2b 89       	ldd	r18, Y+19	; 0x13
    7b78:	3c 89       	ldd	r19, Y+20	; 0x14
    7b7a:	4d 89       	ldd	r20, Y+21	; 0x15
    7b7c:	5e 89       	ldd	r21, Y+22	; 0x16
    7b7e:	59 01       	movw	r10, r18
    7b80:	6a 01       	movw	r12, r20
    7b82:	e1 2c       	mov	r14, r1
    7b84:	f1 2c       	mov	r15, r1
    7b86:	87 01       	movw	r16, r14
    7b88:	2b 81       	ldd	r18, Y+3	; 0x03
    7b8a:	34 2d       	mov	r19, r4
    7b8c:	45 2d       	mov	r20, r5
    7b8e:	56 2d       	mov	r21, r6
    7b90:	af ef       	ldi	r26, 0xFF	; 255
    7b92:	0e 94 91 5a 	call	0xb522	; 0xb522 <__adddi3_s8>
    7b96:	2f 8b       	std	Y+23, r18	; 0x17
    7b98:	38 8f       	std	Y+24, r19	; 0x18
    7b9a:	49 8f       	std	Y+25, r20	; 0x19
    7b9c:	5a 8f       	std	Y+26, r21	; 0x1a
    7b9e:	2b 01       	movw	r4, r22
    7ba0:	3c 01       	movw	r6, r24
    7ba2:	2b 85       	ldd	r18, Y+11	; 0x0b
    7ba4:	3c 85       	ldd	r19, Y+12	; 0x0c
    7ba6:	4d 85       	ldd	r20, Y+13	; 0x0d
    7ba8:	5e 85       	ldd	r21, Y+14	; 0x0e
    7baa:	6f 85       	ldd	r22, Y+15	; 0x0f
    7bac:	78 89       	ldd	r23, Y+16	; 0x10
    7bae:	c4 01       	movw	r24, r8
    7bb0:	0e 94 91 5a 	call	0xb522	; 0xb522 <__adddi3_s8>
    7bb4:	ab 82       	std	Y+3, r10	; 0x03
    7bb6:	bc 82       	std	Y+4, r11	; 0x04
    7bb8:	cd 82       	std	Y+5, r12	; 0x05
    7bba:	de 82       	std	Y+6, r13	; 0x06
    7bbc:	ef 82       	std	Y+7, r14	; 0x07
    7bbe:	f8 86       	std	Y+8, r15	; 0x08
    7bc0:	09 87       	std	Y+9, r16	; 0x09
    7bc2:	1a 87       	std	Y+10, r17	; 0x0a
    7bc4:	e1 2c       	mov	r14, r1
    7bc6:	f1 2c       	mov	r15, r1
    7bc8:	00 e0       	ldi	r16, 0x00	; 0
    7bca:	10 e0       	ldi	r17, 0x00	; 0
    7bcc:	0e 94 d7 59 	call	0xb3ae	; 0xb3ae <__udivdi3>
    7bd0:	2b 8f       	std	Y+27, r18	; 0x1b
    7bd2:	3c 8f       	std	Y+28, r19	; 0x1c
    7bd4:	4d 8f       	std	Y+29, r20	; 0x1d
    7bd6:	5e 8f       	std	Y+30, r21	; 0x1e
    7bd8:	6f 8f       	std	Y+31, r22	; 0x1f
    7bda:	78 a3       	std	Y+32, r23	; 0x20
    7bdc:	89 a3       	std	Y+33, r24	; 0x21
    7bde:	9a a3       	std	Y+34, r25	; 0x22
    7be0:	2f 89       	ldd	r18, Y+23	; 0x17
    7be2:	38 8d       	ldd	r19, Y+24	; 0x18
    7be4:	49 8d       	ldd	r20, Y+25	; 0x19
    7be6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    7be8:	b2 01       	movw	r22, r4
    7bea:	c3 01       	movw	r24, r6
    7bec:	0e 94 d7 59 	call	0xb3ae	; 0xb3ae <__udivdi3>
    7bf0:	59 01       	movw	r10, r18
    7bf2:	6a 01       	movw	r12, r20
    7bf4:	7b 01       	movw	r14, r22
    7bf6:	8c 01       	movw	r16, r24
			if (ifptr > 0 &&
    7bf8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    7bfa:	3c 8d       	ldd	r19, Y+28	; 0x1c
    7bfc:	4d 8d       	ldd	r20, Y+29	; 0x1d
    7bfe:	5e 8d       	ldd	r21, Y+30	; 0x1e
    7c00:	6f 8d       	ldd	r22, Y+31	; 0x1f
    7c02:	78 a1       	ldd	r23, Y+32	; 0x20
    7c04:	89 a1       	ldd	r24, Y+33	; 0x21
    7c06:	9a a1       	ldd	r25, Y+34	; 0x22
    7c08:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    7c0c:	08 f4       	brcc	.+2      	; 0x7c10 <f_lseek+0x3e8>
    7c0e:	ec c0       	rjmp	.+472    	; 0x7de8 <f_lseek+0x5c0>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
    7c10:	8b 89       	ldd	r24, Y+19	; 0x13
    7c12:	9c 89       	ldd	r25, Y+20	; 0x14
    7c14:	ad 89       	ldd	r26, Y+21	; 0x15
    7c16:	be 89       	ldd	r27, Y+22	; 0x16
    7c18:	01 97       	sbiw	r24, 0x01	; 1
    7c1a:	a1 09       	sbc	r26, r1
    7c1c:	b1 09       	sbc	r27, r1
    7c1e:	8c 01       	movw	r16, r24
    7c20:	9d 01       	movw	r18, r26
    7c22:	80 95       	com	r24
    7c24:	b1 2e       	mov	r11, r17
    7c26:	b0 94       	com	r11
    7c28:	ca 2e       	mov	r12, r26
    7c2a:	c0 94       	com	r12
    7c2c:	d3 2e       	mov	r13, r19
    7c2e:	d0 94       	com	r13
    7c30:	af 88       	ldd	r10, Y+23	; 0x17
    7c32:	a8 22       	and	r10, r24
    7c34:	38 8d       	ldd	r19, Y+24	; 0x18
    7c36:	b3 22       	and	r11, r19
    7c38:	49 8d       	ldd	r20, Y+25	; 0x19
    7c3a:	c4 22       	and	r12, r20
    7c3c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    7c3e:	d5 22       	and	r13, r21
    7c40:	d1 01       	movw	r26, r2
    7c42:	98 96       	adiw	r26, 0x28	; 40
    7c44:	ac 92       	st	X, r10
    7c46:	98 97       	sbiw	r26, 0x28	; 40
    7c48:	99 96       	adiw	r26, 0x29	; 41
    7c4a:	bc 92       	st	X, r11
    7c4c:	99 97       	sbiw	r26, 0x29	; 41
    7c4e:	9a 96       	adiw	r26, 0x2a	; 42
    7c50:	cc 92       	st	X, r12
    7c52:	9a 97       	sbiw	r26, 0x2a	; 42
    7c54:	9b 96       	adiw	r26, 0x2b	; 43
    7c56:	dc 92       	st	X, r13
    7c58:	9b 97       	sbiw	r26, 0x2b	; 43
    7c5a:	9c 96       	adiw	r26, 0x2c	; 44
    7c5c:	4c 92       	st	X, r4
    7c5e:	9c 97       	sbiw	r26, 0x2c	; 44
    7c60:	9d 96       	adiw	r26, 0x2d	; 45
    7c62:	5c 92       	st	X, r5
    7c64:	9d 97       	sbiw	r26, 0x2d	; 45
    7c66:	9e 96       	adiw	r26, 0x2e	; 46
    7c68:	6c 92       	st	X, r6
    7c6a:	9e 97       	sbiw	r26, 0x2e	; 46
    7c6c:	9f 96       	adiw	r26, 0x2f	; 47
    7c6e:	7c 92       	st	X, r7
    7c70:	9f 97       	sbiw	r26, 0x2f	; 47
				ofs -= fp->fptr;
    7c72:	2b 85       	ldd	r18, Y+11	; 0x0b
    7c74:	3c 85       	ldd	r19, Y+12	; 0x0c
    7c76:	4d 85       	ldd	r20, Y+13	; 0x0d
    7c78:	5e 85       	ldd	r21, Y+14	; 0x0e
    7c7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    7c7c:	78 89       	ldd	r23, Y+16	; 0x10
    7c7e:	c4 01       	movw	r24, r8
    7c80:	72 01       	movw	r14, r4
    7c82:	83 01       	movw	r16, r6
    7c84:	0e 94 9d 5a 	call	0xb53a	; 0xb53a <__subdi3>
    7c88:	2b 87       	std	Y+11, r18	; 0x0b
    7c8a:	3c 87       	std	Y+12, r19	; 0x0c
    7c8c:	4d 87       	std	Y+13, r20	; 0x0d
    7c8e:	5e 87       	std	Y+14, r21	; 0x0e
    7c90:	6f 87       	std	Y+15, r22	; 0x0f
    7c92:	78 8b       	std	Y+16, r23	; 0x10
    7c94:	4c 01       	movw	r8, r24
				clst = fp->clust;
    7c96:	d0 96       	adiw	r26, 0x30	; 48
    7c98:	4d 90       	ld	r4, X+
    7c9a:	5d 90       	ld	r5, X+
    7c9c:	6d 90       	ld	r6, X+
    7c9e:	7c 90       	ld	r7, X
    7ca0:	d3 97       	sbiw	r26, 0x33	; 51
			if (clst != 0) {
    7ca2:	41 14       	cp	r4, r1
    7ca4:	51 04       	cpc	r5, r1
    7ca6:	61 04       	cpc	r6, r1
    7ca8:	71 04       	cpc	r7, r1
    7caa:	09 f4       	brne	.+2      	; 0x7cae <f_lseek+0x486>
    7cac:	66 ce       	rjmp	.-820    	; 0x797a <f_lseek+0x152>
				while (ofs > bcs) {						/* Cluster following loop */
    7cae:	4b 89       	ldd	r20, Y+19	; 0x13
    7cb0:	5c 89       	ldd	r21, Y+20	; 0x14
    7cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    7cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    7cb6:	9a 01       	movw	r18, r20
    7cb8:	ab 01       	movw	r20, r22
    7cba:	60 e0       	ldi	r22, 0x00	; 0
    7cbc:	70 e0       	ldi	r23, 0x00	; 0
    7cbe:	cb 01       	movw	r24, r22
    7cc0:	2b 83       	std	Y+3, r18	; 0x03
    7cc2:	3c 83       	std	Y+4, r19	; 0x04
    7cc4:	4d 83       	std	Y+5, r20	; 0x05
    7cc6:	5e 83       	std	Y+6, r21	; 0x06
    7cc8:	6f 83       	std	Y+7, r22	; 0x07
    7cca:	78 87       	std	Y+8, r23	; 0x08
    7ccc:	89 87       	std	Y+9, r24	; 0x09
    7cce:	9a 87       	std	Y+10, r25	; 0x0a
					ofs -= bcs; fp->fptr += bcs;
    7cd0:	f1 01       	movw	r30, r2
    7cd2:	b0 a5       	ldd	r27, Z+40	; 0x28
    7cd4:	a1 a5       	ldd	r26, Z+41	; 0x29
    7cd6:	f2 a5       	ldd	r31, Z+42	; 0x2a
    7cd8:	fa 8f       	std	Y+26, r31	; 0x1a
    7cda:	f1 01       	movw	r30, r2
    7cdc:	f3 a5       	ldd	r31, Z+43	; 0x2b
    7cde:	fb 8f       	std	Y+27, r31	; 0x1b
    7ce0:	f1 01       	movw	r30, r2
    7ce2:	f4 a5       	ldd	r31, Z+44	; 0x2c
    7ce4:	fb 8b       	std	Y+19, r31	; 0x13
    7ce6:	f1 01       	movw	r30, r2
    7ce8:	f5 a5       	ldd	r31, Z+45	; 0x2d
    7cea:	ff 8b       	std	Y+23, r31	; 0x17
    7cec:	f1 01       	movw	r30, r2
    7cee:	f6 a5       	ldd	r31, Z+46	; 0x2e
    7cf0:	f8 8f       	std	Y+24, r31	; 0x18
    7cf2:	f1 01       	movw	r30, r2
    7cf4:	f7 a5       	ldd	r31, Z+47	; 0x2f
    7cf6:	f9 8f       	std	Y+25, r31	; 0x19
				while (ofs > bcs) {						/* Cluster following loop */
    7cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    7cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    7cfc:	4d 81       	ldd	r20, Y+5	; 0x05
    7cfe:	5e 81       	ldd	r21, Y+6	; 0x06
    7d00:	60 e0       	ldi	r22, 0x00	; 0
    7d02:	70 e0       	ldi	r23, 0x00	; 0
    7d04:	80 e0       	ldi	r24, 0x00	; 0
    7d06:	90 e0       	ldi	r25, 0x00	; 0
    7d08:	ab 84       	ldd	r10, Y+11	; 0x0b
    7d0a:	bc 84       	ldd	r11, Y+12	; 0x0c
    7d0c:	cd 84       	ldd	r12, Y+13	; 0x0d
    7d0e:	de 84       	ldd	r13, Y+14	; 0x0e
    7d10:	ef 84       	ldd	r14, Y+15	; 0x0f
    7d12:	f8 88       	ldd	r15, Y+16	; 0x10
    7d14:	84 01       	movw	r16, r8
    7d16:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    7d1a:	08 f4       	brcc	.+2      	; 0x7d1e <f_lseek+0x4f6>
    7d1c:	a5 c0       	rjmp	.+330    	; 0x7e68 <f_lseek+0x640>
				fp->fptr += ofs;
    7d1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    7d20:	3c 85       	ldd	r19, Y+12	; 0x0c
    7d22:	4d 85       	ldd	r20, Y+13	; 0x0d
    7d24:	5e 85       	ldd	r21, Y+14	; 0x0e
    7d26:	6f 85       	ldd	r22, Y+15	; 0x0f
    7d28:	78 89       	ldd	r23, Y+16	; 0x10
    7d2a:	c4 01       	movw	r24, r8
    7d2c:	d1 01       	movw	r26, r2
    7d2e:	98 96       	adiw	r26, 0x28	; 40
    7d30:	ac 90       	ld	r10, X
    7d32:	98 97       	sbiw	r26, 0x28	; 40
    7d34:	99 96       	adiw	r26, 0x29	; 41
    7d36:	bc 90       	ld	r11, X
    7d38:	99 97       	sbiw	r26, 0x29	; 41
    7d3a:	9a 96       	adiw	r26, 0x2a	; 42
    7d3c:	cc 90       	ld	r12, X
    7d3e:	9a 97       	sbiw	r26, 0x2a	; 42
    7d40:	9b 96       	adiw	r26, 0x2b	; 43
    7d42:	dc 90       	ld	r13, X
    7d44:	9b 97       	sbiw	r26, 0x2b	; 43
    7d46:	9c 96       	adiw	r26, 0x2c	; 44
    7d48:	ec 90       	ld	r14, X
    7d4a:	9c 97       	sbiw	r26, 0x2c	; 44
    7d4c:	9d 96       	adiw	r26, 0x2d	; 45
    7d4e:	fc 90       	ld	r15, X
    7d50:	9d 97       	sbiw	r26, 0x2d	; 45
    7d52:	9e 96       	adiw	r26, 0x2e	; 46
    7d54:	0c 91       	ld	r16, X
    7d56:	9e 97       	sbiw	r26, 0x2e	; 46
    7d58:	9f 96       	adiw	r26, 0x2f	; 47
    7d5a:	1c 91       	ld	r17, X
    7d5c:	9f 97       	sbiw	r26, 0x2f	; 47
    7d5e:	0e 94 88 5a 	call	0xb510	; 0xb510 <__adddi3>
    7d62:	98 96       	adiw	r26, 0x28	; 40
    7d64:	2c 93       	st	X, r18
    7d66:	98 97       	sbiw	r26, 0x28	; 40
    7d68:	99 96       	adiw	r26, 0x29	; 41
    7d6a:	3c 93       	st	X, r19
    7d6c:	99 97       	sbiw	r26, 0x29	; 41
    7d6e:	9a 96       	adiw	r26, 0x2a	; 42
    7d70:	4c 93       	st	X, r20
    7d72:	9a 97       	sbiw	r26, 0x2a	; 42
    7d74:	9b 96       	adiw	r26, 0x2b	; 43
    7d76:	5c 93       	st	X, r21
    7d78:	9b 97       	sbiw	r26, 0x2b	; 43
    7d7a:	9c 96       	adiw	r26, 0x2c	; 44
    7d7c:	6c 93       	st	X, r22
    7d7e:	9c 97       	sbiw	r26, 0x2c	; 44
    7d80:	9d 96       	adiw	r26, 0x2d	; 45
    7d82:	7c 93       	st	X, r23
    7d84:	9d 97       	sbiw	r26, 0x2d	; 45
    7d86:	9e 96       	adiw	r26, 0x2e	; 46
    7d88:	8c 93       	st	X, r24
    7d8a:	9e 97       	sbiw	r26, 0x2e	; 46
    7d8c:	9f 96       	adiw	r26, 0x2f	; 47
    7d8e:	9c 93       	st	X, r25
				if (ofs % SS(fs)) {
    7d90:	2b 85       	ldd	r18, Y+11	; 0x0b
    7d92:	3c 85       	ldd	r19, Y+12	; 0x0c
    7d94:	31 70       	andi	r19, 0x01	; 1
    7d96:	40 e0       	ldi	r20, 0x00	; 0
    7d98:	50 e0       	ldi	r21, 0x00	; 0
    7d9a:	60 e0       	ldi	r22, 0x00	; 0
    7d9c:	70 e0       	ldi	r23, 0x00	; 0
    7d9e:	80 e0       	ldi	r24, 0x00	; 0
    7da0:	90 e0       	ldi	r25, 0x00	; 0
    7da2:	a0 e0       	ldi	r26, 0x00	; 0
    7da4:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    7da8:	09 f4       	brne	.+2      	; 0x7dac <f_lseek+0x584>
    7daa:	e7 cd       	rjmp	.-1074   	; 0x797a <f_lseek+0x152>
					nsect = clst2sect(fs, clst);	/* Current sector */
    7dac:	b3 01       	movw	r22, r6
    7dae:	a2 01       	movw	r20, r4
    7db0:	89 81       	ldd	r24, Y+1	; 0x01
    7db2:	9a 81       	ldd	r25, Y+2	; 0x02
    7db4:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    7db8:	2b 01       	movw	r4, r22
    7dba:	3c 01       	movw	r6, r24
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
    7dbc:	41 14       	cp	r4, r1
    7dbe:	51 04       	cpc	r5, r1
    7dc0:	61 04       	cpc	r6, r1
    7dc2:	71 04       	cpc	r7, r1
    7dc4:	49 f1       	breq	.+82     	; 0x7e18 <f_lseek+0x5f0>
					nsect += (DWORD)(ofs / SS(fs));
    7dc6:	2b 85       	ldd	r18, Y+11	; 0x0b
    7dc8:	3c 85       	ldd	r19, Y+12	; 0x0c
    7dca:	4d 85       	ldd	r20, Y+13	; 0x0d
    7dcc:	5e 85       	ldd	r21, Y+14	; 0x0e
    7dce:	6f 85       	ldd	r22, Y+15	; 0x0f
    7dd0:	78 89       	ldd	r23, Y+16	; 0x10
    7dd2:	c4 01       	movw	r24, r8
    7dd4:	09 e0       	ldi	r16, 0x09	; 9
    7dd6:	0e 94 6d 5a 	call	0xb4da	; 0xb4da <__lshrdi3>
    7dda:	49 01       	movw	r8, r18
    7ddc:	5a 01       	movw	r10, r20
    7dde:	48 0c       	add	r4, r8
    7de0:	59 1c       	adc	r5, r9
    7de2:	6a 1c       	adc	r6, r10
    7de4:	7b 1c       	adc	r7, r11
    7de6:	cc cd       	rjmp	.-1128   	; 0x7980 <f_lseek+0x158>
				clst = fp->obj.sclust;					/* start from the first cluster */
    7de8:	f1 01       	movw	r30, r2
    7dea:	46 80       	ldd	r4, Z+6	; 0x06
    7dec:	57 80       	ldd	r5, Z+7	; 0x07
    7dee:	60 84       	ldd	r6, Z+8	; 0x08
    7df0:	71 84       	ldd	r7, Z+9	; 0x09
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    7df2:	41 14       	cp	r4, r1
    7df4:	51 04       	cpc	r5, r1
    7df6:	61 04       	cpc	r6, r1
    7df8:	71 04       	cpc	r7, r1
    7dfa:	81 f5       	brne	.+96     	; 0x7e5c <f_lseek+0x634>
					clst = create_chain(&fp->obj, 0);
    7dfc:	40 e0       	ldi	r20, 0x00	; 0
    7dfe:	50 e0       	ldi	r21, 0x00	; 0
    7e00:	ba 01       	movw	r22, r20
    7e02:	c1 01       	movw	r24, r2
    7e04:	0e 94 28 1c 	call	0x3850	; 0x3850 <create_chain>
    7e08:	2b 01       	movw	r4, r22
    7e0a:	3c 01       	movw	r6, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    7e0c:	f1 e0       	ldi	r31, 0x01	; 1
    7e0e:	4f 16       	cp	r4, r31
    7e10:	51 04       	cpc	r5, r1
    7e12:	61 04       	cpc	r6, r1
    7e14:	71 04       	cpc	r7, r1
    7e16:	71 f4       	brne	.+28     	; 0x7e34 <f_lseek+0x60c>
    7e18:	82 e0       	ldi	r24, 0x02	; 2
    7e1a:	d1 01       	movw	r26, r2
    7e1c:	97 96       	adiw	r26, 0x27	; 39
    7e1e:	8c 93       	st	X, r24
    7e20:	e2 e0       	ldi	r30, 0x02	; 2
    7e22:	f0 e0       	ldi	r31, 0x00	; 0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    7e24:	fa 8b       	std	Y+18, r31	; 0x12
    7e26:	e9 8b       	std	Y+17, r30	; 0x11
		}
	}

	LEAVE_FF(fs, res);
}
    7e28:	89 89       	ldd	r24, Y+17	; 0x11
    7e2a:	9a 89       	ldd	r25, Y+18	; 0x12
    7e2c:	a2 96       	adiw	r28, 0x22	; 34
    7e2e:	e2 e1       	ldi	r30, 0x12	; 18
    7e30:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    7e34:	ff ef       	ldi	r31, 0xFF	; 255
    7e36:	4f 16       	cp	r4, r31
    7e38:	5f 06       	cpc	r5, r31
    7e3a:	6f 06       	cpc	r6, r31
    7e3c:	7f 06       	cpc	r7, r31
    7e3e:	39 f4       	brne	.+14     	; 0x7e4e <f_lseek+0x626>
    7e40:	81 e0       	ldi	r24, 0x01	; 1
    7e42:	d1 01       	movw	r26, r2
    7e44:	97 96       	adiw	r26, 0x27	; 39
    7e46:	8c 93       	st	X, r24
    7e48:	e1 e0       	ldi	r30, 0x01	; 1
    7e4a:	f0 e0       	ldi	r31, 0x00	; 0
    7e4c:	eb cf       	rjmp	.-42     	; 0x7e24 <f_lseek+0x5fc>
					fp->obj.sclust = clst;
    7e4e:	d1 01       	movw	r26, r2
    7e50:	16 96       	adiw	r26, 0x06	; 6
    7e52:	4d 92       	st	X+, r4
    7e54:	5d 92       	st	X+, r5
    7e56:	6d 92       	st	X+, r6
    7e58:	7c 92       	st	X, r7
    7e5a:	19 97       	sbiw	r26, 0x09	; 9
				fp->clust = clst;
    7e5c:	f1 01       	movw	r30, r2
    7e5e:	40 aa       	std	Z+48, r4	; 0x30
    7e60:	51 aa       	std	Z+49, r5	; 0x31
    7e62:	62 aa       	std	Z+50, r6	; 0x32
    7e64:	73 aa       	std	Z+51, r7	; 0x33
    7e66:	1d cf       	rjmp	.-454    	; 0x7ca2 <f_lseek+0x47a>
					ofs -= bcs; fp->fptr += bcs;
    7e68:	2b 85       	ldd	r18, Y+11	; 0x0b
    7e6a:	3c 85       	ldd	r19, Y+12	; 0x0c
    7e6c:	4d 85       	ldd	r20, Y+13	; 0x0d
    7e6e:	5e 85       	ldd	r21, Y+14	; 0x0e
    7e70:	6f 85       	ldd	r22, Y+15	; 0x0f
    7e72:	78 89       	ldd	r23, Y+16	; 0x10
    7e74:	c4 01       	movw	r24, r8
    7e76:	ab 80       	ldd	r10, Y+3	; 0x03
    7e78:	bc 80       	ldd	r11, Y+4	; 0x04
    7e7a:	cd 80       	ldd	r12, Y+5	; 0x05
    7e7c:	de 80       	ldd	r13, Y+6	; 0x06
    7e7e:	e1 2c       	mov	r14, r1
    7e80:	f1 2c       	mov	r15, r1
    7e82:	00 e0       	ldi	r16, 0x00	; 0
    7e84:	10 e0       	ldi	r17, 0x00	; 0
    7e86:	0e 94 9d 5a 	call	0xb53a	; 0xb53a <__subdi3>
    7e8a:	2b 87       	std	Y+11, r18	; 0x0b
    7e8c:	3c 87       	std	Y+12, r19	; 0x0c
    7e8e:	4d 87       	std	Y+13, r20	; 0x0d
    7e90:	5e 87       	std	Y+14, r21	; 0x0e
    7e92:	6f 87       	std	Y+15, r22	; 0x0f
    7e94:	78 8b       	std	Y+16, r23	; 0x10
    7e96:	4c 01       	movw	r8, r24
    7e98:	95 01       	movw	r18, r10
    7e9a:	a6 01       	movw	r20, r12
    7e9c:	60 e0       	ldi	r22, 0x00	; 0
    7e9e:	70 e0       	ldi	r23, 0x00	; 0
    7ea0:	80 e0       	ldi	r24, 0x00	; 0
    7ea2:	90 e0       	ldi	r25, 0x00	; 0
    7ea4:	ab 2e       	mov	r10, r27
    7ea6:	ba 2e       	mov	r11, r26
    7ea8:	ca 8c       	ldd	r12, Y+26	; 0x1a
    7eaa:	db 8c       	ldd	r13, Y+27	; 0x1b
    7eac:	eb 88       	ldd	r14, Y+19	; 0x13
    7eae:	ff 88       	ldd	r15, Y+23	; 0x17
    7eb0:	08 8d       	ldd	r16, Y+24	; 0x18
    7eb2:	19 8d       	ldd	r17, Y+25	; 0x19
    7eb4:	0e 94 88 5a 	call	0xb510	; 0xb510 <__adddi3>
    7eb8:	2b 8b       	std	Y+19, r18	; 0x13
    7eba:	3f 8b       	std	Y+23, r19	; 0x17
    7ebc:	48 8f       	std	Y+24, r20	; 0x18
    7ebe:	59 8f       	std	Y+25, r21	; 0x19
    7ec0:	6b 8f       	std	Y+27, r22	; 0x1b
    7ec2:	7c 8f       	std	Y+28, r23	; 0x1c
    7ec4:	d1 01       	movw	r26, r2
    7ec6:	98 96       	adiw	r26, 0x28	; 40
    7ec8:	2c 93       	st	X, r18
    7eca:	98 97       	sbiw	r26, 0x28	; 40
    7ecc:	99 96       	adiw	r26, 0x29	; 41
    7ece:	3c 93       	st	X, r19
    7ed0:	99 97       	sbiw	r26, 0x29	; 41
    7ed2:	9a 96       	adiw	r26, 0x2a	; 42
    7ed4:	4c 93       	st	X, r20
    7ed6:	9a 97       	sbiw	r26, 0x2a	; 42
    7ed8:	9b 96       	adiw	r26, 0x2b	; 43
    7eda:	5c 93       	st	X, r21
    7edc:	9b 97       	sbiw	r26, 0x2b	; 43
    7ede:	9c 96       	adiw	r26, 0x2c	; 44
    7ee0:	6c 93       	st	X, r22
    7ee2:	9c 97       	sbiw	r26, 0x2c	; 44
    7ee4:	9d 96       	adiw	r26, 0x2d	; 45
    7ee6:	7c 93       	st	X, r23
    7ee8:	9d 97       	sbiw	r26, 0x2d	; 45
    7eea:	9e 96       	adiw	r26, 0x2e	; 46
    7eec:	8c 93       	st	X, r24
    7eee:	9e 97       	sbiw	r26, 0x2e	; 46
    7ef0:	9f 96       	adiw	r26, 0x2f	; 47
    7ef2:	9c 93       	st	X, r25
    7ef4:	9f 97       	sbiw	r26, 0x2f	; 47
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    7ef6:	96 96       	adiw	r26, 0x26	; 38
    7ef8:	bc 91       	ld	r27, X
    7efa:	ba 8f       	std	Y+26, r27	; 0x1a
    7efc:	b1 ff       	sbrs	r27, 1
    7efe:	4e c0       	rjmp	.+156    	; 0x7f9c <f_lseek+0x774>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
    7f00:	d1 01       	movw	r26, r2
    7f02:	1a 96       	adiw	r26, 0x0a	; 10
    7f04:	ac 90       	ld	r10, X
    7f06:	1a 97       	sbiw	r26, 0x0a	; 10
    7f08:	1b 96       	adiw	r26, 0x0b	; 11
    7f0a:	bc 90       	ld	r11, X
    7f0c:	1b 97       	sbiw	r26, 0x0b	; 11
    7f0e:	1c 96       	adiw	r26, 0x0c	; 12
    7f10:	cc 90       	ld	r12, X
    7f12:	1c 97       	sbiw	r26, 0x0c	; 12
    7f14:	1d 96       	adiw	r26, 0x0d	; 13
    7f16:	dc 90       	ld	r13, X
    7f18:	1d 97       	sbiw	r26, 0x0d	; 13
    7f1a:	1e 96       	adiw	r26, 0x0e	; 14
    7f1c:	ec 90       	ld	r14, X
    7f1e:	1e 97       	sbiw	r26, 0x0e	; 14
    7f20:	1f 96       	adiw	r26, 0x0f	; 15
    7f22:	fc 90       	ld	r15, X
    7f24:	1f 97       	sbiw	r26, 0x0f	; 15
    7f26:	50 96       	adiw	r26, 0x10	; 16
    7f28:	0c 91       	ld	r16, X
    7f2a:	50 97       	sbiw	r26, 0x10	; 16
    7f2c:	51 96       	adiw	r26, 0x11	; 17
    7f2e:	1c 91       	ld	r17, X
    7f30:	51 97       	sbiw	r26, 0x11	; 17
    7f32:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    7f36:	e9 f0       	breq	.+58     	; 0x7f72 <f_lseek+0x74a>
    7f38:	e0 f0       	brcs	.+56     	; 0x7f72 <f_lseek+0x74a>
							fp->obj.objsize = fp->fptr;
    7f3a:	1a 96       	adiw	r26, 0x0a	; 10
    7f3c:	2c 93       	st	X, r18
    7f3e:	1a 97       	sbiw	r26, 0x0a	; 10
    7f40:	1b 96       	adiw	r26, 0x0b	; 11
    7f42:	3c 93       	st	X, r19
    7f44:	1b 97       	sbiw	r26, 0x0b	; 11
    7f46:	1c 96       	adiw	r26, 0x0c	; 12
    7f48:	4c 93       	st	X, r20
    7f4a:	1c 97       	sbiw	r26, 0x0c	; 12
    7f4c:	1d 96       	adiw	r26, 0x0d	; 13
    7f4e:	5c 93       	st	X, r21
    7f50:	1d 97       	sbiw	r26, 0x0d	; 13
    7f52:	1e 96       	adiw	r26, 0x0e	; 14
    7f54:	6c 93       	st	X, r22
    7f56:	1e 97       	sbiw	r26, 0x0e	; 14
    7f58:	1f 96       	adiw	r26, 0x0f	; 15
    7f5a:	7c 93       	st	X, r23
    7f5c:	1f 97       	sbiw	r26, 0x0f	; 15
    7f5e:	50 96       	adiw	r26, 0x10	; 16
    7f60:	8c 93       	st	X, r24
    7f62:	50 97       	sbiw	r26, 0x10	; 16
    7f64:	51 96       	adiw	r26, 0x11	; 17
    7f66:	9c 93       	st	X, r25
    7f68:	51 97       	sbiw	r26, 0x11	; 17
							fp->flag |= FA_MODIFIED;
    7f6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7f6c:	80 64       	ori	r24, 0x40	; 64
    7f6e:	96 96       	adiw	r26, 0x26	; 38
    7f70:	8c 93       	st	X, r24
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    7f72:	b3 01       	movw	r22, r6
    7f74:	a2 01       	movw	r20, r4
    7f76:	c1 01       	movw	r24, r2
    7f78:	0e 94 28 1c 	call	0x3850	; 0x3850 <create_chain>
    7f7c:	2b 01       	movw	r4, r22
    7f7e:	3c 01       	movw	r6, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    7f80:	41 14       	cp	r4, r1
    7f82:	51 04       	cpc	r5, r1
    7f84:	61 04       	cpc	r6, r1
    7f86:	71 04       	cpc	r7, r1
    7f88:	81 f4       	brne	.+32     	; 0x7faa <f_lseek+0x782>
							ofs = 0; break;
    7f8a:	1b 86       	std	Y+11, r1	; 0x0b
    7f8c:	1c 86       	std	Y+12, r1	; 0x0c
    7f8e:	1d 86       	std	Y+13, r1	; 0x0d
    7f90:	1e 86       	std	Y+14, r1	; 0x0e
    7f92:	1f 86       	std	Y+15, r1	; 0x0f
    7f94:	18 8a       	std	Y+16, r1	; 0x10
    7f96:	81 2c       	mov	r8, r1
    7f98:	91 2c       	mov	r9, r1
    7f9a:	c1 ce       	rjmp	.-638    	; 0x7d1e <f_lseek+0x4f6>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    7f9c:	b3 01       	movw	r22, r6
    7f9e:	a2 01       	movw	r20, r4
    7fa0:	c1 01       	movw	r24, r2
    7fa2:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    7fa6:	2b 01       	movw	r4, r22
    7fa8:	3c 01       	movw	r6, r24
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    7faa:	8f ef       	ldi	r24, 0xFF	; 255
    7fac:	48 16       	cp	r4, r24
    7fae:	58 06       	cpc	r5, r24
    7fb0:	68 06       	cpc	r6, r24
    7fb2:	78 06       	cpc	r7, r24
    7fb4:	09 f4       	brne	.+2      	; 0x7fb8 <f_lseek+0x790>
    7fb6:	44 cf       	rjmp	.-376    	; 0x7e40 <f_lseek+0x618>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    7fb8:	92 e0       	ldi	r25, 0x02	; 2
    7fba:	49 16       	cp	r4, r25
    7fbc:	51 04       	cpc	r5, r1
    7fbe:	61 04       	cpc	r6, r1
    7fc0:	71 04       	cpc	r7, r1
    7fc2:	08 f4       	brcc	.+2      	; 0x7fc6 <f_lseek+0x79e>
    7fc4:	29 cf       	rjmp	.-430    	; 0x7e18 <f_lseek+0x5f0>
    7fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    7fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    7fca:	87 a1       	ldd	r24, Z+39	; 0x27
    7fcc:	90 a5       	ldd	r25, Z+40	; 0x28
    7fce:	a1 a5       	ldd	r26, Z+41	; 0x29
    7fd0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    7fd2:	48 16       	cp	r4, r24
    7fd4:	59 06       	cpc	r5, r25
    7fd6:	6a 06       	cpc	r6, r26
    7fd8:	7b 06       	cpc	r7, r27
    7fda:	08 f0       	brcs	.+2      	; 0x7fde <f_lseek+0x7b6>
    7fdc:	1d cf       	rjmp	.-454    	; 0x7e18 <f_lseek+0x5f0>
					fp->clust = clst;
    7fde:	d1 01       	movw	r26, r2
    7fe0:	d0 96       	adiw	r26, 0x30	; 48
    7fe2:	4d 92       	st	X+, r4
    7fe4:	5d 92       	st	X+, r5
    7fe6:	6d 92       	st	X+, r6
    7fe8:	7c 92       	st	X, r7
    7fea:	d3 97       	sbiw	r26, 0x33	; 51
    7fec:	71 ce       	rjmp	.-798    	; 0x7cd0 <f_lseek+0x4a8>

00007fee <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    7fee:	a4 e0       	ldi	r26, 0x04	; 4
    7ff0:	b0 e0       	ldi	r27, 0x00	; 0
    7ff2:	ed ef       	ldi	r30, 0xFD	; 253
    7ff4:	ff e3       	ldi	r31, 0x3F	; 63
    7ff6:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
    7ffa:	8c 01       	movw	r16, r24
    7ffc:	7c 83       	std	Y+4, r23	; 0x04
    7ffe:	6b 83       	std	Y+3, r22	; 0x03
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    8000:	29 e0       	ldi	r18, 0x09	; 9
    8002:	30 e0       	ldi	r19, 0x00	; 0
    8004:	89 2b       	or	r24, r25
    8006:	09 f4       	brne	.+2      	; 0x800a <f_opendir+0x1c>
    8008:	68 c0       	rjmp	.+208    	; 0x80da <f_opendir+0xec>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    800a:	40 e0       	ldi	r20, 0x00	; 0
    800c:	be 01       	movw	r22, r28
    800e:	6f 5f       	subi	r22, 0xFF	; 255
    8010:	7f 4f       	sbci	r23, 0xFF	; 255
    8012:	ce 01       	movw	r24, r28
    8014:	03 96       	adiw	r24, 0x03	; 3
    8016:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    801a:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    801c:	89 2b       	or	r24, r25
    801e:	b9 f4       	brne	.+46     	; 0x804e <f_opendir+0x60>
		dp->obj.fs = fs;
    8020:	89 81       	ldd	r24, Y+1	; 0x01
    8022:	9a 81       	ldd	r25, Y+2	; 0x02
    8024:	d8 01       	movw	r26, r16
    8026:	8d 93       	st	X+, r24
    8028:	9c 93       	st	X, r25
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    802a:	6b 81       	ldd	r22, Y+3	; 0x03
    802c:	7c 81       	ldd	r23, Y+4	; 0x04
    802e:	c8 01       	movw	r24, r16
    8030:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    8034:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    8036:	00 97       	sbiw	r24, 0x00	; 0
    8038:	09 f0       	breq	.+2      	; 0x803c <f_opendir+0x4e>
    803a:	60 c0       	rjmp	.+192    	; 0x80fc <f_opendir+0x10e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    803c:	f8 01       	movw	r30, r16
    803e:	87 ad       	ldd	r24, Z+63	; 0x3f
    8040:	87 fd       	sbrc	r24, 7
    8042:	36 c0       	rjmp	.+108    	; 0x80b0 <f_opendir+0xc2>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
    8044:	84 81       	ldd	r24, Z+4	; 0x04
    8046:	84 fd       	sbrc	r24, 4
    8048:	06 c0       	rjmp	.+12     	; 0x8056 <f_opendir+0x68>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
    804a:	25 e0       	ldi	r18, 0x05	; 5
    804c:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    804e:	d8 01       	movw	r26, r16
    8050:	1d 92       	st	X+, r1
    8052:	1c 92       	st	X, r1
    8054:	42 c0       	rjmp	.+132    	; 0x80da <f_opendir+0xec>
					if (fs->fs_type == FS_EXFAT) {
    8056:	49 81       	ldd	r20, Y+1	; 0x01
    8058:	5a 81       	ldd	r21, Y+2	; 0x02
    805a:	da 01       	movw	r26, r20
    805c:	8c 91       	ld	r24, X
    805e:	84 30       	cpi	r24, 0x04	; 4
    8060:	09 f0       	breq	.+2      	; 0x8064 <f_opendir+0x76>
    8062:	40 c0       	rjmp	.+128    	; 0x80e4 <f_opendir+0xf6>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
    8064:	86 81       	ldd	r24, Z+6	; 0x06
    8066:	97 81       	ldd	r25, Z+7	; 0x07
    8068:	a0 85       	ldd	r26, Z+8	; 0x08
    806a:	b1 85       	ldd	r27, Z+9	; 0x09
    806c:	82 8f       	std	Z+26, r24	; 0x1a
    806e:	93 8f       	std	Z+27, r25	; 0x1b
    8070:	a4 8f       	std	Z+28, r26	; 0x1c
    8072:	b5 8f       	std	Z+29, r27	; 0x1d
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
    8074:	82 85       	ldd	r24, Z+10	; 0x0a
    8076:	93 85       	ldd	r25, Z+11	; 0x0b
    8078:	a4 85       	ldd	r26, Z+12	; 0x0c
    807a:	b5 85       	ldd	r27, Z+13	; 0x0d
    807c:	88 27       	eor	r24, r24
    807e:	25 81       	ldd	r18, Z+5	; 0x05
    8080:	82 2b       	or	r24, r18
    8082:	86 8f       	std	Z+30, r24	; 0x1e
    8084:	97 8f       	std	Z+31, r25	; 0x1f
    8086:	a0 a3       	std	Z+32, r26	; 0x20
    8088:	b1 a3       	std	Z+33, r27	; 0x21
						dp->obj.c_ofs = dp->blk_ofs;
    808a:	d8 01       	movw	r26, r16
    808c:	a0 5c       	subi	r26, 0xC0	; 192
    808e:	bf 4f       	sbci	r27, 0xFF	; 255
    8090:	8d 91       	ld	r24, X+
    8092:	9d 91       	ld	r25, X+
    8094:	0d 90       	ld	r0, X+
    8096:	bc 91       	ld	r27, X
    8098:	a0 2d       	mov	r26, r0
    809a:	82 a3       	std	Z+34, r24	; 0x22
    809c:	93 a3       	std	Z+35, r25	; 0x23
    809e:	a4 a3       	std	Z+36, r26	; 0x24
    80a0:	b5 a3       	std	Z+37, r27	; 0x25
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
    80a2:	b8 01       	movw	r22, r16
    80a4:	da 01       	movw	r26, r20
    80a6:	1d 96       	adiw	r26, 0x0d	; 13
    80a8:	8d 91       	ld	r24, X+
    80aa:	9c 91       	ld	r25, X
    80ac:	0e 94 c5 2c 	call	0x598a	; 0x598a <init_alloc_info.isra.0>
				dp->obj.id = fs->id;
    80b0:	e9 81       	ldd	r30, Y+1	; 0x01
    80b2:	fa 81       	ldd	r31, Y+2	; 0x02
    80b4:	85 81       	ldd	r24, Z+5	; 0x05
    80b6:	96 81       	ldd	r25, Z+6	; 0x06
    80b8:	f8 01       	movw	r30, r16
    80ba:	93 83       	std	Z+3, r25	; 0x03
    80bc:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    80be:	40 e0       	ldi	r20, 0x00	; 0
    80c0:	50 e0       	ldi	r21, 0x00	; 0
    80c2:	ba 01       	movw	r22, r20
    80c4:	c8 01       	movw	r24, r16
    80c6:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    80ca:	9c 01       	movw	r18, r24
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    80cc:	84 30       	cpi	r24, 0x04	; 4
    80ce:	91 05       	cpc	r25, r1
    80d0:	09 f4       	brne	.+2      	; 0x80d4 <f_opendir+0xe6>
    80d2:	bb cf       	rjmp	.-138    	; 0x804a <f_opendir+0x5c>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    80d4:	89 2b       	or	r24, r25
    80d6:	09 f0       	breq	.+2      	; 0x80da <f_opendir+0xec>
    80d8:	ba cf       	rjmp	.-140    	; 0x804e <f_opendir+0x60>

	LEAVE_FF(fs, res);
}
    80da:	c9 01       	movw	r24, r18
    80dc:	24 96       	adiw	r28, 0x04	; 4
    80de:	e4 e0       	ldi	r30, 0x04	; 4
    80e0:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
    80e4:	62 a9       	ldd	r22, Z+50	; 0x32
    80e6:	73 a9       	ldd	r23, Z+51	; 0x33
    80e8:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    80ec:	d8 01       	movw	r26, r16
    80ee:	16 96       	adiw	r26, 0x06	; 6
    80f0:	6d 93       	st	X+, r22
    80f2:	7d 93       	st	X+, r23
    80f4:	8d 93       	st	X+, r24
    80f6:	9c 93       	st	X, r25
    80f8:	19 97       	sbiw	r26, 0x09	; 9
    80fa:	da cf       	rjmp	.-76     	; 0x80b0 <f_opendir+0xc2>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    80fc:	04 97       	sbiw	r24, 0x04	; 4
    80fe:	09 f4       	brne	.+2      	; 0x8102 <f_opendir+0x114>
    8100:	a4 cf       	rjmp	.-184    	; 0x804a <f_opendir+0x5c>
    8102:	a5 cf       	rjmp	.-182    	; 0x804e <f_opendir+0x60>

00008104 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    8104:	a2 e0       	ldi	r26, 0x02	; 2
    8106:	b0 e0       	ldi	r27, 0x00	; 0
    8108:	e8 e8       	ldi	r30, 0x88	; 136
    810a:	f0 e4       	ldi	r31, 0x40	; 64
    810c:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
    8110:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
    8112:	be 01       	movw	r22, r28
    8114:	6f 5f       	subi	r22, 0xFF	; 255
    8116:	7f 4f       	sbci	r23, 0xFF	; 255
    8118:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
	if (res == FR_OK) {
    811c:	00 97       	sbiw	r24, 0x00	; 0
    811e:	19 f4       	brne	.+6      	; 0x8126 <f_closedir+0x22>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
    8120:	f8 01       	movw	r30, r16
    8122:	11 82       	std	Z+1, r1	; 0x01
    8124:	10 82       	st	Z, r1
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    8126:	22 96       	adiw	r28, 0x02	; 2
    8128:	e4 e0       	ldi	r30, 0x04	; 4
    812a:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>

0000812e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    812e:	a2 e0       	ldi	r26, 0x02	; 2
    8130:	b0 e0       	ldi	r27, 0x00	; 0
    8132:	ed e9       	ldi	r30, 0x9D	; 157
    8134:	f0 e4       	ldi	r31, 0x40	; 64
    8136:	0c 94 40 5a 	jmp	0xb480	; 0xb480 <__prologue_saves__+0x18>
    813a:	8c 01       	movw	r16, r24
    813c:	7b 01       	movw	r14, r22
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
    813e:	be 01       	movw	r22, r28
    8140:	6f 5f       	subi	r22, 0xFF	; 255
    8142:	7f 4f       	sbci	r23, 0xFF	; 255
    8144:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
    8148:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    814a:	89 2b       	or	r24, r25
    814c:	51 f4       	brne	.+20     	; 0x8162 <f_readdir+0x34>
		if (!fno) {
    814e:	e1 14       	cp	r14, r1
    8150:	f1 04       	cpc	r15, r1
    8152:	61 f4       	brne	.+24     	; 0x816c <f_readdir+0x3e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    8154:	40 e0       	ldi	r20, 0x00	; 0
    8156:	50 e0       	ldi	r21, 0x00	; 0
    8158:	ba 01       	movw	r22, r20
    815a:	c8 01       	movw	r24, r16
    815c:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    8160:	9c 01       	movw	r18, r24
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    8162:	c9 01       	movw	r24, r18
    8164:	22 96       	adiw	r28, 0x02	; 2
    8166:	e6 e0       	ldi	r30, 0x06	; 6
    8168:	0c 94 5c 5a 	jmp	0xb4b8	; 0xb4b8 <__epilogue_restores__+0x18>
			res = DIR_READ_FILE(dp);		/* Read an item */
    816c:	70 e0       	ldi	r23, 0x00	; 0
    816e:	60 e0       	ldi	r22, 0x00	; 0
    8170:	c8 01       	movw	r24, r16
    8172:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <dir_read>
    8176:	9c 01       	movw	r18, r24
			if (res == FR_OK) {				/* A valid entry is found */
    8178:	8b 7f       	andi	r24, 0xFB	; 251
    817a:	89 2b       	or	r24, r25
    817c:	91 f7       	brne	.-28     	; 0x8162 <f_readdir+0x34>
				get_fileinfo(dp, fno);		/* Get the object information */
    817e:	b7 01       	movw	r22, r14
    8180:	c8 01       	movw	r24, r16
    8182:	0e 94 fd 13 	call	0x27fa	; 0x27fa <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
    8186:	70 e0       	ldi	r23, 0x00	; 0
    8188:	60 e0       	ldi	r22, 0x00	; 0
    818a:	c8 01       	movw	r24, r16
    818c:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <dir_next>
    8190:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    8192:	04 97       	sbiw	r24, 0x04	; 4
    8194:	31 f7       	brne	.-52     	; 0x8162 <f_readdir+0x34>
    8196:	30 e0       	ldi	r19, 0x00	; 0
    8198:	20 e0       	ldi	r18, 0x00	; 0
	LEAVE_FF(fs, res);
    819a:	e3 cf       	rjmp	.-58     	; 0x8162 <f_readdir+0x34>

0000819c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    819c:	a6 e4       	ldi	r26, 0x46	; 70
    819e:	b0 e0       	ldi	r27, 0x00	; 0
    81a0:	e4 ed       	ldi	r30, 0xD4	; 212
    81a2:	f0 e4       	ldi	r31, 0x40	; 64
    81a4:	0c 94 40 5a 	jmp	0xb480	; 0xb480 <__prologue_saves__+0x18>
    81a8:	27 96       	adiw	r28, 0x07	; 7
    81aa:	9f af       	std	Y+63, r25	; 0x3f
    81ac:	8e af       	std	Y+62, r24	; 0x3e
    81ae:	27 97       	sbiw	r28, 0x07	; 7
    81b0:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
    81b2:	40 e0       	ldi	r20, 0x00	; 0
    81b4:	be 01       	movw	r22, r28
    81b6:	6f 5f       	subi	r22, 0xFF	; 255
    81b8:	7f 4f       	sbci	r23, 0xFF	; 255
    81ba:	ce 01       	movw	r24, r28
    81bc:	8b 5b       	subi	r24, 0xBB	; 187
    81be:	9f 4f       	sbci	r25, 0xFF	; 255
    81c0:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    81c4:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    81c6:	89 2b       	or	r24, r25
    81c8:	c1 f4       	brne	.+48     	; 0x81fa <f_stat+0x5e>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    81ca:	27 96       	adiw	r28, 0x07	; 7
    81cc:	6e ad       	ldd	r22, Y+62	; 0x3e
    81ce:	7f ad       	ldd	r23, Y+63	; 0x3f
    81d0:	27 97       	sbiw	r28, 0x07	; 7
    81d2:	ce 01       	movw	r24, r28
    81d4:	01 96       	adiw	r24, 0x01	; 1
    81d6:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    81da:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follow completed */
    81dc:	89 2b       	or	r24, r25
    81de:	69 f4       	brne	.+26     	; 0x81fa <f_stat+0x5e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
    81e0:	21 96       	adiw	r28, 0x01	; 1
    81e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    81e4:	21 97       	sbiw	r28, 0x01	; 1
    81e6:	87 fd       	sbrc	r24, 7
    81e8:	0e c0       	rjmp	.+28     	; 0x8206 <f_stat+0x6a>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
    81ea:	e1 14       	cp	r14, r1
    81ec:	f1 04       	cpc	r15, r1
    81ee:	29 f0       	breq	.+10     	; 0x81fa <f_stat+0x5e>
    81f0:	b7 01       	movw	r22, r14
    81f2:	ce 01       	movw	r24, r28
    81f4:	01 96       	adiw	r24, 0x01	; 1
    81f6:	0e 94 fd 13 	call	0x27fa	; 0x27fa <get_fileinfo>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
    81fa:	c8 01       	movw	r24, r16
    81fc:	ca 5b       	subi	r28, 0xBA	; 186
    81fe:	df 4f       	sbci	r29, 0xFF	; 255
    8200:	e6 e0       	ldi	r30, 0x06	; 6
    8202:	0c 94 5c 5a 	jmp	0xb4b8	; 0xb4b8 <__epilogue_restores__+0x18>
				res = FR_INVALID_NAME;
    8206:	06 e0       	ldi	r16, 0x06	; 6
    8208:	10 e0       	ldi	r17, 0x00	; 0
	LEAVE_FF(dj.obj.fs, res);
    820a:	f7 cf       	rjmp	.-18     	; 0x81fa <f_stat+0x5e>

0000820c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
    820c:	a4 e3       	ldi	r26, 0x34	; 52
    820e:	b0 e0       	ldi	r27, 0x00	; 0
    8210:	ec e0       	ldi	r30, 0x0C	; 12
    8212:	f1 e4       	ldi	r31, 0x41	; 65
    8214:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    8218:	9a a7       	std	Y+42, r25	; 0x2a
    821a:	89 a7       	std	Y+41, r24	; 0x29
    821c:	6b a7       	std	Y+43, r22	; 0x2b
    821e:	7c a7       	std	Y+44, r23	; 0x2c
    8220:	7a 01       	movw	r14, r20
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    8222:	40 e0       	ldi	r20, 0x00	; 0
    8224:	be 01       	movw	r22, r28
    8226:	69 5d       	subi	r22, 0xD9	; 217
    8228:	7f 4f       	sbci	r23, 0xFF	; 255
    822a:	ce 01       	movw	r24, r28
    822c:	89 96       	adiw	r24, 0x29	; 41
    822e:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    8232:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    8234:	89 2b       	or	r24, r25
    8236:	f9 f4       	brne	.+62     	; 0x8276 <f_getfree+0x6a>
		*fatfs = fs;				/* Return ptr to the fs object */
    8238:	ef a1       	ldd	r30, Y+39	; 0x27
    823a:	f8 a5       	ldd	r31, Y+40	; 0x28
    823c:	d7 01       	movw	r26, r14
    823e:	ed 93       	st	X+, r30
    8240:	fc 93       	st	X, r31
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
    8242:	83 89       	ldd	r24, Z+19	; 0x13
    8244:	94 89       	ldd	r25, Z+20	; 0x14
    8246:	a5 89       	ldd	r26, Z+21	; 0x15
    8248:	b6 89       	ldd	r27, Z+22	; 0x16
    824a:	47 a0       	ldd	r4, Z+39	; 0x27
    824c:	50 a4       	ldd	r5, Z+40	; 0x28
    824e:	61 a4       	ldd	r6, Z+41	; 0x29
    8250:	72 a4       	ldd	r7, Z+42	; 0x2a
    8252:	53 01       	movw	r10, r6
    8254:	42 01       	movw	r8, r4
    8256:	22 e0       	ldi	r18, 0x02	; 2
    8258:	82 1a       	sub	r8, r18
    825a:	91 08       	sbc	r9, r1
    825c:	a1 08       	sbc	r10, r1
    825e:	b1 08       	sbc	r11, r1
    8260:	88 16       	cp	r8, r24
    8262:	99 06       	cpc	r9, r25
    8264:	aa 06       	cpc	r10, r26
    8266:	bb 06       	cpc	r11, r27
    8268:	58 f0       	brcs	.+22     	; 0x8280 <f_getfree+0x74>
			*nclst = fs->free_clst;
    826a:	eb a5       	ldd	r30, Y+43	; 0x2b
    826c:	fc a5       	ldd	r31, Y+44	; 0x2c
    826e:	80 83       	st	Z, r24
    8270:	91 83       	std	Z+1, r25	; 0x01
    8272:	a2 83       	std	Z+2, r26	; 0x02
    8274:	b3 83       	std	Z+3, r27	; 0x03
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
		}
	}

	LEAVE_FF(fs, res);
}
    8276:	c8 01       	movw	r24, r16
    8278:	e4 96       	adiw	r28, 0x34	; 52
    827a:	e2 e1       	ldi	r30, 0x12	; 18
    827c:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
    8280:	80 81       	ld	r24, Z
    8282:	81 30       	cpi	r24, 0x01	; 1
    8284:	09 f0       	breq	.+2      	; 0x8288 <f_getfree+0x7c>
    8286:	4a c0       	rjmp	.+148    	; 0x831c <f_getfree+0x110>
				clst = 2; obj.fs = fs;
    8288:	fa 83       	std	Y+2, r31	; 0x02
    828a:	e9 83       	std	Y+1, r30	; 0x01
    828c:	82 e0       	ldi	r24, 0x02	; 2
    828e:	48 2e       	mov	r4, r24
    8290:	51 2c       	mov	r5, r1
    8292:	61 2c       	mov	r6, r1
    8294:	71 2c       	mov	r7, r1
			nfree = 0;
    8296:	c1 2c       	mov	r12, r1
    8298:	d1 2c       	mov	r13, r1
    829a:	76 01       	movw	r14, r12
					stat = get_fat(&obj, clst);
    829c:	b3 01       	movw	r22, r6
    829e:	a2 01       	movw	r20, r4
    82a0:	ce 01       	movw	r24, r28
    82a2:	01 96       	adiw	r24, 0x01	; 1
    82a4:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    82a8:	46 2f       	mov	r20, r22
    82aa:	57 2f       	mov	r21, r23
    82ac:	bc 01       	movw	r22, r24
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    82ae:	4f 3f       	cpi	r20, 0xFF	; 255
    82b0:	ff ef       	ldi	r31, 0xFF	; 255
    82b2:	5f 07       	cpc	r21, r31
    82b4:	6f 07       	cpc	r22, r31
    82b6:	7f 07       	cpc	r23, r31
    82b8:	09 f4       	brne	.+2      	; 0x82bc <f_getfree+0xb0>
    82ba:	df c0       	rjmp	.+446    	; 0x847a <f_getfree+0x26e>
					if (stat == 1) { res = FR_INT_ERR; break; }
    82bc:	41 30       	cpi	r20, 0x01	; 1
    82be:	51 05       	cpc	r21, r1
    82c0:	61 05       	cpc	r22, r1
    82c2:	71 05       	cpc	r23, r1
    82c4:	09 f4       	brne	.+2      	; 0x82c8 <f_getfree+0xbc>
    82c6:	dc c0       	rjmp	.+440    	; 0x8480 <f_getfree+0x274>
					if (stat == 0) nfree++;
    82c8:	45 2b       	or	r20, r21
    82ca:	46 2b       	or	r20, r22
    82cc:	47 2b       	or	r20, r23
    82ce:	29 f4       	brne	.+10     	; 0x82da <f_getfree+0xce>
    82d0:	2f ef       	ldi	r18, 0xFF	; 255
    82d2:	c2 1a       	sub	r12, r18
    82d4:	d2 0a       	sbc	r13, r18
    82d6:	e2 0a       	sbc	r14, r18
    82d8:	f2 0a       	sbc	r15, r18
				} while (++clst < fs->n_fatent);
    82da:	3f ef       	ldi	r19, 0xFF	; 255
    82dc:	43 1a       	sub	r4, r19
    82de:	53 0a       	sbc	r5, r19
    82e0:	63 0a       	sbc	r6, r19
    82e2:	73 0a       	sbc	r7, r19
    82e4:	ef a1       	ldd	r30, Y+39	; 0x27
    82e6:	f8 a5       	ldd	r31, Y+40	; 0x28
    82e8:	87 a1       	ldd	r24, Z+39	; 0x27
    82ea:	90 a5       	ldd	r25, Z+40	; 0x28
    82ec:	a1 a5       	ldd	r26, Z+41	; 0x29
    82ee:	b2 a5       	ldd	r27, Z+42	; 0x2a
    82f0:	48 16       	cp	r4, r24
    82f2:	59 06       	cpc	r5, r25
    82f4:	6a 06       	cpc	r6, r26
    82f6:	7b 06       	cpc	r7, r27
    82f8:	88 f2       	brcs	.-94     	; 0x829c <f_getfree+0x90>
			*nclst = nfree;			/* Return the free clusters */
    82fa:	ab a5       	ldd	r26, Y+43	; 0x2b
    82fc:	bc a5       	ldd	r27, Y+44	; 0x2c
    82fe:	cd 92       	st	X+, r12
    8300:	dd 92       	st	X+, r13
    8302:	ed 92       	st	X+, r14
    8304:	fc 92       	st	X, r15
    8306:	13 97       	sbiw	r26, 0x03	; 3
			fs->free_clst = nfree;	/* Now free_clst is valid */
    8308:	ef a1       	ldd	r30, Y+39	; 0x27
    830a:	f8 a5       	ldd	r31, Y+40	; 0x28
    830c:	c3 8a       	std	Z+19, r12	; 0x13
    830e:	d4 8a       	std	Z+20, r13	; 0x14
    8310:	e5 8a       	std	Z+21, r14	; 0x15
    8312:	f6 8a       	std	Z+22, r15	; 0x16
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
    8314:	84 81       	ldd	r24, Z+4	; 0x04
    8316:	81 60       	ori	r24, 0x01	; 1
    8318:	84 83       	std	Z+4, r24	; 0x04
	LEAVE_FF(fs, res);
    831a:	ad cf       	rjmp	.-166    	; 0x8276 <f_getfree+0x6a>
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
    831c:	84 30       	cpi	r24, 0x04	; 4
    831e:	09 f0       	breq	.+2      	; 0x8322 <f_getfree+0x116>
    8320:	46 c0       	rjmp	.+140    	; 0x83ae <f_getfree+0x1a2>
					sect = fs->bitbase;			/* Bitmap sector */
    8322:	ff 96       	adiw	r30, 0x3f	; 63
    8324:	40 81       	ld	r20, Z
    8326:	51 81       	ldd	r21, Z+1	; 0x01
    8328:	62 81       	ldd	r22, Z+2	; 0x02
    832a:	73 81       	ldd	r23, Z+3	; 0x03
					i = 0;						/* Offset in the sector */
    832c:	31 2c       	mov	r3, r1
    832e:	21 2c       	mov	r2, r1
			nfree = 0;
    8330:	c1 2c       	mov	r12, r1
    8332:	d1 2c       	mov	r13, r1
    8334:	76 01       	movw	r14, r12
						if (i == 0) {
    8336:	21 14       	cp	r2, r1
    8338:	31 04       	cpc	r3, r1
    833a:	89 f4       	brne	.+34     	; 0x835e <f_getfree+0x152>
							res = move_window(fs, sect++);
    833c:	2a 01       	movw	r4, r20
    833e:	3b 01       	movw	r6, r22
    8340:	8f ef       	ldi	r24, 0xFF	; 255
    8342:	48 1a       	sub	r4, r24
    8344:	58 0a       	sbc	r5, r24
    8346:	68 0a       	sbc	r6, r24
    8348:	78 0a       	sbc	r7, r24
    834a:	8f a1       	ldd	r24, Y+39	; 0x27
    834c:	98 a5       	ldd	r25, Y+40	; 0x28
    834e:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    8352:	9c 01       	movw	r18, r24
							if (res != FR_OK) break;
    8354:	89 2b       	or	r24, r25
    8356:	09 f0       	breq	.+2      	; 0x835a <f_getfree+0x14e>
    8358:	96 c0       	rjmp	.+300    	; 0x8486 <f_getfree+0x27a>
							res = move_window(fs, sect++);
    835a:	b3 01       	movw	r22, r6
    835c:	a2 01       	movw	r20, r4
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
    835e:	ef a1       	ldd	r30, Y+39	; 0x27
    8360:	f8 a5       	ldd	r31, Y+40	; 0x28
    8362:	e2 0d       	add	r30, r2
    8364:	f3 1d       	adc	r31, r3
    8366:	e9 5b       	subi	r30, 0xB9	; 185
    8368:	ff 4f       	sbci	r31, 0xFF	; 255
    836a:	20 81       	ld	r18, Z
    836c:	88 e0       	ldi	r24, 0x08	; 8
    836e:	90 e0       	ldi	r25, 0x00	; 0
    8370:	81 14       	cp	r8, r1
    8372:	91 04       	cpc	r9, r1
    8374:	a1 04       	cpc	r10, r1
    8376:	b1 04       	cpc	r11, r1
    8378:	79 f0       	breq	.+30     	; 0x8398 <f_getfree+0x18c>
							if (!(bm & 1)) nfree++;
    837a:	20 fd       	sbrc	r18, 0
    837c:	05 c0       	rjmp	.+10     	; 0x8388 <f_getfree+0x17c>
    837e:	af ef       	ldi	r26, 0xFF	; 255
    8380:	ca 1a       	sub	r12, r26
    8382:	da 0a       	sbc	r13, r26
    8384:	ea 0a       	sbc	r14, r26
    8386:	fa 0a       	sbc	r15, r26
							bm >>= 1;
    8388:	26 95       	lsr	r18
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
    838a:	b1 e0       	ldi	r27, 0x01	; 1
    838c:	8b 1a       	sub	r8, r27
    838e:	91 08       	sbc	r9, r1
    8390:	a1 08       	sbc	r10, r1
    8392:	b1 08       	sbc	r11, r1
    8394:	01 97       	sbiw	r24, 0x01	; 1
    8396:	61 f7       	brne	.-40     	; 0x8370 <f_getfree+0x164>
						i = (i + 1) % SS(fs);
    8398:	c1 01       	movw	r24, r2
    839a:	01 96       	adiw	r24, 0x01	; 1
    839c:	1c 01       	movw	r2, r24
    839e:	e1 e0       	ldi	r30, 0x01	; 1
    83a0:	3e 22       	and	r3, r30
					} while (clst);
    83a2:	81 14       	cp	r8, r1
    83a4:	91 04       	cpc	r9, r1
    83a6:	a1 04       	cpc	r10, r1
    83a8:	b1 04       	cpc	r11, r1
    83aa:	29 f6       	brne	.-118    	; 0x8336 <f_getfree+0x12a>
    83ac:	a6 cf       	rjmp	.-180    	; 0x82fa <f_getfree+0xee>
					sect = fs->fatbase;		/* Top of the FAT */
    83ae:	83 a9       	ldd	r24, Z+51	; 0x33
    83b0:	94 a9       	ldd	r25, Z+52	; 0x34
    83b2:	a5 a9       	ldd	r26, Z+53	; 0x35
    83b4:	b6 a9       	ldd	r27, Z+54	; 0x36
    83b6:	8d a7       	std	Y+45, r24	; 0x2d
    83b8:	9e a7       	std	Y+46, r25	; 0x2e
    83ba:	af a7       	std	Y+47, r26	; 0x2f
    83bc:	b8 ab       	std	Y+48, r27	; 0x30
					i = 0;					/* Offset in the sector */
    83be:	b1 2c       	mov	r11, r1
    83c0:	a1 2c       	mov	r10, r1
			nfree = 0;
    83c2:	c1 2c       	mov	r12, r1
    83c4:	d1 2c       	mov	r13, r1
    83c6:	76 01       	movw	r14, r12
						if (i == 0) {
    83c8:	a1 14       	cp	r10, r1
    83ca:	b1 04       	cpc	r11, r1
    83cc:	f9 f4       	brne	.+62     	; 0x840c <f_getfree+0x200>
							res = move_window(fs, sect++);
    83ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    83d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    83d2:	af a5       	ldd	r26, Y+47	; 0x2f
    83d4:	b8 a9       	ldd	r27, Y+48	; 0x30
    83d6:	01 96       	adiw	r24, 0x01	; 1
    83d8:	a1 1d       	adc	r26, r1
    83da:	b1 1d       	adc	r27, r1
    83dc:	89 ab       	std	Y+49, r24	; 0x31
    83de:	9a ab       	std	Y+50, r25	; 0x32
    83e0:	ab ab       	std	Y+51, r26	; 0x33
    83e2:	bc ab       	std	Y+52, r27	; 0x34
    83e4:	4d a5       	ldd	r20, Y+45	; 0x2d
    83e6:	5e a5       	ldd	r21, Y+46	; 0x2e
    83e8:	6f a5       	ldd	r22, Y+47	; 0x2f
    83ea:	78 a9       	ldd	r23, Y+48	; 0x30
    83ec:	8f a1       	ldd	r24, Y+39	; 0x27
    83ee:	98 a5       	ldd	r25, Y+40	; 0x28
    83f0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    83f4:	9c 01       	movw	r18, r24
							if (res != FR_OK) break;
    83f6:	89 2b       	or	r24, r25
    83f8:	09 f0       	breq	.+2      	; 0x83fc <f_getfree+0x1f0>
    83fa:	45 c0       	rjmp	.+138    	; 0x8486 <f_getfree+0x27a>
							res = move_window(fs, sect++);
    83fc:	89 a9       	ldd	r24, Y+49	; 0x31
    83fe:	9a a9       	ldd	r25, Y+50	; 0x32
    8400:	ab a9       	ldd	r26, Y+51	; 0x33
    8402:	bc a9       	ldd	r27, Y+52	; 0x34
    8404:	8d a7       	std	Y+45, r24	; 0x2d
    8406:	9e a7       	std	Y+46, r25	; 0x2e
    8408:	af a7       	std	Y+47, r26	; 0x2f
    840a:	b8 ab       	std	Y+48, r27	; 0x30
						if (fs->fs_type == FS_FAT16) {
    840c:	ef a1       	ldd	r30, Y+39	; 0x27
    840e:	f8 a5       	ldd	r31, Y+40	; 0x28
							if (ld_word(fs->win + i) == 0) nfree++;
    8410:	cf 01       	movw	r24, r30
    8412:	89 5b       	subi	r24, 0xB9	; 185
    8414:	9f 4f       	sbci	r25, 0xFF	; 255
    8416:	8a 0d       	add	r24, r10
    8418:	9b 1d       	adc	r25, r11
						if (fs->fs_type == FS_FAT16) {
    841a:	20 81       	ld	r18, Z
    841c:	22 30       	cpi	r18, 0x02	; 2
    841e:	b9 f4       	brne	.+46     	; 0x844e <f_getfree+0x242>
							if (ld_word(fs->win + i) == 0) nfree++;
    8420:	dc 01       	movw	r26, r24
    8422:	8d 91       	ld	r24, X+
    8424:	9c 91       	ld	r25, X
    8426:	89 2b       	or	r24, r25
    8428:	29 f4       	brne	.+10     	; 0x8434 <f_getfree+0x228>
    842a:	bf ef       	ldi	r27, 0xFF	; 255
    842c:	cb 1a       	sub	r12, r27
    842e:	db 0a       	sbc	r13, r27
    8430:	eb 0a       	sbc	r14, r27
    8432:	fb 0a       	sbc	r15, r27
							i += 2;
    8434:	e2 e0       	ldi	r30, 0x02	; 2
    8436:	ae 0e       	add	r10, r30
    8438:	b1 1c       	adc	r11, r1
						i %= SS(fs);
    843a:	31 e0       	ldi	r19, 0x01	; 1
    843c:	b3 22       	and	r11, r19
					} while (--clst);
    843e:	81 e0       	ldi	r24, 0x01	; 1
    8440:	48 1a       	sub	r4, r24
    8442:	51 08       	sbc	r5, r1
    8444:	61 08       	sbc	r6, r1
    8446:	71 08       	sbc	r7, r1
    8448:	09 f0       	breq	.+2      	; 0x844c <f_getfree+0x240>
    844a:	be cf       	rjmp	.-132    	; 0x83c8 <f_getfree+0x1bc>
    844c:	56 cf       	rjmp	.-340    	; 0x82fa <f_getfree+0xee>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
    844e:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    8452:	69 ab       	std	Y+49, r22	; 0x31
    8454:	7a ab       	std	Y+50, r23	; 0x32
    8456:	8b ab       	std	Y+51, r24	; 0x33
    8458:	9c ab       	std	Y+52, r25	; 0x34
    845a:	dc 01       	movw	r26, r24
    845c:	cb 01       	movw	r24, r22
    845e:	bf 70       	andi	r27, 0x0F	; 15
    8460:	89 2b       	or	r24, r25
    8462:	8a 2b       	or	r24, r26
    8464:	8b 2b       	or	r24, r27
    8466:	29 f4       	brne	.+10     	; 0x8472 <f_getfree+0x266>
    8468:	ff ef       	ldi	r31, 0xFF	; 255
    846a:	cf 1a       	sub	r12, r31
    846c:	df 0a       	sbc	r13, r31
    846e:	ef 0a       	sbc	r14, r31
    8470:	ff 0a       	sbc	r15, r31
							i += 4;
    8472:	24 e0       	ldi	r18, 0x04	; 4
    8474:	a2 0e       	add	r10, r18
    8476:	b1 1c       	adc	r11, r1
    8478:	e0 cf       	rjmp	.-64     	; 0x843a <f_getfree+0x22e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    847a:	01 e0       	ldi	r16, 0x01	; 1
    847c:	10 e0       	ldi	r17, 0x00	; 0
    847e:	3d cf       	rjmp	.-390    	; 0x82fa <f_getfree+0xee>
					if (stat == 1) { res = FR_INT_ERR; break; }
    8480:	02 e0       	ldi	r16, 0x02	; 2
    8482:	10 e0       	ldi	r17, 0x00	; 0
    8484:	3a cf       	rjmp	.-396    	; 0x82fa <f_getfree+0xee>
    8486:	89 01       	movw	r16, r18
    8488:	38 cf       	rjmp	.-400    	; 0x82fa <f_getfree+0xee>

0000848a <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
    848a:	a4 e0       	ldi	r26, 0x04	; 4
    848c:	b0 e0       	ldi	r27, 0x00	; 0
    848e:	eb e4       	ldi	r30, 0x4B	; 75
    8490:	f2 e4       	ldi	r31, 0x42	; 66
    8492:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    8496:	4c 01       	movw	r8, r24
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    8498:	be 01       	movw	r22, r28
    849a:	6f 5f       	subi	r22, 0xFF	; 255
    849c:	7f 4f       	sbci	r23, 0xFF	; 255
    849e:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
    84a2:	3c 01       	movw	r6, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
    84a4:	89 2b       	or	r24, r25
    84a6:	09 f0       	breq	.+2      	; 0x84aa <f_truncate+0x20>
    84a8:	6b c0       	rjmp	.+214    	; 0x8580 <f_truncate+0xf6>
    84aa:	f4 01       	movw	r30, r8
    84ac:	87 a1       	ldd	r24, Z+39	; 0x27
    84ae:	68 2e       	mov	r6, r24
    84b0:	71 2c       	mov	r7, r1
    84b2:	81 11       	cpse	r24, r1
    84b4:	65 c0       	rjmp	.+202    	; 0x8580 <f_truncate+0xf6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    84b6:	86 a1       	ldd	r24, Z+38	; 0x26
    84b8:	81 ff       	sbrs	r24, 1
    84ba:	a0 c0       	rjmp	.+320    	; 0x85fc <f_truncate+0x172>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
    84bc:	20 a4       	ldd	r2, Z+40	; 0x28
    84be:	31 a4       	ldd	r3, Z+41	; 0x29
    84c0:	42 a4       	ldd	r4, Z+42	; 0x2a
    84c2:	53 a4       	ldd	r5, Z+43	; 0x2b
    84c4:	b4 a5       	ldd	r27, Z+44	; 0x2c
    84c6:	a5 a5       	ldd	r26, Z+45	; 0x2d
    84c8:	f6 a5       	ldd	r31, Z+46	; 0x2e
    84ca:	fb 83       	std	Y+3, r31	; 0x03
    84cc:	f4 01       	movw	r30, r8
    84ce:	f7 a5       	ldd	r31, Z+47	; 0x2f
    84d0:	fc 83       	std	Y+4, r31	; 0x04
    84d2:	f4 01       	movw	r30, r8
    84d4:	a2 84       	ldd	r10, Z+10	; 0x0a
    84d6:	b3 84       	ldd	r11, Z+11	; 0x0b
    84d8:	c4 84       	ldd	r12, Z+12	; 0x0c
    84da:	d5 84       	ldd	r13, Z+13	; 0x0d
    84dc:	e6 84       	ldd	r14, Z+14	; 0x0e
    84de:	f7 84       	ldd	r15, Z+15	; 0x0f
    84e0:	00 89       	ldd	r16, Z+16	; 0x10
    84e2:	11 89       	ldd	r17, Z+17	; 0x11
    84e4:	91 01       	movw	r18, r2
    84e6:	a2 01       	movw	r20, r4
    84e8:	6b 2f       	mov	r22, r27
    84ea:	7a 2f       	mov	r23, r26
    84ec:	8b 81       	ldd	r24, Y+3	; 0x03
    84ee:	9c 81       	ldd	r25, Y+4	; 0x04
    84f0:	0e 94 a6 5a 	call	0xb54c	; 0xb54c <__cmpdi2>
    84f4:	08 f0       	brcs	.+2      	; 0x84f8 <f_truncate+0x6e>
    84f6:	44 c0       	rjmp	.+136    	; 0x8580 <f_truncate+0xf6>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    84f8:	a0 e0       	ldi	r26, 0x00	; 0
    84fa:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    84fe:	09 f0       	breq	.+2      	; 0x8502 <f_truncate+0x78>
    8500:	44 c0       	rjmp	.+136    	; 0x858a <f_truncate+0x100>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    8502:	46 81       	ldd	r20, Z+6	; 0x06
    8504:	57 81       	ldd	r21, Z+7	; 0x07
    8506:	60 85       	ldd	r22, Z+8	; 0x08
    8508:	71 85       	ldd	r23, Z+9	; 0x09
    850a:	00 e0       	ldi	r16, 0x00	; 0
    850c:	10 e0       	ldi	r17, 0x00	; 0
    850e:	98 01       	movw	r18, r16
    8510:	c4 01       	movw	r24, r8
    8512:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <remove_chain>
    8516:	9c 01       	movw	r18, r24
			fp->obj.sclust = 0;
    8518:	f4 01       	movw	r30, r8
    851a:	16 82       	std	Z+6, r1	; 0x06
    851c:	17 82       	std	Z+7, r1	; 0x07
    851e:	10 86       	std	Z+8, r1	; 0x08
    8520:	11 86       	std	Z+9, r1	; 0x09
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
    8522:	f4 01       	movw	r30, r8
    8524:	80 a5       	ldd	r24, Z+40	; 0x28
    8526:	82 87       	std	Z+10, r24	; 0x0a
    8528:	81 a5       	ldd	r24, Z+41	; 0x29
    852a:	83 87       	std	Z+11, r24	; 0x0b
    852c:	82 a5       	ldd	r24, Z+42	; 0x2a
    852e:	84 87       	std	Z+12, r24	; 0x0c
    8530:	83 a5       	ldd	r24, Z+43	; 0x2b
    8532:	85 87       	std	Z+13, r24	; 0x0d
    8534:	84 a5       	ldd	r24, Z+44	; 0x2c
    8536:	86 87       	std	Z+14, r24	; 0x0e
    8538:	85 a5       	ldd	r24, Z+45	; 0x2d
    853a:	87 87       	std	Z+15, r24	; 0x0f
    853c:	86 a5       	ldd	r24, Z+46	; 0x2e
    853e:	80 8b       	std	Z+16, r24	; 0x10
    8540:	87 a5       	ldd	r24, Z+47	; 0x2f
    8542:	81 8b       	std	Z+17, r24	; 0x11
		fp->flag |= FA_MODIFIED;
    8544:	86 a1       	ldd	r24, Z+38	; 0x26
    8546:	80 64       	ori	r24, 0x40	; 64
    8548:	86 a3       	std	Z+38, r24	; 0x26
#if !FF_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    854a:	21 15       	cp	r18, r1
    854c:	31 05       	cpc	r19, r1
    854e:	09 f0       	breq	.+2      	; 0x8552 <f_truncate+0xc8>
    8550:	51 c0       	rjmp	.+162    	; 0x85f4 <f_truncate+0x16a>
    8552:	87 ff       	sbrs	r24, 7
    8554:	15 c0       	rjmp	.+42     	; 0x8580 <f_truncate+0xf6>
			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
    8556:	24 a9       	ldd	r18, Z+52	; 0x34
    8558:	35 a9       	ldd	r19, Z+53	; 0x35
    855a:	46 a9       	ldd	r20, Z+54	; 0x36
    855c:	57 a9       	ldd	r21, Z+55	; 0x37
    855e:	e9 81       	ldd	r30, Y+1	; 0x01
    8560:	fa 81       	ldd	r31, Y+2	; 0x02
    8562:	01 e0       	ldi	r16, 0x01	; 1
    8564:	10 e0       	ldi	r17, 0x00	; 0
    8566:	b4 01       	movw	r22, r8
    8568:	62 5c       	subi	r22, 0xC2	; 194
    856a:	7f 4f       	sbci	r23, 0xFF	; 255
    856c:	81 81       	ldd	r24, Z+1	; 0x01
    856e:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    8572:	3c 01       	movw	r6, r24
    8574:	89 2b       	or	r24, r25
    8576:	e1 f5       	brne	.+120    	; 0x85f0 <f_truncate+0x166>
				res = FR_DISK_ERR;
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
    8578:	f4 01       	movw	r30, r8
    857a:	86 a1       	ldd	r24, Z+38	; 0x26
    857c:	8f 77       	andi	r24, 0x7F	; 127
    857e:	86 a3       	std	Z+38, r24	; 0x26
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8580:	c3 01       	movw	r24, r6
    8582:	24 96       	adiw	r28, 0x04	; 4
    8584:	e2 e1       	ldi	r30, 0x12	; 18
    8586:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
			ncl = get_fat(&fp->obj, fp->clust);
    858a:	40 a9       	ldd	r20, Z+48	; 0x30
    858c:	51 a9       	ldd	r21, Z+49	; 0x31
    858e:	62 a9       	ldd	r22, Z+50	; 0x32
    8590:	73 a9       	ldd	r23, Z+51	; 0x33
    8592:	c4 01       	movw	r24, r8
    8594:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    8598:	46 2f       	mov	r20, r22
    859a:	57 2f       	mov	r21, r23
    859c:	bc 01       	movw	r22, r24
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    859e:	21 e0       	ldi	r18, 0x01	; 1
    85a0:	30 e0       	ldi	r19, 0x00	; 0
    85a2:	4f 3f       	cpi	r20, 0xFF	; 255
    85a4:	ff ef       	ldi	r31, 0xFF	; 255
    85a6:	5f 07       	cpc	r21, r31
    85a8:	6f 07       	cpc	r22, r31
    85aa:	7f 07       	cpc	r23, r31
    85ac:	09 f4       	brne	.+2      	; 0x85b0 <f_truncate+0x126>
    85ae:	b9 cf       	rjmp	.-142    	; 0x8522 <f_truncate+0x98>
			if (ncl == 1) res = FR_INT_ERR;
    85b0:	22 e0       	ldi	r18, 0x02	; 2
    85b2:	30 e0       	ldi	r19, 0x00	; 0
    85b4:	41 30       	cpi	r20, 0x01	; 1
    85b6:	51 05       	cpc	r21, r1
    85b8:	61 05       	cpc	r22, r1
    85ba:	71 05       	cpc	r23, r1
    85bc:	09 f4       	brne	.+2      	; 0x85c0 <f_truncate+0x136>
    85be:	b1 cf       	rjmp	.-158    	; 0x8522 <f_truncate+0x98>
			if (res == FR_OK && ncl < fs->n_fatent) {
    85c0:	e9 81       	ldd	r30, Y+1	; 0x01
    85c2:	fa 81       	ldd	r31, Y+2	; 0x02
    85c4:	87 a1       	ldd	r24, Z+39	; 0x27
    85c6:	90 a5       	ldd	r25, Z+40	; 0x28
    85c8:	a1 a5       	ldd	r26, Z+41	; 0x29
    85ca:	b2 a5       	ldd	r27, Z+42	; 0x2a
    85cc:	30 e0       	ldi	r19, 0x00	; 0
    85ce:	20 e0       	ldi	r18, 0x00	; 0
    85d0:	48 17       	cp	r20, r24
    85d2:	59 07       	cpc	r21, r25
    85d4:	6a 07       	cpc	r22, r26
    85d6:	7b 07       	cpc	r23, r27
    85d8:	08 f0       	brcs	.+2      	; 0x85dc <f_truncate+0x152>
    85da:	a3 cf       	rjmp	.-186    	; 0x8522 <f_truncate+0x98>
				res = remove_chain(&fp->obj, ncl, fp->clust);
    85dc:	f4 01       	movw	r30, r8
    85de:	00 a9       	ldd	r16, Z+48	; 0x30
    85e0:	11 a9       	ldd	r17, Z+49	; 0x31
    85e2:	22 a9       	ldd	r18, Z+50	; 0x32
    85e4:	33 a9       	ldd	r19, Z+51	; 0x33
    85e6:	c4 01       	movw	r24, r8
    85e8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <remove_chain>
    85ec:	9c 01       	movw	r18, r24
    85ee:	99 cf       	rjmp	.-206    	; 0x8522 <f_truncate+0x98>
				res = FR_DISK_ERR;
    85f0:	21 e0       	ldi	r18, 0x01	; 1
    85f2:	30 e0       	ldi	r19, 0x00	; 0
		if (res != FR_OK) ABORT(fs, res);
    85f4:	f4 01       	movw	r30, r8
    85f6:	27 a3       	std	Z+39, r18	; 0x27
    85f8:	39 01       	movw	r6, r18
    85fa:	c2 cf       	rjmp	.-124    	; 0x8580 <f_truncate+0xf6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    85fc:	87 e0       	ldi	r24, 0x07	; 7
    85fe:	68 2e       	mov	r6, r24
    8600:	71 2c       	mov	r7, r1
    8602:	be cf       	rjmp	.-132    	; 0x8580 <f_truncate+0xf6>

00008604 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    8604:	a2 eb       	ldi	r26, 0xB2	; 178
    8606:	b0 e0       	ldi	r27, 0x00	; 0
    8608:	e8 e0       	ldi	r30, 0x08	; 8
    860a:	f3 e4       	ldi	r31, 0x43	; 67
    860c:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__prologue_saves__+0x14>
    8610:	cf 54       	subi	r28, 0x4F	; 79
    8612:	df 4f       	sbci	r29, 0xFF	; 255
    8614:	99 83       	std	Y+1, r25	; 0x01
    8616:	88 83       	st	Y, r24
    8618:	c1 5b       	subi	r28, 0xB1	; 177
    861a:	d0 40       	sbci	r29, 0x00	; 0
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    861c:	42 e0       	ldi	r20, 0x02	; 2
    861e:	be 01       	movw	r22, r28
    8620:	61 55       	subi	r22, 0x51	; 81
    8622:	7f 4f       	sbci	r23, 0xFF	; 255
    8624:	ce 01       	movw	r24, r28
    8626:	8f 54       	subi	r24, 0x4F	; 79
    8628:	9f 4f       	sbci	r25, 0xFF	; 255
    862a:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    862e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8630:	89 2b       	or	r24, r25
    8632:	41 f5       	brne	.+80     	; 0x8684 <f_unlink+0x80>
		dj.obj.fs = fs;
    8634:	c1 55       	subi	r28, 0x51	; 81
    8636:	df 4f       	sbci	r29, 0xFF	; 255
    8638:	88 81       	ld	r24, Y
    863a:	99 81       	ldd	r25, Y+1	; 0x01
    863c:	cf 5a       	subi	r28, 0xAF	; 175
    863e:	d0 40       	sbci	r29, 0x00	; 0
    8640:	27 96       	adiw	r28, 0x07	; 7
    8642:	9f af       	std	Y+63, r25	; 0x3f
    8644:	8e af       	std	Y+62, r24	; 0x3e
    8646:	27 97       	sbiw	r28, 0x07	; 7
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    8648:	cf 54       	subi	r28, 0x4F	; 79
    864a:	df 4f       	sbci	r29, 0xFF	; 255
    864c:	68 81       	ld	r22, Y
    864e:	79 81       	ldd	r23, Y+1	; 0x01
    8650:	c1 5b       	subi	r28, 0xB1	; 177
    8652:	d0 40       	sbci	r29, 0x00	; 0
    8654:	ce 01       	movw	r24, r28
    8656:	8b 5b       	subi	r24, 0xBB	; 187
    8658:	9f 4f       	sbci	r25, 0xFF	; 255
    865a:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    865e:	9c 01       	movw	r18, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    8660:	89 2b       	or	r24, r25
    8662:	81 f4       	brne	.+32     	; 0x8684 <f_unlink+0x80>
    8664:	cc 57       	subi	r28, 0x7C	; 124
    8666:	df 4f       	sbci	r29, 0xFF	; 255
    8668:	88 81       	ld	r24, Y
    866a:	c4 58       	subi	r28, 0x84	; 132
    866c:	d0 40       	sbci	r29, 0x00	; 0
    866e:	85 fd       	sbrc	r24, 5
    8670:	ca c0       	rjmp	.+404    	; 0x8806 <f_unlink+0x202>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    8672:	87 fd       	sbrc	r24, 7
    8674:	c8 c0       	rjmp	.+400    	; 0x8806 <f_unlink+0x202>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    8676:	2a 96       	adiw	r28, 0x0a	; 10
    8678:	8f ad       	ldd	r24, Y+63	; 0x3f
    867a:	2a 97       	sbiw	r28, 0x0a	; 10
    867c:	80 ff       	sbrs	r24, 0
    867e:	08 c0       	rjmp	.+16     	; 0x8690 <f_unlink+0x8c>
					res = FR_DENIED;		/* Cannot remove R/O object */
    8680:	27 e0       	ldi	r18, 0x07	; 7
    8682:	30 e0       	ldi	r19, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    8684:	c9 01       	movw	r24, r18
    8686:	ce 54       	subi	r28, 0x4E	; 78
    8688:	df 4f       	sbci	r29, 0xFF	; 255
    868a:	e8 e0       	ldi	r30, 0x08	; 8
    868c:	0c 94 5a 5a 	jmp	0xb4b4	; 0xb4b4 <__epilogue_restores__+0x14>
				obj.fs = fs;
    8690:	c1 55       	subi	r28, 0x51	; 81
    8692:	df 4f       	sbci	r29, 0xFF	; 255
    8694:	e8 81       	ld	r30, Y
    8696:	f9 81       	ldd	r31, Y+1	; 0x01
    8698:	cf 5a       	subi	r28, 0xAF	; 175
    869a:	d0 40       	sbci	r29, 0x00	; 0
    869c:	c7 57       	subi	r28, 0x77	; 119
    869e:	df 4f       	sbci	r29, 0xFF	; 255
    86a0:	f9 83       	std	Y+1, r31	; 0x01
    86a2:	e8 83       	st	Y, r30
    86a4:	c9 58       	subi	r28, 0x89	; 137
    86a6:	d0 40       	sbci	r29, 0x00	; 0
				if (fs->fs_type == FS_EXFAT) {
    86a8:	80 81       	ld	r24, Z
    86aa:	84 30       	cpi	r24, 0x04	; 4
    86ac:	61 f5       	brne	.+88     	; 0x8706 <f_unlink+0x102>
					init_alloc_info(fs, &obj);
    86ae:	be 01       	movw	r22, r28
    86b0:	67 57       	subi	r22, 0x77	; 119
    86b2:	7f 4f       	sbci	r23, 0xFF	; 255
    86b4:	85 85       	ldd	r24, Z+13	; 0x0d
    86b6:	96 85       	ldd	r25, Z+14	; 0x0e
    86b8:	0e 94 c5 2c 	call	0x598a	; 0x598a <init_alloc_info.isra.0>
					dclst = obj.sclust;
    86bc:	c1 57       	subi	r28, 0x71	; 113
    86be:	df 4f       	sbci	r29, 0xFF	; 255
    86c0:	c8 80       	ld	r12, Y
    86c2:	d9 80       	ldd	r13, Y+1	; 0x01
    86c4:	ea 80       	ldd	r14, Y+2	; 0x02
    86c6:	fb 80       	ldd	r15, Y+3	; 0x03
    86c8:	cf 58       	subi	r28, 0x8F	; 143
    86ca:	d0 40       	sbci	r29, 0x00	; 0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    86cc:	2a 96       	adiw	r28, 0x0a	; 10
    86ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    86d0:	2a 97       	sbiw	r28, 0x0a	; 10
    86d2:	84 fd       	sbrc	r24, 4
    86d4:	21 c0       	rjmp	.+66     	; 0x8718 <f_unlink+0x114>
				res = dir_remove(&dj);			/* Remove the directory entry */
    86d6:	ce 01       	movw	r24, r28
    86d8:	8b 5b       	subi	r24, 0xBB	; 187
    86da:	9f 4f       	sbci	r25, 0xFF	; 255
    86dc:	0e 94 75 23 	call	0x46ea	; 0x46ea <dir_remove>
    86e0:	9c 01       	movw	r18, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    86e2:	89 2b       	or	r24, r25
    86e4:	79 f6       	brne	.-98     	; 0x8684 <f_unlink+0x80>
    86e6:	c1 14       	cp	r12, r1
    86e8:	d1 04       	cpc	r13, r1
    86ea:	e1 04       	cpc	r14, r1
    86ec:	f1 04       	cpc	r15, r1
    86ee:	09 f0       	breq	.+2      	; 0x86f2 <f_unlink+0xee>
    86f0:	7b c0       	rjmp	.+246    	; 0x87e8 <f_unlink+0x1e4>
				if (res == FR_OK) res = sync_fs(fs);
    86f2:	c1 55       	subi	r28, 0x51	; 81
    86f4:	df 4f       	sbci	r29, 0xFF	; 255
    86f6:	88 81       	ld	r24, Y
    86f8:	99 81       	ldd	r25, Y+1	; 0x01
    86fa:	cf 5a       	subi	r28, 0xAF	; 175
    86fc:	d0 40       	sbci	r29, 0x00	; 0
    86fe:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sync_fs>
    8702:	9c 01       	movw	r18, r24
    8704:	bf cf       	rjmp	.-130    	; 0x8684 <f_unlink+0x80>
					dclst = ld_clust(fs, dj.dir);
    8706:	e9 96       	adiw	r28, 0x39	; 57
    8708:	6e ad       	ldd	r22, Y+62	; 0x3e
    870a:	7f ad       	ldd	r23, Y+63	; 0x3f
    870c:	e9 97       	sbiw	r28, 0x39	; 57
    870e:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    8712:	6b 01       	movw	r12, r22
    8714:	7c 01       	movw	r14, r24
    8716:	da cf       	rjmp	.-76     	; 0x86cc <f_unlink+0xc8>
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    8718:	c1 55       	subi	r28, 0x51	; 81
    871a:	df 4f       	sbci	r29, 0xFF	; 255
    871c:	e8 81       	ld	r30, Y
    871e:	f9 81       	ldd	r31, Y+1	; 0x01
    8720:	cf 5a       	subi	r28, 0xAF	; 175
    8722:	d0 40       	sbci	r29, 0x00	; 0
    8724:	87 89       	ldd	r24, Z+23	; 0x17
    8726:	90 8d       	ldd	r25, Z+24	; 0x18
    8728:	a1 8d       	ldd	r26, Z+25	; 0x19
    872a:	b2 8d       	ldd	r27, Z+26	; 0x1a
    872c:	8c 15       	cp	r24, r12
    872e:	9d 05       	cpc	r25, r13
    8730:	ae 05       	cpc	r26, r14
    8732:	bf 05       	cpc	r27, r15
    8734:	09 f4       	brne	.+2      	; 0x8738 <f_unlink+0x134>
    8736:	a4 cf       	rjmp	.-184    	; 0x8680 <f_unlink+0x7c>
						sdj.obj.fs = fs;				/* Open the sub-directory */
    8738:	fa 83       	std	Y+2, r31	; 0x02
    873a:	e9 83       	std	Y+1, r30	; 0x01
						sdj.obj.sclust = dclst;
    873c:	cf 82       	std	Y+7, r12	; 0x07
    873e:	d8 86       	std	Y+8, r13	; 0x08
    8740:	e9 86       	std	Y+9, r14	; 0x09
    8742:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
    8744:	80 81       	ld	r24, Z
    8746:	84 30       	cpi	r24, 0x04	; 4
    8748:	b1 f5       	brne	.+108    	; 0x87b6 <f_unlink+0x1b2>
							sdj.obj.objsize = obj.objsize;
    874a:	cd 56       	subi	r28, 0x6D	; 109
    874c:	df 4f       	sbci	r29, 0xFF	; 255
    874e:	88 81       	ld	r24, Y
    8750:	c3 59       	subi	r28, 0x93	; 147
    8752:	d0 40       	sbci	r29, 0x00	; 0
    8754:	8b 87       	std	Y+11, r24	; 0x0b
    8756:	cc 56       	subi	r28, 0x6C	; 108
    8758:	df 4f       	sbci	r29, 0xFF	; 255
    875a:	88 81       	ld	r24, Y
    875c:	c4 59       	subi	r28, 0x94	; 148
    875e:	d0 40       	sbci	r29, 0x00	; 0
    8760:	8c 87       	std	Y+12, r24	; 0x0c
    8762:	cb 56       	subi	r28, 0x6B	; 107
    8764:	df 4f       	sbci	r29, 0xFF	; 255
    8766:	88 81       	ld	r24, Y
    8768:	c5 59       	subi	r28, 0x95	; 149
    876a:	d0 40       	sbci	r29, 0x00	; 0
    876c:	8d 87       	std	Y+13, r24	; 0x0d
    876e:	ca 56       	subi	r28, 0x6A	; 106
    8770:	df 4f       	sbci	r29, 0xFF	; 255
    8772:	88 81       	ld	r24, Y
    8774:	c6 59       	subi	r28, 0x96	; 150
    8776:	d0 40       	sbci	r29, 0x00	; 0
    8778:	8e 87       	std	Y+14, r24	; 0x0e
    877a:	c9 56       	subi	r28, 0x69	; 105
    877c:	df 4f       	sbci	r29, 0xFF	; 255
    877e:	88 81       	ld	r24, Y
    8780:	c7 59       	subi	r28, 0x97	; 151
    8782:	d0 40       	sbci	r29, 0x00	; 0
    8784:	8f 87       	std	Y+15, r24	; 0x0f
    8786:	c8 56       	subi	r28, 0x68	; 104
    8788:	df 4f       	sbci	r29, 0xFF	; 255
    878a:	88 81       	ld	r24, Y
    878c:	c8 59       	subi	r28, 0x98	; 152
    878e:	d0 40       	sbci	r29, 0x00	; 0
    8790:	88 8b       	std	Y+16, r24	; 0x10
    8792:	c7 56       	subi	r28, 0x67	; 103
    8794:	df 4f       	sbci	r29, 0xFF	; 255
    8796:	88 81       	ld	r24, Y
    8798:	c9 59       	subi	r28, 0x99	; 153
    879a:	d0 40       	sbci	r29, 0x00	; 0
    879c:	89 8b       	std	Y+17, r24	; 0x11
    879e:	c6 56       	subi	r28, 0x66	; 102
    87a0:	df 4f       	sbci	r29, 0xFF	; 255
    87a2:	88 81       	ld	r24, Y
    87a4:	ca 59       	subi	r28, 0x9A	; 154
    87a6:	d0 40       	sbci	r29, 0x00	; 0
    87a8:	8a 8b       	std	Y+18, r24	; 0x12
							sdj.obj.stat = obj.stat;
    87aa:	c2 57       	subi	r28, 0x72	; 114
    87ac:	df 4f       	sbci	r29, 0xFF	; 255
    87ae:	88 81       	ld	r24, Y
    87b0:	ce 58       	subi	r28, 0x8E	; 142
    87b2:	d0 40       	sbci	r29, 0x00	; 0
    87b4:	8e 83       	std	Y+6, r24	; 0x06
						res = dir_sdi(&sdj, 0);
    87b6:	40 e0       	ldi	r20, 0x00	; 0
    87b8:	50 e0       	ldi	r21, 0x00	; 0
    87ba:	ba 01       	movw	r22, r20
    87bc:	ce 01       	movw	r24, r28
    87be:	01 96       	adiw	r24, 0x01	; 1
    87c0:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    87c4:	9c 01       	movw	r18, r24
						if (res == FR_OK) {
    87c6:	89 2b       	or	r24, r25
    87c8:	09 f0       	breq	.+2      	; 0x87cc <f_unlink+0x1c8>
    87ca:	5c cf       	rjmp	.-328    	; 0x8684 <f_unlink+0x80>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    87cc:	70 e0       	ldi	r23, 0x00	; 0
    87ce:	60 e0       	ldi	r22, 0x00	; 0
    87d0:	ce 01       	movw	r24, r28
    87d2:	01 96       	adiw	r24, 0x01	; 1
    87d4:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <dir_read>
    87d8:	9c 01       	movw	r18, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    87da:	00 97       	sbiw	r24, 0x00	; 0
    87dc:	09 f4       	brne	.+2      	; 0x87e0 <f_unlink+0x1dc>
    87de:	50 cf       	rjmp	.-352    	; 0x8680 <f_unlink+0x7c>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    87e0:	04 97       	sbiw	r24, 0x04	; 4
    87e2:	09 f0       	breq	.+2      	; 0x87e6 <f_unlink+0x1e2>
    87e4:	4f cf       	rjmp	.-354    	; 0x8684 <f_unlink+0x80>
    87e6:	77 cf       	rjmp	.-274    	; 0x86d6 <f_unlink+0xd2>
					res = remove_chain(&obj, dclst, 0);
    87e8:	00 e0       	ldi	r16, 0x00	; 0
    87ea:	10 e0       	ldi	r17, 0x00	; 0
    87ec:	98 01       	movw	r18, r16
    87ee:	b7 01       	movw	r22, r14
    87f0:	a6 01       	movw	r20, r12
    87f2:	ce 01       	movw	r24, r28
    87f4:	87 57       	subi	r24, 0x77	; 119
    87f6:	9f 4f       	sbci	r25, 0xFF	; 255
    87f8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <remove_chain>
    87fc:	9c 01       	movw	r18, r24
				if (res == FR_OK) res = sync_fs(fs);
    87fe:	89 2b       	or	r24, r25
    8800:	09 f0       	breq	.+2      	; 0x8804 <f_unlink+0x200>
    8802:	40 cf       	rjmp	.-384    	; 0x8684 <f_unlink+0x80>
    8804:	76 cf       	rjmp	.-276    	; 0x86f2 <f_unlink+0xee>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    8806:	26 e0       	ldi	r18, 0x06	; 6
    8808:	30 e0       	ldi	r19, 0x00	; 0
	LEAVE_FF(fs, res);
    880a:	3c cf       	rjmp	.-392    	; 0x8684 <f_unlink+0x80>

0000880c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    880c:	ae e6       	ldi	r26, 0x6E	; 110
    880e:	b0 e0       	ldi	r27, 0x00	; 0
    8810:	ec e0       	ldi	r30, 0x0C	; 12
    8812:	f4 e4       	ldi	r31, 0x44	; 68
    8814:	0c 94 3a 5a 	jmp	0xb474	; 0xb474 <__prologue_saves__+0xc>
    8818:	af 96       	adiw	r28, 0x2f	; 47
    881a:	9f af       	std	Y+63, r25	; 0x3f
    881c:	8e af       	std	Y+62, r24	; 0x3e
    881e:	af 97       	sbiw	r28, 0x2f	; 47
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    8820:	42 e0       	ldi	r20, 0x02	; 2
    8822:	be 01       	movw	r22, r28
    8824:	65 59       	subi	r22, 0x95	; 149
    8826:	7f 4f       	sbci	r23, 0xFF	; 255
    8828:	ce 01       	movw	r24, r28
    882a:	83 59       	subi	r24, 0x93	; 147
    882c:	9f 4f       	sbci	r25, 0xFF	; 255
    882e:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    8832:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
    8834:	89 2b       	or	r24, r25
    8836:	09 f0       	breq	.+2      	; 0x883a <f_mkdir+0x2e>
    8838:	2a c1       	rjmp	.+596    	; 0x8a8e <f_mkdir+0x282>
		dj.obj.fs = fs;
    883a:	ad 96       	adiw	r28, 0x2d	; 45
    883c:	8e ad       	ldd	r24, Y+62	; 0x3e
    883e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8840:	ad 97       	sbiw	r28, 0x2d	; 45
    8842:	9a 83       	std	Y+2, r25	; 0x02
    8844:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    8846:	af 96       	adiw	r28, 0x2f	; 47
    8848:	6e ad       	ldd	r22, Y+62	; 0x3e
    884a:	7f ad       	ldd	r23, Y+63	; 0x3f
    884c:	af 97       	sbiw	r28, 0x2f	; 47
    884e:	ce 01       	movw	r24, r28
    8850:	01 96       	adiw	r24, 0x01	; 1
    8852:	5c 01       	movw	r10, r24
    8854:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    8858:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    885a:	1a 2d       	mov	r17, r10
    885c:	0b 2d       	mov	r16, r11
    885e:	89 2b       	or	r24, r25
    8860:	09 f4       	brne	.+2      	; 0x8864 <f_mkdir+0x58>
    8862:	49 c1       	rjmp	.+658    	; 0x8af6 <f_mkdir+0x2ea>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    8864:	94 e0       	ldi	r25, 0x04	; 4
    8866:	e9 16       	cp	r14, r25
    8868:	f1 04       	cpc	r15, r1
    886a:	09 f0       	breq	.+2      	; 0x886e <f_mkdir+0x62>
    886c:	10 c1       	rjmp	.+544    	; 0x8a8e <f_mkdir+0x282>
    886e:	21 96       	adiw	r28, 0x01	; 1
    8870:	8f ad       	ldd	r24, Y+63	; 0x3f
    8872:	21 97       	sbiw	r28, 0x01	; 1
    8874:	85 fd       	sbrc	r24, 5
    8876:	43 c1       	rjmp	.+646    	; 0x8afe <f_mkdir+0x2f2>
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    8878:	7e 01       	movw	r14, r28
    887a:	a5 e4       	ldi	r26, 0x45	; 69
    887c:	ea 0e       	add	r14, r26
    887e:	f1 1c       	adc	r15, r1
    8880:	ad 96       	adiw	r28, 0x2d	; 45
    8882:	8e ad       	ldd	r24, Y+62	; 0x3e
    8884:	9f ad       	ldd	r25, Y+63	; 0x3f
    8886:	ad 97       	sbiw	r28, 0x2d	; 45
    8888:	f7 01       	movw	r30, r14
    888a:	91 83       	std	Z+1, r25	; 0x01
    888c:	80 83       	st	Z, r24
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    888e:	40 e0       	ldi	r20, 0x00	; 0
    8890:	50 e0       	ldi	r21, 0x00	; 0
    8892:	ba 01       	movw	r22, r20
    8894:	c7 01       	movw	r24, r14
    8896:	0e 94 28 1c 	call	0x3850	; 0x3850 <create_chain>
    889a:	4b 01       	movw	r8, r22
    889c:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    889e:	de 2c       	mov	r13, r14
    88a0:	cf 2c       	mov	r12, r15
    88a2:	81 14       	cp	r8, r1
    88a4:	91 04       	cpc	r9, r1
    88a6:	a1 04       	cpc	r10, r1
    88a8:	b1 04       	cpc	r11, r1
    88aa:	09 f4       	brne	.+2      	; 0x88ae <f_mkdir+0xa2>
    88ac:	17 c1       	rjmp	.+558    	; 0x8adc <f_mkdir+0x2d0>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    88ae:	32 e0       	ldi	r19, 0x02	; 2
    88b0:	e3 2e       	mov	r14, r19
    88b2:	f1 2c       	mov	r15, r1
    88b4:	f1 e0       	ldi	r31, 0x01	; 1
    88b6:	8f 16       	cp	r8, r31
    88b8:	91 04       	cpc	r9, r1
    88ba:	a1 04       	cpc	r10, r1
    88bc:	b1 04       	cpc	r11, r1
    88be:	09 f4       	brne	.+2      	; 0x88c2 <f_mkdir+0xb6>
    88c0:	10 c1       	rjmp	.+544    	; 0x8ae2 <f_mkdir+0x2d6>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    88c2:	ee 24       	eor	r14, r14
    88c4:	e3 94       	inc	r14
    88c6:	f1 2c       	mov	r15, r1
    88c8:	bf ef       	ldi	r27, 0xFF	; 255
    88ca:	8b 16       	cp	r8, r27
    88cc:	9b 06       	cpc	r9, r27
    88ce:	ab 06       	cpc	r10, r27
    88d0:	bb 06       	cpc	r11, r27
    88d2:	09 f4       	brne	.+2      	; 0x88d6 <f_mkdir+0xca>
    88d4:	06 c1       	rjmp	.+524    	; 0x8ae2 <f_mkdir+0x2d6>
			tm = GET_FATTIME();
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    88d6:	b5 01       	movw	r22, r10
    88d8:	a4 01       	movw	r20, r8
    88da:	ad 96       	adiw	r28, 0x2d	; 45
    88dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    88de:	9f ad       	ldd	r25, Y+63	; 0x3f
    88e0:	ad 97       	sbiw	r28, 0x2d	; 45
    88e2:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <dir_clear>
    88e6:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    88e8:	89 2b       	or	r24, r25
    88ea:	09 f0       	breq	.+2      	; 0x88ee <f_mkdir+0xe2>
    88ec:	fa c0       	rjmp	.+500    	; 0x8ae2 <f_mkdir+0x2d6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
    88ee:	ad 96       	adiw	r28, 0x2d	; 45
    88f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    88f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    88f4:	ad 97       	sbiw	r28, 0x2d	; 45
    88f6:	dc 01       	movw	r26, r24
    88f8:	2c 91       	ld	r18, X
    88fa:	24 30       	cpi	r18, 0x04	; 4
    88fc:	09 f4       	brne	.+2      	; 0x8900 <f_mkdir+0xf4>
    88fe:	48 c0       	rjmp	.+144    	; 0x8990 <f_mkdir+0x184>
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    8900:	4b e0       	ldi	r20, 0x0B	; 11
    8902:	50 e0       	ldi	r21, 0x00	; 0
    8904:	60 e2       	ldi	r22, 0x20	; 32
    8906:	70 e0       	ldi	r23, 0x00	; 0
    8908:	89 5b       	subi	r24, 0xB9	; 185
    890a:	9f 4f       	sbci	r25, 0xFF	; 255
    890c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
						fs->win[DIR_Name] = '.';
    8910:	ad 96       	adiw	r28, 0x2d	; 45
    8912:	8e ad       	ldd	r24, Y+62	; 0x3e
    8914:	9f ad       	ldd	r25, Y+63	; 0x3f
    8916:	ad 97       	sbiw	r28, 0x2d	; 45
    8918:	bc 01       	movw	r22, r24
    891a:	69 5b       	subi	r22, 0xB9	; 185
    891c:	7f 4f       	sbci	r23, 0xFF	; 255
    891e:	3e e2       	ldi	r19, 0x2E	; 46
    8920:	f3 2e       	mov	r15, r19
    8922:	fb 01       	movw	r30, r22
    8924:	f0 82       	st	Z, r15
						fs->win[DIR_Attr] = AM_DIR;
    8926:	3b 96       	adiw	r30, 0x0b	; 11
    8928:	20 e1       	ldi	r18, 0x10	; 16
    892a:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    892c:	3b 96       	adiw	r30, 0x0b	; 11
    892e:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    8930:	31 96       	adiw	r30, 0x01	; 1
    8932:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    8934:	31 96       	adiw	r30, 0x01	; 1
    8936:	21 e2       	ldi	r18, 0x21	; 33
    8938:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val;
    893a:	31 96       	adiw	r30, 0x01	; 1
    893c:	2c e4       	ldi	r18, 0x4C	; 76
    893e:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
						st_clust(fs, fs->win, dcl);
    8940:	a5 01       	movw	r20, r10
    8942:	94 01       	movw	r18, r8
    8944:	0e 94 3b 13 	call	0x2676	; 0x2676 <st_clust>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    8948:	ad 96       	adiw	r28, 0x2d	; 45
    894a:	8e ad       	ldd	r24, Y+62	; 0x3e
    894c:	9f ad       	ldd	r25, Y+63	; 0x3f
    894e:	ad 97       	sbiw	r28, 0x2d	; 45
    8950:	bc 01       	movw	r22, r24
    8952:	69 5b       	subi	r22, 0xB9	; 185
    8954:	7f 4f       	sbci	r23, 0xFF	; 255
    8956:	40 e2       	ldi	r20, 0x20	; 32
    8958:	50 e0       	ldi	r21, 0x00	; 0
    895a:	89 59       	subi	r24, 0x99	; 153
    895c:	9f 4f       	sbci	r25, 0xFF	; 255
    895e:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    8962:	ad 96       	adiw	r28, 0x2d	; 45
    8964:	8e ad       	ldd	r24, Y+62	; 0x3e
    8966:	9f ad       	ldd	r25, Y+63	; 0x3f
    8968:	ad 97       	sbiw	r28, 0x2d	; 45
    896a:	fc 01       	movw	r30, r24
    896c:	e8 59       	subi	r30, 0x98	; 152
    896e:	ff 4f       	sbci	r31, 0xFF	; 255
    8970:	f0 82       	st	Z, r15
						st_clust(fs, fs->win + SZDIRE, pcl);
    8972:	2f 81       	ldd	r18, Y+7	; 0x07
    8974:	38 85       	ldd	r19, Y+8	; 0x08
    8976:	49 85       	ldd	r20, Y+9	; 0x09
    8978:	5a 85       	ldd	r21, Y+10	; 0x0a
    897a:	bc 01       	movw	r22, r24
    897c:	69 59       	subi	r22, 0x99	; 153
    897e:	7f 4f       	sbci	r23, 0xFF	; 255
    8980:	0e 94 3b 13 	call	0x2676	; 0x2676 <st_clust>
						fs->wflag = 1;
    8984:	ad 96       	adiw	r28, 0x2d	; 45
    8986:	ee ad       	ldd	r30, Y+62	; 0x3e
    8988:	ff ad       	ldd	r31, Y+63	; 0x3f
    898a:	ad 97       	sbiw	r28, 0x2d	; 45
    898c:	81 e0       	ldi	r24, 0x01	; 1
    898e:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    8990:	81 2f       	mov	r24, r17
    8992:	90 2f       	mov	r25, r16
    8994:	0e 94 93 25 	call	0x4b26	; 0x4b26 <dir_register>
    8998:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    899a:	89 2b       	or	r24, r25
    899c:	09 f0       	breq	.+2      	; 0x89a0 <f_mkdir+0x194>
    899e:	a1 c0       	rjmp	.+322    	; 0x8ae2 <f_mkdir+0x2d6>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
    89a0:	ad 96       	adiw	r28, 0x2d	; 45
    89a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    89a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    89a6:	ad 97       	sbiw	r28, 0x2d	; 45
    89a8:	80 81       	ld	r24, Z
    89aa:	84 30       	cpi	r24, 0x04	; 4
    89ac:	09 f0       	breq	.+2      	; 0x89b0 <f_mkdir+0x1a4>
    89ae:	75 c0       	rjmp	.+234    	; 0x8a9a <f_mkdir+0x28e>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
    89b0:	a5 85       	ldd	r26, Z+13	; 0x0d
    89b2:	b6 85       	ldd	r27, Z+14	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    89b4:	1c 96       	adiw	r26, 0x0c	; 12
    89b6:	1c 92       	st	X, r1
    89b8:	1c 97       	sbiw	r26, 0x0c	; 12
	*ptr++ = (BYTE)val; val >>= 8;
    89ba:	1d 96       	adiw	r26, 0x0d	; 13
    89bc:	1c 92       	st	X, r1
    89be:	1d 97       	sbiw	r26, 0x0d	; 13
	*ptr++ = (BYTE)val; val >>= 8;
    89c0:	81 e2       	ldi	r24, 0x21	; 33
    89c2:	1e 96       	adiw	r26, 0x0e	; 14
    89c4:	8c 93       	st	X, r24
    89c6:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val;
    89c8:	8c e4       	ldi	r24, 0x4C	; 76
    89ca:	1f 96       	adiw	r26, 0x0f	; 15
    89cc:	8c 93       	st	X, r24
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
    89ce:	a5 85       	ldd	r26, Z+13	; 0x0d
    89d0:	b6 85       	ldd	r27, Z+14	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    89d2:	d4 96       	adiw	r26, 0x34	; 52
    89d4:	8d 92       	st	X+, r8
    89d6:	9d 92       	st	X+, r9
    89d8:	ad 92       	st	X+, r10
    89da:	bc 92       	st	X, r11
    89dc:	d7 97       	sbiw	r26, 0x37	; 55
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be valid */
    89de:	81 85       	ldd	r24, Z+9	; 0x09
    89e0:	92 85       	ldd	r25, Z+10	; 0x0a
    89e2:	6c 01       	movw	r12, r24
    89e4:	f1 2c       	mov	r15, r1
    89e6:	e1 2c       	mov	r14, r1
    89e8:	b7 01       	movw	r22, r14
    89ea:	ac 01       	movw	r20, r24
    89ec:	a9 e0       	ldi	r26, 0x09	; 9
    89ee:	44 0f       	add	r20, r20
    89f0:	55 1f       	adc	r21, r21
    89f2:	66 1f       	adc	r22, r22
    89f4:	77 1f       	adc	r23, r23
    89f6:	aa 95       	dec	r26
    89f8:	d1 f7       	brne	.-12     	; 0x89ee <f_mkdir+0x1e2>
    89fa:	25 85       	ldd	r18, Z+13	; 0x0d
    89fc:	36 85       	ldd	r19, Z+14	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    89fe:	d9 01       	movw	r26, r18
    8a00:	d8 96       	adiw	r26, 0x38	; 56
    8a02:	1c 92       	st	X, r1
    8a04:	d8 97       	sbiw	r26, 0x38	; 56
    8a06:	cc 0c       	add	r12, r12
    8a08:	dd 1c       	adc	r13, r13
    8a0a:	ee 1c       	adc	r14, r14
    8a0c:	ff 1c       	adc	r15, r15
	*ptr++ = (BYTE)val; val >>= 8;
    8a0e:	d9 96       	adiw	r26, 0x39	; 57
    8a10:	cc 92       	st	X, r12
    8a12:	d9 97       	sbiw	r26, 0x39	; 57
	*ptr++ = (BYTE)val; val >>= 8;
    8a14:	da 96       	adiw	r26, 0x3a	; 58
    8a16:	6c 93       	st	X, r22
    8a18:	da 97       	sbiw	r26, 0x3a	; 58
	*ptr++ = (BYTE)val;
    8a1a:	db 96       	adiw	r26, 0x3b	; 59
    8a1c:	7c 93       	st	X, r23
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
    8a1e:	81 85       	ldd	r24, Z+9	; 0x09
    8a20:	92 85       	ldd	r25, Z+10	; 0x0a
    8a22:	6c 01       	movw	r12, r24
    8a24:	f1 2c       	mov	r15, r1
    8a26:	e1 2c       	mov	r14, r1
    8a28:	b7 01       	movw	r22, r14
    8a2a:	ac 01       	movw	r20, r24
    8a2c:	99 e0       	ldi	r25, 0x09	; 9
    8a2e:	44 0f       	add	r20, r20
    8a30:	55 1f       	adc	r21, r21
    8a32:	66 1f       	adc	r22, r22
    8a34:	77 1f       	adc	r23, r23
    8a36:	9a 95       	dec	r25
    8a38:	d1 f7       	brne	.-12     	; 0x8a2e <f_mkdir+0x222>
    8a3a:	25 85       	ldd	r18, Z+13	; 0x0d
    8a3c:	36 85       	ldd	r19, Z+14	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    8a3e:	d9 01       	movw	r26, r18
    8a40:	98 96       	adiw	r26, 0x28	; 40
    8a42:	1c 92       	st	X, r1
    8a44:	98 97       	sbiw	r26, 0x28	; 40
    8a46:	cc 0c       	add	r12, r12
    8a48:	dd 1c       	adc	r13, r13
    8a4a:	ee 1c       	adc	r14, r14
    8a4c:	ff 1c       	adc	r15, r15
	*ptr++ = (BYTE)val; val >>= 8;
    8a4e:	99 96       	adiw	r26, 0x29	; 41
    8a50:	cc 92       	st	X, r12
    8a52:	99 97       	sbiw	r26, 0x29	; 41
	*ptr++ = (BYTE)val; val >>= 8;
    8a54:	9a 96       	adiw	r26, 0x2a	; 42
    8a56:	6c 93       	st	X, r22
    8a58:	9a 97       	sbiw	r26, 0x2a	; 42
	*ptr++ = (BYTE)val;
    8a5a:	9b 96       	adiw	r26, 0x2b	; 43
    8a5c:	7c 93       	st	X, r23
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
    8a5e:	a5 85       	ldd	r26, Z+13	; 0x0d
    8a60:	b6 85       	ldd	r27, Z+14	; 0x0e
    8a62:	83 e0       	ldi	r24, 0x03	; 3
    8a64:	91 96       	adiw	r26, 0x21	; 33
    8a66:	8c 93       	st	X, r24
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
    8a68:	05 84       	ldd	r0, Z+13	; 0x0d
    8a6a:	f6 85       	ldd	r31, Z+14	; 0x0e
    8a6c:	e0 2d       	mov	r30, r0
    8a6e:	80 e1       	ldi	r24, 0x10	; 16
    8a70:	84 83       	std	Z+4, r24	; 0x04
					res = store_xdir(&dj);
    8a72:	81 2f       	mov	r24, r17
    8a74:	90 2f       	mov	r25, r16
    8a76:	0e 94 1e 23 	call	0x463c	; 0x463c <store_xdir>
    8a7a:	7c 01       	movw	r14, r24
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
					fs->wflag = 1;
				}
				if (res == FR_OK) {
    8a7c:	89 2b       	or	r24, r25
    8a7e:	39 f4       	brne	.+14     	; 0x8a8e <f_mkdir+0x282>
					res = sync_fs(fs);
    8a80:	ad 96       	adiw	r28, 0x2d	; 45
    8a82:	8e ad       	ldd	r24, Y+62	; 0x3e
    8a84:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a86:	ad 97       	sbiw	r28, 0x2d	; 45
    8a88:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sync_fs>
    8a8c:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    8a8e:	c7 01       	movw	r24, r14
    8a90:	c2 59       	subi	r28, 0x92	; 146
    8a92:	df 4f       	sbci	r29, 0xFF	; 255
    8a94:	ec e0       	ldi	r30, 0x0C	; 12
    8a96:	0c 94 56 5a 	jmp	0xb4ac	; 0xb4ac <__epilogue_restores__+0xc>
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    8a9a:	ab a9       	ldd	r26, Y+51	; 0x33
    8a9c:	bc a9       	ldd	r27, Y+52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
    8a9e:	56 96       	adiw	r26, 0x16	; 22
    8aa0:	1c 92       	st	X, r1
    8aa2:	56 97       	sbiw	r26, 0x16	; 22
	*ptr++ = (BYTE)val; val >>= 8;
    8aa4:	57 96       	adiw	r26, 0x17	; 23
    8aa6:	1c 92       	st	X, r1
    8aa8:	57 97       	sbiw	r26, 0x17	; 23
	*ptr++ = (BYTE)val; val >>= 8;
    8aaa:	81 e2       	ldi	r24, 0x21	; 33
    8aac:	58 96       	adiw	r26, 0x18	; 24
    8aae:	8c 93       	st	X, r24
    8ab0:	58 97       	sbiw	r26, 0x18	; 24
	*ptr++ = (BYTE)val;
    8ab2:	8c e4       	ldi	r24, 0x4C	; 76
    8ab4:	59 96       	adiw	r26, 0x19	; 25
    8ab6:	8c 93       	st	X, r24
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    8ab8:	6b a9       	ldd	r22, Y+51	; 0x33
    8aba:	7c a9       	ldd	r23, Y+52	; 0x34
    8abc:	a5 01       	movw	r20, r10
    8abe:	94 01       	movw	r18, r8
    8ac0:	cf 01       	movw	r24, r30
    8ac2:	0e 94 3b 13 	call	0x2676	; 0x2676 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    8ac6:	eb a9       	ldd	r30, Y+51	; 0x33
    8ac8:	fc a9       	ldd	r31, Y+52	; 0x34
    8aca:	80 e1       	ldi	r24, 0x10	; 16
    8acc:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    8ace:	ad 96       	adiw	r28, 0x2d	; 45
    8ad0:	ee ad       	ldd	r30, Y+62	; 0x3e
    8ad2:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ad4:	ad 97       	sbiw	r28, 0x2d	; 45
    8ad6:	81 e0       	ldi	r24, 0x01	; 1
    8ad8:	83 83       	std	Z+3, r24	; 0x03
				if (res == FR_OK) {
    8ada:	d2 cf       	rjmp	.-92     	; 0x8a80 <f_mkdir+0x274>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    8adc:	47 e0       	ldi	r20, 0x07	; 7
    8ade:	e4 2e       	mov	r14, r20
    8ae0:	f1 2c       	mov	r15, r1
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    8ae2:	00 e0       	ldi	r16, 0x00	; 0
    8ae4:	10 e0       	ldi	r17, 0x00	; 0
    8ae6:	98 01       	movw	r18, r16
    8ae8:	b5 01       	movw	r22, r10
    8aea:	a4 01       	movw	r20, r8
    8aec:	8d 2d       	mov	r24, r13
    8aee:	9c 2d       	mov	r25, r12
    8af0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <remove_chain>
    8af4:	cc cf       	rjmp	.-104    	; 0x8a8e <f_mkdir+0x282>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    8af6:	98 e0       	ldi	r25, 0x08	; 8
    8af8:	e9 2e       	mov	r14, r25
    8afa:	f1 2c       	mov	r15, r1
    8afc:	c8 cf       	rjmp	.-112    	; 0x8a8e <f_mkdir+0x282>
			res = FR_INVALID_NAME;
    8afe:	86 e0       	ldi	r24, 0x06	; 6
    8b00:	e8 2e       	mov	r14, r24
    8b02:	f1 2c       	mov	r15, r1
	LEAVE_FF(fs, res);
    8b04:	c4 cf       	rjmp	.-120    	; 0x8a8e <f_mkdir+0x282>

00008b06 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    8b06:	ae ec       	ldi	r26, 0xCE	; 206
    8b08:	b0 e0       	ldi	r27, 0x00	; 0
    8b0a:	e9 e8       	ldi	r30, 0x89	; 137
    8b0c:	f5 e4       	ldi	r31, 0x45	; 69
    8b0e:	0c 94 3f 5a 	jmp	0xb47e	; 0xb47e <__prologue_saves__+0x16>
    8b12:	c5 53       	subi	r28, 0x35	; 53
    8b14:	df 4f       	sbci	r29, 0xFF	; 255
    8b16:	99 83       	std	Y+1, r25	; 0x01
    8b18:	88 83       	st	Y, r24
    8b1a:	cb 5c       	subi	r28, 0xCB	; 203
    8b1c:	d0 40       	sbci	r29, 0x00	; 0
    8b1e:	c3 53       	subi	r28, 0x33	; 51
    8b20:	df 4f       	sbci	r29, 0xFF	; 255
    8b22:	79 83       	std	Y+1, r23	; 0x01
    8b24:	68 83       	st	Y, r22
    8b26:	cd 5c       	subi	r28, 0xCD	; 205
    8b28:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    8b2a:	ce 01       	movw	r24, r28
    8b2c:	83 53       	subi	r24, 0x33	; 51
    8b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    8b30:	0e 94 84 13 	call	0x2708	; 0x2708 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    8b34:	42 e0       	ldi	r20, 0x02	; 2
    8b36:	be 01       	movw	r22, r28
    8b38:	67 53       	subi	r22, 0x37	; 55
    8b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b3c:	ce 01       	movw	r24, r28
    8b3e:	85 53       	subi	r24, 0x35	; 53
    8b40:	9f 4f       	sbci	r25, 0xFF	; 255
    8b42:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    8b46:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    8b48:	89 2b       	or	r24, r25
    8b4a:	09 f0       	breq	.+2      	; 0x8b4e <f_rename+0x48>
    8b4c:	5d c0       	rjmp	.+186    	; 0x8c08 <f_rename+0x102>
		djo.obj.fs = fs;
    8b4e:	c7 53       	subi	r28, 0x37	; 55
    8b50:	df 4f       	sbci	r29, 0xFF	; 255
    8b52:	88 81       	ld	r24, Y
    8b54:	99 81       	ldd	r25, Y+1	; 0x01
    8b56:	c9 5c       	subi	r28, 0xC9	; 201
    8b58:	d0 40       	sbci	r29, 0x00	; 0
    8b5a:	27 96       	adiw	r28, 0x07	; 7
    8b5c:	9f af       	std	Y+63, r25	; 0x3f
    8b5e:	8e af       	std	Y+62, r24	; 0x3e
    8b60:	27 97       	sbiw	r28, 0x07	; 7
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
    8b62:	c5 53       	subi	r28, 0x35	; 53
    8b64:	df 4f       	sbci	r29, 0xFF	; 255
    8b66:	68 81       	ld	r22, Y
    8b68:	79 81       	ldd	r23, Y+1	; 0x01
    8b6a:	cb 5c       	subi	r28, 0xCB	; 203
    8b6c:	d0 40       	sbci	r29, 0x00	; 0
    8b6e:	ce 01       	movw	r24, r28
    8b70:	8b 5b       	subi	r24, 0xBB	; 187
    8b72:	9f 4f       	sbci	r25, 0xFF	; 255
    8b74:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    8b78:	9c 01       	movw	r18, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    8b7a:	89 2b       	or	r24, r25
    8b7c:	09 f0       	breq	.+2      	; 0x8b80 <f_rename+0x7a>
    8b7e:	44 c0       	rjmp	.+136    	; 0x8c08 <f_rename+0x102>
    8b80:	cc 57       	subi	r28, 0x7C	; 124
    8b82:	df 4f       	sbci	r29, 0xFF	; 255
    8b84:	88 81       	ld	r24, Y
    8b86:	c4 58       	subi	r28, 0x84	; 132
    8b88:	d0 40       	sbci	r29, 0x00	; 0
    8b8a:	80 7a       	andi	r24, 0xA0	; 160
    8b8c:	26 e0       	ldi	r18, 0x06	; 6
    8b8e:	30 e0       	ldi	r19, 0x00	; 0
    8b90:	d9 f5       	brne	.+118    	; 0x8c08 <f_rename+0x102>
			res = chk_lock(&djo, 2);
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
    8b92:	c7 53       	subi	r28, 0x37	; 55
    8b94:	df 4f       	sbci	r29, 0xFF	; 255
    8b96:	e8 81       	ld	r30, Y
    8b98:	f9 81       	ldd	r31, Y+1	; 0x01
    8b9a:	c9 5c       	subi	r28, 0xC9	; 201
    8b9c:	d0 40       	sbci	r29, 0x00	; 0
    8b9e:	80 81       	ld	r24, Z
    8ba0:	84 30       	cpi	r24, 0x04	; 4
    8ba2:	09 f0       	breq	.+2      	; 0x8ba6 <f_rename+0xa0>
    8ba4:	a3 c0       	rjmp	.+326    	; 0x8cec <f_rename+0x1e6>
	if (cnt != 0) {
    8ba6:	65 85       	ldd	r22, Z+13	; 0x0d
    8ba8:	76 85       	ldd	r23, Z+14	; 0x0e
    8baa:	40 e4       	ldi	r20, 0x40	; 64
    8bac:	50 e0       	ldi	r21, 0x00	; 0
    8bae:	ce 01       	movw	r24, r28
    8bb0:	87 57       	subi	r24, 0x77	; 119
    8bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    8bb4:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
    8bb8:	44 e4       	ldi	r20, 0x44	; 68
    8bba:	50 e0       	ldi	r21, 0x00	; 0
    8bbc:	be 01       	movw	r22, r28
    8bbe:	6b 5b       	subi	r22, 0xBB	; 187
    8bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    8bc2:	ce 01       	movw	r24, r28
    8bc4:	01 96       	adiw	r24, 0x01	; 1
    8bc6:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
				BYTE nf, nn;
				WORD nh;

				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
				mem_cpy(&djn, &djo, sizeof djo);
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    8bca:	c3 53       	subi	r28, 0x33	; 51
    8bcc:	df 4f       	sbci	r29, 0xFF	; 255
    8bce:	68 81       	ld	r22, Y
    8bd0:	79 81       	ldd	r23, Y+1	; 0x01
    8bd2:	cd 5c       	subi	r28, 0xCD	; 205
    8bd4:	d0 40       	sbci	r29, 0x00	; 0
    8bd6:	ce 01       	movw	r24, r28
    8bd8:	01 96       	adiw	r24, 0x01	; 1
    8bda:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    8bde:	9c 01       	movw	r18, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    8be0:	00 97       	sbiw	r24, 0x00	; 0
    8be2:	09 f0       	breq	.+2      	; 0x8be6 <f_rename+0xe0>
    8be4:	7f c0       	rjmp	.+254    	; 0x8ce4 <f_rename+0x1de>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    8be6:	4f 81       	ldd	r20, Y+7	; 0x07
    8be8:	58 85       	ldd	r21, Y+8	; 0x08
    8bea:	69 85       	ldd	r22, Y+9	; 0x09
    8bec:	7a 85       	ldd	r23, Y+10	; 0x0a
    8bee:	2f 96       	adiw	r28, 0x0f	; 15
    8bf0:	8c ad       	ldd	r24, Y+60	; 0x3c
    8bf2:	9d ad       	ldd	r25, Y+61	; 0x3d
    8bf4:	ae ad       	ldd	r26, Y+62	; 0x3e
    8bf6:	bf ad       	ldd	r27, Y+63	; 0x3f
    8bf8:	2f 97       	sbiw	r28, 0x0f	; 15
    8bfa:	48 17       	cp	r20, r24
    8bfc:	59 07       	cpc	r21, r25
    8bfe:	6a 07       	cpc	r22, r26
    8c00:	7b 07       	cpc	r23, r27
    8c02:	41 f0       	breq	.+16     	; 0x8c14 <f_rename+0x10e>
    8c04:	28 e0       	ldi	r18, 0x08	; 8
    8c06:	30 e0       	ldi	r19, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    8c08:	c9 01       	movw	r24, r18
    8c0a:	c2 53       	subi	r28, 0x32	; 50
    8c0c:	df 4f       	sbci	r29, 0xFF	; 255
    8c0e:	e7 e0       	ldi	r30, 0x07	; 7
    8c10:	0c 94 5b 5a 	jmp	0xb4b6	; 0xb4b6 <__epilogue_restores__+0x16>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    8c14:	4f a1       	ldd	r20, Y+39	; 0x27
    8c16:	58 a5       	ldd	r21, Y+40	; 0x28
    8c18:	69 a5       	ldd	r22, Y+41	; 0x29
    8c1a:	7a a5       	ldd	r23, Y+42	; 0x2a
    8c1c:	af 96       	adiw	r28, 0x2f	; 47
    8c1e:	8c ad       	ldd	r24, Y+60	; 0x3c
    8c20:	9d ad       	ldd	r25, Y+61	; 0x3d
    8c22:	ae ad       	ldd	r26, Y+62	; 0x3e
    8c24:	bf ad       	ldd	r27, Y+63	; 0x3f
    8c26:	af 97       	sbiw	r28, 0x2f	; 47
    8c28:	48 17       	cp	r20, r24
    8c2a:	59 07       	cpc	r21, r25
    8c2c:	6a 07       	cpc	r22, r26
    8c2e:	7b 07       	cpc	r23, r27
    8c30:	49 f7       	brne	.-46     	; 0x8c04 <f_rename+0xfe>
					res = dir_register(&djn);			/* Register the new entry */
    8c32:	ce 01       	movw	r24, r28
    8c34:	01 96       	adiw	r24, 0x01	; 1
    8c36:	0e 94 93 25 	call	0x4b26	; 0x4b26 <dir_register>
    8c3a:	9c 01       	movw	r18, r24
					if (res == FR_OK) {
    8c3c:	89 2b       	or	r24, r25
    8c3e:	21 f7       	brne	.-56     	; 0x8c08 <f_rename+0x102>
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
    8c40:	c7 53       	subi	r28, 0x37	; 55
    8c42:	df 4f       	sbci	r29, 0xFF	; 255
    8c44:	e8 81       	ld	r30, Y
    8c46:	f9 81       	ldd	r31, Y+1	; 0x01
    8c48:	c9 5c       	subi	r28, 0xC9	; 201
    8c4a:	d0 40       	sbci	r29, 0x00	; 0
    8c4c:	05 84       	ldd	r0, Z+13	; 0x0d
    8c4e:	f6 85       	ldd	r31, Z+14	; 0x0e
    8c50:	e0 2d       	mov	r30, r0
    8c52:	e1 80       	ldd	r14, Z+1	; 0x01
    8c54:	f3 a0       	ldd	r15, Z+35	; 0x23
	rv = ptr[1];
    8c56:	04 a1       	ldd	r16, Z+36	; 0x24
    8c58:	15 a1       	ldd	r17, Z+37	; 0x25
	if (cnt != 0) {
    8c5a:	40 e4       	ldi	r20, 0x40	; 64
    8c5c:	50 e0       	ldi	r21, 0x00	; 0
    8c5e:	be 01       	movw	r22, r28
    8c60:	67 57       	subi	r22, 0x77	; 119
    8c62:	7f 4f       	sbci	r23, 0xFF	; 255
    8c64:	cf 01       	movw	r24, r30
    8c66:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
    8c6a:	c7 53       	subi	r28, 0x37	; 55
    8c6c:	df 4f       	sbci	r29, 0xFF	; 255
    8c6e:	e8 81       	ld	r30, Y
    8c70:	f9 81       	ldd	r31, Y+1	; 0x01
    8c72:	c9 5c       	subi	r28, 0xC9	; 201
    8c74:	d0 40       	sbci	r29, 0x00	; 0
    8c76:	05 84       	ldd	r0, Z+13	; 0x0d
    8c78:	f6 85       	ldd	r31, Z+14	; 0x0e
    8c7a:	e0 2d       	mov	r30, r0
    8c7c:	e1 82       	std	Z+1, r14	; 0x01
    8c7e:	c7 53       	subi	r28, 0x37	; 55
    8c80:	df 4f       	sbci	r29, 0xFF	; 255
    8c82:	e8 81       	ld	r30, Y
    8c84:	f9 81       	ldd	r31, Y+1	; 0x01
    8c86:	c9 5c       	subi	r28, 0xC9	; 201
    8c88:	d0 40       	sbci	r29, 0x00	; 0
    8c8a:	a5 85       	ldd	r26, Z+13	; 0x0d
    8c8c:	b6 85       	ldd	r27, Z+14	; 0x0e
    8c8e:	93 96       	adiw	r26, 0x23	; 35
    8c90:	fc 92       	st	X, r15
						st_word(fs->dirbuf + XDIR_NameHash, nh);
    8c92:	a5 85       	ldd	r26, Z+13	; 0x0d
    8c94:	b6 85       	ldd	r27, Z+14	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    8c96:	95 96       	adiw	r26, 0x25	; 37
    8c98:	1c 93       	st	X, r17
    8c9a:	0e 93       	st	-X, r16
    8c9c:	94 97       	sbiw	r26, 0x24	; 36
						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    8c9e:	05 84       	ldd	r0, Z+13	; 0x0d
    8ca0:	f6 85       	ldd	r31, Z+14	; 0x0e
    8ca2:	e0 2d       	mov	r30, r0
    8ca4:	84 81       	ldd	r24, Z+4	; 0x04
    8ca6:	84 fd       	sbrc	r24, 4
    8ca8:	02 c0       	rjmp	.+4      	; 0x8cae <f_rename+0x1a8>
    8caa:	80 62       	ori	r24, 0x20	; 32
    8cac:	84 83       	std	Z+4, r24	; 0x04
						res = store_xdir(&djn);
    8cae:	ce 01       	movw	r24, r28
    8cb0:	01 96       	adiw	r24, 0x01	; 1
    8cb2:	0e 94 1e 23 	call	0x463c	; 0x463c <store_xdir>
    8cb6:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    8cb8:	89 2b       	or	r24, r25
    8cba:	09 f0       	breq	.+2      	; 0x8cbe <f_rename+0x1b8>
    8cbc:	a5 cf       	rjmp	.-182    	; 0x8c08 <f_rename+0x102>
				res = dir_remove(&djo);		/* Remove old entry */
    8cbe:	ce 01       	movw	r24, r28
    8cc0:	8b 5b       	subi	r24, 0xBB	; 187
    8cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    8cc4:	0e 94 75 23 	call	0x46ea	; 0x46ea <dir_remove>
    8cc8:	9c 01       	movw	r18, r24
				if (res == FR_OK) {
    8cca:	89 2b       	or	r24, r25
    8ccc:	09 f0       	breq	.+2      	; 0x8cd0 <f_rename+0x1ca>
    8cce:	9c cf       	rjmp	.-200    	; 0x8c08 <f_rename+0x102>
					res = sync_fs(fs);
    8cd0:	c7 53       	subi	r28, 0x37	; 55
    8cd2:	df 4f       	sbci	r29, 0xFF	; 255
    8cd4:	88 81       	ld	r24, Y
    8cd6:	99 81       	ldd	r25, Y+1	; 0x01
    8cd8:	c9 5c       	subi	r28, 0xC9	; 201
    8cda:	d0 40       	sbci	r29, 0x00	; 0
    8cdc:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sync_fs>
    8ce0:	9c 01       	movw	r18, r24
    8ce2:	92 cf       	rjmp	.-220    	; 0x8c08 <f_rename+0x102>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    8ce4:	04 97       	sbiw	r24, 0x04	; 4
    8ce6:	09 f0       	breq	.+2      	; 0x8cea <f_rename+0x1e4>
    8ce8:	8f cf       	rjmp	.-226    	; 0x8c08 <f_rename+0x102>
    8cea:	a3 cf       	rjmp	.-186    	; 0x8c32 <f_rename+0x12c>
	if (cnt != 0) {
    8cec:	e9 96       	adiw	r28, 0x39	; 57
    8cee:	6e ad       	ldd	r22, Y+62	; 0x3e
    8cf0:	7f ad       	ldd	r23, Y+63	; 0x3f
    8cf2:	e9 97       	sbiw	r28, 0x39	; 57
    8cf4:	40 e2       	ldi	r20, 0x20	; 32
    8cf6:	50 e0       	ldi	r21, 0x00	; 0
    8cf8:	ce 01       	movw	r24, r28
    8cfa:	87 57       	subi	r24, 0x77	; 119
    8cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    8cfe:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
    8d02:	44 e4       	ldi	r20, 0x44	; 68
    8d04:	50 e0       	ldi	r21, 0x00	; 0
    8d06:	be 01       	movw	r22, r28
    8d08:	6b 5b       	subi	r22, 0xBB	; 187
    8d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    8d0c:	ce 01       	movw	r24, r28
    8d0e:	01 96       	adiw	r24, 0x01	; 1
    8d10:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    8d14:	c3 53       	subi	r28, 0x33	; 51
    8d16:	df 4f       	sbci	r29, 0xFF	; 255
    8d18:	68 81       	ld	r22, Y
    8d1a:	79 81       	ldd	r23, Y+1	; 0x01
    8d1c:	cd 5c       	subi	r28, 0xCD	; 205
    8d1e:	d0 40       	sbci	r29, 0x00	; 0
    8d20:	ce 01       	movw	r24, r28
    8d22:	01 96       	adiw	r24, 0x01	; 1
    8d24:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <follow_path>
    8d28:	9c 01       	movw	r18, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    8d2a:	00 97       	sbiw	r24, 0x00	; 0
    8d2c:	09 f0       	breq	.+2      	; 0x8d30 <f_rename+0x22a>
    8d2e:	97 c0       	rjmp	.+302    	; 0x8e5e <f_rename+0x358>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    8d30:	4f 81       	ldd	r20, Y+7	; 0x07
    8d32:	58 85       	ldd	r21, Y+8	; 0x08
    8d34:	69 85       	ldd	r22, Y+9	; 0x09
    8d36:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d38:	2f 96       	adiw	r28, 0x0f	; 15
    8d3a:	8c ad       	ldd	r24, Y+60	; 0x3c
    8d3c:	9d ad       	ldd	r25, Y+61	; 0x3d
    8d3e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d40:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d42:	2f 97       	sbiw	r28, 0x0f	; 15
    8d44:	48 17       	cp	r20, r24
    8d46:	59 07       	cpc	r21, r25
    8d48:	6a 07       	cpc	r22, r26
    8d4a:	7b 07       	cpc	r23, r27
    8d4c:	09 f0       	breq	.+2      	; 0x8d50 <f_rename+0x24a>
    8d4e:	5a cf       	rjmp	.-332    	; 0x8c04 <f_rename+0xfe>
    8d50:	4f a1       	ldd	r20, Y+39	; 0x27
    8d52:	58 a5       	ldd	r21, Y+40	; 0x28
    8d54:	69 a5       	ldd	r22, Y+41	; 0x29
    8d56:	7a a5       	ldd	r23, Y+42	; 0x2a
    8d58:	af 96       	adiw	r28, 0x2f	; 47
    8d5a:	8c ad       	ldd	r24, Y+60	; 0x3c
    8d5c:	9d ad       	ldd	r25, Y+61	; 0x3d
    8d5e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d60:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d62:	af 97       	sbiw	r28, 0x2f	; 47
    8d64:	48 17       	cp	r20, r24
    8d66:	59 07       	cpc	r21, r25
    8d68:	6a 07       	cpc	r22, r26
    8d6a:	7b 07       	cpc	r23, r27
    8d6c:	09 f0       	breq	.+2      	; 0x8d70 <f_rename+0x26a>
    8d6e:	4a cf       	rjmp	.-364    	; 0x8c04 <f_rename+0xfe>
					res = dir_register(&djn);			/* Register the new entry */
    8d70:	ce 01       	movw	r24, r28
    8d72:	01 96       	adiw	r24, 0x01	; 1
    8d74:	0e 94 93 25 	call	0x4b26	; 0x4b26 <dir_register>
    8d78:	9c 01       	movw	r18, r24
					if (res == FR_OK) {
    8d7a:	89 2b       	or	r24, r25
    8d7c:	09 f0       	breq	.+2      	; 0x8d80 <f_rename+0x27a>
    8d7e:	44 cf       	rjmp	.-376    	; 0x8c08 <f_rename+0x102>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    8d80:	0b a9       	ldd	r16, Y+51	; 0x33
    8d82:	1c a9       	ldd	r17, Y+52	; 0x34
	if (cnt != 0) {
    8d84:	69 e8       	ldi	r22, 0x89	; 137
    8d86:	70 e0       	ldi	r23, 0x00	; 0
    8d88:	6c 0f       	add	r22, r28
    8d8a:	7d 1f       	adc	r23, r29
    8d8c:	63 5f       	subi	r22, 0xF3	; 243
    8d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8d90:	43 e1       	ldi	r20, 0x13	; 19
    8d92:	50 e0       	ldi	r21, 0x00	; 0
    8d94:	c8 01       	movw	r24, r16
    8d96:	0d 96       	adiw	r24, 0x0d	; 13
    8d98:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
						dir[DIR_Attr] = buf[DIR_Attr];
    8d9c:	cc 56       	subi	r28, 0x6C	; 108
    8d9e:	df 4f       	sbci	r29, 0xFF	; 255
    8da0:	88 81       	ld	r24, Y
    8da2:	c4 59       	subi	r28, 0x94	; 148
    8da4:	d0 40       	sbci	r29, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    8da6:	84 ff       	sbrs	r24, 4
    8da8:	5e c0       	rjmp	.+188    	; 0x8e66 <f_rename+0x360>
    8daa:	f8 01       	movw	r30, r16
    8dac:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    8dae:	c7 53       	subi	r28, 0x37	; 55
    8db0:	df 4f       	sbci	r29, 0xFF	; 255
    8db2:	e8 80       	ld	r14, Y
    8db4:	f9 80       	ldd	r15, Y+1	; 0x01
    8db6:	c9 5c       	subi	r28, 0xC9	; 201
    8db8:	d0 40       	sbci	r29, 0x00	; 0
    8dba:	dd 24       	eor	r13, r13
    8dbc:	d3 94       	inc	r13
    8dbe:	f7 01       	movw	r30, r14
    8dc0:	d3 82       	std	Z+3, r13	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    8dc2:	f8 01       	movw	r30, r16
    8dc4:	83 85       	ldd	r24, Z+11	; 0x0b
    8dc6:	84 ff       	sbrs	r24, 4
    8dc8:	7a cf       	rjmp	.-268    	; 0x8cbe <f_rename+0x1b8>
    8dca:	2f 96       	adiw	r28, 0x0f	; 15
    8dcc:	4c ad       	ldd	r20, Y+60	; 0x3c
    8dce:	5d ad       	ldd	r21, Y+61	; 0x3d
    8dd0:	6e ad       	ldd	r22, Y+62	; 0x3e
    8dd2:	7f ad       	ldd	r23, Y+63	; 0x3f
    8dd4:	2f 97       	sbiw	r28, 0x0f	; 15
    8dd6:	8f 81       	ldd	r24, Y+7	; 0x07
    8dd8:	98 85       	ldd	r25, Y+8	; 0x08
    8dda:	a9 85       	ldd	r26, Y+9	; 0x09
    8ddc:	ba 85       	ldd	r27, Y+10	; 0x0a
    8dde:	48 17       	cp	r20, r24
    8de0:	59 07       	cpc	r21, r25
    8de2:	6a 07       	cpc	r22, r26
    8de4:	7b 07       	cpc	r23, r27
    8de6:	09 f4       	brne	.+2      	; 0x8dea <f_rename+0x2e4>
    8de8:	6a cf       	rjmp	.-300    	; 0x8cbe <f_rename+0x1b8>
							sect = clst2sect(fs, ld_clust(fs, dir));
    8dea:	b8 01       	movw	r22, r16
    8dec:	f7 01       	movw	r30, r14
    8dee:	80 81       	ld	r24, Z
    8df0:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <ld_clust.isra.0>
    8df4:	ab 01       	movw	r20, r22
    8df6:	bc 01       	movw	r22, r24
    8df8:	c7 01       	movw	r24, r14
    8dfa:	0e 94 fd 12 	call	0x25fa	; 0x25fa <clst2sect>
    8dfe:	46 2f       	mov	r20, r22
    8e00:	57 2f       	mov	r21, r23
    8e02:	bc 01       	movw	r22, r24
								res = FR_INT_ERR;
    8e04:	22 e0       	ldi	r18, 0x02	; 2
    8e06:	30 e0       	ldi	r19, 0x00	; 0
							if (sect == 0) {
    8e08:	41 15       	cp	r20, r1
    8e0a:	51 05       	cpc	r21, r1
    8e0c:	61 05       	cpc	r22, r1
    8e0e:	71 05       	cpc	r23, r1
    8e10:	09 f4       	brne	.+2      	; 0x8e14 <f_rename+0x30e>
    8e12:	fa ce       	rjmp	.-524    	; 0x8c08 <f_rename+0x102>
								res = move_window(fs, sect);
    8e14:	c7 01       	movw	r24, r14
    8e16:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    8e1a:	9c 01       	movw	r18, r24
								if (res == FR_OK && dir[1] == '.') {
    8e1c:	89 2b       	or	r24, r25
    8e1e:	09 f0       	breq	.+2      	; 0x8e22 <f_rename+0x31c>
    8e20:	f3 ce       	rjmp	.-538    	; 0x8c08 <f_rename+0x102>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    8e22:	c7 53       	subi	r28, 0x37	; 55
    8e24:	df 4f       	sbci	r29, 0xFF	; 255
    8e26:	88 81       	ld	r24, Y
    8e28:	99 81       	ldd	r25, Y+1	; 0x01
    8e2a:	c9 5c       	subi	r28, 0xC9	; 201
    8e2c:	d0 40       	sbci	r29, 0x00	; 0
								if (res == FR_OK && dir[1] == '.') {
    8e2e:	fc 01       	movw	r30, r24
    8e30:	e8 59       	subi	r30, 0x98	; 152
    8e32:	ff 4f       	sbci	r31, 0xFF	; 255
    8e34:	20 81       	ld	r18, Z
    8e36:	2e 32       	cpi	r18, 0x2E	; 46
    8e38:	09 f0       	breq	.+2      	; 0x8e3c <f_rename+0x336>
    8e3a:	41 cf       	rjmp	.-382    	; 0x8cbe <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
    8e3c:	2f 81       	ldd	r18, Y+7	; 0x07
    8e3e:	38 85       	ldd	r19, Y+8	; 0x08
    8e40:	49 85       	ldd	r20, Y+9	; 0x09
    8e42:	5a 85       	ldd	r21, Y+10	; 0x0a
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    8e44:	bc 01       	movw	r22, r24
    8e46:	69 59       	subi	r22, 0x99	; 153
    8e48:	7f 4f       	sbci	r23, 0xFF	; 255
									st_clust(fs, dir, djn.obj.sclust);
    8e4a:	0e 94 3b 13 	call	0x2676	; 0x2676 <st_clust>
									fs->wflag = 1;
    8e4e:	c7 53       	subi	r28, 0x37	; 55
    8e50:	df 4f       	sbci	r29, 0xFF	; 255
    8e52:	e8 81       	ld	r30, Y
    8e54:	f9 81       	ldd	r31, Y+1	; 0x01
    8e56:	c9 5c       	subi	r28, 0xC9	; 201
    8e58:	d0 40       	sbci	r29, 0x00	; 0
    8e5a:	d3 82       	std	Z+3, r13	; 0x03
			if (res == FR_OK) {
    8e5c:	30 cf       	rjmp	.-416    	; 0x8cbe <f_rename+0x1b8>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    8e5e:	04 97       	sbiw	r24, 0x04	; 4
    8e60:	09 f0       	breq	.+2      	; 0x8e64 <f_rename+0x35e>
    8e62:	d2 ce       	rjmp	.-604    	; 0x8c08 <f_rename+0x102>
    8e64:	85 cf       	rjmp	.-246    	; 0x8d70 <f_rename+0x26a>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    8e66:	80 62       	ori	r24, 0x20	; 32
    8e68:	a0 cf       	rjmp	.-192    	; 0x8daa <f_rename+0x2a4>

00008e6a <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    8e6a:	ac e4       	ldi	r26, 0x4C	; 76
    8e6c:	b0 e0       	ldi	r27, 0x00	; 0
    8e6e:	eb e3       	ldi	r30, 0x3B	; 59
    8e70:	f7 e4       	ldi	r31, 0x47	; 71
    8e72:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    8e76:	29 96       	adiw	r28, 0x09	; 9
    8e78:	9f af       	std	Y+63, r25	; 0x3f
    8e7a:	8e af       	std	Y+62, r24	; 0x3e
    8e7c:	29 97       	sbiw	r28, 0x09	; 9
    8e7e:	7b 01       	movw	r14, r22
    8e80:	3a 01       	movw	r6, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    8e82:	40 e0       	ldi	r20, 0x00	; 0
    8e84:	be 01       	movw	r22, r28
    8e86:	6b 5b       	subi	r22, 0xBB	; 187
    8e88:	7f 4f       	sbci	r23, 0xFF	; 255
    8e8a:	ce 01       	movw	r24, r28
    8e8c:	89 5b       	subi	r24, 0xB9	; 185
    8e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    8e90:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    8e94:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    8e96:	89 2b       	or	r24, r25
    8e98:	09 f0       	breq	.+2      	; 0x8e9c <f_getlabel+0x32>
    8e9a:	a4 c0       	rjmp	.+328    	; 0x8fe4 <f_getlabel+0x17a>
    8e9c:	e1 14       	cp	r14, r1
    8e9e:	f1 04       	cpc	r15, r1
    8ea0:	09 f4       	brne	.+2      	; 0x8ea4 <f_getlabel+0x3a>
    8ea2:	77 c0       	rjmp	.+238    	; 0x8f92 <f_getlabel+0x128>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    8ea4:	27 96       	adiw	r28, 0x07	; 7
    8ea6:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ea8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8eaa:	27 97       	sbiw	r28, 0x07	; 7
    8eac:	9a 83       	std	Y+2, r25	; 0x02
    8eae:	89 83       	std	Y+1, r24	; 0x01
    8eb0:	1f 82       	std	Y+7, r1	; 0x07
    8eb2:	18 86       	std	Y+8, r1	; 0x08
    8eb4:	19 86       	std	Y+9, r1	; 0x09
    8eb6:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    8eb8:	40 e0       	ldi	r20, 0x00	; 0
    8eba:	50 e0       	ldi	r21, 0x00	; 0
    8ebc:	ba 01       	movw	r22, r20
    8ebe:	ce 01       	movw	r24, r28
    8ec0:	01 96       	adiw	r24, 0x01	; 1
    8ec2:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    8ec6:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    8ec8:	89 2b       	or	r24, r25
    8eca:	09 f0       	breq	.+2      	; 0x8ece <f_getlabel+0x64>
    8ecc:	ae c0       	rjmp	.+348    	; 0x902a <f_getlabel+0x1c0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    8ece:	61 e0       	ldi	r22, 0x01	; 1
    8ed0:	70 e0       	ldi	r23, 0x00	; 0
    8ed2:	ce 01       	movw	r24, r28
    8ed4:	01 96       	adiw	r24, 0x01	; 1
    8ed6:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <dir_read>
    8eda:	9c 01       	movw	r18, r24
		 	if (res == FR_OK) {
    8edc:	89 2b       	or	r24, r25
    8ede:	09 f0       	breq	.+2      	; 0x8ee2 <f_getlabel+0x78>
    8ee0:	a4 c0       	rjmp	.+328    	; 0x902a <f_getlabel+0x1c0>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
    8ee2:	27 96       	adiw	r28, 0x07	; 7
    8ee4:	ee ad       	ldd	r30, Y+62	; 0x3e
    8ee6:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ee8:	27 97       	sbiw	r28, 0x07	; 7
    8eea:	80 81       	ld	r24, Z
    8eec:	84 30       	cpi	r24, 0x04	; 4
    8eee:	09 f0       	breq	.+2      	; 0x8ef2 <f_getlabel+0x88>
    8ef0:	7f c0       	rjmp	.+254    	; 0x8ff0 <f_getlabel+0x186>
					WCHAR hs;

					for (si = di = hs = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 entry */
    8ef2:	d1 2c       	mov	r13, r1
    8ef4:	c1 2c       	mov	r12, r1
    8ef6:	b1 2c       	mov	r11, r1
    8ef8:	a1 2c       	mov	r10, r1
    8efa:	91 2c       	mov	r9, r1
    8efc:	81 2c       	mov	r8, r1
    8efe:	38 c0       	rjmp	.+112    	; 0x8f70 <f_getlabel+0x106>
						wc = ld_word(dj.dir + XDIR_Label + si * 2);
    8f00:	2f ef       	ldi	r18, 0xFF	; 255
    8f02:	82 1a       	sub	r8, r18
    8f04:	92 0a       	sbc	r9, r18
	rv = rv << 8 | ptr[0];
    8f06:	c4 01       	movw	r24, r8
    8f08:	88 0f       	add	r24, r24
    8f0a:	99 1f       	adc	r25, r25
    8f0c:	e8 0f       	add	r30, r24
    8f0e:	f9 1f       	adc	r31, r25
    8f10:	40 81       	ld	r20, Z
    8f12:	51 81       	ldd	r21, Z+1	; 0x01
						if (hs == 0 && IsSurrogate(wc)) {	/* Is the code a surrogate? */
    8f14:	c1 14       	cp	r12, r1
    8f16:	d1 04       	cpc	r13, r1
    8f18:	29 f4       	brne	.+10     	; 0x8f24 <f_getlabel+0xba>
    8f1a:	ca 01       	movw	r24, r20
    8f1c:	98 5d       	subi	r25, 0xD8	; 216
    8f1e:	81 15       	cp	r24, r1
    8f20:	98 40       	sbci	r25, 0x08	; 8
    8f22:	28 f1       	brcs	.+74     	; 0x8f6e <f_getlabel+0x104>
							hs = wc; continue;
						}
						wc = put_utf((DWORD)hs << 16 | wc, &label[di], 4);
    8f24:	c6 01       	movw	r24, r12
    8f26:	b0 e0       	ldi	r27, 0x00	; 0
    8f28:	a0 e0       	ldi	r26, 0x00	; 0
    8f2a:	dc 01       	movw	r26, r24
    8f2c:	99 27       	eor	r25, r25
    8f2e:	88 27       	eor	r24, r24
    8f30:	70 e0       	ldi	r23, 0x00	; 0
    8f32:	60 e0       	ldi	r22, 0x00	; 0
    8f34:	1c 01       	movw	r2, r24
    8f36:	2d 01       	movw	r4, r26
    8f38:	24 2a       	or	r2, r20
    8f3a:	35 2a       	or	r3, r21
    8f3c:	46 2a       	or	r4, r22
    8f3e:	57 2a       	or	r5, r23
    8f40:	2d 96       	adiw	r28, 0x0d	; 13
    8f42:	2c ae       	std	Y+60, r2	; 0x3c
    8f44:	3d ae       	std	Y+61, r3	; 0x3d
    8f46:	4e ae       	std	Y+62, r4	; 0x3e
    8f48:	5f ae       	std	Y+63, r5	; 0x3f
    8f4a:	2d 97       	sbiw	r28, 0x0d	; 13
    8f4c:	24 e0       	ldi	r18, 0x04	; 4
    8f4e:	30 e0       	ldi	r19, 0x00	; 0
    8f50:	a7 01       	movw	r20, r14
    8f52:	4a 0d       	add	r20, r10
    8f54:	5b 1d       	adc	r21, r11
    8f56:	c2 01       	movw	r24, r4
    8f58:	b1 01       	movw	r22, r2
    8f5a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <put_utf>
    8f5e:	28 2f       	mov	r18, r24
    8f60:	30 e0       	ldi	r19, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    8f62:	88 23       	and	r24, r24
    8f64:	69 f0       	breq	.+26     	; 0x8f80 <f_getlabel+0x116>
						di += wc;
    8f66:	a2 0e       	add	r10, r18
    8f68:	b3 1e       	adc	r11, r19
						hs = 0;
    8f6a:	40 e0       	ldi	r20, 0x00	; 0
    8f6c:	50 e0       	ldi	r21, 0x00	; 0
    8f6e:	6a 01       	movw	r12, r20
					for (si = di = hs = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 entry */
    8f70:	eb a9       	ldd	r30, Y+51	; 0x33
    8f72:	fc a9       	ldd	r31, Y+52	; 0x34
    8f74:	81 81       	ldd	r24, Z+1	; 0x01
    8f76:	88 15       	cp	r24, r8
    8f78:	19 04       	cpc	r1, r9
    8f7a:	09 f0       	breq	.+2      	; 0x8f7e <f_getlabel+0x114>
    8f7c:	08 f6       	brcc	.-126    	; 0x8f00 <f_getlabel+0x96>
    8f7e:	95 01       	movw	r18, r10
					}
					if (hs != 0) di = 0;	/* Broken surrogate pair? */
    8f80:	c1 14       	cp	r12, r1
    8f82:	d1 04       	cpc	r13, r1
    8f84:	11 f0       	breq	.+4      	; 0x8f8a <f_getlabel+0x120>
    8f86:	30 e0       	ldi	r19, 0x00	; 0
    8f88:	20 e0       	ldi	r18, 0x00	; 0
					label[di] = 0;
    8f8a:	2e 0d       	add	r18, r14
    8f8c:	3f 1d       	adc	r19, r15
    8f8e:	d9 01       	movw	r26, r18
    8f90:	1c 92       	st	X, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    8f92:	61 14       	cp	r6, r1
    8f94:	71 04       	cpc	r7, r1
    8f96:	31 f1       	breq	.+76     	; 0x8fe4 <f_getlabel+0x17a>
		res = move_window(fs, fs->volbase);
    8f98:	27 96       	adiw	r28, 0x07	; 7
    8f9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    8f9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8f9e:	27 97       	sbiw	r28, 0x07	; 7
    8fa0:	dc 01       	movw	r26, r24
    8fa2:	9f 96       	adiw	r26, 0x2f	; 47
    8fa4:	4d 91       	ld	r20, X+
    8fa6:	5d 91       	ld	r21, X+
    8fa8:	6d 91       	ld	r22, X+
    8faa:	7c 91       	ld	r23, X
    8fac:	d2 97       	sbiw	r26, 0x32	; 50
    8fae:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <move_window>
    8fb2:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    8fb4:	89 2b       	or	r24, r25
    8fb6:	b1 f4       	brne	.+44     	; 0x8fe4 <f_getlabel+0x17a>
			switch (fs->fs_type) {
    8fb8:	27 96       	adiw	r28, 0x07	; 7
    8fba:	ee ad       	ldd	r30, Y+62	; 0x3e
    8fbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    8fbe:	27 97       	sbiw	r28, 0x07	; 7
    8fc0:	80 81       	ld	r24, Z
    8fc2:	83 30       	cpi	r24, 0x03	; 3
    8fc4:	61 f1       	breq	.+88     	; 0x901e <f_getlabel+0x1b4>
    8fc6:	84 30       	cpi	r24, 0x04	; 4
    8fc8:	69 f5       	brne	.+90     	; 0x9024 <f_getlabel+0x1ba>
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    8fca:	84 e6       	ldi	r24, 0x64	; 100
    8fcc:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    8fce:	e9 5b       	subi	r30, 0xB9	; 185
    8fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    8fd2:	8e 0f       	add	r24, r30
    8fd4:	9f 1f       	adc	r25, r31
    8fd6:	0e 94 b3 12 	call	0x2566	; 0x2566 <ld_dword>
    8fda:	f3 01       	movw	r30, r6
    8fdc:	60 83       	st	Z, r22
    8fde:	71 83       	std	Z+1, r23	; 0x01
    8fe0:	82 83       	std	Z+2, r24	; 0x02
    8fe2:	93 83       	std	Z+3, r25	; 0x03
		}
	}

	LEAVE_FF(fs, res);
}
    8fe4:	c8 01       	movw	r24, r16
    8fe6:	c4 5b       	subi	r28, 0xB4	; 180
    8fe8:	df 4f       	sbci	r29, 0xFF	; 255
    8fea:	e2 e1       	ldi	r30, 0x12	; 18
    8fec:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
    8ff0:	eb a9       	ldd	r30, Y+51	; 0x33
    8ff2:	fc a9       	ldd	r31, Y+52	; 0x34
    8ff4:	cf 01       	movw	r24, r30
    8ff6:	0b 96       	adiw	r24, 0x0b	; 11
						wc = dj.dir[si++];
    8ff8:	d7 01       	movw	r26, r14
    8ffa:	21 91       	ld	r18, Z+
						label[di++] = (TCHAR)wc;
    8ffc:	2d 93       	st	X+, r18
					while (si < 11) {
    8ffe:	8e 17       	cp	r24, r30
    9000:	9f 07       	cpc	r25, r31
    9002:	d9 f7       	brne	.-10     	; 0x8ffa <f_getlabel+0x190>
    9004:	f7 01       	movw	r30, r14
    9006:	3b 96       	adiw	r30, 0x0b	; 11
						label[di] = 0;
    9008:	10 82       	st	Z, r1
						if (di == 0) break;
    900a:	ee 16       	cp	r14, r30
    900c:	ff 06       	cpc	r15, r31
    900e:	09 f2       	breq	.-126    	; 0x8f92 <f_getlabel+0x128>
					} while (label[--di] == ' ');
    9010:	82 91       	ld	r24, -Z
    9012:	80 32       	cpi	r24, 0x20	; 32
    9014:	c9 f3       	breq	.-14     	; 0x9008 <f_getlabel+0x19e>
    9016:	bd cf       	rjmp	.-134    	; 0x8f92 <f_getlabel+0x128>
			label[0] = 0;
    9018:	f7 01       	movw	r30, r14
    901a:	10 82       	st	Z, r1
	if (res == FR_OK && vsn) {
    901c:	ba cf       	rjmp	.-140    	; 0x8f92 <f_getlabel+0x128>
			switch (fs->fs_type) {
    901e:	83 e4       	ldi	r24, 0x43	; 67
    9020:	90 e0       	ldi	r25, 0x00	; 0
    9022:	d5 cf       	rjmp	.-86     	; 0x8fce <f_getlabel+0x164>
				di = BS_VolID;
    9024:	87 e2       	ldi	r24, 0x27	; 39
    9026:	90 e0       	ldi	r25, 0x00	; 0
    9028:	d2 cf       	rjmp	.-92     	; 0x8fce <f_getlabel+0x164>
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    902a:	24 30       	cpi	r18, 0x04	; 4
    902c:	31 05       	cpc	r19, r1
    902e:	a1 f3       	breq	.-24     	; 0x9018 <f_getlabel+0x1ae>
    9030:	89 01       	movw	r16, r18
    9032:	d8 cf       	rjmp	.-80     	; 0x8fe4 <f_getlabel+0x17a>

00009034 <f_setlabel>:
/*-----------------------------------------------------------------------*/

FRESULT f_setlabel (
	const TCHAR* label	/* Volume label to set with heading logical drive number */
)
{
    9034:	a2 e6       	ldi	r26, 0x62	; 98
    9036:	b0 e0       	ldi	r27, 0x00	; 0
    9038:	e0 e2       	ldi	r30, 0x20	; 32
    903a:	f8 e4       	ldi	r31, 0x48	; 72
    903c:	0c 94 42 5a 	jmp	0xb484	; 0xb484 <__prologue_saves__+0x1c>
    9040:	6f 96       	adiw	r28, 0x1f	; 31
    9042:	9f af       	std	Y+63, r25	; 0x3f
    9044:	8e af       	std	Y+62, r24	; 0x3e
    9046:	6f 97       	sbiw	r28, 0x1f	; 31
#if FF_USE_LFN
	DWORD dc;
#endif

	/* Get logical drive */
	res = mount_volume(&label, &fs, FA_WRITE);
    9048:	42 e0       	ldi	r20, 0x02	; 2
    904a:	be 01       	movw	r22, r28
    904c:	65 5a       	subi	r22, 0xA5	; 165
    904e:	7f 4f       	sbci	r23, 0xFF	; 255
    9050:	ce 01       	movw	r24, r28
    9052:	83 5a       	subi	r24, 0xA3	; 163
    9054:	9f 4f       	sbci	r25, 0xFF	; 255
    9056:	0e 94 72 28 	call	0x50e4	; 0x50e4 <mount_volume>
    905a:	9c 01       	movw	r18, r24
	if (res != FR_OK) LEAVE_FF(fs, res);
    905c:	89 2b       	or	r24, r25
    905e:	09 f0       	breq	.+2      	; 0x9062 <f_setlabel+0x2e>
    9060:	73 c0       	rjmp	.+230    	; 0x9148 <f_setlabel+0x114>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    9062:	6d 96       	adiw	r28, 0x1d	; 29
    9064:	ee ad       	ldd	r30, Y+62	; 0x3e
    9066:	ff ad       	ldd	r31, Y+63	; 0x3f
    9068:	6d 97       	sbiw	r28, 0x1d	; 29
    906a:	80 81       	ld	r24, Z
    906c:	84 30       	cpi	r24, 0x04	; 4
    906e:	09 f0       	breq	.+2      	; 0x9072 <f_setlabel+0x3e>
    9070:	98 c0       	rjmp	.+304    	; 0x91a2 <f_setlabel+0x16e>
		mem_set(dirvn, 0, 22);
    9072:	46 e1       	ldi	r20, 0x16	; 22
    9074:	50 e0       	ldi	r21, 0x00	; 0
    9076:	70 e0       	ldi	r23, 0x00	; 0
    9078:	60 e0       	ldi	r22, 0x00	; 0
    907a:	ce 01       	movw	r24, r28
    907c:	8b 5b       	subi	r24, 0xBB	; 187
    907e:	9f 4f       	sbci	r25, 0xFF	; 255
    9080:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
		di = 0;
    9084:	10 e0       	ldi	r17, 0x00	; 0
    9086:	00 e0       	ldi	r16, 0x00	; 0
		while ((UINT)*label >= ' ') {	/* Create volume label */
    9088:	6f 96       	adiw	r28, 0x1f	; 31
    908a:	ee ad       	ldd	r30, Y+62	; 0x3e
    908c:	ff ad       	ldd	r31, Y+63	; 0x3f
    908e:	6f 97       	sbiw	r28, 0x1f	; 31
    9090:	80 81       	ld	r24, Z
    9092:	80 32       	cpi	r24, 0x20	; 32
    9094:	08 f0       	brcs	.+2      	; 0x9098 <f_setlabel+0x64>
    9096:	42 c0       	rjmp	.+132    	; 0x911c <f_setlabel+0xe8>
		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
	}

	/* Set volume label */
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    9098:	6d 96       	adiw	r28, 0x1d	; 29
    909a:	8e ad       	ldd	r24, Y+62	; 0x3e
    909c:	9f ad       	ldd	r25, Y+63	; 0x3f
    909e:	6d 97       	sbiw	r28, 0x1d	; 29
    90a0:	9a 83       	std	Y+2, r25	; 0x02
    90a2:	89 83       	std	Y+1, r24	; 0x01
    90a4:	1f 82       	std	Y+7, r1	; 0x07
    90a6:	18 86       	std	Y+8, r1	; 0x08
    90a8:	19 86       	std	Y+9, r1	; 0x09
    90aa:	1a 86       	std	Y+10, r1	; 0x0a
	res = dir_sdi(&dj, 0);
    90ac:	40 e0       	ldi	r20, 0x00	; 0
    90ae:	50 e0       	ldi	r21, 0x00	; 0
    90b0:	ba 01       	movw	r22, r20
    90b2:	ce 01       	movw	r24, r28
    90b4:	01 96       	adiw	r24, 0x01	; 1
    90b6:	0e 94 93 19 	call	0x3326	; 0x3326 <dir_sdi>
    90ba:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    90bc:	89 2b       	or	r24, r25
    90be:	09 f0       	breq	.+2      	; 0x90c2 <f_setlabel+0x8e>
    90c0:	43 c0       	rjmp	.+134    	; 0x9148 <f_setlabel+0x114>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
    90c2:	61 e0       	ldi	r22, 0x01	; 1
    90c4:	70 e0       	ldi	r23, 0x00	; 0
    90c6:	ce 01       	movw	r24, r28
    90c8:	01 96       	adiw	r24, 0x01	; 1
    90ca:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <dir_read>
    90ce:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
    90d0:	00 97       	sbiw	r24, 0x00	; 0
    90d2:	09 f0       	breq	.+2      	; 0x90d6 <f_setlabel+0xa2>
    90d4:	d3 c0       	rjmp	.+422    	; 0x927c <f_setlabel+0x248>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
    90d6:	8b a9       	ldd	r24, Y+51	; 0x33
    90d8:	9c a9       	ldd	r25, Y+52	; 0x34
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
    90da:	6d 96       	adiw	r28, 0x1d	; 29
    90dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    90de:	ff ad       	ldd	r31, Y+63	; 0x3f
    90e0:	6d 97       	sbiw	r28, 0x1d	; 29
    90e2:	20 81       	ld	r18, Z
    90e4:	24 30       	cpi	r18, 0x04	; 4
    90e6:	09 f0       	breq	.+2      	; 0x90ea <f_setlabel+0xb6>
    90e8:	bc c0       	rjmp	.+376    	; 0x9262 <f_setlabel+0x22e>
				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
    90ea:	dc 01       	movw	r26, r24
    90ec:	11 96       	adiw	r26, 0x01	; 1
    90ee:	0c 93       	st	X, r16
				mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
    90f0:	8b a9       	ldd	r24, Y+51	; 0x33
    90f2:	9c a9       	ldd	r25, Y+52	; 0x34
    90f4:	46 e1       	ldi	r20, 0x16	; 22
    90f6:	50 e0       	ldi	r21, 0x00	; 0
    90f8:	be 01       	movw	r22, r28
    90fa:	6b 5b       	subi	r22, 0xBB	; 187
    90fc:	7f 4f       	sbci	r23, 0xFF	; 255
    90fe:	02 96       	adiw	r24, 0x02	; 2
    9100:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
				} else {
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
				}
			}
			fs->wflag = 1;
    9104:	6d 96       	adiw	r28, 0x1d	; 29
    9106:	8e ad       	ldd	r24, Y+62	; 0x3e
    9108:	9f ad       	ldd	r25, Y+63	; 0x3f
    910a:	6d 97       	sbiw	r28, 0x1d	; 29
    910c:	21 e0       	ldi	r18, 0x01	; 1
    910e:	dc 01       	movw	r26, r24
    9110:	13 96       	adiw	r26, 0x03	; 3
    9112:	2c 93       	st	X, r18
						} else {
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
							mem_cpy(dj.dir, dirvn, 11);
						}
						fs->wflag = 1;
						res = sync_fs(fs);
    9114:	0e 94 63 30 	call	0x60c6	; 0x60c6 <sync_fs>
    9118:	9c 01       	movw	r18, r24
    911a:	16 c0       	rjmp	.+44     	; 0x9148 <f_setlabel+0x114>
			dc = tchar2uni(&label);	/* Get a Unicode character */
    911c:	ce 01       	movw	r24, r28
    911e:	83 5a       	subi	r24, 0xA3	; 163
    9120:	9f 4f       	sbci	r25, 0xFF	; 255
    9122:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <tchar2uni>
    9126:	46 2f       	mov	r20, r22
    9128:	57 2f       	mov	r21, r23
    912a:	bc 01       	movw	r22, r24
			if (dc >= 0x10000) {
    912c:	41 15       	cp	r20, r1
    912e:	51 05       	cpc	r21, r1
    9130:	21 e0       	ldi	r18, 0x01	; 1
    9132:	62 07       	cpc	r22, r18
    9134:	71 05       	cpc	r23, r1
    9136:	78 f1       	brcs	.+94     	; 0x9196 <f_setlabel+0x162>
				if (dc == 0xFFFFFFFF || di >= 10) {	/* Wrong surrogate or buffer overflow */
    9138:	4f 3f       	cpi	r20, 0xFF	; 255
    913a:	3f ef       	ldi	r19, 0xFF	; 255
    913c:	53 07       	cpc	r21, r19
    913e:	63 07       	cpc	r22, r19
    9140:	73 07       	cpc	r23, r19
    9142:	41 f4       	brne	.+16     	; 0x9154 <f_setlabel+0x120>
				LEAVE_FF(fs, FR_INVALID_NAME);
    9144:	26 e0       	ldi	r18, 0x06	; 6
    9146:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fs, res);
}
    9148:	c9 01       	movw	r24, r18
    914a:	ce 59       	subi	r28, 0x9E	; 158
    914c:	df 4f       	sbci	r29, 0xFF	; 255
    914e:	e4 e0       	ldi	r30, 0x04	; 4
    9150:	0c 94 5e 5a 	jmp	0xb4bc	; 0xb4bc <__epilogue_restores__+0x1c>
				if (dc == 0xFFFFFFFF || di >= 10) {	/* Wrong surrogate or buffer overflow */
    9154:	0a 30       	cpi	r16, 0x0A	; 10
    9156:	11 05       	cpc	r17, r1
    9158:	a8 f7       	brcc	.-22     	; 0x9144 <f_setlabel+0x110>
					st_word(dirvn + di * 2, (WCHAR)(dc >> 16)); di++;
    915a:	cb 01       	movw	r24, r22
    915c:	aa 27       	eor	r26, r26
    915e:	bb 27       	eor	r27, r27
    9160:	f8 01       	movw	r30, r16
    9162:	ee 0f       	add	r30, r30
    9164:	ff 1f       	adc	r31, r31
    9166:	25 e4       	ldi	r18, 0x45	; 69
    9168:	30 e0       	ldi	r19, 0x00	; 0
    916a:	2c 0f       	add	r18, r28
    916c:	3d 1f       	adc	r19, r29
    916e:	e2 0f       	add	r30, r18
    9170:	f3 1f       	adc	r31, r19
	*ptr++ = (BYTE)val; val >>= 8;
    9172:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    9174:	91 83       	std	Z+1, r25	; 0x01
					st_word(dirvn + di * 2, (WCHAR)(dc >> 16)); di++;
    9176:	0f 5f       	subi	r16, 0xFF	; 255
    9178:	1f 4f       	sbci	r17, 0xFF	; 255
			if (dc == 0 || chk_chr(badchr + 7, (int)dc) || di >= 11) {	/* Check validity of the volume label */
    917a:	9a 01       	movw	r18, r20
	while (*str && *str != chr) str++;
    917c:	e2 e1       	ldi	r30, 0x12	; 18
    917e:	f1 e0       	ldi	r31, 0x01	; 1
    9180:	81 91       	ld	r24, Z+
    9182:	88 23       	and	r24, r24
    9184:	09 f4       	brne	.+2      	; 0x9188 <f_setlabel+0x154>
    9186:	bf c0       	rjmp	.+382    	; 0x9306 <f_setlabel+0x2d2>
    9188:	08 2e       	mov	r0, r24
    918a:	00 0c       	add	r0, r0
    918c:	99 0b       	sbc	r25, r25
    918e:	28 17       	cp	r18, r24
    9190:	39 07       	cpc	r19, r25
    9192:	b1 f7       	brne	.-20     	; 0x9180 <f_setlabel+0x14c>
    9194:	d7 cf       	rjmp	.-82     	; 0x9144 <f_setlabel+0x110>
			if (dc == 0 || chk_chr(badchr + 7, (int)dc) || di >= 11) {	/* Check validity of the volume label */
    9196:	41 15       	cp	r20, r1
    9198:	51 05       	cpc	r21, r1
    919a:	61 05       	cpc	r22, r1
    919c:	71 05       	cpc	r23, r1
    919e:	69 f7       	brne	.-38     	; 0x917a <f_setlabel+0x146>
    91a0:	d1 cf       	rjmp	.-94     	; 0x9144 <f_setlabel+0x110>
		mem_set(dirvn, ' ', 11);
    91a2:	4b e0       	ldi	r20, 0x0B	; 11
    91a4:	50 e0       	ldi	r21, 0x00	; 0
    91a6:	60 e2       	ldi	r22, 0x20	; 32
    91a8:	70 e0       	ldi	r23, 0x00	; 0
    91aa:	ce 01       	movw	r24, r28
    91ac:	8b 5b       	subi	r24, 0xBB	; 187
    91ae:	9f 4f       	sbci	r25, 0xFF	; 255
    91b0:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
		di = 0;
    91b4:	10 e0       	ldi	r17, 0x00	; 0
    91b6:	00 e0       	ldi	r16, 0x00	; 0
		while ((UINT)*label >= ' ') {	/* Create volume label */
    91b8:	6f 96       	adiw	r28, 0x1f	; 31
    91ba:	ee ad       	ldd	r30, Y+62	; 0x3e
    91bc:	ff ad       	ldd	r31, Y+63	; 0x3f
    91be:	6f 97       	sbiw	r28, 0x1f	; 31
    91c0:	80 81       	ld	r24, Z
    91c2:	80 32       	cpi	r24, 0x20	; 32
    91c4:	c0 f4       	brcc	.+48     	; 0x91f6 <f_setlabel+0x1c2>
		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
    91c6:	26 96       	adiw	r28, 0x06	; 6
    91c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    91ca:	26 97       	sbiw	r28, 0x06	; 6
    91cc:	85 3e       	cpi	r24, 0xE5	; 229
    91ce:	09 f4       	brne	.+2      	; 0x91d2 <f_setlabel+0x19e>
    91d0:	b9 cf       	rjmp	.-142    	; 0x9144 <f_setlabel+0x110>
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
    91d2:	01 15       	cp	r16, r1
    91d4:	11 05       	cpc	r17, r1
    91d6:	09 f4       	brne	.+2      	; 0x91da <f_setlabel+0x1a6>
    91d8:	5f cf       	rjmp	.-322    	; 0x9098 <f_setlabel+0x64>
    91da:	c8 01       	movw	r24, r16
    91dc:	01 97       	sbiw	r24, 0x01	; 1
    91de:	e5 e4       	ldi	r30, 0x45	; 69
    91e0:	f0 e0       	ldi	r31, 0x00	; 0
    91e2:	ec 0f       	add	r30, r28
    91e4:	fd 1f       	adc	r31, r29
    91e6:	e8 0f       	add	r30, r24
    91e8:	f9 1f       	adc	r31, r25
    91ea:	20 81       	ld	r18, Z
    91ec:	20 32       	cpi	r18, 0x20	; 32
    91ee:	09 f0       	breq	.+2      	; 0x91f2 <f_setlabel+0x1be>
    91f0:	53 cf       	rjmp	.-346    	; 0x9098 <f_setlabel+0x64>
    91f2:	8c 01       	movw	r16, r24
    91f4:	ee cf       	rjmp	.-36     	; 0x91d2 <f_setlabel+0x19e>
			dc = tchar2uni(&label);
    91f6:	ce 01       	movw	r24, r28
    91f8:	83 5a       	subi	r24, 0xA3	; 163
    91fa:	9f 4f       	sbci	r25, 0xFF	; 255
    91fc:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <tchar2uni>
    9200:	a0 96       	adiw	r28, 0x20	; 32
    9202:	6f af       	std	Y+63, r22	; 0x3f
    9204:	a0 97       	sbiw	r28, 0x20	; 32
    9206:	a1 96       	adiw	r28, 0x21	; 33
    9208:	7f af       	std	Y+63, r23	; 0x3f
    920a:	a1 97       	sbiw	r28, 0x21	; 33
    920c:	a2 96       	adiw	r28, 0x22	; 34
    920e:	8f af       	std	Y+63, r24	; 0x3f
    9210:	a2 97       	sbiw	r28, 0x22	; 34
    9212:	a3 96       	adiw	r28, 0x23	; 35
    9214:	9f af       	std	Y+63, r25	; 0x3f
    9216:	a3 97       	sbiw	r28, 0x23	; 35
			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
    9218:	a3 96       	adiw	r28, 0x23	; 35
    921a:	8c ad       	ldd	r24, Y+60	; 0x3c
    921c:	9d ad       	ldd	r25, Y+61	; 0x3d
    921e:	ae ad       	ldd	r26, Y+62	; 0x3e
    9220:	bf ad       	ldd	r27, Y+63	; 0x3f
    9222:	a3 97       	sbiw	r28, 0x23	; 35
    9224:	00 97       	sbiw	r24, 0x00	; 0
    9226:	e1 e0       	ldi	r30, 0x01	; 1
    9228:	ae 07       	cpc	r26, r30
    922a:	b1 05       	cpc	r27, r1
    922c:	08 f0       	brcs	.+2      	; 0x9230 <f_setlabel+0x1fc>
    922e:	8a cf       	rjmp	.-236    	; 0x9144 <f_setlabel+0x110>
    9230:	bc 01       	movw	r22, r24
    9232:	cd 01       	movw	r24, r26
    9234:	0e 94 0b 4c 	call	0x9816	; 0x9816 <ff_wtoupper>
    9238:	45 eb       	ldi	r20, 0xB5	; 181
    923a:	51 e0       	ldi	r21, 0x01	; 1
    923c:	0e 94 ca 4b 	call	0x9794	; 0x9794 <ff_uni2oem>
    9240:	9c 01       	movw	r18, r24
			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
    9242:	89 2b       	or	r24, r25
    9244:	09 f4       	brne	.+2      	; 0x9248 <f_setlabel+0x214>
    9246:	7e cf       	rjmp	.-260    	; 0x9144 <f_setlabel+0x110>
    9248:	eb e0       	ldi	r30, 0x0B	; 11
    924a:	f1 e0       	ldi	r31, 0x01	; 1
	while (*str && *str != chr) str++;
    924c:	81 91       	ld	r24, Z+
    924e:	88 23       	and	r24, r24
    9250:	09 f4       	brne	.+2      	; 0x9254 <f_setlabel+0x220>
    9252:	84 c0       	rjmp	.+264    	; 0x935c <f_setlabel+0x328>
    9254:	08 2e       	mov	r0, r24
    9256:	00 0c       	add	r0, r0
    9258:	99 0b       	sbc	r25, r25
    925a:	28 17       	cp	r18, r24
    925c:	39 07       	cpc	r19, r25
    925e:	b1 f7       	brne	.-20     	; 0x924c <f_setlabel+0x218>
    9260:	71 cf       	rjmp	.-286    	; 0x9144 <f_setlabel+0x110>
				if (di != 0) {
    9262:	01 15       	cp	r16, r1
    9264:	11 05       	cpc	r17, r1
    9266:	31 f0       	breq	.+12     	; 0x9274 <f_setlabel+0x240>
	if (cnt != 0) {
    9268:	4b e0       	ldi	r20, 0x0B	; 11
    926a:	50 e0       	ldi	r21, 0x00	; 0
    926c:	be 01       	movw	r22, r28
    926e:	6b 5b       	subi	r22, 0xBB	; 187
    9270:	7f 4f       	sbci	r23, 0xFF	; 255
    9272:	46 cf       	rjmp	.-372    	; 0x9100 <f_setlabel+0xcc>
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
    9274:	25 ee       	ldi	r18, 0xE5	; 229
    9276:	fc 01       	movw	r30, r24
    9278:	20 83       	st	Z, r18
    927a:	44 cf       	rjmp	.-376    	; 0x9104 <f_setlabel+0xd0>
			if (res == FR_NO_FILE) {
    927c:	04 97       	sbiw	r24, 0x04	; 4
    927e:	09 f0       	breq	.+2      	; 0x9282 <f_setlabel+0x24e>
    9280:	63 cf       	rjmp	.-314    	; 0x9148 <f_setlabel+0x114>
				res = FR_OK;
    9282:	30 e0       	ldi	r19, 0x00	; 0
    9284:	20 e0       	ldi	r18, 0x00	; 0
				if (di != 0) {	/* Create a volume label entry */
    9286:	01 15       	cp	r16, r1
    9288:	11 05       	cpc	r17, r1
    928a:	09 f4       	brne	.+2      	; 0x928e <f_setlabel+0x25a>
    928c:	5d cf       	rjmp	.-326    	; 0x9148 <f_setlabel+0x114>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
    928e:	61 e0       	ldi	r22, 0x01	; 1
    9290:	70 e0       	ldi	r23, 0x00	; 0
    9292:	ce 01       	movw	r24, r28
    9294:	01 96       	adiw	r24, 0x01	; 1
    9296:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <dir_alloc>
    929a:	9c 01       	movw	r18, r24
					if (res == FR_OK) {
    929c:	89 2b       	or	r24, r25
    929e:	09 f0       	breq	.+2      	; 0x92a2 <f_setlabel+0x26e>
    92a0:	53 cf       	rjmp	.-346    	; 0x9148 <f_setlabel+0x114>
						mem_set(dj.dir, 0, SZDIRE);	/* Clean the entry */
    92a2:	40 e2       	ldi	r20, 0x20	; 32
    92a4:	50 e0       	ldi	r21, 0x00	; 0
    92a6:	70 e0       	ldi	r23, 0x00	; 0
    92a8:	60 e0       	ldi	r22, 0x00	; 0
    92aa:	8b a9       	ldd	r24, Y+51	; 0x33
    92ac:	9c a9       	ldd	r25, Y+52	; 0x34
    92ae:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <mem_set>
						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
    92b2:	6d 96       	adiw	r28, 0x1d	; 29
    92b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    92b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    92b8:	6d 97       	sbiw	r28, 0x1d	; 29
    92ba:	80 81       	ld	r24, Z
    92bc:	eb a9       	ldd	r30, Y+51	; 0x33
    92be:	fc a9       	ldd	r31, Y+52	; 0x34
    92c0:	84 30       	cpi	r24, 0x04	; 4
    92c2:	b9 f4       	brne	.+46     	; 0x92f2 <f_setlabel+0x2be>
							dj.dir[XDIR_Type] = ET_VLABEL;	/* Create volume label entry */
    92c4:	83 e8       	ldi	r24, 0x83	; 131
    92c6:	80 83       	st	Z, r24
							dj.dir[XDIR_NumLabel] = (BYTE)di;
    92c8:	eb a9       	ldd	r30, Y+51	; 0x33
    92ca:	fc a9       	ldd	r31, Y+52	; 0x34
    92cc:	01 83       	std	Z+1, r16	; 0x01
							mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
    92ce:	8b a9       	ldd	r24, Y+51	; 0x33
    92d0:	9c a9       	ldd	r25, Y+52	; 0x34
    92d2:	46 e1       	ldi	r20, 0x16	; 22
    92d4:	50 e0       	ldi	r21, 0x00	; 0
    92d6:	be 01       	movw	r22, r28
    92d8:	6b 5b       	subi	r22, 0xBB	; 187
    92da:	7f 4f       	sbci	r23, 0xFF	; 255
    92dc:	02 96       	adiw	r24, 0x02	; 2
    92de:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <mem_cpy.part.0>
						fs->wflag = 1;
    92e2:	6d 96       	adiw	r28, 0x1d	; 29
    92e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    92e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    92e8:	6d 97       	sbiw	r28, 0x1d	; 29
    92ea:	21 e0       	ldi	r18, 0x01	; 1
    92ec:	fc 01       	movw	r30, r24
    92ee:	23 83       	std	Z+3, r18	; 0x03
    92f0:	11 cf       	rjmp	.-478    	; 0x9114 <f_setlabel+0xe0>
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
    92f2:	88 e0       	ldi	r24, 0x08	; 8
    92f4:	83 87       	std	Z+11, r24	; 0x0b
	if (cnt != 0) {
    92f6:	4b e0       	ldi	r20, 0x0B	; 11
    92f8:	50 e0       	ldi	r21, 0x00	; 0
    92fa:	be 01       	movw	r22, r28
    92fc:	6b 5b       	subi	r22, 0xBB	; 187
    92fe:	7f 4f       	sbci	r23, 0xFF	; 255
    9300:	8b a9       	ldd	r24, Y+51	; 0x33
    9302:	9c a9       	ldd	r25, Y+52	; 0x34
    9304:	ec cf       	rjmp	.-40     	; 0x92de <f_setlabel+0x2aa>
			if (dc == 0 || chk_chr(badchr + 7, (int)dc) || di >= 11) {	/* Check validity of the volume label */
    9306:	0b 30       	cpi	r16, 0x0B	; 11
    9308:	11 05       	cpc	r17, r1
    930a:	08 f0       	brcs	.+2      	; 0x930e <f_setlabel+0x2da>
    930c:	1b cf       	rjmp	.-458    	; 0x9144 <f_setlabel+0x110>
	*ptr++ = (BYTE)val; val >>= 8;
    930e:	f8 01       	movw	r30, r16
    9310:	ee 0f       	add	r30, r30
    9312:	ff 1f       	adc	r31, r31
    9314:	81 e0       	ldi	r24, 0x01	; 1
    9316:	90 e0       	ldi	r25, 0x00	; 0
    9318:	8c 0f       	add	r24, r28
    931a:	9d 1f       	adc	r25, r29
    931c:	e8 0f       	add	r30, r24
    931e:	f9 1f       	adc	r31, r25
    9320:	ec 5b       	subi	r30, 0xBC	; 188
    9322:	ff 4f       	sbci	r31, 0xFF	; 255
    9324:	51 83       	std	Z+1, r21	; 0x01
    9326:	40 83       	st	Z, r20
			st_word(dirvn + di * 2, (WCHAR)dc); di++;
    9328:	0f 5f       	subi	r16, 0xFF	; 255
    932a:	1f 4f       	sbci	r17, 0xFF	; 255
    932c:	ad ce       	rjmp	.-678    	; 0x9088 <f_setlabel+0x54>
			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
    932e:	0a 30       	cpi	r16, 0x0A	; 10
    9330:	11 05       	cpc	r17, r1
    9332:	08 f0       	brcs	.+2      	; 0x9336 <f_setlabel+0x302>
    9334:	07 cf       	rjmp	.-498    	; 0x9144 <f_setlabel+0x110>
			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
    9336:	e5 e4       	ldi	r30, 0x45	; 69
    9338:	f0 e0       	ldi	r31, 0x00	; 0
    933a:	ec 0f       	add	r30, r28
    933c:	fd 1f       	adc	r31, r29
    933e:	e0 0f       	add	r30, r16
    9340:	f1 1f       	adc	r31, r17
    9342:	30 83       	st	Z, r19
    9344:	0f 5f       	subi	r16, 0xFF	; 255
    9346:	1f 4f       	sbci	r17, 0xFF	; 255
			dirvn[di++] = (BYTE)wc;
    9348:	e5 e4       	ldi	r30, 0x45	; 69
    934a:	f0 e0       	ldi	r31, 0x00	; 0
    934c:	ec 0f       	add	r30, r28
    934e:	fd 1f       	adc	r31, r29
    9350:	e0 0f       	add	r30, r16
    9352:	f1 1f       	adc	r31, r17
    9354:	20 83       	st	Z, r18
    9356:	0f 5f       	subi	r16, 0xFF	; 255
    9358:	1f 4f       	sbci	r17, 0xFF	; 255
    935a:	2e cf       	rjmp	.-420    	; 0x91b8 <f_setlabel+0x184>
			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
    935c:	2f 3f       	cpi	r18, 0xFF	; 255
    935e:	31 05       	cpc	r19, r1
    9360:	09 f0       	breq	.+2      	; 0x9364 <f_setlabel+0x330>
    9362:	28 f7       	brcc	.-54     	; 0x932e <f_setlabel+0x2fa>
    9364:	0b 30       	cpi	r16, 0x0B	; 11
    9366:	11 05       	cpc	r17, r1
    9368:	78 f3       	brcs	.-34     	; 0x9348 <f_setlabel+0x314>
    936a:	ec ce       	rjmp	.-552    	; 0x9144 <f_setlabel+0x110>

0000936c <f_expand>:
FRESULT f_expand (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t fsz,	/* File size to be expanded to */
	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
)
{
    936c:	a5 e1       	ldi	r26, 0x15	; 21
    936e:	b0 e0       	ldi	r27, 0x00	; 0
    9370:	ec eb       	ldi	r30, 0xBC	; 188
    9372:	f9 e4       	ldi	r31, 0x49	; 73
    9374:	0c 94 34 5a 	jmp	0xb468	; 0xb468 <__prologue_saves__>
    9378:	1c 01       	movw	r2, r24
    937a:	0d 87       	std	Y+13, r16	; 0x0d
    937c:	1e 87       	std	Y+14, r17	; 0x0e
    937e:	2f 87       	std	Y+15, r18	; 0x0f
    9380:	38 8b       	std	Y+16, r19	; 0x10
    9382:	49 8b       	std	Y+17, r20	; 0x11
    9384:	5a 8b       	std	Y+18, r21	; 0x12
    9386:	6b 8b       	std	Y+19, r22	; 0x13
    9388:	7c 8b       	std	Y+20, r23	; 0x14
    938a:	ed 8a       	std	Y+21, r14	; 0x15
	FRESULT res;
	FATFS *fs;
	DWORD n, clst, stcl, scl, ncl, tcl, lclst;


	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
    938c:	be 01       	movw	r22, r28
    938e:	6f 5f       	subi	r22, 0xFF	; 255
    9390:	7f 4f       	sbci	r23, 0xFF	; 255
    9392:	0e 94 ab 13 	call	0x2756	; 0x2756 <validate>
    9396:	8b 83       	std	Y+3, r24	; 0x03
    9398:	9c 83       	std	Y+4, r25	; 0x04
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
    939a:	0b 81       	ldd	r16, Y+3	; 0x03
    939c:	1c 81       	ldd	r17, Y+4	; 0x04
    939e:	01 15       	cp	r16, r1
    93a0:	11 05       	cpc	r17, r1
    93a2:	c9 f4       	brne	.+50     	; 0x93d6 <f_expand+0x6a>
    93a4:	d1 01       	movw	r26, r2
    93a6:	97 96       	adiw	r26, 0x27	; 39
    93a8:	8c 91       	ld	r24, X
    93aa:	e8 2f       	mov	r30, r24
    93ac:	f0 e0       	ldi	r31, 0x00	; 0
    93ae:	fc 83       	std	Y+4, r31	; 0x04
    93b0:	eb 83       	std	Y+3, r30	; 0x03
    93b2:	81 11       	cpse	r24, r1
    93b4:	10 c0       	rjmp	.+32     	; 0x93d6 <f_expand+0x6a>
	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
    93b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    93b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    93ba:	4f 85       	ldd	r20, Y+15	; 0x0f
    93bc:	58 89       	ldd	r21, Y+16	; 0x10
    93be:	69 89       	ldd	r22, Y+17	; 0x11
    93c0:	7a 89       	ldd	r23, Y+18	; 0x12
    93c2:	8b 89       	ldd	r24, Y+19	; 0x13
    93c4:	9c 89       	ldd	r25, Y+20	; 0x14
    93c6:	a0 e0       	ldi	r26, 0x00	; 0
    93c8:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    93cc:	51 f4       	brne	.+20     	; 0x93e2 <f_expand+0x76>
    93ce:	07 e0       	ldi	r16, 0x07	; 7
    93d0:	10 e0       	ldi	r17, 0x00	; 0
    93d2:	1c 83       	std	Y+4, r17	; 0x04
    93d4:	0b 83       	std	Y+3, r16	; 0x03
			}
		}
	}

	LEAVE_FF(fs, res);
}
    93d6:	8b 81       	ldd	r24, Y+3	; 0x03
    93d8:	9c 81       	ldd	r25, Y+4	; 0x04
    93da:	65 96       	adiw	r28, 0x15	; 21
    93dc:	e2 e1       	ldi	r30, 0x12	; 18
    93de:	0c 94 50 5a 	jmp	0xb4a0	; 0xb4a0 <__epilogue_restores__>
	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
    93e2:	d1 01       	movw	r26, r2
    93e4:	1a 96       	adiw	r26, 0x0a	; 10
    93e6:	2c 91       	ld	r18, X
    93e8:	1a 97       	sbiw	r26, 0x0a	; 10
    93ea:	1b 96       	adiw	r26, 0x0b	; 11
    93ec:	3c 91       	ld	r19, X
    93ee:	1b 97       	sbiw	r26, 0x0b	; 11
    93f0:	1c 96       	adiw	r26, 0x0c	; 12
    93f2:	4c 91       	ld	r20, X
    93f4:	1c 97       	sbiw	r26, 0x0c	; 12
    93f6:	1d 96       	adiw	r26, 0x0d	; 13
    93f8:	5c 91       	ld	r21, X
    93fa:	1d 97       	sbiw	r26, 0x0d	; 13
    93fc:	1e 96       	adiw	r26, 0x0e	; 14
    93fe:	6c 91       	ld	r22, X
    9400:	1e 97       	sbiw	r26, 0x0e	; 14
    9402:	1f 96       	adiw	r26, 0x0f	; 15
    9404:	7c 91       	ld	r23, X
    9406:	1f 97       	sbiw	r26, 0x0f	; 15
    9408:	50 96       	adiw	r26, 0x10	; 16
    940a:	8c 91       	ld	r24, X
    940c:	50 97       	sbiw	r26, 0x10	; 16
    940e:	51 96       	adiw	r26, 0x11	; 17
    9410:	9c 91       	ld	r25, X
    9412:	a0 e0       	ldi	r26, 0x00	; 0
    9414:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    9418:	d1 f6       	brne	.-76     	; 0x93ce <f_expand+0x62>
    941a:	f1 01       	movw	r30, r2
    941c:	86 a1       	ldd	r24, Z+38	; 0x26
    941e:	81 ff       	sbrs	r24, 1
    9420:	d6 cf       	rjmp	.-84     	; 0x93ce <f_expand+0x62>
	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size limit */
    9422:	89 80       	ldd	r8, Y+1	; 0x01
    9424:	9a 80       	ldd	r9, Y+2	; 0x02
    9426:	d4 01       	movw	r26, r8
    9428:	bc 91       	ld	r27, X
    942a:	bd 83       	std	Y+5, r27	; 0x05
    942c:	b4 30       	cpi	r27, 0x04	; 4
    942e:	99 f0       	breq	.+38     	; 0x9456 <f_expand+0xea>
    9430:	2d 85       	ldd	r18, Y+13	; 0x0d
    9432:	3e 85       	ldd	r19, Y+14	; 0x0e
    9434:	4f 85       	ldd	r20, Y+15	; 0x0f
    9436:	58 89       	ldd	r21, Y+16	; 0x10
    9438:	69 89       	ldd	r22, Y+17	; 0x11
    943a:	7a 89       	ldd	r23, Y+18	; 0x12
    943c:	8b 89       	ldd	r24, Y+19	; 0x13
    943e:	9c 89       	ldd	r25, Y+20	; 0x14
    9440:	2f 3f       	cpi	r18, 0xFF	; 255
    9442:	3f 4f       	sbci	r19, 0xFF	; 255
    9444:	4f 4f       	sbci	r20, 0xFF	; 255
    9446:	5f 4f       	sbci	r21, 0xFF	; 255
    9448:	61 05       	cpc	r22, r1
    944a:	71 05       	cpc	r23, r1
    944c:	81 05       	cpc	r24, r1
    944e:	91 05       	cpc	r25, r1
    9450:	11 f0       	breq	.+4      	; 0x9456 <f_expand+0xea>
    9452:	08 f0       	brcs	.+2      	; 0x9456 <f_expand+0xea>
    9454:	bc cf       	rjmp	.-136    	; 0x93ce <f_expand+0x62>
	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
    9456:	d4 01       	movw	r26, r8
    9458:	19 96       	adiw	r26, 0x09	; 9
    945a:	cd 90       	ld	r12, X+
    945c:	dc 90       	ld	r13, X
    945e:	f1 2c       	mov	r15, r1
    9460:	e1 2c       	mov	r14, r1
    9462:	49 e0       	ldi	r20, 0x09	; 9
    9464:	cc 0c       	add	r12, r12
    9466:	dd 1c       	adc	r13, r13
    9468:	ee 1c       	adc	r14, r14
    946a:	ff 1c       	adc	r15, r15
    946c:	4a 95       	dec	r20
    946e:	d1 f7       	brne	.-12     	; 0x9464 <f_expand+0xf8>
	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
    9470:	d7 01       	movw	r26, r14
    9472:	c6 01       	movw	r24, r12
    9474:	01 97       	sbiw	r24, 0x01	; 1
    9476:	a1 09       	sbc	r26, r1
    9478:	b1 09       	sbc	r27, r1
    947a:	8c 01       	movw	r16, r24
    947c:	9d 01       	movw	r18, r26
    947e:	ed 85       	ldd	r30, Y+13	; 0x0d
    9480:	8e 23       	and	r24, r30
    9482:	ee 85       	ldd	r30, Y+14	; 0x0e
    9484:	e1 23       	and	r30, r17
    9486:	9f 85       	ldd	r25, Y+15	; 0x0f
    9488:	9a 23       	and	r25, r26
    948a:	58 89       	ldd	r21, Y+16	; 0x10
    948c:	53 23       	and	r21, r19
    948e:	41 2c       	mov	r4, r1
    9490:	51 2c       	mov	r5, r1
    9492:	32 01       	movw	r6, r4
    9494:	43 94       	inc	r4
    9496:	28 2f       	mov	r18, r24
    9498:	3e 2f       	mov	r19, r30
    949a:	49 2f       	mov	r20, r25
    949c:	60 e0       	ldi	r22, 0x00	; 0
    949e:	70 e0       	ldi	r23, 0x00	; 0
    94a0:	80 e0       	ldi	r24, 0x00	; 0
    94a2:	90 e0       	ldi	r25, 0x00	; 0
    94a4:	a0 e0       	ldi	r26, 0x00	; 0
    94a6:	0e 94 af 5a 	call	0xb55e	; 0xb55e <__cmpdi2_s8>
    94aa:	19 f4       	brne	.+6      	; 0x94b2 <f_expand+0x146>
    94ac:	41 2c       	mov	r4, r1
    94ae:	51 2c       	mov	r5, r1
    94b0:	32 01       	movw	r6, r4
    94b2:	56 01       	movw	r10, r12
    94b4:	67 01       	movw	r12, r14
    94b6:	e1 2c       	mov	r14, r1
    94b8:	f1 2c       	mov	r15, r1
    94ba:	00 e0       	ldi	r16, 0x00	; 0
    94bc:	10 e0       	ldi	r17, 0x00	; 0
    94be:	2d 85       	ldd	r18, Y+13	; 0x0d
    94c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    94c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    94c4:	58 89       	ldd	r21, Y+16	; 0x10
    94c6:	69 89       	ldd	r22, Y+17	; 0x11
    94c8:	7a 89       	ldd	r23, Y+18	; 0x12
    94ca:	8b 89       	ldd	r24, Y+19	; 0x13
    94cc:	9c 89       	ldd	r25, Y+20	; 0x14
    94ce:	0e 94 d7 59 	call	0xb3ae	; 0xb3ae <__udivdi3>
    94d2:	59 01       	movw	r10, r18
    94d4:	6a 01       	movw	r12, r20
    94d6:	08 2f       	mov	r16, r24
    94d8:	a3 01       	movw	r20, r6
    94da:	92 01       	movw	r18, r4
    94dc:	2a 0d       	add	r18, r10
    94de:	3b 1d       	adc	r19, r11
    94e0:	4c 1d       	adc	r20, r12
    94e2:	5d 1d       	adc	r21, r13
    94e4:	29 87       	std	Y+9, r18	; 0x09
    94e6:	3a 87       	std	Y+10, r19	; 0x0a
    94e8:	4b 87       	std	Y+11, r20	; 0x0b
    94ea:	5c 87       	std	Y+12, r21	; 0x0c
	stcl = fs->last_clst; lclst = 0;
    94ec:	d4 01       	movw	r26, r8
    94ee:	1f 96       	adiw	r26, 0x0f	; 15
    94f0:	cd 90       	ld	r12, X+
    94f2:	dd 90       	ld	r13, X+
    94f4:	ed 90       	ld	r14, X+
    94f6:	fc 90       	ld	r15, X
    94f8:	52 97       	sbiw	r26, 0x12	; 18
	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
    94fa:	b2 e0       	ldi	r27, 0x02	; 2
    94fc:	cb 16       	cp	r12, r27
    94fe:	d1 04       	cpc	r13, r1
    9500:	e1 04       	cpc	r14, r1
    9502:	f1 04       	cpc	r15, r1
    9504:	50 f0       	brcs	.+20     	; 0x951a <f_expand+0x1ae>
    9506:	f4 01       	movw	r30, r8
    9508:	87 a1       	ldd	r24, Z+39	; 0x27
    950a:	90 a5       	ldd	r25, Z+40	; 0x28
    950c:	a1 a5       	ldd	r26, Z+41	; 0x29
    950e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    9510:	c8 16       	cp	r12, r24
    9512:	d9 06       	cpc	r13, r25
    9514:	ea 06       	cpc	r14, r26
    9516:	fb 06       	cpc	r15, r27
    9518:	28 f0       	brcs	.+10     	; 0x9524 <f_expand+0x1b8>
    951a:	32 e0       	ldi	r19, 0x02	; 2
    951c:	c3 2e       	mov	r12, r19
    951e:	d1 2c       	mov	r13, r1
    9520:	e1 2c       	mov	r14, r1
    9522:	f1 2c       	mov	r15, r1
	if (fs->fs_type == FS_EXFAT) {
    9524:	fd 81       	ldd	r31, Y+5	; 0x05
    9526:	f4 30       	cpi	r31, 0x04	; 4
    9528:	e1 f5       	brne	.+120    	; 0x95a2 <f_expand+0x236>
		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
    952a:	09 85       	ldd	r16, Y+9	; 0x09
    952c:	1a 85       	ldd	r17, Y+10	; 0x0a
    952e:	2b 85       	ldd	r18, Y+11	; 0x0b
    9530:	3c 85       	ldd	r19, Y+12	; 0x0c
    9532:	b7 01       	movw	r22, r14
    9534:	a6 01       	movw	r20, r12
    9536:	c4 01       	movw	r24, r8
    9538:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <find_bitmap>
    953c:	4b 01       	movw	r8, r22
    953e:	5c 01       	movw	r10, r24
		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
    9540:	81 14       	cp	r8, r1
    9542:	91 04       	cpc	r9, r1
    9544:	a1 04       	cpc	r10, r1
    9546:	b1 04       	cpc	r11, r1
    9548:	09 f4       	brne	.+2      	; 0x954c <f_expand+0x1e0>
    954a:	41 cf       	rjmp	.-382    	; 0x93ce <f_expand+0x62>
		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
    954c:	3f ef       	ldi	r19, 0xFF	; 255
    954e:	83 16       	cp	r8, r19
    9550:	93 06       	cpc	r9, r19
    9552:	a3 06       	cpc	r10, r19
    9554:	b3 06       	cpc	r11, r19
    9556:	09 f4       	brne	.+2      	; 0x955a <f_expand+0x1ee>
    9558:	55 c0       	rjmp	.+170    	; 0x9604 <f_expand+0x298>
				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
    955a:	89 81       	ldd	r24, Y+1	; 0x01
    955c:	9a 81       	ldd	r25, Y+2	; 0x02
			if (opt) {		/* Allocate it now */
    955e:	0d 89       	ldd	r16, Y+21	; 0x15
    9560:	00 23       	and	r16, r16
    9562:	09 f4       	brne	.+2      	; 0x9566 <f_expand+0x1fa>
    9564:	71 c0       	rjmp	.+226    	; 0x9648 <f_expand+0x2dc>
				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
    9566:	ee 24       	eor	r14, r14
    9568:	e3 94       	inc	r14
    956a:	f1 2c       	mov	r15, r1
    956c:	09 85       	ldd	r16, Y+9	; 0x09
    956e:	1a 85       	ldd	r17, Y+10	; 0x0a
    9570:	2b 85       	ldd	r18, Y+11	; 0x0b
    9572:	3c 85       	ldd	r19, Y+12	; 0x0c
    9574:	b5 01       	movw	r22, r10
    9576:	a4 01       	movw	r20, r8
    9578:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <change_bitmap>
    957c:	9c 01       	movw	r18, r24
				lclst = scl + tcl - 1;
    957e:	49 85       	ldd	r20, Y+9	; 0x09
    9580:	5a 85       	ldd	r21, Y+10	; 0x0a
    9582:	6b 85       	ldd	r22, Y+11	; 0x0b
    9584:	7c 85       	ldd	r23, Y+12	; 0x0c
    9586:	41 50       	subi	r20, 0x01	; 1
    9588:	51 09       	sbc	r21, r1
    958a:	61 09       	sbc	r22, r1
    958c:	71 09       	sbc	r23, r1
    958e:	48 0d       	add	r20, r8
    9590:	59 1d       	adc	r21, r9
    9592:	6a 1d       	adc	r22, r10
    9594:	7b 1d       	adc	r23, r11
	if (res == FR_OK) {
    9596:	89 2b       	or	r24, r25
    9598:	09 f4       	brne	.+2      	; 0x959c <f_expand+0x230>
    959a:	95 c0       	rjmp	.+298    	; 0x96c6 <f_expand+0x35a>
    959c:	3c 83       	std	Y+4, r19	; 0x04
    959e:	2b 83       	std	Y+3, r18	; 0x03
    95a0:	1a cf       	rjmp	.-460    	; 0x93d6 <f_expand+0x6a>
		scl = clst = stcl; ncl = 0;
    95a2:	46 01       	movw	r8, r12
    95a4:	57 01       	movw	r10, r14
    95a6:	26 01       	movw	r4, r12
    95a8:	37 01       	movw	r6, r14
    95aa:	1d 82       	std	Y+5, r1	; 0x05
    95ac:	1e 82       	std	Y+6, r1	; 0x06
    95ae:	1f 82       	std	Y+7, r1	; 0x07
    95b0:	18 86       	std	Y+8, r1	; 0x08
			n = get_fat(&fp->obj, clst);
    95b2:	b3 01       	movw	r22, r6
    95b4:	a2 01       	movw	r20, r4
    95b6:	c1 01       	movw	r24, r2
    95b8:	0e 94 0d 18 	call	0x301a	; 0x301a <get_fat>
    95bc:	46 2f       	mov	r20, r22
    95be:	57 2f       	mov	r21, r23
    95c0:	bc 01       	movw	r22, r24
			if (++clst >= fs->n_fatent) clst = 2;
    95c2:	1f ef       	ldi	r17, 0xFF	; 255
    95c4:	41 1a       	sub	r4, r17
    95c6:	51 0a       	sbc	r5, r17
    95c8:	61 0a       	sbc	r6, r17
    95ca:	71 0a       	sbc	r7, r17
    95cc:	e9 81       	ldd	r30, Y+1	; 0x01
    95ce:	fa 81       	ldd	r31, Y+2	; 0x02
    95d0:	87 a1       	ldd	r24, Z+39	; 0x27
    95d2:	90 a5       	ldd	r25, Z+40	; 0x28
    95d4:	a1 a5       	ldd	r26, Z+41	; 0x29
    95d6:	b2 a5       	ldd	r27, Z+42	; 0x2a
    95d8:	48 16       	cp	r4, r24
    95da:	59 06       	cpc	r5, r25
    95dc:	6a 06       	cpc	r6, r26
    95de:	7b 06       	cpc	r7, r27
    95e0:	28 f0       	brcs	.+10     	; 0x95ec <f_expand+0x280>
    95e2:	82 e0       	ldi	r24, 0x02	; 2
    95e4:	48 2e       	mov	r4, r24
    95e6:	51 2c       	mov	r5, r1
    95e8:	61 2c       	mov	r6, r1
    95ea:	71 2c       	mov	r7, r1
			if (n == 1) { res = FR_INT_ERR; break; }
    95ec:	41 30       	cpi	r20, 0x01	; 1
    95ee:	51 05       	cpc	r21, r1
    95f0:	61 05       	cpc	r22, r1
    95f2:	71 05       	cpc	r23, r1
    95f4:	09 f4       	brne	.+2      	; 0x95f8 <f_expand+0x28c>
    95f6:	cb c0       	rjmp	.+406    	; 0x978e <f_expand+0x422>
			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    95f8:	4f 3f       	cpi	r20, 0xFF	; 255
    95fa:	2f ef       	ldi	r18, 0xFF	; 255
    95fc:	52 07       	cpc	r21, r18
    95fe:	62 07       	cpc	r22, r18
    9600:	72 07       	cpc	r23, r18
    9602:	29 f4       	brne	.+10     	; 0x960e <f_expand+0x2a2>
    9604:	41 e0       	ldi	r20, 0x01	; 1
    9606:	50 e0       	ldi	r21, 0x00	; 0
    9608:	5c 83       	std	Y+4, r21	; 0x04
    960a:	4b 83       	std	Y+3, r20	; 0x03
    960c:	e4 ce       	rjmp	.-568    	; 0x93d6 <f_expand+0x6a>
			if (n == 0) {	/* Is it a free cluster? */
    960e:	41 15       	cp	r20, r1
    9610:	51 05       	cpc	r21, r1
    9612:	61 05       	cpc	r22, r1
    9614:	71 05       	cpc	r23, r1
    9616:	f9 f4       	brne	.+62     	; 0x9656 <f_expand+0x2ea>
				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
    9618:	0d 81       	ldd	r16, Y+5	; 0x05
    961a:	1e 81       	ldd	r17, Y+6	; 0x06
    961c:	2f 81       	ldd	r18, Y+7	; 0x07
    961e:	38 85       	ldd	r19, Y+8	; 0x08
    9620:	0f 5f       	subi	r16, 0xFF	; 255
    9622:	1f 4f       	sbci	r17, 0xFF	; 255
    9624:	2f 4f       	sbci	r18, 0xFF	; 255
    9626:	3f 4f       	sbci	r19, 0xFF	; 255
    9628:	0d 83       	std	Y+5, r16	; 0x05
    962a:	1e 83       	std	Y+6, r17	; 0x06
    962c:	2f 83       	std	Y+7, r18	; 0x07
    962e:	38 87       	std	Y+8, r19	; 0x08
    9630:	89 85       	ldd	r24, Y+9	; 0x09
    9632:	9a 85       	ldd	r25, Y+10	; 0x0a
    9634:	ab 85       	ldd	r26, Y+11	; 0x0b
    9636:	bc 85       	ldd	r27, Y+12	; 0x0c
    9638:	80 17       	cp	r24, r16
    963a:	91 07       	cpc	r25, r17
    963c:	a2 07       	cpc	r26, r18
    963e:	b3 07       	cpc	r27, r19
    9640:	81 f4       	brne	.+32     	; 0x9662 <f_expand+0x2f6>
			if (opt) {		/* Allocate it now */
    9642:	8d 89       	ldd	r24, Y+21	; 0x15
    9644:	81 11       	cpse	r24, r1
    9646:	9c c0       	rjmp	.+312    	; 0x9780 <f_expand+0x414>
				lclst = scl - 1;
    9648:	b5 01       	movw	r22, r10
    964a:	a4 01       	movw	r20, r8
    964c:	41 50       	subi	r20, 0x01	; 1
    964e:	51 09       	sbc	r21, r1
    9650:	61 09       	sbc	r22, r1
    9652:	71 09       	sbc	r23, r1
    9654:	38 c0       	rjmp	.+112    	; 0x96c6 <f_expand+0x35a>
    9656:	53 01       	movw	r10, r6
    9658:	42 01       	movw	r8, r4
				scl = clst; ncl = 0;		/* Not a free cluster */
    965a:	1d 82       	std	Y+5, r1	; 0x05
    965c:	1e 82       	std	Y+6, r1	; 0x06
    965e:	1f 82       	std	Y+7, r1	; 0x07
    9660:	18 86       	std	Y+8, r1	; 0x08
			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
    9662:	4c 14       	cp	r4, r12
    9664:	5d 04       	cpc	r5, r13
    9666:	6e 04       	cpc	r6, r14
    9668:	7f 04       	cpc	r7, r15
    966a:	09 f0       	breq	.+2      	; 0x966e <f_expand+0x302>
    966c:	a2 cf       	rjmp	.-188    	; 0x95b2 <f_expand+0x246>
    966e:	af ce       	rjmp	.-674    	; 0x93ce <f_expand+0x62>
					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
    9670:	97 01       	movw	r18, r14
    9672:	86 01       	movw	r16, r12
    9674:	0f 5f       	subi	r16, 0xFF	; 255
    9676:	1f 4f       	sbci	r17, 0xFF	; 255
    9678:	2f 4f       	sbci	r18, 0xFF	; 255
    967a:	3f 4f       	sbci	r19, 0xFF	; 255
    967c:	91 e0       	ldi	r25, 0x01	; 1
    967e:	49 16       	cp	r4, r25
    9680:	51 04       	cpc	r5, r1
    9682:	61 04       	cpc	r6, r1
    9684:	71 04       	cpc	r7, r1
    9686:	21 f4       	brne	.+8      	; 0x9690 <f_expand+0x324>
    9688:	0f ef       	ldi	r16, 0xFF	; 255
    968a:	1f ef       	ldi	r17, 0xFF	; 255
    968c:	2f ef       	ldi	r18, 0xFF	; 255
    968e:	3f ef       	ldi	r19, 0xFF	; 255
    9690:	b7 01       	movw	r22, r14
    9692:	a6 01       	movw	r20, r12
    9694:	89 81       	ldd	r24, Y+1	; 0x01
    9696:	9a 81       	ldd	r25, Y+2	; 0x02
    9698:	0e 94 c1 1a 	call	0x3582	; 0x3582 <put_fat>
    969c:	9c 01       	movw	r18, r24
					if (res != FR_OK) break;
    969e:	89 2b       	or	r24, r25
    96a0:	09 f0       	breq	.+2      	; 0x96a4 <f_expand+0x338>
    96a2:	7c cf       	rjmp	.-264    	; 0x959c <f_expand+0x230>
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
    96a4:	a1 e0       	ldi	r26, 0x01	; 1
    96a6:	4a 1a       	sub	r4, r26
    96a8:	51 08       	sbc	r5, r1
    96aa:	61 08       	sbc	r6, r1
    96ac:	71 08       	sbc	r7, r1
					lclst = clst;
    96ae:	b7 01       	movw	r22, r14
    96b0:	a6 01       	movw	r20, r12
				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
    96b2:	bf ef       	ldi	r27, 0xFF	; 255
    96b4:	cb 1a       	sub	r12, r27
    96b6:	db 0a       	sbc	r13, r27
    96b8:	eb 0a       	sbc	r14, r27
    96ba:	fb 0a       	sbc	r15, r27
    96bc:	41 14       	cp	r4, r1
    96be:	51 04       	cpc	r5, r1
    96c0:	61 04       	cpc	r6, r1
    96c2:	71 04       	cpc	r7, r1
    96c4:	a9 f6       	brne	.-86     	; 0x9670 <f_expand+0x304>
		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
    96c6:	e9 81       	ldd	r30, Y+1	; 0x01
    96c8:	fa 81       	ldd	r31, Y+2	; 0x02
    96ca:	47 87       	std	Z+15, r20	; 0x0f
    96cc:	50 8b       	std	Z+16, r21	; 0x10
    96ce:	61 8b       	std	Z+17, r22	; 0x11
    96d0:	72 8b       	std	Z+18, r23	; 0x12
		if (opt) {	/* Is it allocated now? */
    96d2:	0d 89       	ldd	r16, Y+21	; 0x15
    96d4:	00 23       	and	r16, r16
    96d6:	09 f4       	brne	.+2      	; 0x96da <f_expand+0x36e>
    96d8:	7e ce       	rjmp	.-772    	; 0x93d6 <f_expand+0x6a>
			fp->obj.sclust = scl;		/* Update object allocation information */
    96da:	d1 01       	movw	r26, r2
    96dc:	16 96       	adiw	r26, 0x06	; 6
    96de:	8d 92       	st	X+, r8
    96e0:	9d 92       	st	X+, r9
    96e2:	ad 92       	st	X+, r10
    96e4:	bc 92       	st	X, r11
    96e6:	19 97       	sbiw	r26, 0x09	; 9
			fp->obj.objsize = fsz;
    96e8:	0d 85       	ldd	r16, Y+13	; 0x0d
    96ea:	1a 96       	adiw	r26, 0x0a	; 10
    96ec:	0c 93       	st	X, r16
    96ee:	1a 97       	sbiw	r26, 0x0a	; 10
    96f0:	1e 85       	ldd	r17, Y+14	; 0x0e
    96f2:	1b 96       	adiw	r26, 0x0b	; 11
    96f4:	1c 93       	st	X, r17
    96f6:	1b 97       	sbiw	r26, 0x0b	; 11
    96f8:	2f 85       	ldd	r18, Y+15	; 0x0f
    96fa:	1c 96       	adiw	r26, 0x0c	; 12
    96fc:	2c 93       	st	X, r18
    96fe:	1c 97       	sbiw	r26, 0x0c	; 12
    9700:	38 89       	ldd	r19, Y+16	; 0x10
    9702:	1d 96       	adiw	r26, 0x0d	; 13
    9704:	3c 93       	st	X, r19
    9706:	1d 97       	sbiw	r26, 0x0d	; 13
    9708:	49 89       	ldd	r20, Y+17	; 0x11
    970a:	1e 96       	adiw	r26, 0x0e	; 14
    970c:	4c 93       	st	X, r20
    970e:	1e 97       	sbiw	r26, 0x0e	; 14
    9710:	5a 89       	ldd	r21, Y+18	; 0x12
    9712:	1f 96       	adiw	r26, 0x0f	; 15
    9714:	5c 93       	st	X, r21
    9716:	1f 97       	sbiw	r26, 0x0f	; 15
    9718:	8b 89       	ldd	r24, Y+19	; 0x13
    971a:	50 96       	adiw	r26, 0x10	; 16
    971c:	8c 93       	st	X, r24
    971e:	50 97       	sbiw	r26, 0x10	; 16
    9720:	9c 89       	ldd	r25, Y+20	; 0x14
    9722:	51 96       	adiw	r26, 0x11	; 17
    9724:	9c 93       	st	X, r25
    9726:	51 97       	sbiw	r26, 0x11	; 17
			if (FF_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
    9728:	82 e0       	ldi	r24, 0x02	; 2
    972a:	15 96       	adiw	r26, 0x05	; 5
    972c:	8c 93       	st	X, r24
    972e:	15 97       	sbiw	r26, 0x05	; 5
			fp->flag |= FA_MODIFIED;
    9730:	96 96       	adiw	r26, 0x26	; 38
    9732:	8c 91       	ld	r24, X
    9734:	96 97       	sbiw	r26, 0x26	; 38
    9736:	80 64       	ori	r24, 0x40	; 64
    9738:	96 96       	adiw	r26, 0x26	; 38
    973a:	8c 93       	st	X, r24
			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
    973c:	83 89       	ldd	r24, Z+19	; 0x13
    973e:	94 89       	ldd	r25, Z+20	; 0x14
    9740:	a5 89       	ldd	r26, Z+21	; 0x15
    9742:	b6 89       	ldd	r27, Z+22	; 0x16
    9744:	47 a1       	ldd	r20, Z+39	; 0x27
    9746:	50 a5       	ldd	r21, Z+40	; 0x28
    9748:	61 a5       	ldd	r22, Z+41	; 0x29
    974a:	72 a5       	ldd	r23, Z+42	; 0x2a
    974c:	42 50       	subi	r20, 0x02	; 2
    974e:	51 09       	sbc	r21, r1
    9750:	61 09       	sbc	r22, r1
    9752:	71 09       	sbc	r23, r1
    9754:	48 17       	cp	r20, r24
    9756:	59 07       	cpc	r21, r25
    9758:	6a 07       	cpc	r22, r26
    975a:	7b 07       	cpc	r23, r27
    975c:	08 f4       	brcc	.+2      	; 0x9760 <f_expand+0x3f4>
    975e:	3b ce       	rjmp	.-906    	; 0x93d6 <f_expand+0x6a>
				fs->free_clst -= tcl;
    9760:	09 85       	ldd	r16, Y+9	; 0x09
    9762:	1a 85       	ldd	r17, Y+10	; 0x0a
    9764:	2b 85       	ldd	r18, Y+11	; 0x0b
    9766:	3c 85       	ldd	r19, Y+12	; 0x0c
    9768:	80 1b       	sub	r24, r16
    976a:	91 0b       	sbc	r25, r17
    976c:	a2 0b       	sbc	r26, r18
    976e:	b3 0b       	sbc	r27, r19
    9770:	83 8b       	std	Z+19, r24	; 0x13
    9772:	94 8b       	std	Z+20, r25	; 0x14
    9774:	a5 8b       	std	Z+21, r26	; 0x15
    9776:	b6 8b       	std	Z+22, r27	; 0x16
				fs->fsi_flag |= 1;
    9778:	84 81       	ldd	r24, Z+4	; 0x04
    977a:	81 60       	ori	r24, 0x01	; 1
    977c:	84 83       	std	Z+4, r24	; 0x04
    977e:	2b ce       	rjmp	.-938    	; 0x93d6 <f_expand+0x6a>
    9780:	75 01       	movw	r14, r10
    9782:	64 01       	movw	r12, r8
    9784:	49 84       	ldd	r4, Y+9	; 0x09
    9786:	5a 84       	ldd	r5, Y+10	; 0x0a
    9788:	6b 84       	ldd	r6, Y+11	; 0x0b
    978a:	7c 84       	ldd	r7, Y+12	; 0x0c
    978c:	97 cf       	rjmp	.-210    	; 0x96bc <f_expand+0x350>
			if (n == 1) { res = FR_INT_ERR; break; }
    978e:	22 e0       	ldi	r18, 0x02	; 2
    9790:	30 e0       	ldi	r19, 0x00	; 0
    9792:	04 cf       	rjmp	.-504    	; 0x959c <f_expand+0x230>

00009794 <ff_uni2oem>:

WCHAR ff_uni2oem(	/* Returns converted character, zero on error */
	DWORD	uni,	/* Character code to be converted */
	WORD	cp		/* OEM code page */
)
{
    9794:	38 2f       	mov	r19, r24
    9796:	29 2f       	mov	r18, r25
    9798:	cb 01       	movw	r24, r22
    979a:	a3 2f       	mov	r26, r19
    979c:	b2 2f       	mov	r27, r18
    979e:	9a 01       	movw	r18, r20
	WCHAR uc, c = 0;


	if (uni < 0x80) {	/* ASCII? */
    97a0:	80 38       	cpi	r24, 0x80	; 128
    97a2:	91 05       	cpc	r25, r1
    97a4:	a1 05       	cpc	r26, r1
    97a6:	b1 05       	cpc	r27, r1
    97a8:	f0 f0       	brcs	.+60     	; 0x97e6 <ff_uni2oem+0x52>
		c = (WCHAR)uni;

	} else {
		if (uni < 0x10000) { /* Is it in BMP? */
    97aa:	00 97       	sbiw	r24, 0x00	; 0
    97ac:	a1 40       	sbci	r26, 0x01	; 1
    97ae:	b1 05       	cpc	r27, r1
    97b0:	c0 f4       	brcc	.+48     	; 0x97e2 <ff_uni2oem+0x4e>
			if (cp == FF_CODE_PAGE) {
    97b2:	25 3b       	cpi	r18, 0xB5	; 181
    97b4:	31 40       	sbci	r19, 0x01	; 1
    97b6:	a9 f4       	brne	.+42     	; 0x97e2 <ff_uni2oem+0x4e>
				uc = (WCHAR)uni;
    97b8:	9b 01       	movw	r18, r22
				for (c = 0; c < 0x80; c++) {
    97ba:	4a eb       	ldi	r20, 0xBA	; 186
    97bc:	5d e0       	ldi	r21, 0x0D	; 13
    97be:	90 e0       	ldi	r25, 0x00	; 0
    97c0:	80 e0       	ldi	r24, 0x00	; 0
					if (uc == (WCHAR)pgm_read_word(&Tbl[c])) break;
    97c2:	fa 01       	movw	r30, r20
    97c4:	65 91       	lpm	r22, Z+
    97c6:	74 91       	lpm	r23, Z
    97c8:	26 17       	cp	r18, r22
    97ca:	37 07       	cpc	r19, r23
    97cc:	31 f0       	breq	.+12     	; 0x97da <ff_uni2oem+0x46>
				for (c = 0; c < 0x80; c++) {
    97ce:	01 96       	adiw	r24, 0x01	; 1
    97d0:	4e 5f       	subi	r20, 0xFE	; 254
    97d2:	5f 4f       	sbci	r21, 0xFF	; 255
    97d4:	80 38       	cpi	r24, 0x80	; 128
    97d6:	91 05       	cpc	r25, r1
    97d8:	a1 f7       	brne	.-24     	; 0x97c2 <ff_uni2oem+0x2e>
				}
				c = (c + 0x80) & 0xFF;
    97da:	80 58       	subi	r24, 0x80	; 128
    97dc:	9f 4f       	sbci	r25, 0xFF	; 255
    97de:	99 27       	eor	r25, r25
    97e0:	08 95       	ret
	WCHAR uc, c = 0;
    97e2:	90 e0       	ldi	r25, 0x00	; 0
    97e4:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return c;
}
    97e6:	08 95       	ret

000097e8 <ff_oem2uni>:

WCHAR ff_oem2uni(	/* Returns converted character, zero on error */
	WCHAR	oem,	/* Character code to be converted */
	WORD	cp		/* OEM code page */
)
{
    97e8:	fc 01       	movw	r30, r24
	WCHAR c = 0;


	if (oem < 0x80) {	/* ASCII */
    97ea:	e0 38       	cpi	r30, 0x80	; 128
    97ec:	f1 05       	cpc	r31, r1
    97ee:	70 f0       	brcs	.+28     	; 0x980c <ff_oem2uni+0x24>
		c = oem;

	} else {
		if (cp == FF_CODE_PAGE) {
    97f0:	65 3b       	cpi	r22, 0xB5	; 181
    97f2:	71 40       	sbci	r23, 0x01	; 1
    97f4:	69 f4       	brne	.+26     	; 0x9810 <ff_oem2uni+0x28>
			c = (oem < 0x100) ? (WCHAR)pgm_read_word(&Tbl[oem - 0x80]) : 0;
    97f6:	ef 3f       	cpi	r30, 0xFF	; 255
    97f8:	f1 05       	cpc	r31, r1
    97fa:	09 f0       	breq	.+2      	; 0x97fe <ff_oem2uni+0x16>
    97fc:	48 f4       	brcc	.+18     	; 0x9810 <ff_oem2uni+0x28>
    97fe:	ee 0f       	add	r30, r30
    9800:	ff 1f       	adc	r31, r31
    9802:	e6 54       	subi	r30, 0x46	; 70
    9804:	f3 4f       	sbci	r31, 0xF3	; 243
    9806:	85 91       	lpm	r24, Z+
    9808:	94 91       	lpm	r25, Z
    980a:	fc 01       	movw	r30, r24
		}
	}

	return c;
}
    980c:	cf 01       	movw	r24, r30
    980e:	08 95       	ret
	WCHAR c = 0;
    9810:	f0 e0       	ldi	r31, 0x00	; 0
    9812:	e0 e0       	ldi	r30, 0x00	; 0
    9814:	fb cf       	rjmp	.-10     	; 0x980c <ff_oem2uni+0x24>

00009816 <ff_wtoupper>:


DWORD ff_wtoupper (	/* Returns upper converted character */
	DWORD uni		/* Unicode character to be upper converted (BMP only) */
)
{
    9816:	a4 e0       	ldi	r26, 0x04	; 4
    9818:	b0 e0       	ldi	r27, 0x00	; 0
    981a:	e1 e1       	ldi	r30, 0x11	; 17
    981c:	fc e4       	ldi	r31, 0x4C	; 76
    981e:	0c 94 44 5a 	jmp	0xb488	; 0xb488 <__prologue_saves__+0x20>
    9822:	69 83       	std	Y+1, r22	; 0x01
    9824:	7a 83       	std	Y+2, r23	; 0x02
    9826:	8b 83       	std	Y+3, r24	; 0x03
    9828:	9c 83       	std	Y+4, r25	; 0x04
	};
	const WCHAR *p;
	WORD uc, bc, nc, cmd;


	if (uni < 0x10000) {	/* Is it in BMP? */
    982a:	29 81       	ldd	r18, Y+1	; 0x01
    982c:	3a 81       	ldd	r19, Y+2	; 0x02
    982e:	4b 81       	ldd	r20, Y+3	; 0x03
    9830:	5c 81       	ldd	r21, Y+4	; 0x04
    9832:	21 15       	cp	r18, r1
    9834:	31 05       	cpc	r19, r1
    9836:	41 40       	sbci	r20, 0x01	; 1
    9838:	51 05       	cpc	r21, r1
    983a:	08 f0       	brcs	.+2      	; 0x983e <ff_wtoupper+0x28>
    983c:	3a c0       	rjmp	.+116    	; 0x98b2 <ff_wtoupper+0x9c>
		uc = (WORD)uni;
    983e:	89 81       	ldd	r24, Y+1	; 0x01
    9840:	9a 81       	ldd	r25, Y+2	; 0x02
		p = uc < 0x1000 ? cvt1 : cvt2;
    9842:	2c e0       	ldi	r18, 0x0C	; 12
    9844:	3b e0       	ldi	r19, 0x0B	; 11
    9846:	81 15       	cp	r24, r1
    9848:	a0 e1       	ldi	r26, 0x10	; 16
    984a:	9a 07       	cpc	r25, r26
    984c:	10 f4       	brcc	.+4      	; 0x9852 <ff_wtoupper+0x3c>
    984e:	28 ec       	ldi	r18, 0xC8	; 200
    9850:	3b e0       	ldi	r19, 0x0B	; 11
		for (;;) {
			bc = pgm_read_word(p++);							/* Get block base */
    9852:	a9 01       	movw	r20, r18
    9854:	f9 01       	movw	r30, r18
    9856:	65 91       	lpm	r22, Z+
    9858:	74 91       	lpm	r23, Z
			if (!bc || uc < bc) break;
    985a:	61 15       	cp	r22, r1
    985c:	71 05       	cpc	r23, r1
    985e:	11 f1       	breq	.+68     	; 0x98a4 <ff_wtoupper+0x8e>
    9860:	86 17       	cp	r24, r22
    9862:	97 07       	cpc	r25, r23
    9864:	f8 f0       	brcs	.+62     	; 0x98a4 <ff_wtoupper+0x8e>
			nc = pgm_read_word(p++); cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    9866:	2c 5f       	subi	r18, 0xFC	; 252
    9868:	3f 4f       	sbci	r19, 0xFF	; 255
    986a:	fa 01       	movw	r30, r20
    986c:	32 96       	adiw	r30, 0x02	; 2
    986e:	45 91       	lpm	r20, Z+
    9870:	54 91       	lpm	r21, Z
    9872:	e5 2f       	mov	r30, r21
    9874:	ff 27       	eor	r31, r31
    9876:	55 27       	eor	r21, r21
			if (uc < bc + nc) {	/* In the block? */
    9878:	db 01       	movw	r26, r22
    987a:	a4 0f       	add	r26, r20
    987c:	b5 1f       	adc	r27, r21
    987e:	8a 17       	cp	r24, r26
    9880:	9b 07       	cpc	r25, r27
    9882:	b8 f5       	brcc	.+110    	; 0x98f2 <ff_wtoupper+0xdc>
				switch (cmd) {
    9884:	e9 30       	cpi	r30, 0x09	; 9
    9886:	f1 05       	cpc	r31, r1
    9888:	68 f4       	brcc	.+26     	; 0x98a4 <ff_wtoupper+0x8e>
    988a:	ed 5f       	subi	r30, 0xFD	; 253
    988c:	f4 4a       	sbci	r31, 0xA4	; 164
    988e:	0c 94 c1 59 	jmp	0xb382	; 0xb382 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    9892:	86 1b       	sub	r24, r22
    9894:	97 0b       	sbc	r25, r23
    9896:	88 0f       	add	r24, r24
    9898:	99 1f       	adc	r25, r25
    989a:	28 0f       	add	r18, r24
    989c:	39 1f       	adc	r19, r25
    989e:	f9 01       	movw	r30, r18
    98a0:	80 81       	ld	r24, Z
    98a2:	91 81       	ldd	r25, Z+1	; 0x01
				}
				break;
			}
			if (!cmd) p += nc;
		}
		uni = uc;
    98a4:	9c 01       	movw	r18, r24
    98a6:	50 e0       	ldi	r21, 0x00	; 0
    98a8:	40 e0       	ldi	r20, 0x00	; 0
    98aa:	29 83       	std	Y+1, r18	; 0x01
    98ac:	3a 83       	std	Y+2, r19	; 0x02
    98ae:	4b 83       	std	Y+3, r20	; 0x03
    98b0:	5c 83       	std	Y+4, r21	; 0x04
	}

	return uni;
}
    98b2:	69 81       	ldd	r22, Y+1	; 0x01
    98b4:	7a 81       	ldd	r23, Y+2	; 0x02
    98b6:	8b 81       	ldd	r24, Y+3	; 0x03
    98b8:	9c 81       	ldd	r25, Y+4	; 0x04
    98ba:	24 96       	adiw	r28, 0x04	; 4
    98bc:	e2 e0       	ldi	r30, 0x02	; 2
    98be:	0c 94 60 5a 	jmp	0xb4c0	; 0xb4c0 <__epilogue_restores__+0x20>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    98c2:	9c 01       	movw	r18, r24
    98c4:	26 1b       	sub	r18, r22
    98c6:	37 0b       	sbc	r19, r23
    98c8:	21 70       	andi	r18, 0x01	; 1
    98ca:	33 27       	eor	r19, r19
    98cc:	82 1b       	sub	r24, r18
    98ce:	93 0b       	sbc	r25, r19
    98d0:	e9 cf       	rjmp	.-46     	; 0x98a4 <ff_wtoupper+0x8e>
				case 2: uc -= 16; break;			/* Shift -16 */
    98d2:	40 97       	sbiw	r24, 0x10	; 16
    98d4:	e7 cf       	rjmp	.-50     	; 0x98a4 <ff_wtoupper+0x8e>
				case 3:	uc -= 32; break;			/* Shift -32 */
    98d6:	80 97       	sbiw	r24, 0x20	; 32
    98d8:	e5 cf       	rjmp	.-54     	; 0x98a4 <ff_wtoupper+0x8e>
				case 4:	uc -= 48; break;			/* Shift -48 */
    98da:	c0 97       	sbiw	r24, 0x30	; 48
    98dc:	e3 cf       	rjmp	.-58     	; 0x98a4 <ff_wtoupper+0x8e>
				case 5:	uc -= 26; break;			/* Shift -26 */
    98de:	4a 97       	sbiw	r24, 0x1a	; 26
    98e0:	e1 cf       	rjmp	.-62     	; 0x98a4 <ff_wtoupper+0x8e>
				case 6:	uc += 8; break;				/* Shift +8 */
    98e2:	08 96       	adiw	r24, 0x08	; 8
    98e4:	df cf       	rjmp	.-66     	; 0x98a4 <ff_wtoupper+0x8e>
				case 7: uc -= 80; break;			/* Shift -80 */
    98e6:	80 55       	subi	r24, 0x50	; 80
    98e8:	91 09       	sbc	r25, r1
    98ea:	dc cf       	rjmp	.-72     	; 0x98a4 <ff_wtoupper+0x8e>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    98ec:	80 56       	subi	r24, 0x60	; 96
    98ee:	9c 41       	sbci	r25, 0x1C	; 28
    98f0:	d9 cf       	rjmp	.-78     	; 0x98a4 <ff_wtoupper+0x8e>
			if (!cmd) p += nc;
    98f2:	ef 2b       	or	r30, r31
    98f4:	09 f0       	breq	.+2      	; 0x98f8 <ff_wtoupper+0xe2>
    98f6:	ad cf       	rjmp	.-166    	; 0x9852 <ff_wtoupper+0x3c>
    98f8:	44 0f       	add	r20, r20
    98fa:	55 1f       	adc	r21, r21
    98fc:	24 0f       	add	r18, r20
    98fe:	35 1f       	adc	r19, r21
    9900:	a8 cf       	rjmp	.-176    	; 0x9852 <ff_wtoupper+0x3c>

00009902 <main>:
/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
{
    9902:	cd b7       	in	r28, 0x3d	; 61
    9904:	de b7       	in	r29, 0x3e	; 62
    9906:	cf 59       	subi	r28, 0x9F	; 159
    9908:	d1 09       	sbc	r29, r1
    990a:	0f b6       	in	r0, 0x3f	; 63
    990c:	f8 94       	cli
    990e:	de bf       	out	0x3e, r29	; 62
    9910:	0f be       	out	0x3f, r0	; 63
    9912:	cd bf       	out	0x3d, r28	; 61
	MCUCR = _BV(JTD); MCUCR = _BV(JTD);	/* Disable JTAG */
    9914:	80 e8       	ldi	r24, 0x80	; 128
    9916:	85 bf       	out	0x35, r24	; 53
    9918:	85 bf       	out	0x35, r24	; 53
	OCR0A = F_CPU / 1024 / 100 - 1;
    991a:	82 ec       	ldi	r24, 0xC2	; 194
    991c:	87 bd       	out	0x27, r24	; 39
	TCCR0A = _BV(WGM01);
    991e:	82 e0       	ldi	r24, 0x02	; 2
    9920:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b101;
    9922:	95 e0       	ldi	r25, 0x05	; 5
    9924:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = _BV(OCIE0A);
    9926:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();
    992a:	78 94       	sei
	FATFS *fs;
	RTC rtc;


	ioinit();				/* Initialize port settings and start system timer process */
	uart_init(115200);		/* Initialize UART driver */
    992c:	60 e0       	ldi	r22, 0x00	; 0
    992e:	72 ec       	ldi	r23, 0xC2	; 194
    9930:	81 e0       	ldi	r24, 0x01	; 1
    9932:	90 e0       	ldi	r25, 0x00	; 0
    9934:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <uart_init>
	xdev_out(uart_putc);	/* Register uart_putc() to xitoa module as console output */
    9938:	81 ed       	ldi	r24, 0xD1	; 209
    993a:	9a e0       	ldi	r25, 0x0A	; 10
    993c:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__bss_start+0x1>
    9940:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__bss_start>
	xputs(PSTR("\nFatFs Module Test Monitor\n"));
    9944:	80 ef       	ldi	r24, 0xF0	; 240
    9946:	9a e0       	ldi	r25, 0x0A	; 10
    9948:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
	xprintf(PSTR("LFN=%S, CP=%u\n"), FF_USE_LFN ? PSTR("Enabled") : PSTR("Disabled"), FF_CODE_PAGE);
    994c:	11 e0       	ldi	r17, 0x01	; 1
    994e:	1f 93       	push	r17
    9950:	85 eb       	ldi	r24, 0xB5	; 181
    9952:	8f 93       	push	r24
    9954:	88 ee       	ldi	r24, 0xE8	; 232
    9956:	9a e0       	ldi	r25, 0x0A	; 10
    9958:	9f 93       	push	r25
    995a:	8f 93       	push	r24
    995c:	89 ed       	ldi	r24, 0xD9	; 217
    995e:	9a e0       	ldi	r25, 0x0A	; 10
    9960:	9f 93       	push	r25
    9962:	8f 93       	push	r24
    9964:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
#ifdef DRV_CFC
	xprintf(PSTR("CFC ==> %u\n"), DRV_CFC);
#endif
#ifdef DRV_MMC
	xprintf(PSTR("MMC ==> %u\n"), DRV_MMC);
    9968:	1f 92       	push	r1
    996a:	1f 93       	push	r17
    996c:	8d ec       	ldi	r24, 0xCD	; 205
    996e:	9a e0       	ldi	r25, 0x0A	; 10
    9970:	9f 93       	push	r25
    9972:	8f 93       	push	r24
    9974:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
#endif


	if (rtc_init() && rtc_gettime(&rtc)) {		/* Initialize RTC */
    9978:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_init>
    997c:	0f b6       	in	r0, 0x3f	; 63
    997e:	f8 94       	cli
    9980:	de bf       	out	0x3e, r29	; 62
    9982:	0f be       	out	0x3f, r0	; 63
    9984:	cd bf       	out	0x3d, r28	; 61
    9986:	89 2b       	or	r24, r25
    9988:	09 f4       	brne	.+2      	; 0x998c <main+0x8a>
    998a:	6f c0       	rjmp	.+222    	; 0x9a6a <main+0x168>
    998c:	ce 01       	movw	r24, r28
    998e:	87 58       	subi	r24, 0x87	; 135
    9990:	9f 4f       	sbci	r25, 0xFF	; 255
    9992:	0e 94 cd 11 	call	0x239a	; 0x239a <rtc_gettime>
    9996:	89 2b       	or	r24, r25
    9998:	09 f4       	brne	.+2      	; 0x999c <main+0x9a>
    999a:	67 c0       	rjmp	.+206    	; 0x9a6a <main+0x168>
		RtcOk = 1;
    999c:	10 93 e2 01 	sts	0x01E2, r17	; 0x8001e2 <RtcOk>
		xprintf(PSTR("Current time: %u/%u/%u %02u:%02u:%02u\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
    99a0:	c0 58       	subi	r28, 0x80	; 128
    99a2:	df 4f       	sbci	r29, 0xFF	; 255
    99a4:	88 81       	ld	r24, Y
    99a6:	c0 58       	subi	r28, 0x80	; 128
    99a8:	d0 40       	sbci	r29, 0x00	; 0
    99aa:	1f 92       	push	r1
    99ac:	8f 93       	push	r24
    99ae:	c1 58       	subi	r28, 0x81	; 129
    99b0:	df 4f       	sbci	r29, 0xFF	; 255
    99b2:	88 81       	ld	r24, Y
    99b4:	cf 57       	subi	r28, 0x7F	; 127
    99b6:	d0 40       	sbci	r29, 0x00	; 0
    99b8:	1f 92       	push	r1
    99ba:	8f 93       	push	r24
    99bc:	ef 96       	adiw	r28, 0x3f	; 63
    99be:	8f ad       	ldd	r24, Y+63	; 0x3f
    99c0:	ef 97       	sbiw	r28, 0x3f	; 63
    99c2:	1f 92       	push	r1
    99c4:	8f 93       	push	r24
    99c6:	ed 96       	adiw	r28, 0x3d	; 61
    99c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    99ca:	ed 97       	sbiw	r28, 0x3d	; 61
    99cc:	1f 92       	push	r1
    99ce:	8f 93       	push	r24
    99d0:	ec 96       	adiw	r28, 0x3c	; 60
    99d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    99d4:	ec 97       	sbiw	r28, 0x3c	; 60
    99d6:	1f 92       	push	r1
    99d8:	8f 93       	push	r24
    99da:	eb 96       	adiw	r28, 0x3b	; 59
    99dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    99de:	eb 97       	sbiw	r28, 0x3b	; 59
    99e0:	8f 93       	push	r24
    99e2:	ea 96       	adiw	r28, 0x3a	; 58
    99e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    99e6:	ea 97       	sbiw	r28, 0x3a	; 58
    99e8:	8f 93       	push	r24
    99ea:	86 ea       	ldi	r24, 0xA6	; 166
    99ec:	9a e0       	ldi	r25, 0x0A	; 10
    99ee:	9f 93       	push	r25
    99f0:	8f 93       	push	r24
    99f2:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    99f6:	0f b6       	in	r0, 0x3f	; 63
    99f8:	f8 94       	cli
    99fa:	de bf       	out	0x3e, r29	; 62
    99fc:	0f be       	out	0x3f, r0	; 63
    99fe:	cd bf       	out	0x3d, r28	; 61

			case 'l' :	/* bl <len> - Set read/write size for fr/fw command */
				if (!xatoi(&ptr, &p1) || (UINT)p1 == 0 || (UINT)p1 > sizeof Buff) break;
				blen = (UINT)p1;
				xprintf(PSTR("R/W length = %u\n"), blen);
				break;
    9a00:	81 2c       	mov	r8, r1
    9a02:	91 2c       	mov	r9, r1
    9a04:	54 01       	movw	r10, r8
    9a06:	c1 2c       	mov	r12, r1
    9a08:	70 e1       	ldi	r23, 0x10	; 16
    9a0a:	d7 2e       	mov	r13, r23
		xputc('>');
    9a0c:	8e e3       	ldi	r24, 0x3E	; 62
    9a0e:	0e 94 7e 07 	call	0xefc	; 0xefc <xputc>
		ptr = line;
    9a12:	8e 01       	movw	r16, r28
    9a14:	0f 5f       	subi	r16, 0xFF	; 255
    9a16:	1f 4f       	sbci	r17, 0xFF	; 255
    9a18:	c7 56       	subi	r28, 0x67	; 103
    9a1a:	df 4f       	sbci	r29, 0xFF	; 255
    9a1c:	19 83       	std	Y+1, r17	; 0x01
    9a1e:	08 83       	st	Y, r16
    9a20:	c9 59       	subi	r28, 0x99	; 153
    9a22:	d0 40       	sbci	r29, 0x00	; 0
		get_line(ptr, sizeof line);
    9a24:	c8 01       	movw	r24, r16
    9a26:	0e 94 af 09 	call	0x135e	; 0x135e <get_line.constprop.0>
		switch (*ptr++) {
    9a2a:	c7 56       	subi	r28, 0x67	; 103
    9a2c:	df 4f       	sbci	r29, 0xFF	; 255
    9a2e:	e8 81       	ld	r30, Y
    9a30:	f9 81       	ldd	r31, Y+1	; 0x01
    9a32:	c9 59       	subi	r28, 0x99	; 153
    9a34:	d0 40       	sbci	r29, 0x00	; 0
    9a36:	cf 01       	movw	r24, r30
    9a38:	01 96       	adiw	r24, 0x01	; 1
    9a3a:	c7 56       	subi	r28, 0x67	; 103
    9a3c:	df 4f       	sbci	r29, 0xFF	; 255
    9a3e:	99 83       	std	Y+1, r25	; 0x01
    9a40:	88 83       	st	Y, r24
    9a42:	c9 59       	subi	r28, 0x99	; 153
    9a44:	d0 40       	sbci	r29, 0x00	; 0
    9a46:	80 81       	ld	r24, Z
    9a48:	84 36       	cpi	r24, 0x64	; 100
    9a4a:	09 f4       	brne	.+2      	; 0x9a4e <main+0x14c>
    9a4c:	cf c0       	rjmp	.+414    	; 0x9bec <main+0x2ea>
    9a4e:	94 f4       	brge	.+36     	; 0x9a74 <main+0x172>
    9a50:	84 35       	cpi	r24, 0x54	; 84
    9a52:	09 f4       	brne	.+2      	; 0x9a56 <main+0x154>
    9a54:	c1 c0       	rjmp	.+386    	; 0x9bd8 <main+0x2d6>
    9a56:	82 36       	cpi	r24, 0x62	; 98
    9a58:	09 f4       	brne	.+2      	; 0x9a5c <main+0x15a>
    9a5a:	cd c2       	rjmp	.+1434   	; 0x9ff6 <main+0x6f4>
    9a5c:	8f 33       	cpi	r24, 0x3F	; 63
    9a5e:	b1 f6       	brne	.-84     	; 0x9a0c <main+0x10a>
			rtc_gettime(&rtc);
			xprintf(PSTR("%u/%u/%u %02u:%02u:%02u\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
			break;

		case '?' :	/* Show Command List */
			xputs(PSTR(
    9a60:	87 e7       	ldi	r24, 0x77	; 119
    9a62:	91 e0       	ldi	r25, 0x01	; 1
    9a64:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
			" fm <ld#> [<fs type> [<au size> [<align> [<N fats> [<N root>]]]]] - Create FAT volume\n"
			"[Misc commands]\n"
			" p <wavfile> - Play RIFF-WAVE file\n"
			" t [<year> <month> <mday> <hour> <min> <sec>] - Set/Show current time\n"
			"\n"));
			break;
    9a68:	d1 cf       	rjmp	.-94     	; 0x9a0c <main+0x10a>
		xputs(PSTR("RTC is not available.\n"));
    9a6a:	8f e8       	ldi	r24, 0x8F	; 143
    9a6c:	9a e0       	ldi	r25, 0x0A	; 10
    9a6e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
    9a72:	c6 cf       	rjmp	.-116    	; 0x9a00 <main+0xfe>
		switch (*ptr++) {
    9a74:	86 36       	cpi	r24, 0x66	; 102
    9a76:	09 f4       	brne	.+2      	; 0x9a7a <main+0x178>
    9a78:	a0 c4       	rjmp	.+2368   	; 0xa3ba <main+0xab8>
    9a7a:	84 37       	cpi	r24, 0x74	; 116
    9a7c:	39 f6       	brne	.-114    	; 0x9a0c <main+0x10a>
			if (!RtcOk) break;
    9a7e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <RtcOk>
    9a82:	88 23       	and	r24, r24
    9a84:	19 f2       	breq	.-122    	; 0x9a0c <main+0x10a>
			if (xatoi(&ptr, &p1)) {
    9a86:	be 01       	movw	r22, r28
    9a88:	63 57       	subi	r22, 0x73	; 115
    9a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a8c:	ce 01       	movw	r24, r28
    9a8e:	87 56       	subi	r24, 0x67	; 103
    9a90:	9f 4f       	sbci	r25, 0xFF	; 255
    9a92:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9a96:	88 23       	and	r24, r24
    9a98:	09 f4       	brne	.+2      	; 0x9a9c <main+0x19a>
    9a9a:	66 c0       	rjmp	.+204    	; 0x9b68 <main+0x266>
				rtc.year = (WORD)p1;
    9a9c:	c3 57       	subi	r28, 0x73	; 115
    9a9e:	df 4f       	sbci	r29, 0xFF	; 255
    9aa0:	88 81       	ld	r24, Y
    9aa2:	99 81       	ldd	r25, Y+1	; 0x01
    9aa4:	cd 58       	subi	r28, 0x8D	; 141
    9aa6:	d0 40       	sbci	r29, 0x00	; 0
    9aa8:	eb 96       	adiw	r28, 0x3b	; 59
    9aaa:	9f af       	std	Y+63, r25	; 0x3f
    9aac:	8e af       	std	Y+62, r24	; 0x3e
    9aae:	eb 97       	sbiw	r28, 0x3b	; 59
				xatoi(&ptr, &p1); rtc.month = (BYTE)p1;
    9ab0:	be 01       	movw	r22, r28
    9ab2:	63 57       	subi	r22, 0x73	; 115
    9ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ab6:	ce 01       	movw	r24, r28
    9ab8:	87 56       	subi	r24, 0x67	; 103
    9aba:	9f 4f       	sbci	r25, 0xFF	; 255
    9abc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9ac0:	c3 57       	subi	r28, 0x73	; 115
    9ac2:	df 4f       	sbci	r29, 0xFF	; 255
    9ac4:	88 81       	ld	r24, Y
    9ac6:	cd 58       	subi	r28, 0x8D	; 141
    9ac8:	d0 40       	sbci	r29, 0x00	; 0
    9aca:	ec 96       	adiw	r28, 0x3c	; 60
    9acc:	8f af       	std	Y+63, r24	; 0x3f
    9ace:	ec 97       	sbiw	r28, 0x3c	; 60
				xatoi(&ptr, &p1); rtc.mday = (BYTE)p1;
    9ad0:	be 01       	movw	r22, r28
    9ad2:	63 57       	subi	r22, 0x73	; 115
    9ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ad6:	ce 01       	movw	r24, r28
    9ad8:	87 56       	subi	r24, 0x67	; 103
    9ada:	9f 4f       	sbci	r25, 0xFF	; 255
    9adc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9ae0:	c3 57       	subi	r28, 0x73	; 115
    9ae2:	df 4f       	sbci	r29, 0xFF	; 255
    9ae4:	88 81       	ld	r24, Y
    9ae6:	cd 58       	subi	r28, 0x8D	; 141
    9ae8:	d0 40       	sbci	r29, 0x00	; 0
    9aea:	ed 96       	adiw	r28, 0x3d	; 61
    9aec:	8f af       	std	Y+63, r24	; 0x3f
    9aee:	ed 97       	sbiw	r28, 0x3d	; 61
				xatoi(&ptr, &p1); rtc.hour = (BYTE)p1;
    9af0:	be 01       	movw	r22, r28
    9af2:	63 57       	subi	r22, 0x73	; 115
    9af4:	7f 4f       	sbci	r23, 0xFF	; 255
    9af6:	ce 01       	movw	r24, r28
    9af8:	87 56       	subi	r24, 0x67	; 103
    9afa:	9f 4f       	sbci	r25, 0xFF	; 255
    9afc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9b00:	c3 57       	subi	r28, 0x73	; 115
    9b02:	df 4f       	sbci	r29, 0xFF	; 255
    9b04:	88 81       	ld	r24, Y
    9b06:	cd 58       	subi	r28, 0x8D	; 141
    9b08:	d0 40       	sbci	r29, 0x00	; 0
    9b0a:	ef 96       	adiw	r28, 0x3f	; 63
    9b0c:	8f af       	std	Y+63, r24	; 0x3f
    9b0e:	ef 97       	sbiw	r28, 0x3f	; 63
				xatoi(&ptr, &p1); rtc.min = (BYTE)p1;
    9b10:	be 01       	movw	r22, r28
    9b12:	63 57       	subi	r22, 0x73	; 115
    9b14:	7f 4f       	sbci	r23, 0xFF	; 255
    9b16:	ce 01       	movw	r24, r28
    9b18:	87 56       	subi	r24, 0x67	; 103
    9b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b1c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9b20:	c3 57       	subi	r28, 0x73	; 115
    9b22:	df 4f       	sbci	r29, 0xFF	; 255
    9b24:	88 81       	ld	r24, Y
    9b26:	cd 58       	subi	r28, 0x8D	; 141
    9b28:	d0 40       	sbci	r29, 0x00	; 0
    9b2a:	c1 58       	subi	r28, 0x81	; 129
    9b2c:	df 4f       	sbci	r29, 0xFF	; 255
    9b2e:	88 83       	st	Y, r24
    9b30:	cf 57       	subi	r28, 0x7F	; 127
    9b32:	d0 40       	sbci	r29, 0x00	; 0
				if (!xatoi(&ptr, &p1)) break;
    9b34:	be 01       	movw	r22, r28
    9b36:	63 57       	subi	r22, 0x73	; 115
    9b38:	7f 4f       	sbci	r23, 0xFF	; 255
    9b3a:	ce 01       	movw	r24, r28
    9b3c:	87 56       	subi	r24, 0x67	; 103
    9b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    9b40:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9b44:	88 23       	and	r24, r24
    9b46:	09 f4       	brne	.+2      	; 0x9b4a <main+0x248>
    9b48:	61 cf       	rjmp	.-318    	; 0x9a0c <main+0x10a>
				rtc.sec = (BYTE)p1;
    9b4a:	c3 57       	subi	r28, 0x73	; 115
    9b4c:	df 4f       	sbci	r29, 0xFF	; 255
    9b4e:	88 81       	ld	r24, Y
    9b50:	cd 58       	subi	r28, 0x8D	; 141
    9b52:	d0 40       	sbci	r29, 0x00	; 0
    9b54:	c0 58       	subi	r28, 0x80	; 128
    9b56:	df 4f       	sbci	r29, 0xFF	; 255
    9b58:	88 83       	st	Y, r24
    9b5a:	c0 58       	subi	r28, 0x80	; 128
    9b5c:	d0 40       	sbci	r29, 0x00	; 0
				rtc_settime(&rtc);
    9b5e:	ce 01       	movw	r24, r28
    9b60:	87 58       	subi	r24, 0x87	; 135
    9b62:	9f 4f       	sbci	r25, 0xFF	; 255
    9b64:	0e 94 27 12 	call	0x244e	; 0x244e <rtc_settime>
			rtc_gettime(&rtc);
    9b68:	ce 01       	movw	r24, r28
    9b6a:	87 58       	subi	r24, 0x87	; 135
    9b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    9b6e:	0e 94 cd 11 	call	0x239a	; 0x239a <rtc_gettime>
			xprintf(PSTR("%u/%u/%u %02u:%02u:%02u\n"), rtc.year, rtc.month, rtc.mday, rtc.hour, rtc.min, rtc.sec);
    9b72:	c0 58       	subi	r28, 0x80	; 128
    9b74:	df 4f       	sbci	r29, 0xFF	; 255
    9b76:	88 81       	ld	r24, Y
    9b78:	c0 58       	subi	r28, 0x80	; 128
    9b7a:	d0 40       	sbci	r29, 0x00	; 0
    9b7c:	1f 92       	push	r1
    9b7e:	8f 93       	push	r24
    9b80:	c1 58       	subi	r28, 0x81	; 129
    9b82:	df 4f       	sbci	r29, 0xFF	; 255
    9b84:	88 81       	ld	r24, Y
    9b86:	cf 57       	subi	r28, 0x7F	; 127
    9b88:	d0 40       	sbci	r29, 0x00	; 0
    9b8a:	1f 92       	push	r1
    9b8c:	8f 93       	push	r24
    9b8e:	ef 96       	adiw	r28, 0x3f	; 63
    9b90:	8f ad       	ldd	r24, Y+63	; 0x3f
    9b92:	ef 97       	sbiw	r28, 0x3f	; 63
    9b94:	1f 92       	push	r1
    9b96:	8f 93       	push	r24
    9b98:	ed 96       	adiw	r28, 0x3d	; 61
    9b9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    9b9c:	ed 97       	sbiw	r28, 0x3d	; 61
    9b9e:	1f 92       	push	r1
    9ba0:	8f 93       	push	r24
    9ba2:	ec 96       	adiw	r28, 0x3c	; 60
    9ba4:	8f ad       	ldd	r24, Y+63	; 0x3f
    9ba6:	ec 97       	sbiw	r28, 0x3c	; 60
    9ba8:	1f 92       	push	r1
    9baa:	8f 93       	push	r24
    9bac:	eb 96       	adiw	r28, 0x3b	; 59
    9bae:	8f ad       	ldd	r24, Y+63	; 0x3f
    9bb0:	eb 97       	sbiw	r28, 0x3b	; 59
    9bb2:	8f 93       	push	r24
    9bb4:	ea 96       	adiw	r28, 0x3a	; 58
    9bb6:	8f ad       	ldd	r24, Y+63	; 0x3f
    9bb8:	ea 97       	sbiw	r28, 0x3a	; 58
    9bba:	8f 93       	push	r24
    9bbc:	81 e3       	ldi	r24, 0x31	; 49
    9bbe:	97 e0       	ldi	r25, 0x07	; 7
    9bc0:	9f 93       	push	r25
    9bc2:	8f 93       	push	r24
    9bc4:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    9bc8:	9d c5       	rjmp	.+2874   	; 0xa704 <main+0xe02>
			while (*ptr == ' ') ptr++;
    9bca:	31 96       	adiw	r30, 0x01	; 1
    9bcc:	c7 56       	subi	r28, 0x67	; 103
    9bce:	df 4f       	sbci	r29, 0xFF	; 255
    9bd0:	f9 83       	std	Y+1, r31	; 0x01
    9bd2:	e8 83       	st	Y, r30
    9bd4:	c9 59       	subi	r28, 0x99	; 153
    9bd6:	d0 40       	sbci	r29, 0x00	; 0
    9bd8:	c7 56       	subi	r28, 0x67	; 103
    9bda:	df 4f       	sbci	r29, 0xFF	; 255
    9bdc:	e8 81       	ld	r30, Y
    9bde:	f9 81       	ldd	r31, Y+1	; 0x01
    9be0:	c9 59       	subi	r28, 0x99	; 153
    9be2:	d0 40       	sbci	r29, 0x00	; 0
    9be4:	80 81       	ld	r24, Z
    9be6:	80 32       	cpi	r24, 0x20	; 32
    9be8:	81 f3       	breq	.-32     	; 0x9bca <main+0x2c8>
    9bea:	10 cf       	rjmp	.-480    	; 0x9a0c <main+0x10a>
			switch (*ptr++) {
    9bec:	cf 01       	movw	r24, r30
    9bee:	02 96       	adiw	r24, 0x02	; 2
    9bf0:	c7 56       	subi	r28, 0x67	; 103
    9bf2:	df 4f       	sbci	r29, 0xFF	; 255
    9bf4:	99 83       	std	Y+1, r25	; 0x01
    9bf6:	88 83       	st	Y, r24
    9bf8:	c9 59       	subi	r28, 0x99	; 153
    9bfa:	d0 40       	sbci	r29, 0x00	; 0
    9bfc:	81 81       	ldd	r24, Z+1	; 0x01
    9bfe:	89 36       	cpi	r24, 0x69	; 105
    9c00:	09 f4       	brne	.+2      	; 0x9c04 <main+0x302>
    9c02:	92 c1       	rjmp	.+804    	; 0x9f28 <main+0x626>
    9c04:	0c f0       	brlt	.+2      	; 0x9c08 <main+0x306>
    9c06:	4d c0       	rjmp	.+154    	; 0x9ca2 <main+0x3a0>
    9c08:	83 36       	cpi	r24, 0x63	; 99
    9c0a:	09 f4       	brne	.+2      	; 0x9c0e <main+0x30c>
    9c0c:	ce c1       	rjmp	.+924    	; 0x9faa <main+0x6a8>
    9c0e:	84 36       	cpi	r24, 0x64	; 100
    9c10:	09 f0       	breq	.+2      	; 0x9c14 <main+0x312>
    9c12:	fc ce       	rjmp	.-520    	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p1)) break;
    9c14:	be 01       	movw	r22, r28
    9c16:	63 57       	subi	r22, 0x73	; 115
    9c18:	7f 4f       	sbci	r23, 0xFF	; 255
    9c1a:	ce 01       	movw	r24, r28
    9c1c:	87 56       	subi	r24, 0x67	; 103
    9c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    9c20:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9c24:	88 23       	and	r24, r24
    9c26:	09 f4       	brne	.+2      	; 0x9c2a <main+0x328>
    9c28:	f1 ce       	rjmp	.-542    	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p2)) p2 = sect;
    9c2a:	be 01       	movw	r22, r28
    9c2c:	67 57       	subi	r22, 0x77	; 119
    9c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    9c30:	ce 01       	movw	r24, r28
    9c32:	87 56       	subi	r24, 0x67	; 103
    9c34:	9f 4f       	sbci	r25, 0xFF	; 255
    9c36:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9c3a:	81 11       	cpse	r24, r1
    9c3c:	08 c0       	rjmp	.+16     	; 0x9c4e <main+0x34c>
    9c3e:	c7 57       	subi	r28, 0x77	; 119
    9c40:	df 4f       	sbci	r29, 0xFF	; 255
    9c42:	88 82       	st	Y, r8
    9c44:	99 82       	std	Y+1, r9	; 0x01
    9c46:	aa 82       	std	Y+2, r10	; 0x02
    9c48:	bb 82       	std	Y+3, r11	; 0x03
    9c4a:	c9 58       	subi	r28, 0x89	; 137
    9c4c:	d0 40       	sbci	r29, 0x00	; 0
				b1 = disk_read((BYTE)p1, Buff, (DWORD)p2, 1);
    9c4e:	c7 57       	subi	r28, 0x77	; 119
    9c50:	df 4f       	sbci	r29, 0xFF	; 255
    9c52:	28 81       	ld	r18, Y
    9c54:	39 81       	ldd	r19, Y+1	; 0x01
    9c56:	4a 81       	ldd	r20, Y+2	; 0x02
    9c58:	5b 81       	ldd	r21, Y+3	; 0x03
    9c5a:	c9 58       	subi	r28, 0x89	; 137
    9c5c:	d0 40       	sbci	r29, 0x00	; 0
    9c5e:	01 e0       	ldi	r16, 0x01	; 1
    9c60:	10 e0       	ldi	r17, 0x00	; 0
    9c62:	63 e5       	ldi	r22, 0x53	; 83
    9c64:	7c e0       	ldi	r23, 0x0C	; 12
    9c66:	c3 57       	subi	r28, 0x73	; 115
    9c68:	df 4f       	sbci	r29, 0xFF	; 255
    9c6a:	88 81       	ld	r24, Y
    9c6c:	cd 58       	subi	r28, 0x8D	; 141
    9c6e:	d0 40       	sbci	r29, 0x00	; 0
    9c70:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <disk_read>
    9c74:	9c 01       	movw	r18, r24
    9c76:	c5 56       	subi	r28, 0x65	; 101
    9c78:	df 4f       	sbci	r29, 0xFF	; 255
    9c7a:	88 83       	st	Y, r24
    9c7c:	cb 59       	subi	r28, 0x9B	; 155
    9c7e:	d0 40       	sbci	r29, 0x00	; 0
				if (b1) { xprintf(PSTR("rc=%d\n"), b1); break; }
    9c80:	88 23       	and	r24, r24
    9c82:	09 f4       	brne	.+2      	; 0x9c86 <main+0x384>
    9c84:	1b c1       	rjmp	.+566    	; 0x9ebc <main+0x5ba>
    9c86:	33 27       	eor	r19, r19
    9c88:	3f 93       	push	r19
    9c8a:	2f 93       	push	r18
    9c8c:	88 e8       	ldi	r24, 0x88	; 136
    9c8e:	9a e0       	ldi	r25, 0x0A	; 10
				xprintf(PSTR("rc=%d\n"), disk_initialize((BYTE)p1));
    9c90:	9f 93       	push	r25
    9c92:	8f 93       	push	r24
    9c94:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				break;
    9c98:	0f 90       	pop	r0
    9c9a:	0f 90       	pop	r0
    9c9c:	0f 90       	pop	r0
    9c9e:	0f 90       	pop	r0
    9ca0:	b5 ce       	rjmp	.-662    	; 0x9a0c <main+0x10a>
    9ca2:	83 37       	cpi	r24, 0x73	; 115
    9ca4:	09 f0       	breq	.+2      	; 0x9ca8 <main+0x3a6>
    9ca6:	b2 ce       	rjmp	.-668    	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p1)) break;
    9ca8:	be 01       	movw	r22, r28
    9caa:	63 57       	subi	r22, 0x73	; 115
    9cac:	7f 4f       	sbci	r23, 0xFF	; 255
    9cae:	ce 01       	movw	r24, r28
    9cb0:	87 56       	subi	r24, 0x67	; 103
    9cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    9cb4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9cb8:	88 23       	and	r24, r24
    9cba:	09 f4       	brne	.+2      	; 0x9cbe <main+0x3bc>
    9cbc:	a7 ce       	rjmp	.-690    	; 0x9a0c <main+0x10a>
				if (disk_ioctl((BYTE)p1, GET_SECTOR_COUNT, &lba) == RES_OK) {
    9cbe:	ae 01       	movw	r20, r28
    9cc0:	4f 57       	subi	r20, 0x7F	; 127
    9cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    9cc4:	61 e0       	ldi	r22, 0x01	; 1
    9cc6:	c3 57       	subi	r28, 0x73	; 115
    9cc8:	df 4f       	sbci	r29, 0xFF	; 255
    9cca:	88 81       	ld	r24, Y
    9ccc:	cd 58       	subi	r28, 0x8D	; 141
    9cce:	d0 40       	sbci	r29, 0x00	; 0
    9cd0:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9cd4:	89 2b       	or	r24, r25
    9cd6:	21 f5       	brne	.+72     	; 0x9d20 <main+0x41e>
					xprintf(PSTR("Drive size: %lu sectors\n"), (DWORD)lba);
    9cd8:	cc 57       	subi	r28, 0x7C	; 124
    9cda:	df 4f       	sbci	r29, 0xFF	; 255
    9cdc:	88 81       	ld	r24, Y
    9cde:	c4 58       	subi	r28, 0x84	; 132
    9ce0:	d0 40       	sbci	r29, 0x00	; 0
    9ce2:	8f 93       	push	r24
    9ce4:	cd 57       	subi	r28, 0x7D	; 125
    9ce6:	df 4f       	sbci	r29, 0xFF	; 255
    9ce8:	88 81       	ld	r24, Y
    9cea:	c3 58       	subi	r28, 0x83	; 131
    9cec:	d0 40       	sbci	r29, 0x00	; 0
    9cee:	8f 93       	push	r24
    9cf0:	ce 57       	subi	r28, 0x7E	; 126
    9cf2:	df 4f       	sbci	r29, 0xFF	; 255
    9cf4:	88 81       	ld	r24, Y
    9cf6:	c2 58       	subi	r28, 0x82	; 130
    9cf8:	d0 40       	sbci	r29, 0x00	; 0
    9cfa:	8f 93       	push	r24
    9cfc:	cf 57       	subi	r28, 0x7F	; 127
    9cfe:	df 4f       	sbci	r29, 0xFF	; 255
    9d00:	88 81       	ld	r24, Y
    9d02:	c1 58       	subi	r28, 0x81	; 129
    9d04:	d0 40       	sbci	r29, 0x00	; 0
    9d06:	8f 93       	push	r24
    9d08:	8c e5       	ldi	r24, 0x5C	; 92
    9d0a:	9a e0       	ldi	r25, 0x0A	; 10
    9d0c:	9f 93       	push	r25
    9d0e:	8f 93       	push	r24
    9d10:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    9d14:	0f 90       	pop	r0
    9d16:	0f 90       	pop	r0
    9d18:	0f 90       	pop	r0
    9d1a:	0f 90       	pop	r0
    9d1c:	0f 90       	pop	r0
    9d1e:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, GET_BLOCK_SIZE, &p2) == RES_OK) {
    9d20:	ae 01       	movw	r20, r28
    9d22:	47 57       	subi	r20, 0x77	; 119
    9d24:	5f 4f       	sbci	r21, 0xFF	; 255
    9d26:	63 e0       	ldi	r22, 0x03	; 3
    9d28:	c3 57       	subi	r28, 0x73	; 115
    9d2a:	df 4f       	sbci	r29, 0xFF	; 255
    9d2c:	88 81       	ld	r24, Y
    9d2e:	cd 58       	subi	r28, 0x8D	; 141
    9d30:	d0 40       	sbci	r29, 0x00	; 0
    9d32:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9d36:	89 2b       	or	r24, r25
    9d38:	21 f5       	brne	.+72     	; 0x9d82 <main+0x480>
					xprintf(PSTR("Erase block: %lu sectors\n"), p2);
    9d3a:	c4 57       	subi	r28, 0x74	; 116
    9d3c:	df 4f       	sbci	r29, 0xFF	; 255
    9d3e:	88 81       	ld	r24, Y
    9d40:	cc 58       	subi	r28, 0x8C	; 140
    9d42:	d0 40       	sbci	r29, 0x00	; 0
    9d44:	8f 93       	push	r24
    9d46:	c5 57       	subi	r28, 0x75	; 117
    9d48:	df 4f       	sbci	r29, 0xFF	; 255
    9d4a:	88 81       	ld	r24, Y
    9d4c:	cb 58       	subi	r28, 0x8B	; 139
    9d4e:	d0 40       	sbci	r29, 0x00	; 0
    9d50:	8f 93       	push	r24
    9d52:	c6 57       	subi	r28, 0x76	; 118
    9d54:	df 4f       	sbci	r29, 0xFF	; 255
    9d56:	88 81       	ld	r24, Y
    9d58:	ca 58       	subi	r28, 0x8A	; 138
    9d5a:	d0 40       	sbci	r29, 0x00	; 0
    9d5c:	8f 93       	push	r24
    9d5e:	c7 57       	subi	r28, 0x77	; 119
    9d60:	df 4f       	sbci	r29, 0xFF	; 255
    9d62:	88 81       	ld	r24, Y
    9d64:	c9 58       	subi	r28, 0x89	; 137
    9d66:	d0 40       	sbci	r29, 0x00	; 0
    9d68:	8f 93       	push	r24
    9d6a:	82 e4       	ldi	r24, 0x42	; 66
    9d6c:	9a e0       	ldi	r25, 0x0A	; 10
    9d6e:	9f 93       	push	r25
    9d70:	8f 93       	push	r24
    9d72:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    9d76:	0f 90       	pop	r0
    9d78:	0f 90       	pop	r0
    9d7a:	0f 90       	pop	r0
    9d7c:	0f 90       	pop	r0
    9d7e:	0f 90       	pop	r0
    9d80:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, MMC_GET_TYPE, &b1) == RES_OK) {
    9d82:	ae 01       	movw	r20, r28
    9d84:	45 56       	subi	r20, 0x65	; 101
    9d86:	5f 4f       	sbci	r21, 0xFF	; 255
    9d88:	62 e3       	ldi	r22, 0x32	; 50
    9d8a:	c3 57       	subi	r28, 0x73	; 115
    9d8c:	df 4f       	sbci	r29, 0xFF	; 255
    9d8e:	88 81       	ld	r24, Y
    9d90:	cd 58       	subi	r28, 0x8D	; 141
    9d92:	d0 40       	sbci	r29, 0x00	; 0
    9d94:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9d98:	89 2b       	or	r24, r25
    9d9a:	89 f4       	brne	.+34     	; 0x9dbe <main+0x4bc>
					xprintf(PSTR("Card type: %u\n"), b1);
    9d9c:	c5 56       	subi	r28, 0x65	; 101
    9d9e:	df 4f       	sbci	r29, 0xFF	; 255
    9da0:	88 81       	ld	r24, Y
    9da2:	cb 59       	subi	r28, 0x9B	; 155
    9da4:	d0 40       	sbci	r29, 0x00	; 0
    9da6:	1f 92       	push	r1
    9da8:	8f 93       	push	r24
    9daa:	83 e3       	ldi	r24, 0x33	; 51
    9dac:	9a e0       	ldi	r25, 0x0A	; 10
    9dae:	9f 93       	push	r25
    9db0:	8f 93       	push	r24
    9db2:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    9db6:	0f 90       	pop	r0
    9db8:	0f 90       	pop	r0
    9dba:	0f 90       	pop	r0
    9dbc:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, MMC_GET_CSD, Buff) == RES_OK) {
    9dbe:	43 e5       	ldi	r20, 0x53	; 83
    9dc0:	5c e0       	ldi	r21, 0x0C	; 12
    9dc2:	63 e3       	ldi	r22, 0x33	; 51
    9dc4:	c3 57       	subi	r28, 0x73	; 115
    9dc6:	df 4f       	sbci	r29, 0xFF	; 255
    9dc8:	88 81       	ld	r24, Y
    9dca:	cd 58       	subi	r28, 0x8D	; 141
    9dcc:	d0 40       	sbci	r29, 0x00	; 0
    9dce:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9dd2:	89 2b       	or	r24, r25
    9dd4:	61 f4       	brne	.+24     	; 0x9dee <main+0x4ec>
					xputs(PSTR("CSD:\n")); put_dump(Buff, 0, 16);
    9dd6:	8d e2       	ldi	r24, 0x2D	; 45
    9dd8:	9a e0       	ldi	r25, 0x0A	; 10
    9dda:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
    9dde:	20 e1       	ldi	r18, 0x10	; 16
    9de0:	40 e0       	ldi	r20, 0x00	; 0
    9de2:	50 e0       	ldi	r21, 0x00	; 0
    9de4:	ba 01       	movw	r22, r20
    9de6:	83 e5       	ldi	r24, 0x53	; 83
    9de8:	9c e0       	ldi	r25, 0x0C	; 12
    9dea:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_CID, Buff) == RES_OK) {
    9dee:	43 e5       	ldi	r20, 0x53	; 83
    9df0:	5c e0       	ldi	r21, 0x0C	; 12
    9df2:	64 e3       	ldi	r22, 0x34	; 52
    9df4:	c3 57       	subi	r28, 0x73	; 115
    9df6:	df 4f       	sbci	r29, 0xFF	; 255
    9df8:	88 81       	ld	r24, Y
    9dfa:	cd 58       	subi	r28, 0x8D	; 141
    9dfc:	d0 40       	sbci	r29, 0x00	; 0
    9dfe:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9e02:	89 2b       	or	r24, r25
    9e04:	61 f4       	brne	.+24     	; 0x9e1e <main+0x51c>
					xputs(PSTR("CID:\n")); put_dump(Buff, 0, 16);
    9e06:	87 e2       	ldi	r24, 0x27	; 39
    9e08:	9a e0       	ldi	r25, 0x0A	; 10
    9e0a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
    9e0e:	20 e1       	ldi	r18, 0x10	; 16
    9e10:	40 e0       	ldi	r20, 0x00	; 0
    9e12:	50 e0       	ldi	r21, 0x00	; 0
    9e14:	ba 01       	movw	r22, r20
    9e16:	83 e5       	ldi	r24, 0x53	; 83
    9e18:	9c e0       	ldi	r25, 0x0C	; 12
    9e1a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_OCR, Buff) == RES_OK) {
    9e1e:	43 e5       	ldi	r20, 0x53	; 83
    9e20:	5c e0       	ldi	r21, 0x0C	; 12
    9e22:	65 e3       	ldi	r22, 0x35	; 53
    9e24:	c3 57       	subi	r28, 0x73	; 115
    9e26:	df 4f       	sbci	r29, 0xFF	; 255
    9e28:	88 81       	ld	r24, Y
    9e2a:	cd 58       	subi	r28, 0x8D	; 141
    9e2c:	d0 40       	sbci	r29, 0x00	; 0
    9e2e:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9e32:	89 2b       	or	r24, r25
    9e34:	61 f4       	brne	.+24     	; 0x9e4e <main+0x54c>
					xputs(PSTR("OCR:\n")); put_dump(Buff, 0, 4);
    9e36:	81 e2       	ldi	r24, 0x21	; 33
    9e38:	9a e0       	ldi	r25, 0x0A	; 10
    9e3a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
    9e3e:	24 e0       	ldi	r18, 0x04	; 4
    9e40:	40 e0       	ldi	r20, 0x00	; 0
    9e42:	50 e0       	ldi	r21, 0x00	; 0
    9e44:	ba 01       	movw	r22, r20
    9e46:	83 e5       	ldi	r24, 0x53	; 83
    9e48:	9c e0       	ldi	r25, 0x0C	; 12
    9e4a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <put_dump>
				if (disk_ioctl((BYTE)p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
    9e4e:	43 e5       	ldi	r20, 0x53	; 83
    9e50:	5c e0       	ldi	r21, 0x0C	; 12
    9e52:	66 e3       	ldi	r22, 0x36	; 54
    9e54:	c3 57       	subi	r28, 0x73	; 115
    9e56:	df 4f       	sbci	r29, 0xFF	; 255
    9e58:	88 81       	ld	r24, Y
    9e5a:	cd 58       	subi	r28, 0x8D	; 141
    9e5c:	d0 40       	sbci	r29, 0x00	; 0
    9e5e:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9e62:	89 2b       	or	r24, r25
    9e64:	09 f4       	brne	.+2      	; 0x9e68 <main+0x566>
    9e66:	77 c0       	rjmp	.+238    	; 0x9f56 <main+0x654>
				if (disk_ioctl((BYTE)p1, ATA_GET_MODEL, line) == RES_OK) {
    9e68:	a8 01       	movw	r20, r16
    9e6a:	6d e3       	ldi	r22, 0x3D	; 61
    9e6c:	c3 57       	subi	r28, 0x73	; 115
    9e6e:	df 4f       	sbci	r29, 0xFF	; 255
    9e70:	88 81       	ld	r24, Y
    9e72:	cd 58       	subi	r28, 0x8D	; 141
    9e74:	d0 40       	sbci	r29, 0x00	; 0
    9e76:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9e7a:	89 2b       	or	r24, r25
    9e7c:	69 f4       	brne	.+26     	; 0x9e98 <main+0x596>
					line[40] = '\0'; xprintf(PSTR("Model: %s\n"), line);
    9e7e:	19 a6       	std	Y+41, r1	; 0x29
    9e80:	1f 93       	push	r17
    9e82:	0f 93       	push	r16
    9e84:	8a e0       	ldi	r24, 0x0A	; 10
    9e86:	9a e0       	ldi	r25, 0x0A	; 10
    9e88:	9f 93       	push	r25
    9e8a:	8f 93       	push	r24
    9e8c:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    9e90:	0f 90       	pop	r0
    9e92:	0f 90       	pop	r0
    9e94:	0f 90       	pop	r0
    9e96:	0f 90       	pop	r0
				if (disk_ioctl((BYTE)p1, ATA_GET_SN, line) == RES_OK) {
    9e98:	a8 01       	movw	r20, r16
    9e9a:	6e e3       	ldi	r22, 0x3E	; 62
    9e9c:	c3 57       	subi	r28, 0x73	; 115
    9e9e:	df 4f       	sbci	r29, 0xFF	; 255
    9ea0:	88 81       	ld	r24, Y
    9ea2:	cd 58       	subi	r28, 0x8D	; 141
    9ea4:	d0 40       	sbci	r29, 0x00	; 0
    9ea6:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9eaa:	89 2b       	or	r24, r25
    9eac:	09 f0       	breq	.+2      	; 0x9eb0 <main+0x5ae>
    9eae:	ae cd       	rjmp	.-1188   	; 0x9a0c <main+0x10a>
					line[20] = '\0'; xprintf(PSTR("S/N: %s\n"), line);
    9eb0:	1d 8a       	std	Y+21, r1	; 0x15
    9eb2:	1f 93       	push	r17
    9eb4:	0f 93       	push	r16
    9eb6:	81 e0       	ldi	r24, 0x01	; 1
    9eb8:	9a e0       	ldi	r25, 0x0A	; 10
    9eba:	ea ce       	rjmp	.-556    	; 0x9c90 <main+0x38e>
				sect = (DWORD)p2 + 1;
    9ebc:	c7 57       	subi	r28, 0x77	; 119
    9ebe:	df 4f       	sbci	r29, 0xFF	; 255
    9ec0:	88 81       	ld	r24, Y
    9ec2:	99 81       	ldd	r25, Y+1	; 0x01
    9ec4:	aa 81       	ldd	r26, Y+2	; 0x02
    9ec6:	bb 81       	ldd	r27, Y+3	; 0x03
    9ec8:	c9 58       	subi	r28, 0x89	; 137
    9eca:	d0 40       	sbci	r29, 0x00	; 0
    9ecc:	4c 01       	movw	r8, r24
    9ece:	5d 01       	movw	r10, r26
    9ed0:	ef ef       	ldi	r30, 0xFF	; 255
    9ed2:	8e 1a       	sub	r8, r30
    9ed4:	9e 0a       	sbc	r9, r30
    9ed6:	ae 0a       	sbc	r10, r30
    9ed8:	be 0a       	sbc	r11, r30
				xprintf(PSTR("Sector:%lu\n"), (DWORD)p2);
    9eda:	bf 93       	push	r27
    9edc:	af 93       	push	r26
    9ede:	9f 93       	push	r25
    9ee0:	8f 93       	push	r24
    9ee2:	8c e7       	ldi	r24, 0x7C	; 124
    9ee4:	9a e0       	ldi	r25, 0x0A	; 10
    9ee6:	9f 93       	push	r25
    9ee8:	8f 93       	push	r24
    9eea:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    9eee:	0f 90       	pop	r0
    9ef0:	0f 90       	pop	r0
    9ef2:	0f 90       	pop	r0
    9ef4:	0f 90       	pop	r0
    9ef6:	0f 90       	pop	r0
    9ef8:	0f 90       	pop	r0
				for (bp=Buff, ofs = 0; ofs < 0x200; bp += 16, ofs += 16) {
    9efa:	41 2c       	mov	r4, r1
    9efc:	51 2c       	mov	r5, r1
    9efe:	32 01       	movw	r6, r4
					put_dump(bp, ofs, 16);
    9f00:	c2 01       	movw	r24, r4
    9f02:	8d 5a       	subi	r24, 0xAD	; 173
    9f04:	93 4f       	sbci	r25, 0xF3	; 243
    9f06:	20 e1       	ldi	r18, 0x10	; 16
    9f08:	b3 01       	movw	r22, r6
    9f0a:	a2 01       	movw	r20, r4
    9f0c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <put_dump>
				for (bp=Buff, ofs = 0; ofs < 0x200; bp += 16, ofs += 16) {
    9f10:	f0 e1       	ldi	r31, 0x10	; 16
    9f12:	4f 0e       	add	r4, r31
    9f14:	51 1c       	adc	r5, r1
    9f16:	61 1c       	adc	r6, r1
    9f18:	71 1c       	adc	r7, r1
    9f1a:	41 14       	cp	r4, r1
    9f1c:	22 e0       	ldi	r18, 0x02	; 2
    9f1e:	52 06       	cpc	r5, r18
    9f20:	61 04       	cpc	r6, r1
    9f22:	71 04       	cpc	r7, r1
    9f24:	69 f7       	brne	.-38     	; 0x9f00 <main+0x5fe>
    9f26:	72 cd       	rjmp	.-1308   	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p1)) break;
    9f28:	be 01       	movw	r22, r28
    9f2a:	63 57       	subi	r22, 0x73	; 115
    9f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    9f2e:	ce 01       	movw	r24, r28
    9f30:	87 56       	subi	r24, 0x67	; 103
    9f32:	9f 4f       	sbci	r25, 0xFF	; 255
    9f34:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9f38:	88 23       	and	r24, r24
    9f3a:	09 f4       	brne	.+2      	; 0x9f3e <main+0x63c>
    9f3c:	67 cd       	rjmp	.-1330   	; 0x9a0c <main+0x10a>
				xprintf(PSTR("rc=%d\n"), disk_initialize((BYTE)p1));
    9f3e:	c3 57       	subi	r28, 0x73	; 115
    9f40:	df 4f       	sbci	r29, 0xFF	; 255
    9f42:	88 81       	ld	r24, Y
    9f44:	cd 58       	subi	r28, 0x8D	; 141
    9f46:	d0 40       	sbci	r29, 0x00	; 0
    9f48:	0e 94 6d 0b 	call	0x16da	; 0x16da <disk_initialize>
    9f4c:	1f 92       	push	r1
    9f4e:	8f 93       	push	r24
    9f50:	85 e7       	ldi	r24, 0x75	; 117
    9f52:	9a e0       	ldi	r25, 0x0A	; 10
    9f54:	9d ce       	rjmp	.-710    	; 0x9c90 <main+0x38e>
					xputs(PSTR("SD Status:\n"));
    9f56:	85 e1       	ldi	r24, 0x15	; 21
    9f58:	9a e0       	ldi	r25, 0x0A	; 10
    9f5a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
					for (s1 = 0; s1 < 64; s1 += 16) put_dump(Buff+s1, s1, 16);
    9f5e:	c9 56       	subi	r28, 0x69	; 105
    9f60:	df 4f       	sbci	r29, 0xFF	; 255
    9f62:	19 82       	std	Y+1, r1	; 0x01
    9f64:	18 82       	st	Y, r1
    9f66:	c7 59       	subi	r28, 0x97	; 151
    9f68:	d0 40       	sbci	r29, 0x00	; 0
    9f6a:	c9 56       	subi	r28, 0x69	; 105
    9f6c:	df 4f       	sbci	r29, 0xFF	; 255
    9f6e:	88 81       	ld	r24, Y
    9f70:	99 81       	ldd	r25, Y+1	; 0x01
    9f72:	c7 59       	subi	r28, 0x97	; 151
    9f74:	d0 40       	sbci	r29, 0x00	; 0
    9f76:	80 34       	cpi	r24, 0x40	; 64
    9f78:	91 05       	cpc	r25, r1
    9f7a:	08 f0       	brcs	.+2      	; 0x9f7e <main+0x67c>
    9f7c:	75 cf       	rjmp	.-278    	; 0x9e68 <main+0x566>
    9f7e:	ac 01       	movw	r20, r24
    9f80:	70 e0       	ldi	r23, 0x00	; 0
    9f82:	60 e0       	ldi	r22, 0x00	; 0
    9f84:	20 e1       	ldi	r18, 0x10	; 16
    9f86:	8d 5a       	subi	r24, 0xAD	; 173
    9f88:	93 4f       	sbci	r25, 0xF3	; 243
    9f8a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <put_dump>
    9f8e:	c9 56       	subi	r28, 0x69	; 105
    9f90:	df 4f       	sbci	r29, 0xFF	; 255
    9f92:	88 81       	ld	r24, Y
    9f94:	99 81       	ldd	r25, Y+1	; 0x01
    9f96:	c7 59       	subi	r28, 0x97	; 151
    9f98:	d0 40       	sbci	r29, 0x00	; 0
    9f9a:	40 96       	adiw	r24, 0x10	; 16
    9f9c:	c9 56       	subi	r28, 0x69	; 105
    9f9e:	df 4f       	sbci	r29, 0xFF	; 255
    9fa0:	99 83       	std	Y+1, r25	; 0x01
    9fa2:	88 83       	st	Y, r24
    9fa4:	c7 59       	subi	r28, 0x97	; 151
    9fa6:	d0 40       	sbci	r29, 0x00	; 0
    9fa8:	e0 cf       	rjmp	.-64     	; 0x9f6a <main+0x668>
				switch (*ptr++) {
    9faa:	cf 01       	movw	r24, r30
    9fac:	03 96       	adiw	r24, 0x03	; 3
    9fae:	c7 56       	subi	r28, 0x67	; 103
    9fb0:	df 4f       	sbci	r29, 0xFF	; 255
    9fb2:	99 83       	std	Y+1, r25	; 0x01
    9fb4:	88 83       	st	Y, r24
    9fb6:	c9 59       	subi	r28, 0x99	; 153
    9fb8:	d0 40       	sbci	r29, 0x00	; 0
    9fba:	82 81       	ldd	r24, Z+2	; 0x02
    9fbc:	83 37       	cpi	r24, 0x73	; 115
    9fbe:	09 f0       	breq	.+2      	; 0x9fc2 <main+0x6c0>
    9fc0:	25 cd       	rjmp	.-1462   	; 0x9a0c <main+0x10a>
					if (!xatoi(&ptr, &p1)) break;
    9fc2:	be 01       	movw	r22, r28
    9fc4:	63 57       	subi	r22, 0x73	; 115
    9fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    9fc8:	ce 01       	movw	r24, r28
    9fca:	87 56       	subi	r24, 0x67	; 103
    9fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    9fce:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    9fd2:	88 23       	and	r24, r24
    9fd4:	09 f4       	brne	.+2      	; 0x9fd8 <main+0x6d6>
    9fd6:	1a cd       	rjmp	.-1484   	; 0x9a0c <main+0x10a>
					xprintf(PSTR("rc=%d\n"), disk_ioctl((BYTE)p1, CTRL_SYNC, 0));
    9fd8:	50 e0       	ldi	r21, 0x00	; 0
    9fda:	40 e0       	ldi	r20, 0x00	; 0
    9fdc:	60 e0       	ldi	r22, 0x00	; 0
    9fde:	c3 57       	subi	r28, 0x73	; 115
    9fe0:	df 4f       	sbci	r29, 0xFF	; 255
    9fe2:	88 81       	ld	r24, Y
    9fe4:	cd 58       	subi	r28, 0x8D	; 141
    9fe6:	d0 40       	sbci	r29, 0x00	; 0
    9fe8:	0e 94 96 0b 	call	0x172c	; 0x172c <disk_ioctl>
    9fec:	9f 93       	push	r25
    9fee:	8f 93       	push	r24
    9ff0:	8a ef       	ldi	r24, 0xFA	; 250
    9ff2:	99 e0       	ldi	r25, 0x09	; 9
    9ff4:	4d ce       	rjmp	.-870    	; 0x9c90 <main+0x38e>
			switch (*ptr++) {
    9ff6:	cf 01       	movw	r24, r30
    9ff8:	02 96       	adiw	r24, 0x02	; 2
    9ffa:	c7 56       	subi	r28, 0x67	; 103
    9ffc:	df 4f       	sbci	r29, 0xFF	; 255
    9ffe:	99 83       	std	Y+1, r25	; 0x01
    a000:	88 83       	st	Y, r24
    a002:	c9 59       	subi	r28, 0x99	; 153
    a004:	d0 40       	sbci	r29, 0x00	; 0
    a006:	81 81       	ldd	r24, Z+1	; 0x01
    a008:	8c 36       	cpi	r24, 0x6C	; 108
    a00a:	09 f4       	brne	.+2      	; 0xa00e <main+0x70c>
    a00c:	b1 c1       	rjmp	.+866    	; 0xa370 <main+0xa6e>
    a00e:	0c f0       	brlt	.+2      	; 0xa012 <main+0x710>
    a010:	50 c0       	rjmp	.+160    	; 0xa0b2 <main+0x7b0>
    a012:	85 36       	cpi	r24, 0x65	; 101
    a014:	09 f4       	brne	.+2      	; 0xa018 <main+0x716>
    a016:	9b c0       	rjmp	.+310    	; 0xa14e <main+0x84c>
    a018:	86 36       	cpi	r24, 0x66	; 102
    a01a:	09 f4       	brne	.+2      	; 0xa01e <main+0x71c>
    a01c:	91 c1       	rjmp	.+802    	; 0xa340 <main+0xa3e>
    a01e:	84 36       	cpi	r24, 0x64	; 100
    a020:	09 f0       	breq	.+2      	; 0xa024 <main+0x722>
    a022:	f4 cc       	rjmp	.-1560   	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p1)) break;
    a024:	be 01       	movw	r22, r28
    a026:	63 57       	subi	r22, 0x73	; 115
    a028:	7f 4f       	sbci	r23, 0xFF	; 255
    a02a:	ce 01       	movw	r24, r28
    a02c:	87 56       	subi	r24, 0x67	; 103
    a02e:	9f 4f       	sbci	r25, 0xFF	; 255
    a030:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a034:	88 23       	and	r24, r24
    a036:	09 f4       	brne	.+2      	; 0xa03a <main+0x738>
    a038:	e9 cc       	rjmp	.-1582   	; 0x9a0c <main+0x10a>
				for (bp=&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr += 16, ofs += 16) {
    a03a:	c3 57       	subi	r28, 0x73	; 115
    a03c:	df 4f       	sbci	r29, 0xFF	; 255
    a03e:	48 80       	ld	r4, Y
    a040:	59 80       	ldd	r5, Y+1	; 0x01
    a042:	6a 80       	ldd	r6, Y+2	; 0x02
    a044:	7b 80       	ldd	r7, Y+3	; 0x03
    a046:	cd 58       	subi	r28, 0x8D	; 141
    a048:	d0 40       	sbci	r29, 0x00	; 0
    a04a:	82 01       	movw	r16, r4
    a04c:	0d 5a       	subi	r16, 0xAD	; 173
    a04e:	13 4f       	sbci	r17, 0xF3	; 243
    a050:	80 e2       	ldi	r24, 0x20	; 32
    a052:	90 e0       	ldi	r25, 0x00	; 0
    a054:	cd 56       	subi	r28, 0x6D	; 109
    a056:	df 4f       	sbci	r29, 0xFF	; 255
    a058:	99 83       	std	Y+1, r25	; 0x01
    a05a:	88 83       	st	Y, r24
    a05c:	c3 59       	subi	r28, 0x93	; 147
    a05e:	d0 40       	sbci	r29, 0x00	; 0
					put_dump(bp, ofs, 16);
    a060:	20 e1       	ldi	r18, 0x10	; 16
    a062:	b3 01       	movw	r22, r6
    a064:	a2 01       	movw	r20, r4
    a066:	c8 01       	movw	r24, r16
    a068:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <put_dump>
				for (bp=&Buff[p1], ofs = p1, cnt = 32; cnt; cnt--, ptr += 16, ofs += 16) {
    a06c:	cd 56       	subi	r28, 0x6D	; 109
    a06e:	df 4f       	sbci	r29, 0xFF	; 255
    a070:	88 81       	ld	r24, Y
    a072:	99 81       	ldd	r25, Y+1	; 0x01
    a074:	c3 59       	subi	r28, 0x93	; 147
    a076:	d0 40       	sbci	r29, 0x00	; 0
    a078:	01 97       	sbiw	r24, 0x01	; 1
    a07a:	cd 56       	subi	r28, 0x6D	; 109
    a07c:	df 4f       	sbci	r29, 0xFF	; 255
    a07e:	99 83       	std	Y+1, r25	; 0x01
    a080:	88 83       	st	Y, r24
    a082:	c3 59       	subi	r28, 0x93	; 147
    a084:	d0 40       	sbci	r29, 0x00	; 0
    a086:	c7 56       	subi	r28, 0x67	; 103
    a088:	df 4f       	sbci	r29, 0xFF	; 255
    a08a:	28 81       	ld	r18, Y
    a08c:	39 81       	ldd	r19, Y+1	; 0x01
    a08e:	c9 59       	subi	r28, 0x99	; 153
    a090:	d0 40       	sbci	r29, 0x00	; 0
    a092:	20 5f       	subi	r18, 0xF0	; 240
    a094:	3f 4f       	sbci	r19, 0xFF	; 255
    a096:	c7 56       	subi	r28, 0x67	; 103
    a098:	df 4f       	sbci	r29, 0xFF	; 255
    a09a:	39 83       	std	Y+1, r19	; 0x01
    a09c:	28 83       	st	Y, r18
    a09e:	c9 59       	subi	r28, 0x99	; 153
    a0a0:	d0 40       	sbci	r29, 0x00	; 0
    a0a2:	30 e1       	ldi	r19, 0x10	; 16
    a0a4:	43 0e       	add	r4, r19
    a0a6:	51 1c       	adc	r5, r1
    a0a8:	61 1c       	adc	r6, r1
    a0aa:	71 1c       	adc	r7, r1
    a0ac:	89 2b       	or	r24, r25
    a0ae:	c1 f6       	brne	.-80     	; 0xa060 <main+0x75e>
    a0b0:	ad cc       	rjmp	.-1702   	; 0x9a0c <main+0x10a>
    a0b2:	82 37       	cpi	r24, 0x72	; 114
    a0b4:	09 f4       	brne	.+2      	; 0xa0b8 <main+0x7b6>
    a0b6:	fc c0       	rjmp	.+504    	; 0xa2b0 <main+0x9ae>
    a0b8:	87 37       	cpi	r24, 0x77	; 119
    a0ba:	09 f0       	breq	.+2      	; 0xa0be <main+0x7bc>
    a0bc:	a7 cc       	rjmp	.-1714   	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    a0be:	be 01       	movw	r22, r28
    a0c0:	63 57       	subi	r22, 0x73	; 115
    a0c2:	7f 4f       	sbci	r23, 0xFF	; 255
    a0c4:	ce 01       	movw	r24, r28
    a0c6:	87 56       	subi	r24, 0x67	; 103
    a0c8:	9f 4f       	sbci	r25, 0xFF	; 255
    a0ca:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a0ce:	88 23       	and	r24, r24
    a0d0:	09 f4       	brne	.+2      	; 0xa0d4 <main+0x7d2>
    a0d2:	9c cc       	rjmp	.-1736   	; 0x9a0c <main+0x10a>
    a0d4:	be 01       	movw	r22, r28
    a0d6:	67 57       	subi	r22, 0x77	; 119
    a0d8:	7f 4f       	sbci	r23, 0xFF	; 255
    a0da:	ce 01       	movw	r24, r28
    a0dc:	87 56       	subi	r24, 0x67	; 103
    a0de:	9f 4f       	sbci	r25, 0xFF	; 255
    a0e0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a0e4:	88 23       	and	r24, r24
    a0e6:	09 f4       	brne	.+2      	; 0xa0ea <main+0x7e8>
    a0e8:	91 cc       	rjmp	.-1758   	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p3)) p3 = 1;
    a0ea:	be 01       	movw	r22, r28
    a0ec:	6b 57       	subi	r22, 0x7B	; 123
    a0ee:	7f 4f       	sbci	r23, 0xFF	; 255
    a0f0:	ce 01       	movw	r24, r28
    a0f2:	87 56       	subi	r24, 0x67	; 103
    a0f4:	9f 4f       	sbci	r25, 0xFF	; 255
    a0f6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a0fa:	81 11       	cpse	r24, r1
    a0fc:	0c c0       	rjmp	.+24     	; 0xa116 <main+0x814>
    a0fe:	81 e0       	ldi	r24, 0x01	; 1
    a100:	90 e0       	ldi	r25, 0x00	; 0
    a102:	a0 e0       	ldi	r26, 0x00	; 0
    a104:	b0 e0       	ldi	r27, 0x00	; 0
    a106:	cb 57       	subi	r28, 0x7B	; 123
    a108:	df 4f       	sbci	r29, 0xFF	; 255
    a10a:	88 83       	st	Y, r24
    a10c:	99 83       	std	Y+1, r25	; 0x01
    a10e:	aa 83       	std	Y+2, r26	; 0x02
    a110:	bb 83       	std	Y+3, r27	; 0x03
    a112:	c5 58       	subi	r28, 0x85	; 133
    a114:	d0 40       	sbci	r29, 0x00	; 0
				xprintf(PSTR("rc=%u\n"), disk_write((BYTE)p1, Buff, p2, p3));
    a116:	cb 57       	subi	r28, 0x7B	; 123
    a118:	df 4f       	sbci	r29, 0xFF	; 255
    a11a:	08 81       	ld	r16, Y
    a11c:	19 81       	ldd	r17, Y+1	; 0x01
    a11e:	c5 58       	subi	r28, 0x85	; 133
    a120:	d0 40       	sbci	r29, 0x00	; 0
    a122:	c7 57       	subi	r28, 0x77	; 119
    a124:	df 4f       	sbci	r29, 0xFF	; 255
    a126:	28 81       	ld	r18, Y
    a128:	39 81       	ldd	r19, Y+1	; 0x01
    a12a:	4a 81       	ldd	r20, Y+2	; 0x02
    a12c:	5b 81       	ldd	r21, Y+3	; 0x03
    a12e:	c9 58       	subi	r28, 0x89	; 137
    a130:	d0 40       	sbci	r29, 0x00	; 0
    a132:	63 e5       	ldi	r22, 0x53	; 83
    a134:	7c e0       	ldi	r23, 0x0C	; 12
    a136:	c3 57       	subi	r28, 0x73	; 115
    a138:	df 4f       	sbci	r29, 0xFF	; 255
    a13a:	88 81       	ld	r24, Y
    a13c:	cd 58       	subi	r28, 0x8D	; 141
    a13e:	d0 40       	sbci	r29, 0x00	; 0
    a140:	0e 94 85 0b 	call	0x170a	; 0x170a <disk_write>
    a144:	9f 93       	push	r25
    a146:	8f 93       	push	r24
    a148:	8c ed       	ldi	r24, 0xDC	; 220
    a14a:	99 e0       	ldi	r25, 0x09	; 9
    a14c:	a1 cd       	rjmp	.-1214   	; 0x9c90 <main+0x38e>
				if (!xatoi(&ptr, &p1)) break;
    a14e:	be 01       	movw	r22, r28
    a150:	63 57       	subi	r22, 0x73	; 115
    a152:	7f 4f       	sbci	r23, 0xFF	; 255
    a154:	ce 01       	movw	r24, r28
    a156:	87 56       	subi	r24, 0x67	; 103
    a158:	9f 4f       	sbci	r25, 0xFF	; 255
    a15a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a15e:	88 23       	and	r24, r24
    a160:	09 f4       	brne	.+2      	; 0xa164 <main+0x862>
    a162:	54 cc       	rjmp	.-1880   	; 0x9a0c <main+0x10a>
				if (xatoi(&ptr, &p2)) {
    a164:	be 01       	movw	r22, r28
    a166:	67 57       	subi	r22, 0x77	; 119
    a168:	7f 4f       	sbci	r23, 0xFF	; 255
    a16a:	ce 01       	movw	r24, r28
    a16c:	87 56       	subi	r24, 0x67	; 103
    a16e:	9f 4f       	sbci	r25, 0xFF	; 255
    a170:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
					xprintf(PSTR("%04X %02X-"), (WORD)p1, Buff[p1]);
    a174:	6f ee       	ldi	r22, 0xEF	; 239
    a176:	e6 2e       	mov	r14, r22
    a178:	69 e0       	ldi	r22, 0x09	; 9
    a17a:	f6 2e       	mov	r15, r22
				if (xatoi(&ptr, &p2)) {
    a17c:	88 23       	and	r24, r24
    a17e:	09 f4       	brne	.+2      	; 0xa182 <main+0x880>
    a180:	54 c0       	rjmp	.+168    	; 0xa22a <main+0x928>
						Buff[p1++] = (BYTE)p2;
    a182:	c7 57       	subi	r28, 0x77	; 119
    a184:	df 4f       	sbci	r29, 0xFF	; 255
    a186:	28 81       	ld	r18, Y
    a188:	c9 58       	subi	r28, 0x89	; 137
    a18a:	d0 40       	sbci	r29, 0x00	; 0
    a18c:	c3 57       	subi	r28, 0x73	; 115
    a18e:	df 4f       	sbci	r29, 0xFF	; 255
    a190:	88 81       	ld	r24, Y
    a192:	99 81       	ldd	r25, Y+1	; 0x01
    a194:	aa 81       	ldd	r26, Y+2	; 0x02
    a196:	bb 81       	ldd	r27, Y+3	; 0x03
    a198:	cd 58       	subi	r28, 0x8D	; 141
    a19a:	d0 40       	sbci	r29, 0x00	; 0
    a19c:	ac 01       	movw	r20, r24
    a19e:	bd 01       	movw	r22, r26
    a1a0:	4f 5f       	subi	r20, 0xFF	; 255
    a1a2:	5f 4f       	sbci	r21, 0xFF	; 255
    a1a4:	6f 4f       	sbci	r22, 0xFF	; 255
    a1a6:	7f 4f       	sbci	r23, 0xFF	; 255
    a1a8:	c3 57       	subi	r28, 0x73	; 115
    a1aa:	df 4f       	sbci	r29, 0xFF	; 255
    a1ac:	48 83       	st	Y, r20
    a1ae:	59 83       	std	Y+1, r21	; 0x01
    a1b0:	6a 83       	std	Y+2, r22	; 0x02
    a1b2:	7b 83       	std	Y+3, r23	; 0x03
    a1b4:	cd 58       	subi	r28, 0x8D	; 141
    a1b6:	d0 40       	sbci	r29, 0x00	; 0
    a1b8:	8d 5a       	subi	r24, 0xAD	; 173
    a1ba:	93 4f       	sbci	r25, 0xF3	; 243
    a1bc:	dc 01       	movw	r26, r24
    a1be:	2c 93       	st	X, r18
					} while (xatoi(&ptr, &p2));
    a1c0:	be 01       	movw	r22, r28
    a1c2:	67 57       	subi	r22, 0x77	; 119
    a1c4:	7f 4f       	sbci	r23, 0xFF	; 255
    a1c6:	ce 01       	movw	r24, r28
    a1c8:	87 56       	subi	r24, 0x67	; 103
    a1ca:	9f 4f       	sbci	r25, 0xFF	; 255
    a1cc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a1d0:	81 11       	cpse	r24, r1
    a1d2:	d7 cf       	rjmp	.-82     	; 0xa182 <main+0x880>
    a1d4:	1b cc       	rjmp	.-1994   	; 0x9a0c <main+0x10a>
					if (xatoi(&ptr, &p2)) {
    a1d6:	be 01       	movw	r22, r28
    a1d8:	67 57       	subi	r22, 0x77	; 119
    a1da:	7f 4f       	sbci	r23, 0xFF	; 255
    a1dc:	ce 01       	movw	r24, r28
    a1de:	87 56       	subi	r24, 0x67	; 103
    a1e0:	9f 4f       	sbci	r25, 0xFF	; 255
    a1e2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a1e6:	88 23       	and	r24, r24
    a1e8:	09 f4       	brne	.+2      	; 0xa1ec <main+0x8ea>
    a1ea:	5d c0       	rjmp	.+186    	; 0xa2a6 <main+0x9a4>
						Buff[p1++] = (BYTE)p2;
    a1ec:	c7 57       	subi	r28, 0x77	; 119
    a1ee:	df 4f       	sbci	r29, 0xFF	; 255
    a1f0:	28 81       	ld	r18, Y
    a1f2:	c9 58       	subi	r28, 0x89	; 137
    a1f4:	d0 40       	sbci	r29, 0x00	; 0
    a1f6:	c3 57       	subi	r28, 0x73	; 115
    a1f8:	df 4f       	sbci	r29, 0xFF	; 255
    a1fa:	88 81       	ld	r24, Y
    a1fc:	99 81       	ldd	r25, Y+1	; 0x01
    a1fe:	aa 81       	ldd	r26, Y+2	; 0x02
    a200:	bb 81       	ldd	r27, Y+3	; 0x03
    a202:	cd 58       	subi	r28, 0x8D	; 141
    a204:	d0 40       	sbci	r29, 0x00	; 0
    a206:	ac 01       	movw	r20, r24
    a208:	bd 01       	movw	r22, r26
    a20a:	4f 5f       	subi	r20, 0xFF	; 255
    a20c:	5f 4f       	sbci	r21, 0xFF	; 255
    a20e:	6f 4f       	sbci	r22, 0xFF	; 255
    a210:	7f 4f       	sbci	r23, 0xFF	; 255
    a212:	c3 57       	subi	r28, 0x73	; 115
    a214:	df 4f       	sbci	r29, 0xFF	; 255
    a216:	48 83       	st	Y, r20
    a218:	59 83       	std	Y+1, r21	; 0x01
    a21a:	6a 83       	std	Y+2, r22	; 0x02
    a21c:	7b 83       	std	Y+3, r23	; 0x03
    a21e:	cd 58       	subi	r28, 0x8D	; 141
    a220:	d0 40       	sbci	r29, 0x00	; 0
    a222:	8d 5a       	subi	r24, 0xAD	; 173
    a224:	93 4f       	sbci	r25, 0xF3	; 243
    a226:	fc 01       	movw	r30, r24
    a228:	20 83       	st	Z, r18
					xprintf(PSTR("%04X %02X-"), (WORD)p1, Buff[p1]);
    a22a:	c3 57       	subi	r28, 0x73	; 115
    a22c:	df 4f       	sbci	r29, 0xFF	; 255
    a22e:	88 81       	ld	r24, Y
    a230:	99 81       	ldd	r25, Y+1	; 0x01
    a232:	aa 81       	ldd	r26, Y+2	; 0x02
    a234:	bb 81       	ldd	r27, Y+3	; 0x03
    a236:	cd 58       	subi	r28, 0x8D	; 141
    a238:	d0 40       	sbci	r29, 0x00	; 0
    a23a:	fc 01       	movw	r30, r24
    a23c:	ed 5a       	subi	r30, 0xAD	; 173
    a23e:	f3 4f       	sbci	r31, 0xF3	; 243
    a240:	20 81       	ld	r18, Z
    a242:	1f 92       	push	r1
    a244:	2f 93       	push	r18
    a246:	9f 93       	push	r25
    a248:	8f 93       	push	r24
    a24a:	ff 92       	push	r15
    a24c:	ef 92       	push	r14
    a24e:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
					get_line(line, sizeof line);
    a252:	c8 01       	movw	r24, r16
    a254:	0e 94 af 09 	call	0x135e	; 0x135e <get_line.constprop.0>
					ptr = line;
    a258:	c7 56       	subi	r28, 0x67	; 103
    a25a:	df 4f       	sbci	r29, 0xFF	; 255
    a25c:	19 83       	std	Y+1, r17	; 0x01
    a25e:	08 83       	st	Y, r16
    a260:	c9 59       	subi	r28, 0x99	; 153
    a262:	d0 40       	sbci	r29, 0x00	; 0
					if (*ptr == '.') break;
    a264:	89 81       	ldd	r24, Y+1	; 0x01
    a266:	0f 90       	pop	r0
    a268:	0f 90       	pop	r0
    a26a:	0f 90       	pop	r0
    a26c:	0f 90       	pop	r0
    a26e:	0f 90       	pop	r0
    a270:	0f 90       	pop	r0
    a272:	8e 32       	cpi	r24, 0x2E	; 46
    a274:	09 f4       	brne	.+2      	; 0xa278 <main+0x976>
    a276:	ca cb       	rjmp	.-2156   	; 0x9a0c <main+0x10a>
					if (*ptr < ' ') { p1++; continue; }
    a278:	80 32       	cpi	r24, 0x20	; 32
    a27a:	0c f0       	brlt	.+2      	; 0xa27e <main+0x97c>
    a27c:	ac cf       	rjmp	.-168    	; 0xa1d6 <main+0x8d4>
    a27e:	c3 57       	subi	r28, 0x73	; 115
    a280:	df 4f       	sbci	r29, 0xFF	; 255
    a282:	88 81       	ld	r24, Y
    a284:	99 81       	ldd	r25, Y+1	; 0x01
    a286:	aa 81       	ldd	r26, Y+2	; 0x02
    a288:	bb 81       	ldd	r27, Y+3	; 0x03
    a28a:	cd 58       	subi	r28, 0x8D	; 141
    a28c:	d0 40       	sbci	r29, 0x00	; 0
    a28e:	01 96       	adiw	r24, 0x01	; 1
    a290:	a1 1d       	adc	r26, r1
    a292:	b1 1d       	adc	r27, r1
    a294:	c3 57       	subi	r28, 0x73	; 115
    a296:	df 4f       	sbci	r29, 0xFF	; 255
    a298:	88 83       	st	Y, r24
    a29a:	99 83       	std	Y+1, r25	; 0x01
    a29c:	aa 83       	std	Y+2, r26	; 0x02
    a29e:	bb 83       	std	Y+3, r27	; 0x03
    a2a0:	cd 58       	subi	r28, 0x8D	; 141
    a2a2:	d0 40       	sbci	r29, 0x00	; 0
    a2a4:	c2 cf       	rjmp	.-124    	; 0xa22a <main+0x928>
						xputs(PSTR("???\n"));
    a2a6:	8a ee       	ldi	r24, 0xEA	; 234
    a2a8:	99 e0       	ldi	r25, 0x09	; 9
    a2aa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
    a2ae:	bd cf       	rjmp	.-134    	; 0xa22a <main+0x928>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    a2b0:	be 01       	movw	r22, r28
    a2b2:	63 57       	subi	r22, 0x73	; 115
    a2b4:	7f 4f       	sbci	r23, 0xFF	; 255
    a2b6:	ce 01       	movw	r24, r28
    a2b8:	87 56       	subi	r24, 0x67	; 103
    a2ba:	9f 4f       	sbci	r25, 0xFF	; 255
    a2bc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a2c0:	88 23       	and	r24, r24
    a2c2:	09 f4       	brne	.+2      	; 0xa2c6 <main+0x9c4>
    a2c4:	a3 cb       	rjmp	.-2234   	; 0x9a0c <main+0x10a>
    a2c6:	be 01       	movw	r22, r28
    a2c8:	67 57       	subi	r22, 0x77	; 119
    a2ca:	7f 4f       	sbci	r23, 0xFF	; 255
    a2cc:	ce 01       	movw	r24, r28
    a2ce:	87 56       	subi	r24, 0x67	; 103
    a2d0:	9f 4f       	sbci	r25, 0xFF	; 255
    a2d2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a2d6:	88 23       	and	r24, r24
    a2d8:	09 f4       	brne	.+2      	; 0xa2dc <main+0x9da>
    a2da:	98 cb       	rjmp	.-2256   	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p3)) p3 = 1;
    a2dc:	be 01       	movw	r22, r28
    a2de:	6b 57       	subi	r22, 0x7B	; 123
    a2e0:	7f 4f       	sbci	r23, 0xFF	; 255
    a2e2:	ce 01       	movw	r24, r28
    a2e4:	87 56       	subi	r24, 0x67	; 103
    a2e6:	9f 4f       	sbci	r25, 0xFF	; 255
    a2e8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a2ec:	81 11       	cpse	r24, r1
    a2ee:	0c c0       	rjmp	.+24     	; 0xa308 <main+0xa06>
    a2f0:	81 e0       	ldi	r24, 0x01	; 1
    a2f2:	90 e0       	ldi	r25, 0x00	; 0
    a2f4:	a0 e0       	ldi	r26, 0x00	; 0
    a2f6:	b0 e0       	ldi	r27, 0x00	; 0
    a2f8:	cb 57       	subi	r28, 0x7B	; 123
    a2fa:	df 4f       	sbci	r29, 0xFF	; 255
    a2fc:	88 83       	st	Y, r24
    a2fe:	99 83       	std	Y+1, r25	; 0x01
    a300:	aa 83       	std	Y+2, r26	; 0x02
    a302:	bb 83       	std	Y+3, r27	; 0x03
    a304:	c5 58       	subi	r28, 0x85	; 133
    a306:	d0 40       	sbci	r29, 0x00	; 0
				xprintf(PSTR("rc=%u\n"), disk_read((BYTE)p1, Buff, p2, p3));
    a308:	cb 57       	subi	r28, 0x7B	; 123
    a30a:	df 4f       	sbci	r29, 0xFF	; 255
    a30c:	08 81       	ld	r16, Y
    a30e:	19 81       	ldd	r17, Y+1	; 0x01
    a310:	c5 58       	subi	r28, 0x85	; 133
    a312:	d0 40       	sbci	r29, 0x00	; 0
    a314:	c7 57       	subi	r28, 0x77	; 119
    a316:	df 4f       	sbci	r29, 0xFF	; 255
    a318:	28 81       	ld	r18, Y
    a31a:	39 81       	ldd	r19, Y+1	; 0x01
    a31c:	4a 81       	ldd	r20, Y+2	; 0x02
    a31e:	5b 81       	ldd	r21, Y+3	; 0x03
    a320:	c9 58       	subi	r28, 0x89	; 137
    a322:	d0 40       	sbci	r29, 0x00	; 0
    a324:	63 e5       	ldi	r22, 0x53	; 83
    a326:	7c e0       	ldi	r23, 0x0C	; 12
    a328:	c3 57       	subi	r28, 0x73	; 115
    a32a:	df 4f       	sbci	r29, 0xFF	; 255
    a32c:	88 81       	ld	r24, Y
    a32e:	cd 58       	subi	r28, 0x8D	; 141
    a330:	d0 40       	sbci	r29, 0x00	; 0
    a332:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <disk_read>
    a336:	9f 93       	push	r25
    a338:	8f 93       	push	r24
    a33a:	83 ee       	ldi	r24, 0xE3	; 227
    a33c:	99 e0       	ldi	r25, 0x09	; 9
    a33e:	a8 cc       	rjmp	.-1712   	; 0x9c90 <main+0x38e>
				if (!xatoi(&ptr, &p1)) break;
    a340:	be 01       	movw	r22, r28
    a342:	63 57       	subi	r22, 0x73	; 115
    a344:	7f 4f       	sbci	r23, 0xFF	; 255
    a346:	ce 01       	movw	r24, r28
    a348:	87 56       	subi	r24, 0x67	; 103
    a34a:	9f 4f       	sbci	r25, 0xFF	; 255
    a34c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a350:	88 23       	and	r24, r24
    a352:	09 f4       	brne	.+2      	; 0xa356 <main+0xa54>
    a354:	5b cb       	rjmp	.-2378   	; 0x9a0c <main+0x10a>
				memset(Buff, (BYTE)p1, sizeof Buff);
    a356:	c3 57       	subi	r28, 0x73	; 115
    a358:	df 4f       	sbci	r29, 0xFF	; 255
    a35a:	68 81       	ld	r22, Y
    a35c:	cd 58       	subi	r28, 0x8D	; 141
    a35e:	d0 40       	sbci	r29, 0x00	; 0
    a360:	70 e0       	ldi	r23, 0x00	; 0
    a362:	40 e0       	ldi	r20, 0x00	; 0
    a364:	50 e1       	ldi	r21, 0x10	; 16
    a366:	83 e5       	ldi	r24, 0x53	; 83
    a368:	9c e0       	ldi	r25, 0x0C	; 12
    a36a:	0e 94 ca 5a 	call	0xb594	; 0xb594 <memset>
				break;
    a36e:	4e cb       	rjmp	.-2404   	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p1) || (UINT)p1 == 0 || (UINT)p1 > sizeof Buff) break;
    a370:	be 01       	movw	r22, r28
    a372:	63 57       	subi	r22, 0x73	; 115
    a374:	7f 4f       	sbci	r23, 0xFF	; 255
    a376:	ce 01       	movw	r24, r28
    a378:	87 56       	subi	r24, 0x67	; 103
    a37a:	9f 4f       	sbci	r25, 0xFF	; 255
    a37c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a380:	88 23       	and	r24, r24
    a382:	09 f4       	brne	.+2      	; 0xa386 <main+0xa84>
    a384:	43 cb       	rjmp	.-2426   	; 0x9a0c <main+0x10a>
    a386:	c3 57       	subi	r28, 0x73	; 115
    a388:	df 4f       	sbci	r29, 0xFF	; 255
    a38a:	08 81       	ld	r16, Y
    a38c:	19 81       	ldd	r17, Y+1	; 0x01
    a38e:	cd 58       	subi	r28, 0x8D	; 141
    a390:	d0 40       	sbci	r29, 0x00	; 0
    a392:	c8 01       	movw	r24, r16
    a394:	01 97       	sbiw	r24, 0x01	; 1
    a396:	81 15       	cp	r24, r1
    a398:	90 41       	sbci	r25, 0x10	; 16
    a39a:	08 f0       	brcs	.+2      	; 0xa39e <main+0xa9c>
    a39c:	37 cb       	rjmp	.-2450   	; 0x9a0c <main+0x10a>
				xprintf(PSTR("R/W length = %u\n"), blen);
    a39e:	1f 93       	push	r17
    a3a0:	0f 93       	push	r16
    a3a2:	8b ec       	ldi	r24, 0xCB	; 203
    a3a4:	99 e0       	ldi	r25, 0x09	; 9
    a3a6:	9f 93       	push	r25
    a3a8:	8f 93       	push	r24
    a3aa:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				break;
    a3ae:	0f 90       	pop	r0
    a3b0:	0f 90       	pop	r0
    a3b2:	0f 90       	pop	r0
    a3b4:	0f 90       	pop	r0
    a3b6:	68 01       	movw	r12, r16
    a3b8:	29 cb       	rjmp	.-2478   	; 0x9a0c <main+0x10a>
			switch (*ptr++) {
    a3ba:	cf 01       	movw	r24, r30
    a3bc:	02 96       	adiw	r24, 0x02	; 2
    a3be:	c7 56       	subi	r28, 0x67	; 103
    a3c0:	df 4f       	sbci	r29, 0xFF	; 255
    a3c2:	99 83       	std	Y+1, r25	; 0x01
    a3c4:	88 83       	st	Y, r24
    a3c6:	c9 59       	subi	r28, 0x99	; 153
    a3c8:	d0 40       	sbci	r29, 0x00	; 0
    a3ca:	e1 81       	ldd	r30, Z+1	; 0x01
    a3cc:	e2 56       	subi	r30, 0x62	; 98
    a3ce:	e7 31       	cpi	r30, 0x17	; 23
    a3d0:	08 f0       	brcs	.+2      	; 0xa3d4 <main+0xad2>
    a3d2:	1c cb       	rjmp	.-2504   	; 0x9a0c <main+0x10a>
    a3d4:	0e 2e       	mov	r0, r30
    a3d6:	00 0c       	add	r0, r0
    a3d8:	ff 0b       	sbc	r31, r31
    a3da:	eb 51       	subi	r30, 0x1B	; 27
    a3dc:	f5 4a       	sbci	r31, 0xA5	; 165
    a3de:	0c 94 c1 59 	jmp	0xb382	; 0xb382 <__tablejump2__>
				if (!xatoi(&ptr, &p1) || (UINT)p1 > 9) break;
    a3e2:	be 01       	movw	r22, r28
    a3e4:	63 57       	subi	r22, 0x73	; 115
    a3e6:	7f 4f       	sbci	r23, 0xFF	; 255
    a3e8:	ce 01       	movw	r24, r28
    a3ea:	87 56       	subi	r24, 0x67	; 103
    a3ec:	9f 4f       	sbci	r25, 0xFF	; 255
    a3ee:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a3f2:	88 23       	and	r24, r24
    a3f4:	09 f4       	brne	.+2      	; 0xa3f8 <main+0xaf6>
    a3f6:	0a cb       	rjmp	.-2540   	; 0x9a0c <main+0x10a>
    a3f8:	c3 57       	subi	r28, 0x73	; 115
    a3fa:	df 4f       	sbci	r29, 0xFF	; 255
    a3fc:	88 81       	ld	r24, Y
    a3fe:	99 81       	ldd	r25, Y+1	; 0x01
    a400:	cd 58       	subi	r28, 0x8D	; 141
    a402:	d0 40       	sbci	r29, 0x00	; 0
    a404:	0a 97       	sbiw	r24, 0x0a	; 10
    a406:	08 f0       	brcs	.+2      	; 0xa40a <main+0xb08>
    a408:	01 cb       	rjmp	.-2558   	; 0x9a0c <main+0x10a>
				if (!xatoi(&ptr, &p2)) p2 = 0;
    a40a:	be 01       	movw	r22, r28
    a40c:	67 57       	subi	r22, 0x77	; 119
    a40e:	7f 4f       	sbci	r23, 0xFF	; 255
    a410:	ce 01       	movw	r24, r28
    a412:	87 56       	subi	r24, 0x67	; 103
    a414:	9f 4f       	sbci	r25, 0xFF	; 255
    a416:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a41a:	81 11       	cpse	r24, r1
    a41c:	08 c0       	rjmp	.+16     	; 0xa42e <main+0xb2c>
    a41e:	c7 57       	subi	r28, 0x77	; 119
    a420:	df 4f       	sbci	r29, 0xFF	; 255
    a422:	18 82       	st	Y, r1
    a424:	19 82       	std	Y+1, r1	; 0x01
    a426:	1a 82       	std	Y+2, r1	; 0x02
    a428:	1b 82       	std	Y+3, r1	; 0x03
    a42a:	c9 58       	subi	r28, 0x89	; 137
    a42c:	d0 40       	sbci	r29, 0x00	; 0
				xsprintf(line, PSTR("%u:"), (UINT)p1);
    a42e:	c2 57       	subi	r28, 0x72	; 114
    a430:	df 4f       	sbci	r29, 0xFF	; 255
    a432:	88 81       	ld	r24, Y
    a434:	ce 58       	subi	r28, 0x8E	; 142
    a436:	d0 40       	sbci	r29, 0x00	; 0
    a438:	8f 93       	push	r24
    a43a:	c3 57       	subi	r28, 0x73	; 115
    a43c:	df 4f       	sbci	r29, 0xFF	; 255
    a43e:	88 81       	ld	r24, Y
    a440:	cd 58       	subi	r28, 0x8D	; 141
    a442:	d0 40       	sbci	r29, 0x00	; 0
    a444:	8f 93       	push	r24
    a446:	87 ec       	ldi	r24, 0xC7	; 199
    a448:	99 e0       	ldi	r25, 0x09	; 9
    a44a:	9f 93       	push	r25
    a44c:	8f 93       	push	r24
    a44e:	1f 93       	push	r17
    a450:	0f 93       	push	r16
    a452:	0e 94 35 08 	call	0x106a	; 0x106a <xsprintf>
				put_rc(f_mount(&FatFs[p1], line, (BYTE)p2));
    a456:	c3 57       	subi	r28, 0x73	; 115
    a458:	df 4f       	sbci	r29, 0xFF	; 255
    a45a:	48 81       	ld	r20, Y
    a45c:	59 81       	ldd	r21, Y+1	; 0x01
    a45e:	cd 58       	subi	r28, 0x8D	; 141
    a460:	d0 40       	sbci	r29, 0x00	; 0
    a462:	27 e4       	ldi	r18, 0x47	; 71
    a464:	32 e0       	ldi	r19, 0x02	; 2
    a466:	42 9f       	mul	r20, r18
    a468:	c0 01       	movw	r24, r0
    a46a:	43 9f       	mul	r20, r19
    a46c:	90 0d       	add	r25, r0
    a46e:	52 9f       	mul	r21, r18
    a470:	90 0d       	add	r25, r0
    a472:	11 24       	eor	r1, r1
    a474:	c7 57       	subi	r28, 0x77	; 119
    a476:	df 4f       	sbci	r29, 0xFF	; 255
    a478:	48 81       	ld	r20, Y
    a47a:	c9 58       	subi	r28, 0x89	; 137
    a47c:	d0 40       	sbci	r29, 0x00	; 0
    a47e:	b8 01       	movw	r22, r16
    a480:	8b 53       	subi	r24, 0x3B	; 59
    a482:	98 4f       	sbci	r25, 0xF8	; 248
    a484:	0e 94 d7 30 	call	0x61ae	; 0x61ae <f_mount>
    a488:	0e 94 b3 08 	call	0x1166	; 0x1166 <put_rc>
						xprintf(PSTR(", %10luKiB free\n"), p1 * fs->csize / 2);
    a48c:	0f 90       	pop	r0
    a48e:	0f 90       	pop	r0
    a490:	0f 90       	pop	r0
    a492:	0f 90       	pop	r0
    a494:	0f 90       	pop	r0
    a496:	0f 90       	pop	r0
    a498:	b9 ca       	rjmp	.-2702   	; 0x9a0c <main+0x10a>
				while (*ptr == ' ') ptr++;
    a49a:	0f 5f       	subi	r16, 0xFF	; 255
    a49c:	1f 4f       	sbci	r17, 0xFF	; 255
    a49e:	c7 56       	subi	r28, 0x67	; 103
    a4a0:	df 4f       	sbci	r29, 0xFF	; 255
    a4a2:	19 83       	std	Y+1, r17	; 0x01
    a4a4:	08 83       	st	Y, r16
    a4a6:	c9 59       	subi	r28, 0x99	; 153
    a4a8:	d0 40       	sbci	r29, 0x00	; 0
    a4aa:	c7 56       	subi	r28, 0x67	; 103
    a4ac:	df 4f       	sbci	r29, 0xFF	; 255
    a4ae:	08 81       	ld	r16, Y
    a4b0:	19 81       	ldd	r17, Y+1	; 0x01
    a4b2:	c9 59       	subi	r28, 0x99	; 153
    a4b4:	d0 40       	sbci	r29, 0x00	; 0
    a4b6:	d8 01       	movw	r26, r16
    a4b8:	8c 91       	ld	r24, X
    a4ba:	80 32       	cpi	r24, 0x20	; 32
    a4bc:	71 f3       	breq	.-36     	; 0xa49a <main+0xb98>
				fr = f_getfree(ptr, (DWORD*)&p2, &fs);
    a4be:	ae 01       	movw	r20, r28
    a4c0:	4f 56       	subi	r20, 0x6F	; 111
    a4c2:	5f 4f       	sbci	r21, 0xFF	; 255
    a4c4:	be 01       	movw	r22, r28
    a4c6:	67 57       	subi	r22, 0x77	; 119
    a4c8:	7f 4f       	sbci	r23, 0xFF	; 255
    a4ca:	c8 01       	movw	r24, r16
    a4cc:	0e 94 06 41 	call	0x820c	; 0x820c <f_getfree>
				if (fr) { 
    a4d0:	00 97       	sbiw	r24, 0x00	; 0
    a4d2:	19 f0       	breq	.+6      	; 0xa4da <main+0xbd8>
				if (fr) put_rc(fr);
    a4d4:	0e 94 b3 08 	call	0x1166	; 0x1166 <put_rc>
    a4d8:	99 ca       	rjmp	.-2766   	; 0x9a0c <main+0x10a>
						(DWORD)fs->volbase, (DWORD)fs->fatbase, (DWORD)fs->dirbase, (DWORD)fs->database
    a4da:	cf 56       	subi	r28, 0x6F	; 111
    a4dc:	df 4f       	sbci	r29, 0xFF	; 255
    a4de:	e8 81       	ld	r30, Y
    a4e0:	f9 81       	ldd	r31, Y+1	; 0x01
    a4e2:	c1 59       	subi	r28, 0x91	; 145
    a4e4:	d0 40       	sbci	r29, 0x00	; 0
				xprintf(PSTR("FAT type = %s\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
    a4e6:	86 ad       	ldd	r24, Z+62	; 0x3e
    a4e8:	8f 93       	push	r24
    a4ea:	85 ad       	ldd	r24, Z+61	; 0x3d
    a4ec:	8f 93       	push	r24
    a4ee:	84 ad       	ldd	r24, Z+60	; 0x3c
    a4f0:	8f 93       	push	r24
    a4f2:	83 ad       	ldd	r24, Z+59	; 0x3b
    a4f4:	8f 93       	push	r24
    a4f6:	82 ad       	ldd	r24, Z+58	; 0x3a
    a4f8:	8f 93       	push	r24
    a4fa:	81 ad       	ldd	r24, Z+57	; 0x39
    a4fc:	8f 93       	push	r24
    a4fe:	80 ad       	ldd	r24, Z+56	; 0x38
    a500:	8f 93       	push	r24
    a502:	87 a9       	ldd	r24, Z+55	; 0x37
    a504:	8f 93       	push	r24
    a506:	86 a9       	ldd	r24, Z+54	; 0x36
    a508:	8f 93       	push	r24
    a50a:	85 a9       	ldd	r24, Z+53	; 0x35
    a50c:	8f 93       	push	r24
    a50e:	84 a9       	ldd	r24, Z+52	; 0x34
    a510:	8f 93       	push	r24
    a512:	83 a9       	ldd	r24, Z+51	; 0x33
    a514:	8f 93       	push	r24
    a516:	82 a9       	ldd	r24, Z+50	; 0x32
    a518:	8f 93       	push	r24
    a51a:	81 a9       	ldd	r24, Z+49	; 0x31
    a51c:	8f 93       	push	r24
    a51e:	80 a9       	ldd	r24, Z+48	; 0x30
    a520:	8f 93       	push	r24
    a522:	87 a5       	ldd	r24, Z+47	; 0x2f
    a524:	8f 93       	push	r24
    a526:	87 a1       	ldd	r24, Z+39	; 0x27
    a528:	90 a5       	ldd	r25, Z+40	; 0x28
    a52a:	a1 a5       	ldd	r26, Z+41	; 0x29
    a52c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    a52e:	02 97       	sbiw	r24, 0x02	; 2
    a530:	a1 09       	sbc	r26, r1
    a532:	b1 09       	sbc	r27, r1
    a534:	bf 93       	push	r27
    a536:	af 93       	push	r26
    a538:	9f 93       	push	r25
    a53a:	8f 93       	push	r24
    a53c:	86 a5       	ldd	r24, Z+46	; 0x2e
    a53e:	8f 93       	push	r24
    a540:	85 a5       	ldd	r24, Z+45	; 0x2d
    a542:	8f 93       	push	r24
    a544:	84 a5       	ldd	r24, Z+44	; 0x2c
    a546:	8f 93       	push	r24
    a548:	83 a5       	ldd	r24, Z+43	; 0x2b
    a54a:	8f 93       	push	r24
    a54c:	80 85       	ldd	r24, Z+8	; 0x08
    a54e:	8f 93       	push	r24
    a550:	87 81       	ldd	r24, Z+7	; 0x07
    a552:	8f 93       	push	r24
    a554:	82 81       	ldd	r24, Z+2	; 0x02
    a556:	1f 92       	push	r1
    a558:	8f 93       	push	r24
    a55a:	81 85       	ldd	r24, Z+9	; 0x09
    a55c:	92 85       	ldd	r25, Z+10	; 0x0a
    a55e:	b0 e0       	ldi	r27, 0x00	; 0
    a560:	a0 e0       	ldi	r26, 0x00	; 0
    a562:	49 e0       	ldi	r20, 0x09	; 9
    a564:	88 0f       	add	r24, r24
    a566:	99 1f       	adc	r25, r25
    a568:	aa 1f       	adc	r26, r26
    a56a:	bb 1f       	adc	r27, r27
    a56c:	4a 95       	dec	r20
    a56e:	d1 f7       	brne	.-12     	; 0xa564 <main+0xc62>
    a570:	bf 93       	push	r27
    a572:	af 93       	push	r26
    a574:	9f 93       	push	r25
    a576:	8f 93       	push	r24
						fst[fs->fs_type], (DWORD)fs->csize * 512, fs->n_fats,
    a578:	e0 81       	ld	r30, Z
    a57a:	f0 e0       	ldi	r31, 0x00	; 0
				xprintf(PSTR("FAT type = %s\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
    a57c:	ee 0f       	add	r30, r30
    a57e:	ff 1f       	adc	r31, r31
    a580:	ef 5f       	subi	r30, 0xFF	; 255
    a582:	fe 4f       	sbci	r31, 0xFE	; 254
    a584:	81 81       	ldd	r24, Z+1	; 0x01
    a586:	8f 93       	push	r24
    a588:	80 81       	ld	r24, Z
    a58a:	8f 93       	push	r24
    a58c:	8a ee       	ldi	r24, 0xEA	; 234
    a58e:	98 e0       	ldi	r25, 0x08	; 8
    a590:	9f 93       	push	r25
    a592:	8f 93       	push	r24
    a594:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				fr = f_getlabel(ptr2, (char*)Buff, (DWORD*)&p1);
    a598:	0f b6       	in	r0, 0x3f	; 63
    a59a:	f8 94       	cli
    a59c:	de bf       	out	0x3e, r29	; 62
    a59e:	0f be       	out	0x3f, r0	; 63
    a5a0:	cd bf       	out	0x3d, r28	; 61
    a5a2:	ae 01       	movw	r20, r28
    a5a4:	43 57       	subi	r20, 0x73	; 115
    a5a6:	5f 4f       	sbci	r21, 0xFF	; 255
    a5a8:	63 e5       	ldi	r22, 0x53	; 83
    a5aa:	7c e0       	ldi	r23, 0x0C	; 12
    a5ac:	c8 01       	movw	r24, r16
    a5ae:	0e 94 35 47 	call	0x8e6a	; 0x8e6a <f_getlabel>
				if (fr) {
    a5b2:	00 97       	sbiw	r24, 0x00	; 0
    a5b4:	09 f0       	breq	.+2      	; 0xa5b8 <main+0xcb6>
    a5b6:	8e cf       	rjmp	.-228    	; 0xa4d4 <main+0xbd2>
				xprintf(Buff[0] ? PSTR("Volume name is %s\n") : PSTR("No volume label\n"), Buff);
    a5b8:	80 91 53 0c 	lds	r24, 0x0C53	; 0x800c53 <Buff>
    a5bc:	81 11       	cpse	r24, r1
    a5be:	a8 c0       	rjmp	.+336    	; 0xa710 <main+0xe0e>
    a5c0:	86 ec       	ldi	r24, 0xC6	; 198
    a5c2:	98 e0       	ldi	r25, 0x08	; 8
    a5c4:	23 e5       	ldi	r18, 0x53	; 83
    a5c6:	3c e0       	ldi	r19, 0x0C	; 12
    a5c8:	3f 93       	push	r19
    a5ca:	2f 93       	push	r18
    a5cc:	9f 93       	push	r25
    a5ce:	8f 93       	push	r24
    a5d0:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				xprintf(PSTR("Volume S/N is %04X-%04X\n"), (WORD)((DWORD)p1 >> 16), (WORD)(p1 & 0xFFFF));
    a5d4:	c3 57       	subi	r28, 0x73	; 115
    a5d6:	df 4f       	sbci	r29, 0xFF	; 255
    a5d8:	88 81       	ld	r24, Y
    a5da:	99 81       	ldd	r25, Y+1	; 0x01
    a5dc:	aa 81       	ldd	r26, Y+2	; 0x02
    a5de:	bb 81       	ldd	r27, Y+3	; 0x03
    a5e0:	cd 58       	subi	r28, 0x8D	; 141
    a5e2:	d0 40       	sbci	r29, 0x00	; 0
    a5e4:	9f 93       	push	r25
    a5e6:	8f 93       	push	r24
    a5e8:	cd 01       	movw	r24, r26
    a5ea:	aa 27       	eor	r26, r26
    a5ec:	bb 27       	eor	r27, r27
    a5ee:	9f 93       	push	r25
    a5f0:	8f 93       	push	r24
    a5f2:	8d ea       	ldi	r24, 0xAD	; 173
    a5f4:	98 e0       	ldi	r25, 0x08	; 8
    a5f6:	9f 93       	push	r25
    a5f8:	8f 93       	push	r24
    a5fa:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				xputs(PSTR("..."));
    a5fe:	89 ea       	ldi	r24, 0xA9	; 169
    a600:	98 e0       	ldi	r25, 0x08	; 8
    a602:	0e 94 8f 07 	call	0xf1e	; 0xf1e <xputs>
				AccSize = AccFiles = AccDirs = 0;
    a606:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <AccDirs+0x1>
    a60a:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <AccDirs>
    a60e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <AccFiles+0x1>
    a612:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <AccFiles>
    a616:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <AccSize>
    a61a:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <AccSize+0x1>
    a61e:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <AccSize+0x2>
    a622:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <AccSize+0x3>
				strcpy((char*)Buff, ptr);
    a626:	c7 56       	subi	r28, 0x67	; 103
    a628:	df 4f       	sbci	r29, 0xFF	; 255
    a62a:	68 81       	ld	r22, Y
    a62c:	79 81       	ldd	r23, Y+1	; 0x01
    a62e:	c9 59       	subi	r28, 0x99	; 153
    a630:	d0 40       	sbci	r29, 0x00	; 0
    a632:	83 e5       	ldi	r24, 0x53	; 83
    a634:	9c e0       	ldi	r25, 0x0C	; 12
    a636:	0e 94 dc 5a 	call	0xb5b8	; 0xb5b8 <strcpy>
				fr = scan_files((char*)Buff);
    a63a:	0e 94 22 09 	call	0x1244	; 0x1244 <scan_files.constprop.0>
				if (fr) {
    a63e:	0f b6       	in	r0, 0x3f	; 63
    a640:	f8 94       	cli
    a642:	de bf       	out	0x3e, r29	; 62
    a644:	0f be       	out	0x3f, r0	; 63
    a646:	cd bf       	out	0x3d, r28	; 61
    a648:	00 97       	sbiw	r24, 0x00	; 0
    a64a:	09 f0       	breq	.+2      	; 0xa64e <main+0xd4c>
    a64c:	43 cf       	rjmp	.-378    	; 0xa4d4 <main+0xbd2>
						(fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    a64e:	cf 56       	subi	r28, 0x6F	; 111
    a650:	df 4f       	sbci	r29, 0xFF	; 255
    a652:	e8 80       	ld	r14, Y
    a654:	f9 80       	ldd	r15, Y+1	; 0x01
    a656:	c1 59       	subi	r28, 0x91	; 145
    a658:	d0 40       	sbci	r29, 0x00	; 0
    a65a:	d7 01       	movw	r26, r14
    a65c:	19 96       	adiw	r26, 0x09	; 9
    a65e:	0d 91       	ld	r16, X+
    a660:	1c 91       	ld	r17, X
    a662:	c7 57       	subi	r28, 0x77	; 119
    a664:	df 4f       	sbci	r29, 0xFF	; 255
    a666:	28 81       	ld	r18, Y
    a668:	39 81       	ldd	r19, Y+1	; 0x01
    a66a:	4a 81       	ldd	r20, Y+2	; 0x02
    a66c:	5b 81       	ldd	r21, Y+3	; 0x03
    a66e:	c9 58       	subi	r28, 0x89	; 137
    a670:	d0 40       	sbci	r29, 0x00	; 0
    a672:	d8 01       	movw	r26, r16
    a674:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
    a678:	22 e0       	ldi	r18, 0x02	; 2
    a67a:	30 e0       	ldi	r19, 0x00	; 0
    a67c:	40 e0       	ldi	r20, 0x00	; 0
    a67e:	50 e0       	ldi	r21, 0x00	; 0
    a680:	0e 94 a2 59 	call	0xb344	; 0xb344 <__divmodsi4>
    a684:	5f 93       	push	r21
    a686:	4f 93       	push	r20
    a688:	3f 93       	push	r19
    a68a:	2f 93       	push	r18
						(fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    a68c:	f7 01       	movw	r30, r14
    a68e:	27 a1       	ldd	r18, Z+39	; 0x27
    a690:	30 a5       	ldd	r19, Z+40	; 0x28
    a692:	41 a5       	ldd	r20, Z+41	; 0x29
    a694:	52 a5       	ldd	r21, Z+42	; 0x2a
    a696:	22 50       	subi	r18, 0x02	; 2
    a698:	31 09       	sbc	r19, r1
    a69a:	41 09       	sbc	r20, r1
    a69c:	51 09       	sbc	r21, r1
    a69e:	d8 01       	movw	r26, r16
    a6a0:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    a6a4:	c4 56       	subi	r28, 0x64	; 100
    a6a6:	df 4f       	sbci	r29, 0xFF	; 255
    a6a8:	68 83       	st	Y, r22
    a6aa:	79 83       	std	Y+1, r23	; 0x01
    a6ac:	8a 83       	std	Y+2, r24	; 0x02
    a6ae:	9b 83       	std	Y+3, r25	; 0x03
    a6b0:	cc 59       	subi	r28, 0x9C	; 156
    a6b2:	d0 40       	sbci	r29, 0x00	; 0
				xprintf(PSTR("\r%u files, %lu bytes.\n%u folders.\n"
    a6b4:	dc 01       	movw	r26, r24
    a6b6:	cb 01       	movw	r24, r22
    a6b8:	b6 95       	lsr	r27
    a6ba:	a7 95       	ror	r26
    a6bc:	97 95       	ror	r25
    a6be:	87 95       	ror	r24
    a6c0:	bf 93       	push	r27
    a6c2:	af 93       	push	r26
    a6c4:	9f 93       	push	r25
    a6c6:	8f 93       	push	r24
    a6c8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <AccDirs+0x1>
    a6cc:	8f 93       	push	r24
    a6ce:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <AccDirs>
    a6d2:	8f 93       	push	r24
    a6d4:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <AccSize+0x3>
    a6d8:	8f 93       	push	r24
    a6da:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <AccSize+0x2>
    a6de:	8f 93       	push	r24
    a6e0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <AccSize+0x1>
    a6e4:	8f 93       	push	r24
    a6e6:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <AccSize>
    a6ea:	8f 93       	push	r24
    a6ec:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <AccFiles+0x1>
    a6f0:	8f 93       	push	r24
    a6f2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <AccFiles>
    a6f6:	8f 93       	push	r24
    a6f8:	8b e5       	ldi	r24, 0x5B	; 91
    a6fa:	98 e0       	ldi	r25, 0x08	; 8
    a6fc:	9f 93       	push	r25
    a6fe:	8f 93       	push	r24
    a700:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
			break;
    a704:	0f b6       	in	r0, 0x3f	; 63
    a706:	f8 94       	cli
    a708:	de bf       	out	0x3e, r29	; 62
    a70a:	0f be       	out	0x3f, r0	; 63
    a70c:	cd bf       	out	0x3d, r28	; 61
    a70e:	7e c9       	rjmp	.-3332   	; 0x9a0c <main+0x10a>
				xprintf(Buff[0] ? PSTR("Volume name is %s\n") : PSTR("No volume label\n"), Buff);
    a710:	87 ed       	ldi	r24, 0xD7	; 215
    a712:	98 e0       	ldi	r25, 0x08	; 8
    a714:	57 cf       	rjmp	.-338    	; 0xa5c4 <main+0xcc2>
				while (*ptr == ' ') ptr++;
    a716:	6f 5f       	subi	r22, 0xFF	; 255
    a718:	7f 4f       	sbci	r23, 0xFF	; 255
    a71a:	c7 56       	subi	r28, 0x67	; 103
    a71c:	df 4f       	sbci	r29, 0xFF	; 255
    a71e:	79 83       	std	Y+1, r23	; 0x01
    a720:	68 83       	st	Y, r22
    a722:	c9 59       	subi	r28, 0x99	; 153
    a724:	d0 40       	sbci	r29, 0x00	; 0
    a726:	c7 56       	subi	r28, 0x67	; 103
    a728:	df 4f       	sbci	r29, 0xFF	; 255
    a72a:	68 81       	ld	r22, Y
    a72c:	79 81       	ldd	r23, Y+1	; 0x01
    a72e:	c9 59       	subi	r28, 0x99	; 153
    a730:	d0 40       	sbci	r29, 0x00	; 0
    a732:	db 01       	movw	r26, r22
    a734:	8c 91       	ld	r24, X
    a736:	80 32       	cpi	r24, 0x20	; 32
    a738:	71 f3       	breq	.-36     	; 0xa716 <main+0xe14>
				fr = f_opendir(&Dir, ptr);
    a73a:	85 e0       	ldi	r24, 0x05	; 5
    a73c:	93 e0       	ldi	r25, 0x03	; 3
    a73e:	0e 94 f7 3f 	call	0x7fee	; 0x7fee <f_opendir>
				if (fr) {
    a742:	00 97       	sbiw	r24, 0x00	; 0
    a744:	09 f0       	breq	.+2      	; 0xa748 <main+0xe46>
    a746:	c6 ce       	rjmp	.-628    	; 0xa4d4 <main+0xbd2>
				p1 = s1 = s2 = 0;
    a748:	cb 56       	subi	r28, 0x6B	; 107
    a74a:	df 4f       	sbci	r29, 0xFF	; 255
    a74c:	19 82       	std	Y+1, r1	; 0x01
    a74e:	18 82       	st	Y, r1
    a750:	c5 59       	subi	r28, 0x95	; 149
    a752:	d0 40       	sbci	r29, 0x00	; 0
    a754:	c9 56       	subi	r28, 0x69	; 105
    a756:	df 4f       	sbci	r29, 0xFF	; 255
    a758:	19 82       	std	Y+1, r1	; 0x01
    a75a:	18 82       	st	Y, r1
    a75c:	c7 59       	subi	r28, 0x97	; 151
    a75e:	d0 40       	sbci	r29, 0x00	; 0
    a760:	c3 57       	subi	r28, 0x73	; 115
    a762:	df 4f       	sbci	r29, 0xFF	; 255
    a764:	18 82       	st	Y, r1
    a766:	19 82       	std	Y+1, r1	; 0x01
    a768:	1a 82       	std	Y+2, r1	; 0x02
    a76a:	1b 82       	std	Y+3, r1	; 0x03
    a76c:	cd 58       	subi	r28, 0x8D	; 141
    a76e:	d0 40       	sbci	r29, 0x00	; 0
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n"), 
    a770:	05 e0       	ldi	r16, 0x05	; 5
    a772:	12 e0       	ldi	r17, 0x02	; 2
    a774:	8f e2       	ldi	r24, 0x2F	; 47
    a776:	e8 2e       	mov	r14, r24
    a778:	88 e0       	ldi	r24, 0x08	; 8
    a77a:	f8 2e       	mov	r15, r24
					fr = f_readdir(&Dir, &Finfo);
    a77c:	6b ee       	ldi	r22, 0xEB	; 235
    a77e:	71 e0       	ldi	r23, 0x01	; 1
    a780:	85 e0       	ldi	r24, 0x05	; 5
    a782:	93 e0       	ldi	r25, 0x03	; 3
    a784:	0e 94 97 40 	call	0x812e	; 0x812e <f_readdir>
					if ((fr != FR_OK) || !Finfo.fname[0]) break;
    a788:	00 97       	sbiw	r24, 0x00	; 0
    a78a:	09 f0       	breq	.+2      	; 0xa78e <main+0xe8c>
    a78c:	a3 ce       	rjmp	.-698    	; 0xa4d4 <main+0xbd2>
    a78e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <Finfo+0x1a>
    a792:	88 23       	and	r24, r24
    a794:	09 f4       	brne	.+2      	; 0xa798 <main+0xe96>
    a796:	18 c5       	rjmp	.+2608   	; 0xb1c8 <main+0x18c6>
					if (Finfo.fattrib & AM_DIR) {
    a798:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <Finfo+0xc>
						s1++; p1 += Finfo.fsize;
    a79c:	40 90 eb 01 	lds	r4, 0x01EB	; 0x8001eb <Finfo>
    a7a0:	50 90 ec 01 	lds	r5, 0x01EC	; 0x8001ec <Finfo+0x1>
    a7a4:	60 90 ed 01 	lds	r6, 0x01ED	; 0x8001ed <Finfo+0x2>
    a7a8:	70 90 ee 01 	lds	r7, 0x01EE	; 0x8001ee <Finfo+0x3>
					if (Finfo.fattrib & AM_DIR) {
    a7ac:	fe 2f       	mov	r31, r30
    a7ae:	f0 71       	andi	r31, 0x10	; 16
    a7b0:	e4 ff       	sbrs	r30, 4
    a7b2:	6a c0       	rjmp	.+212    	; 0xa888 <main+0xf86>
						s2++;
    a7b4:	cb 56       	subi	r28, 0x6B	; 107
    a7b6:	df 4f       	sbci	r29, 0xFF	; 255
    a7b8:	88 81       	ld	r24, Y
    a7ba:	99 81       	ldd	r25, Y+1	; 0x01
    a7bc:	c5 59       	subi	r28, 0x95	; 149
    a7be:	d0 40       	sbci	r29, 0x00	; 0
    a7c0:	01 96       	adiw	r24, 0x01	; 1
    a7c2:	cb 56       	subi	r28, 0x6B	; 107
    a7c4:	df 4f       	sbci	r29, 0xFF	; 255
    a7c6:	99 83       	std	Y+1, r25	; 0x01
    a7c8:	88 83       	st	Y, r24
    a7ca:	c5 59       	subi	r28, 0x95	; 149
    a7cc:	d0 40       	sbci	r29, 0x00	; 0
								(Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
    a7ce:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <Finfo+0xa>
    a7d2:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <Finfo+0xb>
    a7d6:	ac 01       	movw	r20, r24
    a7d8:	85 e0       	ldi	r24, 0x05	; 5
    a7da:	56 95       	lsr	r21
    a7dc:	47 95       	ror	r20
    a7de:	8a 95       	dec	r24
    a7e0:	e1 f7       	brne	.-8      	; 0xa7da <main+0xed8>
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n"), 
    a7e2:	4f 73       	andi	r20, 0x3F	; 63
    a7e4:	55 27       	eor	r21, r21
    a7e6:	a9 2f       	mov	r26, r25
    a7e8:	a6 95       	lsr	r26
    a7ea:	a6 95       	lsr	r26
    a7ec:	a6 95       	lsr	r26
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    a7ee:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <Finfo+0x8>
    a7f2:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <Finfo+0x9>
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n"), 
    a7f6:	bc 01       	movw	r22, r24
    a7f8:	6f 71       	andi	r22, 0x1F	; 31
    a7fa:	77 27       	eor	r23, r23
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    a7fc:	9c 01       	movw	r18, r24
    a7fe:	b5 e0       	ldi	r27, 0x05	; 5
    a800:	36 95       	lsr	r19
    a802:	27 95       	ror	r18
    a804:	ba 95       	dec	r27
    a806:	e1 f7       	brne	.-8      	; 0xa800 <main+0xefe>
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n"), 
    a808:	2f 70       	andi	r18, 0x0F	; 15
    a80a:	33 27       	eor	r19, r19
								(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
    a80c:	89 2f       	mov	r24, r25
    a80e:	99 27       	eor	r25, r25
    a810:	86 95       	lsr	r24
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n"), 
    a812:	84 54       	subi	r24, 0x44	; 68
    a814:	98 4f       	sbci	r25, 0xF8	; 248
    a816:	bd e2       	ldi	r27, 0x2D	; 45
    a818:	2b 2e       	mov	r2, r27
    a81a:	e5 ff       	sbrs	r30, 5
    a81c:	02 c0       	rjmp	.+4      	; 0xa822 <main+0xf20>
    a81e:	b1 e4       	ldi	r27, 0x41	; 65
    a820:	2b 2e       	mov	r2, r27
    a822:	bd e2       	ldi	r27, 0x2D	; 45
    a824:	3b 2e       	mov	r3, r27
    a826:	e2 ff       	sbrs	r30, 2
    a828:	02 c0       	rjmp	.+4      	; 0xa82e <main+0xf2c>
    a82a:	b3 e5       	ldi	r27, 0x53	; 83
    a82c:	3b 2e       	mov	r3, r27
    a82e:	bd e2       	ldi	r27, 0x2D	; 45
    a830:	e1 fd       	sbrc	r30, 1
    a832:	b8 e4       	ldi	r27, 0x48	; 72
    a834:	e0 fd       	sbrc	r30, 0
    a836:	4a c0       	rjmp	.+148    	; 0xa8cc <main+0xfca>
    a838:	ed e2       	ldi	r30, 0x2D	; 45
    a83a:	f1 11       	cpse	r31, r1
    a83c:	49 c0       	rjmp	.+146    	; 0xa8d0 <main+0xfce>
    a83e:	fd e2       	ldi	r31, 0x2D	; 45
    a840:	1f 93       	push	r17
    a842:	0f 93       	push	r16
    a844:	7f 92       	push	r7
    a846:	6f 92       	push	r6
    a848:	5f 92       	push	r5
    a84a:	4f 92       	push	r4
    a84c:	5f 93       	push	r21
    a84e:	4f 93       	push	r20
    a850:	1f 92       	push	r1
    a852:	af 93       	push	r26
    a854:	7f 93       	push	r23
    a856:	6f 93       	push	r22
    a858:	3f 93       	push	r19
    a85a:	2f 93       	push	r18
    a85c:	9f 93       	push	r25
    a85e:	8f 93       	push	r24
    a860:	1f 92       	push	r1
    a862:	2f 92       	push	r2
    a864:	1f 92       	push	r1
    a866:	3f 92       	push	r3
    a868:	1f 92       	push	r1
    a86a:	bf 93       	push	r27
    a86c:	1f 92       	push	r1
    a86e:	ef 93       	push	r30
    a870:	1f 92       	push	r1
    a872:	ff 93       	push	r31
    a874:	ff 92       	push	r15
    a876:	ef 92       	push	r14
    a878:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
					fr = f_readdir(&Dir, &Finfo);
    a87c:	0f b6       	in	r0, 0x3f	; 63
    a87e:	f8 94       	cli
    a880:	de bf       	out	0x3e, r29	; 62
    a882:	0f be       	out	0x3f, r0	; 63
    a884:	cd bf       	out	0x3d, r28	; 61
    a886:	7a cf       	rjmp	.-268    	; 0xa77c <main+0xe7a>
						s1++; p1 += Finfo.fsize;
    a888:	c9 56       	subi	r28, 0x69	; 105
    a88a:	df 4f       	sbci	r29, 0xFF	; 255
    a88c:	88 81       	ld	r24, Y
    a88e:	99 81       	ldd	r25, Y+1	; 0x01
    a890:	c7 59       	subi	r28, 0x97	; 151
    a892:	d0 40       	sbci	r29, 0x00	; 0
    a894:	01 96       	adiw	r24, 0x01	; 1
    a896:	c9 56       	subi	r28, 0x69	; 105
    a898:	df 4f       	sbci	r29, 0xFF	; 255
    a89a:	99 83       	std	Y+1, r25	; 0x01
    a89c:	88 83       	st	Y, r24
    a89e:	c7 59       	subi	r28, 0x97	; 151
    a8a0:	d0 40       	sbci	r29, 0x00	; 0
    a8a2:	c3 57       	subi	r28, 0x73	; 115
    a8a4:	df 4f       	sbci	r29, 0xFF	; 255
    a8a6:	88 81       	ld	r24, Y
    a8a8:	99 81       	ldd	r25, Y+1	; 0x01
    a8aa:	aa 81       	ldd	r26, Y+2	; 0x02
    a8ac:	bb 81       	ldd	r27, Y+3	; 0x03
    a8ae:	cd 58       	subi	r28, 0x8D	; 141
    a8b0:	d0 40       	sbci	r29, 0x00	; 0
    a8b2:	84 0d       	add	r24, r4
    a8b4:	95 1d       	adc	r25, r5
    a8b6:	a6 1d       	adc	r26, r6
    a8b8:	b7 1d       	adc	r27, r7
    a8ba:	c3 57       	subi	r28, 0x73	; 115
    a8bc:	df 4f       	sbci	r29, 0xFF	; 255
    a8be:	88 83       	st	Y, r24
    a8c0:	99 83       	std	Y+1, r25	; 0x01
    a8c2:	aa 83       	std	Y+2, r26	; 0x02
    a8c4:	bb 83       	std	Y+3, r27	; 0x03
    a8c6:	cd 58       	subi	r28, 0x8D	; 141
    a8c8:	d0 40       	sbci	r29, 0x00	; 0
    a8ca:	81 cf       	rjmp	.-254    	; 0xa7ce <main+0xecc>
					xprintf(PSTR("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s\n"), 
    a8cc:	e2 e5       	ldi	r30, 0x52	; 82
    a8ce:	b5 cf       	rjmp	.-150    	; 0xa83a <main+0xf38>
    a8d0:	f4 e4       	ldi	r31, 0x44	; 68
    a8d2:	b6 cf       	rjmp	.-148    	; 0xa840 <main+0xf3e>
				if (!xatoi(&ptr, &p1)) break;
    a8d4:	be 01       	movw	r22, r28
    a8d6:	63 57       	subi	r22, 0x73	; 115
    a8d8:	7f 4f       	sbci	r23, 0xFF	; 255
    a8da:	ce 01       	movw	r24, r28
    a8dc:	87 56       	subi	r24, 0x67	; 103
    a8de:	9f 4f       	sbci	r25, 0xFF	; 255
    a8e0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a8e4:	88 23       	and	r24, r24
    a8e6:	09 f4       	brne	.+2      	; 0xa8ea <main+0xfe8>
    a8e8:	91 c8       	rjmp	.-3806   	; 0x9a0c <main+0x10a>
				while (*ptr == ' ') ptr++;
    a8ea:	c7 56       	subi	r28, 0x67	; 103
    a8ec:	df 4f       	sbci	r29, 0xFF	; 255
    a8ee:	68 81       	ld	r22, Y
    a8f0:	79 81       	ldd	r23, Y+1	; 0x01
    a8f2:	c9 59       	subi	r28, 0x99	; 153
    a8f4:	d0 40       	sbci	r29, 0x00	; 0
    a8f6:	db 01       	movw	r26, r22
    a8f8:	8c 91       	ld	r24, X
    a8fa:	80 32       	cpi	r24, 0x20	; 32
    a8fc:	51 f0       	breq	.+20     	; 0xa912 <main+0x1010>
				put_rc(f_open(&File[0], ptr, (BYTE)p1));
    a8fe:	c3 57       	subi	r28, 0x73	; 115
    a900:	df 4f       	sbci	r29, 0xFF	; 255
    a902:	48 81       	ld	r20, Y
    a904:	cd 58       	subi	r28, 0x8D	; 141
    a906:	d0 40       	sbci	r29, 0x00	; 0
    a908:	89 e4       	ldi	r24, 0x49	; 73
    a90a:	93 e0       	ldi	r25, 0x03	; 3
    a90c:	0e 94 12 31 	call	0x6224	; 0x6224 <f_open>
    a910:	e1 cd       	rjmp	.-1086   	; 0xa4d4 <main+0xbd2>
				while (*ptr == ' ') ptr++;
    a912:	6f 5f       	subi	r22, 0xFF	; 255
    a914:	7f 4f       	sbci	r23, 0xFF	; 255
    a916:	c7 56       	subi	r28, 0x67	; 103
    a918:	df 4f       	sbci	r29, 0xFF	; 255
    a91a:	79 83       	std	Y+1, r23	; 0x01
    a91c:	68 83       	st	Y, r22
    a91e:	c9 59       	subi	r28, 0x99	; 153
    a920:	d0 40       	sbci	r29, 0x00	; 0
    a922:	e3 cf       	rjmp	.-58     	; 0xa8ea <main+0xfe8>
				put_rc(f_close(&File[0]));
    a924:	89 e4       	ldi	r24, 0x49	; 73
    a926:	93 e0       	ldi	r25, 0x03	; 3
    a928:	0e 94 09 3a 	call	0x7412	; 0x7412 <f_close>
    a92c:	d3 cd       	rjmp	.-1114   	; 0xa4d4 <main+0xbd2>
				if (!xatoi(&ptr, &p1)) break;
    a92e:	be 01       	movw	r22, r28
    a930:	63 57       	subi	r22, 0x73	; 115
    a932:	7f 4f       	sbci	r23, 0xFF	; 255
    a934:	ce 01       	movw	r24, r28
    a936:	87 56       	subi	r24, 0x67	; 103
    a938:	9f 4f       	sbci	r25, 0xFF	; 255
    a93a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a93e:	88 23       	and	r24, r24
    a940:	09 f4       	brne	.+2      	; 0xa944 <main+0x1042>
    a942:	64 c8       	rjmp	.-3896   	; 0x9a0c <main+0x10a>
				fr = f_lseek(&File[0], p1);
    a944:	c3 57       	subi	r28, 0x73	; 115
    a946:	df 4f       	sbci	r29, 0xFF	; 255
    a948:	88 81       	ld	r24, Y
    a94a:	99 81       	ldd	r25, Y+1	; 0x01
    a94c:	aa 81       	ldd	r26, Y+2	; 0x02
    a94e:	bb 81       	ldd	r27, Y+3	; 0x03
    a950:	cd 58       	subi	r28, 0x8D	; 141
    a952:	d0 40       	sbci	r29, 0x00	; 0
    a954:	2c 01       	movw	r4, r24
    a956:	3d 01       	movw	r6, r26
    a958:	77 0c       	add	r7, r7
    a95a:	44 08       	sbc	r4, r4
    a95c:	54 2c       	mov	r5, r4
    a95e:	32 01       	movw	r6, r4
    a960:	8c 01       	movw	r16, r24
    a962:	9d 01       	movw	r18, r26
    a964:	44 2d       	mov	r20, r4
    a966:	54 2d       	mov	r21, r4
    a968:	64 2d       	mov	r22, r4
    a96a:	74 2d       	mov	r23, r4
    a96c:	89 e4       	ldi	r24, 0x49	; 73
    a96e:	93 e0       	ldi	r25, 0x03	; 3
    a970:	0e 94 14 3c 	call	0x7828	; 0x7828 <f_lseek>
    a974:	8c 01       	movw	r16, r24
				put_rc(fr);
    a976:	0e 94 b3 08 	call	0x1166	; 0x1166 <put_rc>
				if (fr == FR_OK) {
    a97a:	01 2b       	or	r16, r17
    a97c:	09 f0       	breq	.+2      	; 0xa980 <main+0x107e>
    a97e:	46 c8       	rjmp	.-3956   	; 0x9a0c <main+0x10a>
					xprintf(PSTR("fptr = %lu(0x%lX)\n"), (DWORD)File[0].fptr, (DWORD)File[0].fptr);
    a980:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <File+0x28>
    a984:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <File+0x29>
    a988:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <File+0x2a>
    a98c:	30 91 74 03 	lds	r19, 0x0374	; 0x800374 <File+0x2b>
    a990:	3f 93       	push	r19
    a992:	2f 93       	push	r18
    a994:	9f 93       	push	r25
    a996:	8f 93       	push	r24
    a998:	3f 93       	push	r19
    a99a:	2f 93       	push	r18
    a99c:	9f 93       	push	r25
    a99e:	8f 93       	push	r24
    a9a0:	82 ee       	ldi	r24, 0xE2	; 226
    a9a2:	97 e0       	ldi	r25, 0x07	; 7
				xprintf(PSTR("%lu bytes written at %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    a9a4:	9f 93       	push	r25
    a9a6:	8f 93       	push	r24
    a9a8:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				break;
    a9ac:	ab ce       	rjmp	.-682    	; 0xa704 <main+0xe02>
				if (!xatoi(&ptr, &p1)) break;
    a9ae:	be 01       	movw	r22, r28
    a9b0:	63 57       	subi	r22, 0x73	; 115
    a9b2:	7f 4f       	sbci	r23, 0xFF	; 255
    a9b4:	ce 01       	movw	r24, r28
    a9b6:	87 56       	subi	r24, 0x67	; 103
    a9b8:	9f 4f       	sbci	r25, 0xFF	; 255
    a9ba:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    a9be:	88 23       	and	r24, r24
    a9c0:	09 f4       	brne	.+2      	; 0xa9c4 <main+0x10c2>
    a9c2:	24 c8       	rjmp	.-4024   	; 0x9a0c <main+0x10a>
				p2 = 0;
    a9c4:	c7 57       	subi	r28, 0x77	; 119
    a9c6:	df 4f       	sbci	r29, 0xFF	; 255
    a9c8:	18 82       	st	Y, r1
    a9ca:	19 82       	std	Y+1, r1	; 0x01
    a9cc:	1a 82       	std	Y+2, r1	; 0x02
    a9ce:	1b 82       	std	Y+3, r1	; 0x03
    a9d0:	c9 58       	subi	r28, 0x89	; 137
    a9d2:	d0 40       	sbci	r29, 0x00	; 0
				cli(); Timer = 0; sei();
    a9d4:	f8 94       	cli
    a9d6:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <Timer+0x1>
    a9da:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <Timer>
    a9de:	78 94       	sei
					if (p1 >= blen)	{ cnt = blen; p1 -= blen; }
    a9e0:	26 01       	movw	r4, r12
    a9e2:	71 2c       	mov	r7, r1
    a9e4:	61 2c       	mov	r6, r1
				while (p1) {
    a9e6:	c3 57       	subi	r28, 0x73	; 115
    a9e8:	df 4f       	sbci	r29, 0xFF	; 255
    a9ea:	88 81       	ld	r24, Y
    a9ec:	99 81       	ldd	r25, Y+1	; 0x01
    a9ee:	aa 81       	ldd	r26, Y+2	; 0x02
    a9f0:	bb 81       	ldd	r27, Y+3	; 0x03
    a9f2:	cd 58       	subi	r28, 0x8D	; 141
    a9f4:	d0 40       	sbci	r29, 0x00	; 0
    a9f6:	00 97       	sbiw	r24, 0x00	; 0
    a9f8:	a1 05       	cpc	r26, r1
    a9fa:	b1 05       	cpc	r27, r1
    a9fc:	61 f1       	breq	.+88     	; 0xaa56 <main+0x1154>
					if (p1 >= blen)	{ cnt = blen; p1 -= blen; }
    a9fe:	84 15       	cp	r24, r4
    aa00:	95 05       	cpc	r25, r5
    aa02:	a6 05       	cpc	r26, r6
    aa04:	b7 05       	cpc	r27, r7
    aa06:	0c f4       	brge	.+2      	; 0xaa0a <main+0x1108>
    aa08:	73 c0       	rjmp	.+230    	; 0xaaf0 <main+0x11ee>
    aa0a:	cd 56       	subi	r28, 0x6D	; 109
    aa0c:	df 4f       	sbci	r29, 0xFF	; 255
    aa0e:	d9 82       	std	Y+1, r13	; 0x01
    aa10:	c8 82       	st	Y, r12
    aa12:	c3 59       	subi	r28, 0x93	; 147
    aa14:	d0 40       	sbci	r29, 0x00	; 0
    aa16:	84 19       	sub	r24, r4
    aa18:	95 09       	sbc	r25, r5
    aa1a:	a6 09       	sbc	r26, r6
    aa1c:	b7 09       	sbc	r27, r7
    aa1e:	c3 57       	subi	r28, 0x73	; 115
    aa20:	df 4f       	sbci	r29, 0xFF	; 255
    aa22:	88 83       	st	Y, r24
    aa24:	99 83       	std	Y+1, r25	; 0x01
    aa26:	aa 83       	std	Y+2, r26	; 0x02
    aa28:	bb 83       	std	Y+3, r27	; 0x03
    aa2a:	cd 58       	subi	r28, 0x8D	; 141
    aa2c:	d0 40       	sbci	r29, 0x00	; 0
					fr = f_read(&File[0], Buff, cnt, &s2);
    aa2e:	cd 56       	subi	r28, 0x6D	; 109
    aa30:	df 4f       	sbci	r29, 0xFF	; 255
    aa32:	48 81       	ld	r20, Y
    aa34:	59 81       	ldd	r21, Y+1	; 0x01
    aa36:	c3 59       	subi	r28, 0x93	; 147
    aa38:	d0 40       	sbci	r29, 0x00	; 0
    aa3a:	9e 01       	movw	r18, r28
    aa3c:	2b 56       	subi	r18, 0x6B	; 107
    aa3e:	3f 4f       	sbci	r19, 0xFF	; 255
    aa40:	63 e5       	ldi	r22, 0x53	; 83
    aa42:	7c e0       	ldi	r23, 0x0C	; 12
    aa44:	89 e4       	ldi	r24, 0x49	; 73
    aa46:	93 e0       	ldi	r25, 0x03	; 3
    aa48:	0e 94 a0 34 	call	0x6940	; 0x6940 <f_read>
					if (fr != FR_OK) { put_rc(fr); break; }
    aa4c:	00 97       	sbiw	r24, 0x00	; 0
    aa4e:	09 f4       	brne	.+2      	; 0xaa52 <main+0x1150>
    aa50:	5e c0       	rjmp	.+188    	; 0xab0e <main+0x120c>
    aa52:	0e 94 b3 08 	call	0x1166	; 0x1166 <put_rc>
				cli(); s2 = Timer; sei();
    aa56:	f8 94       	cli
    aa58:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <Timer>
    aa5c:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <Timer+0x1>
    aa60:	cb 56       	subi	r28, 0x6B	; 107
    aa62:	df 4f       	sbci	r29, 0xFF	; 255
    aa64:	99 83       	std	Y+1, r25	; 0x01
    aa66:	88 83       	st	Y, r24
    aa68:	c5 59       	subi	r28, 0x95	; 149
    aa6a:	d0 40       	sbci	r29, 0x00	; 0
    aa6c:	78 94       	sei
				xprintf(PSTR("%lu bytes read at %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    aa6e:	cb 56       	subi	r28, 0x6B	; 107
    aa70:	df 4f       	sbci	r29, 0xFF	; 255
    aa72:	e8 81       	ld	r30, Y
    aa74:	f9 81       	ldd	r31, Y+1	; 0x01
    aa76:	c5 59       	subi	r28, 0x95	; 149
    aa78:	d0 40       	sbci	r29, 0x00	; 0
    aa7a:	30 97       	sbiw	r30, 0x00	; 0
    aa7c:	09 f4       	brne	.+2      	; 0xaa80 <main+0x117e>
    aa7e:	6c c0       	rjmp	.+216    	; 0xab58 <main+0x1256>
    aa80:	c7 57       	subi	r28, 0x77	; 119
    aa82:	df 4f       	sbci	r29, 0xFF	; 255
    aa84:	28 81       	ld	r18, Y
    aa86:	39 81       	ldd	r19, Y+1	; 0x01
    aa88:	4a 81       	ldd	r20, Y+2	; 0x02
    aa8a:	5b 81       	ldd	r21, Y+3	; 0x03
    aa8c:	c9 58       	subi	r28, 0x89	; 137
    aa8e:	d0 40       	sbci	r29, 0x00	; 0
    aa90:	a4 e6       	ldi	r26, 0x64	; 100
    aa92:	b0 e0       	ldi	r27, 0x00	; 0
    aa94:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    aa98:	c4 56       	subi	r28, 0x64	; 100
    aa9a:	df 4f       	sbci	r29, 0xFF	; 255
    aa9c:	68 83       	st	Y, r22
    aa9e:	79 83       	std	Y+1, r23	; 0x01
    aaa0:	8a 83       	std	Y+2, r24	; 0x02
    aaa2:	9b 83       	std	Y+3, r25	; 0x03
    aaa4:	cc 59       	subi	r28, 0x9C	; 156
    aaa6:	d0 40       	sbci	r29, 0x00	; 0
    aaa8:	9f 01       	movw	r18, r30
    aaaa:	50 e0       	ldi	r21, 0x00	; 0
    aaac:	40 e0       	ldi	r20, 0x00	; 0
    aaae:	0e 94 a2 59 	call	0xb344	; 0xb344 <__divmodsi4>
    aab2:	5f 93       	push	r21
    aab4:	4f 93       	push	r20
    aab6:	3f 93       	push	r19
    aab8:	2f 93       	push	r18
    aaba:	c4 57       	subi	r28, 0x74	; 116
    aabc:	df 4f       	sbci	r29, 0xFF	; 255
    aabe:	88 81       	ld	r24, Y
    aac0:	cc 58       	subi	r28, 0x8C	; 140
    aac2:	d0 40       	sbci	r29, 0x00	; 0
    aac4:	8f 93       	push	r24
    aac6:	c5 57       	subi	r28, 0x75	; 117
    aac8:	df 4f       	sbci	r29, 0xFF	; 255
    aaca:	88 81       	ld	r24, Y
    aacc:	cb 58       	subi	r28, 0x8B	; 139
    aace:	d0 40       	sbci	r29, 0x00	; 0
    aad0:	8f 93       	push	r24
    aad2:	c6 57       	subi	r28, 0x76	; 118
    aad4:	df 4f       	sbci	r29, 0xFF	; 255
    aad6:	88 81       	ld	r24, Y
    aad8:	ca 58       	subi	r28, 0x8A	; 138
    aada:	d0 40       	sbci	r29, 0x00	; 0
    aadc:	8f 93       	push	r24
    aade:	c7 57       	subi	r28, 0x77	; 119
    aae0:	df 4f       	sbci	r29, 0xFF	; 255
    aae2:	88 81       	ld	r24, Y
    aae4:	c9 58       	subi	r28, 0x89	; 137
    aae6:	d0 40       	sbci	r29, 0x00	; 0
    aae8:	8f 93       	push	r24
    aaea:	80 ec       	ldi	r24, 0xC0	; 192
    aaec:	97 e0       	ldi	r25, 0x07	; 7
    aaee:	5a cf       	rjmp	.-332    	; 0xa9a4 <main+0x10a2>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    aaf0:	cd 56       	subi	r28, 0x6D	; 109
    aaf2:	df 4f       	sbci	r29, 0xFF	; 255
    aaf4:	99 83       	std	Y+1, r25	; 0x01
    aaf6:	88 83       	st	Y, r24
    aaf8:	c3 59       	subi	r28, 0x93	; 147
    aafa:	d0 40       	sbci	r29, 0x00	; 0
    aafc:	c3 57       	subi	r28, 0x73	; 115
    aafe:	df 4f       	sbci	r29, 0xFF	; 255
    ab00:	18 82       	st	Y, r1
    ab02:	19 82       	std	Y+1, r1	; 0x01
    ab04:	1a 82       	std	Y+2, r1	; 0x02
    ab06:	1b 82       	std	Y+3, r1	; 0x03
    ab08:	cd 58       	subi	r28, 0x8D	; 141
    ab0a:	d0 40       	sbci	r29, 0x00	; 0
    ab0c:	90 cf       	rjmp	.-224    	; 0xaa2e <main+0x112c>
					p2 += s2;
    ab0e:	cb 56       	subi	r28, 0x6B	; 107
    ab10:	df 4f       	sbci	r29, 0xFF	; 255
    ab12:	28 81       	ld	r18, Y
    ab14:	39 81       	ldd	r19, Y+1	; 0x01
    ab16:	c5 59       	subi	r28, 0x95	; 149
    ab18:	d0 40       	sbci	r29, 0x00	; 0
    ab1a:	c7 57       	subi	r28, 0x77	; 119
    ab1c:	df 4f       	sbci	r29, 0xFF	; 255
    ab1e:	88 81       	ld	r24, Y
    ab20:	99 81       	ldd	r25, Y+1	; 0x01
    ab22:	aa 81       	ldd	r26, Y+2	; 0x02
    ab24:	bb 81       	ldd	r27, Y+3	; 0x03
    ab26:	c9 58       	subi	r28, 0x89	; 137
    ab28:	d0 40       	sbci	r29, 0x00	; 0
    ab2a:	82 0f       	add	r24, r18
    ab2c:	93 1f       	adc	r25, r19
    ab2e:	a1 1d       	adc	r26, r1
    ab30:	b1 1d       	adc	r27, r1
    ab32:	c7 57       	subi	r28, 0x77	; 119
    ab34:	df 4f       	sbci	r29, 0xFF	; 255
    ab36:	88 83       	st	Y, r24
    ab38:	99 83       	std	Y+1, r25	; 0x01
    ab3a:	aa 83       	std	Y+2, r26	; 0x02
    ab3c:	bb 83       	std	Y+3, r27	; 0x03
    ab3e:	c9 58       	subi	r28, 0x89	; 137
    ab40:	d0 40       	sbci	r29, 0x00	; 0
					if (cnt != s2) break;
    ab42:	cd 56       	subi	r28, 0x6D	; 109
    ab44:	df 4f       	sbci	r29, 0xFF	; 255
    ab46:	88 81       	ld	r24, Y
    ab48:	99 81       	ldd	r25, Y+1	; 0x01
    ab4a:	c3 59       	subi	r28, 0x93	; 147
    ab4c:	d0 40       	sbci	r29, 0x00	; 0
    ab4e:	28 17       	cp	r18, r24
    ab50:	39 07       	cpc	r19, r25
    ab52:	09 f4       	brne	.+2      	; 0xab56 <main+0x1254>
    ab54:	48 cf       	rjmp	.-368    	; 0xa9e6 <main+0x10e4>
    ab56:	7f cf       	rjmp	.-258    	; 0xaa56 <main+0x1154>
				xprintf(PSTR("%lu bytes read at %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    ab58:	20 e0       	ldi	r18, 0x00	; 0
    ab5a:	30 e0       	ldi	r19, 0x00	; 0
    ab5c:	40 e0       	ldi	r20, 0x00	; 0
    ab5e:	50 e0       	ldi	r21, 0x00	; 0
    ab60:	a8 cf       	rjmp	.-176    	; 0xaab2 <main+0x11b0>
				if (!xatoi(&ptr, &p1)) break;
    ab62:	be 01       	movw	r22, r28
    ab64:	63 57       	subi	r22, 0x73	; 115
    ab66:	7f 4f       	sbci	r23, 0xFF	; 255
    ab68:	ce 01       	movw	r24, r28
    ab6a:	87 56       	subi	r24, 0x67	; 103
    ab6c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab6e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    ab72:	88 23       	and	r24, r24
    ab74:	11 f4       	brne	.+4      	; 0xab7a <main+0x1278>
    ab76:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
				ofs = File[0].fptr;
    ab7a:	40 90 71 03 	lds	r4, 0x0371	; 0x800371 <File+0x28>
    ab7e:	50 90 72 03 	lds	r5, 0x0372	; 0x800372 <File+0x29>
    ab82:	60 90 73 03 	lds	r6, 0x0373	; 0x800373 <File+0x2a>
    ab86:	70 90 74 03 	lds	r7, 0x0374	; 0x800374 <File+0x2b>
						cnt = 16; p1 -= 16;
    ab8a:	00 e1       	ldi	r16, 0x10	; 16
    ab8c:	10 e0       	ldi	r17, 0x00	; 0
				while (p1) {
    ab8e:	c3 57       	subi	r28, 0x73	; 115
    ab90:	df 4f       	sbci	r29, 0xFF	; 255
    ab92:	88 81       	ld	r24, Y
    ab94:	99 81       	ldd	r25, Y+1	; 0x01
    ab96:	aa 81       	ldd	r26, Y+2	; 0x02
    ab98:	bb 81       	ldd	r27, Y+3	; 0x03
    ab9a:	cd 58       	subi	r28, 0x8D	; 141
    ab9c:	d0 40       	sbci	r29, 0x00	; 0
    ab9e:	00 97       	sbiw	r24, 0x00	; 0
    aba0:	a1 05       	cpc	r26, r1
    aba2:	b1 05       	cpc	r27, r1
    aba4:	11 f4       	brne	.+4      	; 0xabaa <main+0x12a8>
    aba6:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
					if (p1 >= 16) {
    abaa:	80 31       	cpi	r24, 0x10	; 16
    abac:	91 05       	cpc	r25, r1
    abae:	a1 05       	cpc	r26, r1
    abb0:	b1 05       	cpc	r27, r1
    abb2:	d4 f1       	brlt	.+116    	; 0xac28 <main+0x1326>
						cnt = 16; p1 -= 16;
    abb4:	cd 56       	subi	r28, 0x6D	; 109
    abb6:	df 4f       	sbci	r29, 0xFF	; 255
    abb8:	19 83       	std	Y+1, r17	; 0x01
    abba:	08 83       	st	Y, r16
    abbc:	c3 59       	subi	r28, 0x93	; 147
    abbe:	d0 40       	sbci	r29, 0x00	; 0
    abc0:	40 97       	sbiw	r24, 0x10	; 16
    abc2:	a1 09       	sbc	r26, r1
    abc4:	b1 09       	sbc	r27, r1
    abc6:	c3 57       	subi	r28, 0x73	; 115
    abc8:	df 4f       	sbci	r29, 0xFF	; 255
    abca:	88 83       	st	Y, r24
    abcc:	99 83       	std	Y+1, r25	; 0x01
    abce:	aa 83       	std	Y+2, r26	; 0x02
    abd0:	bb 83       	std	Y+3, r27	; 0x03
    abd2:	cd 58       	subi	r28, 0x8D	; 141
    abd4:	d0 40       	sbci	r29, 0x00	; 0
					fr = f_read(&File[0], Buff, cnt, &cnt);
    abd6:	cd 56       	subi	r28, 0x6D	; 109
    abd8:	df 4f       	sbci	r29, 0xFF	; 255
    abda:	48 81       	ld	r20, Y
    abdc:	59 81       	ldd	r21, Y+1	; 0x01
    abde:	c3 59       	subi	r28, 0x93	; 147
    abe0:	d0 40       	sbci	r29, 0x00	; 0
    abe2:	9e 01       	movw	r18, r28
    abe4:	2d 56       	subi	r18, 0x6D	; 109
    abe6:	3f 4f       	sbci	r19, 0xFF	; 255
    abe8:	63 e5       	ldi	r22, 0x53	; 83
    abea:	7c e0       	ldi	r23, 0x0C	; 12
    abec:	89 e4       	ldi	r24, 0x49	; 73
    abee:	93 e0       	ldi	r25, 0x03	; 3
    abf0:	0e 94 a0 34 	call	0x6940	; 0x6940 <f_read>
					if (fr != FR_OK) {
    abf4:	00 97       	sbiw	r24, 0x00	; 0
    abf6:	09 f0       	breq	.+2      	; 0xabfa <main+0x12f8>
    abf8:	6d cc       	rjmp	.-1830   	; 0xa4d4 <main+0xbd2>
					if (!cnt) break;
    abfa:	cd 56       	subi	r28, 0x6D	; 109
    abfc:	df 4f       	sbci	r29, 0xFF	; 255
    abfe:	28 81       	ld	r18, Y
    ac00:	39 81       	ldd	r19, Y+1	; 0x01
    ac02:	c3 59       	subi	r28, 0x93	; 147
    ac04:	d0 40       	sbci	r29, 0x00	; 0
    ac06:	21 15       	cp	r18, r1
    ac08:	31 05       	cpc	r19, r1
    ac0a:	11 f4       	brne	.+4      	; 0xac10 <main+0x130e>
    ac0c:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
					put_dump(Buff, ofs, cnt);
    ac10:	b3 01       	movw	r22, r6
    ac12:	a2 01       	movw	r20, r4
    ac14:	83 e5       	ldi	r24, 0x53	; 83
    ac16:	9c e0       	ldi	r25, 0x0C	; 12
    ac18:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <put_dump>
					ofs += 16;
    ac1c:	30 e1       	ldi	r19, 0x10	; 16
    ac1e:	43 0e       	add	r4, r19
    ac20:	51 1c       	adc	r5, r1
    ac22:	61 1c       	adc	r6, r1
    ac24:	71 1c       	adc	r7, r1
    ac26:	b3 cf       	rjmp	.-154    	; 0xab8e <main+0x128c>
						cnt = (WORD)p1; p1 = 0;
    ac28:	cd 56       	subi	r28, 0x6D	; 109
    ac2a:	df 4f       	sbci	r29, 0xFF	; 255
    ac2c:	99 83       	std	Y+1, r25	; 0x01
    ac2e:	88 83       	st	Y, r24
    ac30:	c3 59       	subi	r28, 0x93	; 147
    ac32:	d0 40       	sbci	r29, 0x00	; 0
    ac34:	c3 57       	subi	r28, 0x73	; 115
    ac36:	df 4f       	sbci	r29, 0xFF	; 255
    ac38:	18 82       	st	Y, r1
    ac3a:	19 82       	std	Y+1, r1	; 0x01
    ac3c:	1a 82       	std	Y+2, r1	; 0x02
    ac3e:	1b 82       	std	Y+3, r1	; 0x03
    ac40:	cd 58       	subi	r28, 0x8D	; 141
    ac42:	d0 40       	sbci	r29, 0x00	; 0
    ac44:	c8 cf       	rjmp	.-112    	; 0xabd6 <main+0x12d4>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    ac46:	be 01       	movw	r22, r28
    ac48:	63 57       	subi	r22, 0x73	; 115
    ac4a:	7f 4f       	sbci	r23, 0xFF	; 255
    ac4c:	ce 01       	movw	r24, r28
    ac4e:	87 56       	subi	r24, 0x67	; 103
    ac50:	9f 4f       	sbci	r25, 0xFF	; 255
    ac52:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    ac56:	88 23       	and	r24, r24
    ac58:	11 f4       	brne	.+4      	; 0xac5e <main+0x135c>
    ac5a:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
    ac5e:	be 01       	movw	r22, r28
    ac60:	67 57       	subi	r22, 0x77	; 119
    ac62:	7f 4f       	sbci	r23, 0xFF	; 255
    ac64:	ce 01       	movw	r24, r28
    ac66:	87 56       	subi	r24, 0x67	; 103
    ac68:	9f 4f       	sbci	r25, 0xFF	; 255
    ac6a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    ac6e:	88 23       	and	r24, r24
    ac70:	11 f4       	brne	.+4      	; 0xac76 <main+0x1374>
    ac72:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
				memset(Buff, (BYTE)p2, blen);
    ac76:	c7 57       	subi	r28, 0x77	; 119
    ac78:	df 4f       	sbci	r29, 0xFF	; 255
    ac7a:	68 81       	ld	r22, Y
    ac7c:	c9 58       	subi	r28, 0x89	; 137
    ac7e:	d0 40       	sbci	r29, 0x00	; 0
    ac80:	70 e0       	ldi	r23, 0x00	; 0
    ac82:	a6 01       	movw	r20, r12
    ac84:	83 e5       	ldi	r24, 0x53	; 83
    ac86:	9c e0       	ldi	r25, 0x0C	; 12
    ac88:	0e 94 ca 5a 	call	0xb594	; 0xb594 <memset>
				p2 = 0;
    ac8c:	c7 57       	subi	r28, 0x77	; 119
    ac8e:	df 4f       	sbci	r29, 0xFF	; 255
    ac90:	18 82       	st	Y, r1
    ac92:	19 82       	std	Y+1, r1	; 0x01
    ac94:	1a 82       	std	Y+2, r1	; 0x02
    ac96:	1b 82       	std	Y+3, r1	; 0x03
    ac98:	c9 58       	subi	r28, 0x89	; 137
    ac9a:	d0 40       	sbci	r29, 0x00	; 0
				cli(); Timer = 0; sei();
    ac9c:	f8 94       	cli
    ac9e:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <Timer+0x1>
    aca2:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <Timer>
    aca6:	78 94       	sei
					if (p1 >= blen)	{ cnt = blen; p1 -= blen; }
    aca8:	26 01       	movw	r4, r12
    acaa:	71 2c       	mov	r7, r1
    acac:	61 2c       	mov	r6, r1
				while (p1) {
    acae:	c3 57       	subi	r28, 0x73	; 115
    acb0:	df 4f       	sbci	r29, 0xFF	; 255
    acb2:	88 81       	ld	r24, Y
    acb4:	99 81       	ldd	r25, Y+1	; 0x01
    acb6:	aa 81       	ldd	r26, Y+2	; 0x02
    acb8:	bb 81       	ldd	r27, Y+3	; 0x03
    acba:	cd 58       	subi	r28, 0x8D	; 141
    acbc:	d0 40       	sbci	r29, 0x00	; 0
    acbe:	00 97       	sbiw	r24, 0x00	; 0
    acc0:	a1 05       	cpc	r26, r1
    acc2:	b1 05       	cpc	r27, r1
    acc4:	61 f1       	breq	.+88     	; 0xad1e <main+0x141c>
					if (p1 >= blen)	{ cnt = blen; p1 -= blen; }
    acc6:	84 15       	cp	r24, r4
    acc8:	95 05       	cpc	r25, r5
    acca:	a6 05       	cpc	r26, r6
    accc:	b7 05       	cpc	r27, r7
    acce:	0c f4       	brge	.+2      	; 0xacd2 <main+0x13d0>
    acd0:	73 c0       	rjmp	.+230    	; 0xadb8 <main+0x14b6>
    acd2:	cd 56       	subi	r28, 0x6D	; 109
    acd4:	df 4f       	sbci	r29, 0xFF	; 255
    acd6:	d9 82       	std	Y+1, r13	; 0x01
    acd8:	c8 82       	st	Y, r12
    acda:	c3 59       	subi	r28, 0x93	; 147
    acdc:	d0 40       	sbci	r29, 0x00	; 0
    acde:	84 19       	sub	r24, r4
    ace0:	95 09       	sbc	r25, r5
    ace2:	a6 09       	sbc	r26, r6
    ace4:	b7 09       	sbc	r27, r7
    ace6:	c3 57       	subi	r28, 0x73	; 115
    ace8:	df 4f       	sbci	r29, 0xFF	; 255
    acea:	88 83       	st	Y, r24
    acec:	99 83       	std	Y+1, r25	; 0x01
    acee:	aa 83       	std	Y+2, r26	; 0x02
    acf0:	bb 83       	std	Y+3, r27	; 0x03
    acf2:	cd 58       	subi	r28, 0x8D	; 141
    acf4:	d0 40       	sbci	r29, 0x00	; 0
					fr = f_write(&File[0], Buff, cnt, &s2);
    acf6:	cd 56       	subi	r28, 0x6D	; 109
    acf8:	df 4f       	sbci	r29, 0xFF	; 255
    acfa:	48 81       	ld	r20, Y
    acfc:	59 81       	ldd	r21, Y+1	; 0x01
    acfe:	c3 59       	subi	r28, 0x93	; 147
    ad00:	d0 40       	sbci	r29, 0x00	; 0
    ad02:	9e 01       	movw	r18, r28
    ad04:	2b 56       	subi	r18, 0x6B	; 107
    ad06:	3f 4f       	sbci	r19, 0xFF	; 255
    ad08:	63 e5       	ldi	r22, 0x53	; 83
    ad0a:	7c e0       	ldi	r23, 0x0C	; 12
    ad0c:	89 e4       	ldi	r24, 0x49	; 73
    ad0e:	93 e0       	ldi	r25, 0x03	; 3
    ad10:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <f_write>
					if (fr != FR_OK) {
    ad14:	00 97       	sbiw	r24, 0x00	; 0
    ad16:	09 f4       	brne	.+2      	; 0xad1a <main+0x1418>
    ad18:	5e c0       	rjmp	.+188    	; 0xadd6 <main+0x14d4>
						put_rc(fr); break;
    ad1a:	0e 94 b3 08 	call	0x1166	; 0x1166 <put_rc>
				cli(); s2 = Timer; sei();
    ad1e:	f8 94       	cli
    ad20:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <Timer>
    ad24:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <Timer+0x1>
    ad28:	cb 56       	subi	r28, 0x6B	; 107
    ad2a:	df 4f       	sbci	r29, 0xFF	; 255
    ad2c:	99 83       	std	Y+1, r25	; 0x01
    ad2e:	88 83       	st	Y, r24
    ad30:	c5 59       	subi	r28, 0x95	; 149
    ad32:	d0 40       	sbci	r29, 0x00	; 0
    ad34:	78 94       	sei
				xprintf(PSTR("%lu bytes written at %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    ad36:	cb 56       	subi	r28, 0x6B	; 107
    ad38:	df 4f       	sbci	r29, 0xFF	; 255
    ad3a:	e8 81       	ld	r30, Y
    ad3c:	f9 81       	ldd	r31, Y+1	; 0x01
    ad3e:	c5 59       	subi	r28, 0x95	; 149
    ad40:	d0 40       	sbci	r29, 0x00	; 0
    ad42:	30 97       	sbiw	r30, 0x00	; 0
    ad44:	09 f4       	brne	.+2      	; 0xad48 <main+0x1446>
    ad46:	6c c0       	rjmp	.+216    	; 0xae20 <main+0x151e>
    ad48:	c7 57       	subi	r28, 0x77	; 119
    ad4a:	df 4f       	sbci	r29, 0xFF	; 255
    ad4c:	28 81       	ld	r18, Y
    ad4e:	39 81       	ldd	r19, Y+1	; 0x01
    ad50:	4a 81       	ldd	r20, Y+2	; 0x02
    ad52:	5b 81       	ldd	r21, Y+3	; 0x03
    ad54:	c9 58       	subi	r28, 0x89	; 137
    ad56:	d0 40       	sbci	r29, 0x00	; 0
    ad58:	a4 e6       	ldi	r26, 0x64	; 100
    ad5a:	b0 e0       	ldi	r27, 0x00	; 0
    ad5c:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    ad60:	c4 56       	subi	r28, 0x64	; 100
    ad62:	df 4f       	sbci	r29, 0xFF	; 255
    ad64:	68 83       	st	Y, r22
    ad66:	79 83       	std	Y+1, r23	; 0x01
    ad68:	8a 83       	std	Y+2, r24	; 0x02
    ad6a:	9b 83       	std	Y+3, r25	; 0x03
    ad6c:	cc 59       	subi	r28, 0x9C	; 156
    ad6e:	d0 40       	sbci	r29, 0x00	; 0
    ad70:	9f 01       	movw	r18, r30
    ad72:	50 e0       	ldi	r21, 0x00	; 0
    ad74:	40 e0       	ldi	r20, 0x00	; 0
    ad76:	0e 94 a2 59 	call	0xb344	; 0xb344 <__divmodsi4>
    ad7a:	5f 93       	push	r21
    ad7c:	4f 93       	push	r20
    ad7e:	3f 93       	push	r19
    ad80:	2f 93       	push	r18
    ad82:	c4 57       	subi	r28, 0x74	; 116
    ad84:	df 4f       	sbci	r29, 0xFF	; 255
    ad86:	88 81       	ld	r24, Y
    ad88:	cc 58       	subi	r28, 0x8C	; 140
    ad8a:	d0 40       	sbci	r29, 0x00	; 0
    ad8c:	8f 93       	push	r24
    ad8e:	c5 57       	subi	r28, 0x75	; 117
    ad90:	df 4f       	sbci	r29, 0xFF	; 255
    ad92:	88 81       	ld	r24, Y
    ad94:	cb 58       	subi	r28, 0x8B	; 139
    ad96:	d0 40       	sbci	r29, 0x00	; 0
    ad98:	8f 93       	push	r24
    ad9a:	c6 57       	subi	r28, 0x76	; 118
    ad9c:	df 4f       	sbci	r29, 0xFF	; 255
    ad9e:	88 81       	ld	r24, Y
    ada0:	ca 58       	subi	r28, 0x8A	; 138
    ada2:	d0 40       	sbci	r29, 0x00	; 0
    ada4:	8f 93       	push	r24
    ada6:	c7 57       	subi	r28, 0x77	; 119
    ada8:	df 4f       	sbci	r29, 0xFF	; 255
    adaa:	88 81       	ld	r24, Y
    adac:	c9 58       	subi	r28, 0x89	; 137
    adae:	d0 40       	sbci	r29, 0x00	; 0
    adb0:	8f 93       	push	r24
    adb2:	8b e9       	ldi	r24, 0x9B	; 155
    adb4:	97 e0       	ldi	r25, 0x07	; 7
    adb6:	f6 cd       	rjmp	.-1044   	; 0xa9a4 <main+0x10a2>
					else 			{ cnt = (WORD)p1; p1 = 0; }
    adb8:	cd 56       	subi	r28, 0x6D	; 109
    adba:	df 4f       	sbci	r29, 0xFF	; 255
    adbc:	99 83       	std	Y+1, r25	; 0x01
    adbe:	88 83       	st	Y, r24
    adc0:	c3 59       	subi	r28, 0x93	; 147
    adc2:	d0 40       	sbci	r29, 0x00	; 0
    adc4:	c3 57       	subi	r28, 0x73	; 115
    adc6:	df 4f       	sbci	r29, 0xFF	; 255
    adc8:	18 82       	st	Y, r1
    adca:	19 82       	std	Y+1, r1	; 0x01
    adcc:	1a 82       	std	Y+2, r1	; 0x02
    adce:	1b 82       	std	Y+3, r1	; 0x03
    add0:	cd 58       	subi	r28, 0x8D	; 141
    add2:	d0 40       	sbci	r29, 0x00	; 0
    add4:	90 cf       	rjmp	.-224    	; 0xacf6 <main+0x13f4>
					p2 += s2;
    add6:	cb 56       	subi	r28, 0x6B	; 107
    add8:	df 4f       	sbci	r29, 0xFF	; 255
    adda:	28 81       	ld	r18, Y
    addc:	39 81       	ldd	r19, Y+1	; 0x01
    adde:	c5 59       	subi	r28, 0x95	; 149
    ade0:	d0 40       	sbci	r29, 0x00	; 0
    ade2:	c7 57       	subi	r28, 0x77	; 119
    ade4:	df 4f       	sbci	r29, 0xFF	; 255
    ade6:	88 81       	ld	r24, Y
    ade8:	99 81       	ldd	r25, Y+1	; 0x01
    adea:	aa 81       	ldd	r26, Y+2	; 0x02
    adec:	bb 81       	ldd	r27, Y+3	; 0x03
    adee:	c9 58       	subi	r28, 0x89	; 137
    adf0:	d0 40       	sbci	r29, 0x00	; 0
    adf2:	82 0f       	add	r24, r18
    adf4:	93 1f       	adc	r25, r19
    adf6:	a1 1d       	adc	r26, r1
    adf8:	b1 1d       	adc	r27, r1
    adfa:	c7 57       	subi	r28, 0x77	; 119
    adfc:	df 4f       	sbci	r29, 0xFF	; 255
    adfe:	88 83       	st	Y, r24
    ae00:	99 83       	std	Y+1, r25	; 0x01
    ae02:	aa 83       	std	Y+2, r26	; 0x02
    ae04:	bb 83       	std	Y+3, r27	; 0x03
    ae06:	c9 58       	subi	r28, 0x89	; 137
    ae08:	d0 40       	sbci	r29, 0x00	; 0
					if (cnt != s2) break;
    ae0a:	cd 56       	subi	r28, 0x6D	; 109
    ae0c:	df 4f       	sbci	r29, 0xFF	; 255
    ae0e:	88 81       	ld	r24, Y
    ae10:	99 81       	ldd	r25, Y+1	; 0x01
    ae12:	c3 59       	subi	r28, 0x93	; 147
    ae14:	d0 40       	sbci	r29, 0x00	; 0
    ae16:	28 17       	cp	r18, r24
    ae18:	39 07       	cpc	r19, r25
    ae1a:	09 f4       	brne	.+2      	; 0xae1e <main+0x151c>
    ae1c:	48 cf       	rjmp	.-368    	; 0xacae <main+0x13ac>
    ae1e:	7f cf       	rjmp	.-258    	; 0xad1e <main+0x141c>
				xprintf(PSTR("%lu bytes written at %lu bytes/sec.\n"), p2, s2 ? (p2 * 100 / s2) : 0);
    ae20:	20 e0       	ldi	r18, 0x00	; 0
    ae22:	30 e0       	ldi	r19, 0x00	; 0
    ae24:	40 e0       	ldi	r20, 0x00	; 0
    ae26:	50 e0       	ldi	r21, 0x00	; 0
    ae28:	a8 cf       	rjmp	.-176    	; 0xad7a <main+0x1478>
				put_rc(f_truncate(&File[0]));
    ae2a:	89 e4       	ldi	r24, 0x49	; 73
    ae2c:	93 e0       	ldi	r25, 0x03	; 3
    ae2e:	0e 94 45 42 	call	0x848a	; 0x848a <f_truncate>
    ae32:	50 cb       	rjmp	.-2400   	; 0xa4d4 <main+0xbd2>
				while (*ptr == ' ') ptr++;
    ae34:	01 96       	adiw	r24, 0x01	; 1
    ae36:	c7 56       	subi	r28, 0x67	; 103
    ae38:	df 4f       	sbci	r29, 0xFF	; 255
    ae3a:	99 83       	std	Y+1, r25	; 0x01
    ae3c:	88 83       	st	Y, r24
    ae3e:	c9 59       	subi	r28, 0x99	; 153
    ae40:	d0 40       	sbci	r29, 0x00	; 0
    ae42:	c7 56       	subi	r28, 0x67	; 103
    ae44:	df 4f       	sbci	r29, 0xFF	; 255
    ae46:	88 81       	ld	r24, Y
    ae48:	99 81       	ldd	r25, Y+1	; 0x01
    ae4a:	c9 59       	subi	r28, 0x99	; 153
    ae4c:	d0 40       	sbci	r29, 0x00	; 0
    ae4e:	dc 01       	movw	r26, r24
    ae50:	2c 91       	ld	r18, X
    ae52:	20 32       	cpi	r18, 0x20	; 32
    ae54:	79 f3       	breq	.-34     	; 0xae34 <main+0x1532>
				ptr2 = strchr(ptr, ' ');
    ae56:	60 e2       	ldi	r22, 0x20	; 32
    ae58:	70 e0       	ldi	r23, 0x00	; 0
    ae5a:	0e 94 d1 5a 	call	0xb5a2	; 0xb5a2 <strchr>
    ae5e:	fc 01       	movw	r30, r24
				if (!ptr2) break;
    ae60:	89 2b       	or	r24, r25
    ae62:	11 f4       	brne	.+4      	; 0xae68 <main+0x1566>
    ae64:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
				*ptr2++ = 0;
    ae68:	11 92       	st	Z+, r1
				while (*ptr2 == ' ') ptr2++;
    ae6a:	bf 01       	movw	r22, r30
    ae6c:	31 96       	adiw	r30, 0x01	; 1
    ae6e:	db 01       	movw	r26, r22
    ae70:	8c 91       	ld	r24, X
    ae72:	80 32       	cpi	r24, 0x20	; 32
    ae74:	d1 f3       	breq	.-12     	; 0xae6a <main+0x1568>
				put_rc(f_rename(ptr, ptr2));
    ae76:	c7 56       	subi	r28, 0x67	; 103
    ae78:	df 4f       	sbci	r29, 0xFF	; 255
    ae7a:	88 81       	ld	r24, Y
    ae7c:	99 81       	ldd	r25, Y+1	; 0x01
    ae7e:	c9 59       	subi	r28, 0x99	; 153
    ae80:	d0 40       	sbci	r29, 0x00	; 0
    ae82:	0e 94 83 45 	call	0x8b06	; 0x8b06 <f_rename>
    ae86:	26 cb       	rjmp	.-2484   	; 0xa4d4 <main+0xbd2>
				while (*ptr == ' ') ptr++;
    ae88:	01 96       	adiw	r24, 0x01	; 1
    ae8a:	c7 56       	subi	r28, 0x67	; 103
    ae8c:	df 4f       	sbci	r29, 0xFF	; 255
    ae8e:	99 83       	std	Y+1, r25	; 0x01
    ae90:	88 83       	st	Y, r24
    ae92:	c9 59       	subi	r28, 0x99	; 153
    ae94:	d0 40       	sbci	r29, 0x00	; 0
    ae96:	c7 56       	subi	r28, 0x67	; 103
    ae98:	df 4f       	sbci	r29, 0xFF	; 255
    ae9a:	88 81       	ld	r24, Y
    ae9c:	99 81       	ldd	r25, Y+1	; 0x01
    ae9e:	c9 59       	subi	r28, 0x99	; 153
    aea0:	d0 40       	sbci	r29, 0x00	; 0
    aea2:	fc 01       	movw	r30, r24
    aea4:	20 81       	ld	r18, Z
    aea6:	20 32       	cpi	r18, 0x20	; 32
    aea8:	79 f3       	breq	.-34     	; 0xae88 <main+0x1586>
				put_rc(f_unlink(ptr));
    aeaa:	0e 94 02 43 	call	0x8604	; 0x8604 <f_unlink>
    aeae:	12 cb       	rjmp	.-2524   	; 0xa4d4 <main+0xbd2>
				while (*ptr == ' ') ptr++;
    aeb0:	01 96       	adiw	r24, 0x01	; 1
    aeb2:	c7 56       	subi	r28, 0x67	; 103
    aeb4:	df 4f       	sbci	r29, 0xFF	; 255
    aeb6:	99 83       	std	Y+1, r25	; 0x01
    aeb8:	88 83       	st	Y, r24
    aeba:	c9 59       	subi	r28, 0x99	; 153
    aebc:	d0 40       	sbci	r29, 0x00	; 0
    aebe:	c7 56       	subi	r28, 0x67	; 103
    aec0:	df 4f       	sbci	r29, 0xFF	; 255
    aec2:	88 81       	ld	r24, Y
    aec4:	99 81       	ldd	r25, Y+1	; 0x01
    aec6:	c9 59       	subi	r28, 0x99	; 153
    aec8:	d0 40       	sbci	r29, 0x00	; 0
    aeca:	dc 01       	movw	r26, r24
    aecc:	2c 91       	ld	r18, X
    aece:	20 32       	cpi	r18, 0x20	; 32
    aed0:	79 f3       	breq	.-34     	; 0xaeb0 <main+0x15ae>
				put_rc(f_mkdir(ptr));
    aed2:	0e 94 06 44 	call	0x880c	; 0x880c <f_mkdir>
    aed6:	fe ca       	rjmp	.-2564   	; 0xa4d4 <main+0xbd2>
				if (!xatoi(&ptr, &p1) || !xatoi(&ptr, &p2)) break;
    aed8:	be 01       	movw	r22, r28
    aeda:	63 57       	subi	r22, 0x73	; 115
    aedc:	7f 4f       	sbci	r23, 0xFF	; 255
    aede:	ce 01       	movw	r24, r28
    aee0:	87 56       	subi	r24, 0x67	; 103
    aee2:	9f 4f       	sbci	r25, 0xFF	; 255
    aee4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    aee8:	88 23       	and	r24, r24
    aeea:	11 f4       	brne	.+4      	; 0xaef0 <main+0x15ee>
    aeec:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
    aef0:	be 01       	movw	r22, r28
    aef2:	67 57       	subi	r22, 0x77	; 119
    aef4:	7f 4f       	sbci	r23, 0xFF	; 255
    aef6:	ce 01       	movw	r24, r28
    aef8:	87 56       	subi	r24, 0x67	; 103
    aefa:	9f 4f       	sbci	r25, 0xFF	; 255
    aefc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xatoi>
    af00:	88 23       	and	r24, r24
    af02:	11 f4       	brne	.+4      	; 0xaf08 <main+0x1606>
    af04:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
				fr = f_expand(&File[0], (DWORD)p1, (BYTE)p2);
    af08:	c3 57       	subi	r28, 0x73	; 115
    af0a:	df 4f       	sbci	r29, 0xFF	; 255
    af0c:	48 81       	ld	r20, Y
    af0e:	59 81       	ldd	r21, Y+1	; 0x01
    af10:	6a 81       	ldd	r22, Y+2	; 0x02
    af12:	7b 81       	ldd	r23, Y+3	; 0x03
    af14:	cd 58       	subi	r28, 0x8D	; 141
    af16:	d0 40       	sbci	r29, 0x00	; 0
    af18:	c7 57       	subi	r28, 0x77	; 119
    af1a:	df 4f       	sbci	r29, 0xFF	; 255
    af1c:	e8 80       	ld	r14, Y
    af1e:	c9 58       	subi	r28, 0x89	; 137
    af20:	d0 40       	sbci	r29, 0x00	; 0
    af22:	8a 01       	movw	r16, r20
    af24:	9b 01       	movw	r18, r22
    af26:	40 e0       	ldi	r20, 0x00	; 0
    af28:	50 e0       	ldi	r21, 0x00	; 0
    af2a:	60 e0       	ldi	r22, 0x00	; 0
    af2c:	70 e0       	ldi	r23, 0x00	; 0
    af2e:	89 e4       	ldi	r24, 0x49	; 73
    af30:	93 e0       	ldi	r25, 0x03	; 3
    af32:	0e 94 b6 49 	call	0x936c	; 0x936c <f_expand>
    af36:	ce ca       	rjmp	.-2660   	; 0xa4d4 <main+0xbd2>
				while (*ptr == ' ') ptr++;
    af38:	01 96       	adiw	r24, 0x01	; 1
    af3a:	c7 56       	subi	r28, 0x67	; 103
    af3c:	df 4f       	sbci	r29, 0xFF	; 255
    af3e:	99 83       	std	Y+1, r25	; 0x01
    af40:	88 83       	st	Y, r24
    af42:	c9 59       	subi	r28, 0x99	; 153
    af44:	d0 40       	sbci	r29, 0x00	; 0
    af46:	c7 56       	subi	r28, 0x67	; 103
    af48:	df 4f       	sbci	r29, 0xFF	; 255
    af4a:	88 81       	ld	r24, Y
    af4c:	99 81       	ldd	r25, Y+1	; 0x01
    af4e:	c9 59       	subi	r28, 0x99	; 153
    af50:	d0 40       	sbci	r29, 0x00	; 0
    af52:	fc 01       	movw	r30, r24
    af54:	20 81       	ld	r18, Z
    af56:	20 32       	cpi	r18, 0x20	; 32
    af58:	79 f3       	breq	.-34     	; 0xaf38 <main+0x1636>
				ptr2 = strchr(ptr, ' ');
    af5a:	60 e2       	ldi	r22, 0x20	; 32
    af5c:	70 e0       	ldi	r23, 0x00	; 0
    af5e:	0e 94 d1 5a 	call	0xb5a2	; 0xb5a2 <strchr>
    af62:	fc 01       	movw	r30, r24
				if (!ptr2) break;
    af64:	89 2b       	or	r24, r25
    af66:	11 f4       	brne	.+4      	; 0xaf6c <main+0x166a>
    af68:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
				*ptr2++ = 0;
    af6c:	11 92       	st	Z+, r1
				while (*ptr2 == ' ') ptr2++;
    af6e:	8f 01       	movw	r16, r30
    af70:	31 96       	adiw	r30, 0x01	; 1
    af72:	d8 01       	movw	r26, r16
    af74:	8c 91       	ld	r24, X
    af76:	80 32       	cpi	r24, 0x20	; 32
    af78:	d1 f3       	breq	.-12     	; 0xaf6e <main+0x166c>
				xprintf(PSTR("Opening \"%s\""), ptr);
    af7a:	c6 56       	subi	r28, 0x66	; 102
    af7c:	df 4f       	sbci	r29, 0xFF	; 255
    af7e:	88 81       	ld	r24, Y
    af80:	ca 59       	subi	r28, 0x9A	; 154
    af82:	d0 40       	sbci	r29, 0x00	; 0
    af84:	8f 93       	push	r24
    af86:	c7 56       	subi	r28, 0x67	; 103
    af88:	df 4f       	sbci	r29, 0xFF	; 255
    af8a:	88 81       	ld	r24, Y
    af8c:	c9 59       	subi	r28, 0x99	; 153
    af8e:	d0 40       	sbci	r29, 0x00	; 0
    af90:	8f 93       	push	r24
    af92:	8e e8       	ldi	r24, 0x8E	; 142
    af94:	97 e0       	ldi	r25, 0x07	; 7
    af96:	9f 93       	push	r25
    af98:	8f 93       	push	r24
    af9a:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				fr = f_open(&File[0], ptr, FA_OPEN_EXISTING | FA_READ);
    af9e:	c7 56       	subi	r28, 0x67	; 103
    afa0:	df 4f       	sbci	r29, 0xFF	; 255
    afa2:	68 81       	ld	r22, Y
    afa4:	79 81       	ldd	r23, Y+1	; 0x01
    afa6:	c9 59       	subi	r28, 0x99	; 153
    afa8:	d0 40       	sbci	r29, 0x00	; 0
    afaa:	41 e0       	ldi	r20, 0x01	; 1
    afac:	89 e4       	ldi	r24, 0x49	; 73
    afae:	93 e0       	ldi	r25, 0x03	; 3
    afb0:	0e 94 12 31 	call	0x6224	; 0x6224 <f_open>
				if (fr) {
    afb4:	0f 90       	pop	r0
    afb6:	0f 90       	pop	r0
    afb8:	0f 90       	pop	r0
    afba:	0f 90       	pop	r0
    afbc:	00 97       	sbiw	r24, 0x00	; 0
    afbe:	09 f0       	breq	.+2      	; 0xafc2 <main+0x16c0>
    afc0:	89 ca       	rjmp	.-2798   	; 0xa4d4 <main+0xbd2>
				xprintf(PSTR("\nCreating \"%s\""), ptr2);
    afc2:	1f 93       	push	r17
    afc4:	0f 93       	push	r16
    afc6:	8f e7       	ldi	r24, 0x7F	; 127
    afc8:	97 e0       	ldi	r25, 0x07	; 7
    afca:	9f 93       	push	r25
    afcc:	8f 93       	push	r24
    afce:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				fr = f_open(&File[1], ptr2, FA_CREATE_ALWAYS | FA_WRITE);
    afd2:	4a e0       	ldi	r20, 0x0A	; 10
    afd4:	b8 01       	movw	r22, r16
    afd6:	87 e8       	ldi	r24, 0x87	; 135
    afd8:	95 e0       	ldi	r25, 0x05	; 5
    afda:	0e 94 12 31 	call	0x6224	; 0x6224 <f_open>
				if (fr) {
    afde:	0f 90       	pop	r0
    afe0:	0f 90       	pop	r0
    afe2:	0f 90       	pop	r0
    afe4:	0f 90       	pop	r0
    afe6:	00 97       	sbiw	r24, 0x00	; 0
    afe8:	41 f0       	breq	.+16     	; 0xaffa <main+0x16f8>
					put_rc(fr);
    afea:	0e 94 b3 08 	call	0x1166	; 0x1166 <put_rc>
					f_close(&File[0]);
    afee:	89 e4       	ldi	r24, 0x49	; 73
    aff0:	93 e0       	ldi	r25, 0x03	; 3
    aff2:	0e 94 09 3a 	call	0x7412	; 0x7412 <f_close>
					break;
    aff6:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
				xprintf(PSTR("\nCopying..."));
    affa:	83 e7       	ldi	r24, 0x73	; 115
    affc:	97 e0       	ldi	r25, 0x07	; 7
    affe:	9f 93       	push	r25
    b000:	8f 93       	push	r24
    b002:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				cli(); Timer = 0; sei();
    b006:	f8 94       	cli
    b008:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <Timer+0x1>
    b00c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <Timer>
    b010:	78 94       	sei
				p1 = 0;
    b012:	c3 57       	subi	r28, 0x73	; 115
    b014:	df 4f       	sbci	r29, 0xFF	; 255
    b016:	18 82       	st	Y, r1
    b018:	19 82       	std	Y+1, r1	; 0x01
    b01a:	1a 82       	std	Y+2, r1	; 0x02
    b01c:	1b 82       	std	Y+3, r1	; 0x03
    b01e:	cd 58       	subi	r28, 0x8D	; 141
    b020:	d0 40       	sbci	r29, 0x00	; 0
    b022:	0f 90       	pop	r0
    b024:	0f 90       	pop	r0
					fr = f_read(&File[0], Buff, sizeof Buff, &s1);
    b026:	9e 01       	movw	r18, r28
    b028:	29 56       	subi	r18, 0x69	; 105
    b02a:	3f 4f       	sbci	r19, 0xFF	; 255
    b02c:	40 e0       	ldi	r20, 0x00	; 0
    b02e:	50 e1       	ldi	r21, 0x10	; 16
    b030:	63 e5       	ldi	r22, 0x53	; 83
    b032:	7c e0       	ldi	r23, 0x0C	; 12
    b034:	89 e4       	ldi	r24, 0x49	; 73
    b036:	93 e0       	ldi	r25, 0x03	; 3
    b038:	0e 94 a0 34 	call	0x6940	; 0x6940 <f_read>
    b03c:	9c 01       	movw	r18, r24
					if (fr || s1 == 0) break;   /* error or eof */
    b03e:	89 2b       	or	r24, r25
    b040:	09 f0       	breq	.+2      	; 0xb044 <main+0x1742>
    b042:	3a c1       	rjmp	.+628    	; 0xb2b8 <main+0x19b6>
    b044:	c9 56       	subi	r28, 0x69	; 105
    b046:	df 4f       	sbci	r29, 0xFF	; 255
    b048:	48 81       	ld	r20, Y
    b04a:	59 81       	ldd	r21, Y+1	; 0x01
    b04c:	c7 59       	subi	r28, 0x97	; 151
    b04e:	d0 40       	sbci	r29, 0x00	; 0
    b050:	41 15       	cp	r20, r1
    b052:	51 05       	cpc	r21, r1
    b054:	91 f1       	breq	.+100    	; 0xb0ba <main+0x17b8>
					fr = f_write(&File[1], Buff, s1, &s2);
    b056:	9e 01       	movw	r18, r28
    b058:	2b 56       	subi	r18, 0x6B	; 107
    b05a:	3f 4f       	sbci	r19, 0xFF	; 255
    b05c:	63 e5       	ldi	r22, 0x53	; 83
    b05e:	7c e0       	ldi	r23, 0x0C	; 12
    b060:	87 e8       	ldi	r24, 0x87	; 135
    b062:	95 e0       	ldi	r25, 0x05	; 5
    b064:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <f_write>
    b068:	9c 01       	movw	r18, r24
					p1 += s2;
    b06a:	cb 56       	subi	r28, 0x6B	; 107
    b06c:	df 4f       	sbci	r29, 0xFF	; 255
    b06e:	48 81       	ld	r20, Y
    b070:	59 81       	ldd	r21, Y+1	; 0x01
    b072:	c5 59       	subi	r28, 0x95	; 149
    b074:	d0 40       	sbci	r29, 0x00	; 0
    b076:	c3 57       	subi	r28, 0x73	; 115
    b078:	df 4f       	sbci	r29, 0xFF	; 255
    b07a:	88 81       	ld	r24, Y
    b07c:	99 81       	ldd	r25, Y+1	; 0x01
    b07e:	aa 81       	ldd	r26, Y+2	; 0x02
    b080:	bb 81       	ldd	r27, Y+3	; 0x03
    b082:	cd 58       	subi	r28, 0x8D	; 141
    b084:	d0 40       	sbci	r29, 0x00	; 0
    b086:	84 0f       	add	r24, r20
    b088:	95 1f       	adc	r25, r21
    b08a:	a1 1d       	adc	r26, r1
    b08c:	b1 1d       	adc	r27, r1
    b08e:	c3 57       	subi	r28, 0x73	; 115
    b090:	df 4f       	sbci	r29, 0xFF	; 255
    b092:	88 83       	st	Y, r24
    b094:	99 83       	std	Y+1, r25	; 0x01
    b096:	aa 83       	std	Y+2, r26	; 0x02
    b098:	bb 83       	std	Y+3, r27	; 0x03
    b09a:	cd 58       	subi	r28, 0x8D	; 141
    b09c:	d0 40       	sbci	r29, 0x00	; 0
					if (fr || s2 < s1) break;   /* error or disk full */
    b09e:	21 15       	cp	r18, r1
    b0a0:	31 05       	cpc	r19, r1
    b0a2:	09 f0       	breq	.+2      	; 0xb0a6 <main+0x17a4>
    b0a4:	09 c1       	rjmp	.+530    	; 0xb2b8 <main+0x19b6>
    b0a6:	c9 56       	subi	r28, 0x69	; 105
    b0a8:	df 4f       	sbci	r29, 0xFF	; 255
    b0aa:	88 81       	ld	r24, Y
    b0ac:	99 81       	ldd	r25, Y+1	; 0x01
    b0ae:	c7 59       	subi	r28, 0x97	; 151
    b0b0:	d0 40       	sbci	r29, 0x00	; 0
    b0b2:	48 17       	cp	r20, r24
    b0b4:	59 07       	cpc	r21, r25
    b0b6:	08 f0       	brcs	.+2      	; 0xb0ba <main+0x17b8>
    b0b8:	b6 cf       	rjmp	.-148    	; 0xb026 <main+0x1724>
				cli(); s2 = Timer; sei();
    b0ba:	f8 94       	cli
    b0bc:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <Timer>
    b0c0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <Timer+0x1>
    b0c4:	cb 56       	subi	r28, 0x6B	; 107
    b0c6:	df 4f       	sbci	r29, 0xFF	; 255
    b0c8:	99 83       	std	Y+1, r25	; 0x01
    b0ca:	88 83       	st	Y, r24
    b0cc:	c5 59       	subi	r28, 0x95	; 149
    b0ce:	d0 40       	sbci	r29, 0x00	; 0
    b0d0:	78 94       	sei
				xprintf(PSTR("\n%lu bytes copied at %lu bytes/sec.\n"), p1, p1 * 100 / s2);
    b0d2:	c3 57       	subi	r28, 0x73	; 115
    b0d4:	df 4f       	sbci	r29, 0xFF	; 255
    b0d6:	18 81       	ld	r17, Y
    b0d8:	cd 58       	subi	r28, 0x8D	; 141
    b0da:	d0 40       	sbci	r29, 0x00	; 0
    b0dc:	c2 57       	subi	r28, 0x72	; 114
    b0de:	df 4f       	sbci	r29, 0xFF	; 255
    b0e0:	08 81       	ld	r16, Y
    b0e2:	ce 58       	subi	r28, 0x8E	; 142
    b0e4:	d0 40       	sbci	r29, 0x00	; 0
    b0e6:	c1 57       	subi	r28, 0x71	; 113
    b0e8:	df 4f       	sbci	r29, 0xFF	; 255
    b0ea:	f8 80       	ld	r15, Y
    b0ec:	cf 58       	subi	r28, 0x8F	; 143
    b0ee:	d0 40       	sbci	r29, 0x00	; 0
    b0f0:	c0 57       	subi	r28, 0x70	; 112
    b0f2:	df 4f       	sbci	r29, 0xFF	; 255
    b0f4:	e8 80       	ld	r14, Y
    b0f6:	c0 59       	subi	r28, 0x90	; 144
    b0f8:	d0 40       	sbci	r29, 0x00	; 0
    b0fa:	a4 e6       	ldi	r26, 0x64	; 100
    b0fc:	b0 e0       	ldi	r27, 0x00	; 0
    b0fe:	21 2f       	mov	r18, r17
    b100:	30 2f       	mov	r19, r16
    b102:	4f 2d       	mov	r20, r15
    b104:	5e 2d       	mov	r21, r14
    b106:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    b10a:	c4 56       	subi	r28, 0x64	; 100
    b10c:	df 4f       	sbci	r29, 0xFF	; 255
    b10e:	68 83       	st	Y, r22
    b110:	79 83       	std	Y+1, r23	; 0x01
    b112:	8a 83       	std	Y+2, r24	; 0x02
    b114:	9b 83       	std	Y+3, r25	; 0x03
    b116:	cc 59       	subi	r28, 0x9C	; 156
    b118:	d0 40       	sbci	r29, 0x00	; 0
    b11a:	cb 56       	subi	r28, 0x6B	; 107
    b11c:	df 4f       	sbci	r29, 0xFF	; 255
    b11e:	28 81       	ld	r18, Y
    b120:	39 81       	ldd	r19, Y+1	; 0x01
    b122:	c5 59       	subi	r28, 0x95	; 149
    b124:	d0 40       	sbci	r29, 0x00	; 0
    b126:	50 e0       	ldi	r21, 0x00	; 0
    b128:	40 e0       	ldi	r20, 0x00	; 0
    b12a:	0e 94 a2 59 	call	0xb344	; 0xb344 <__divmodsi4>
    b12e:	5f 93       	push	r21
    b130:	4f 93       	push	r20
    b132:	3f 93       	push	r19
    b134:	2f 93       	push	r18
    b136:	ef 92       	push	r14
    b138:	ff 92       	push	r15
    b13a:	0f 93       	push	r16
    b13c:	1f 93       	push	r17
    b13e:	8e e4       	ldi	r24, 0x4E	; 78
    b140:	97 e0       	ldi	r25, 0x07	; 7
    b142:	9f 93       	push	r25
    b144:	8f 93       	push	r24
    b146:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
				f_close(&File[0]);
    b14a:	89 e4       	ldi	r24, 0x49	; 73
    b14c:	93 e0       	ldi	r25, 0x03	; 3
    b14e:	0e 94 09 3a 	call	0x7412	; 0x7412 <f_close>
				f_close(&File[1]);
    b152:	87 e8       	ldi	r24, 0x87	; 135
    b154:	95 e0       	ldi	r25, 0x05	; 5
    b156:	0e 94 09 3a 	call	0x7412	; 0x7412 <f_close>
				break;
    b15a:	d4 ca       	rjmp	.-2648   	; 0xa704 <main+0xe02>
				while (*ptr == ' ') ptr++;
    b15c:	01 96       	adiw	r24, 0x01	; 1
    b15e:	c7 56       	subi	r28, 0x67	; 103
    b160:	df 4f       	sbci	r29, 0xFF	; 255
    b162:	99 83       	std	Y+1, r25	; 0x01
    b164:	88 83       	st	Y, r24
    b166:	c9 59       	subi	r28, 0x99	; 153
    b168:	d0 40       	sbci	r29, 0x00	; 0
    b16a:	c7 56       	subi	r28, 0x67	; 103
    b16c:	df 4f       	sbci	r29, 0xFF	; 255
    b16e:	88 81       	ld	r24, Y
    b170:	99 81       	ldd	r25, Y+1	; 0x01
    b172:	c9 59       	subi	r28, 0x99	; 153
    b174:	d0 40       	sbci	r29, 0x00	; 0
    b176:	dc 01       	movw	r26, r24
    b178:	2c 91       	ld	r18, X
    b17a:	20 32       	cpi	r18, 0x20	; 32
    b17c:	79 f3       	breq	.-34     	; 0xb15c <main+0x185a>
				put_rc(f_chdir(ptr));
    b17e:	0e 94 3f 3a 	call	0x747e	; 0x747e <f_chdir>
    b182:	a8 c9       	rjmp	.-3248   	; 0xa4d4 <main+0xbd2>
				fr = f_getcwd(line, sizeof line);
    b184:	68 e7       	ldi	r22, 0x78	; 120
    b186:	70 e0       	ldi	r23, 0x00	; 0
    b188:	c8 01       	movw	r24, r16
    b18a:	0e 94 db 3a 	call	0x75b6	; 0x75b6 <f_getcwd>
				if (fr) {
    b18e:	00 97       	sbiw	r24, 0x00	; 0
    b190:	09 f0       	breq	.+2      	; 0xb194 <main+0x1892>
    b192:	a0 c9       	rjmp	.-3264   	; 0xa4d4 <main+0xbd2>
					xprintf(PSTR("%s\n"), line);
    b194:	1f 93       	push	r17
    b196:	0f 93       	push	r16
    b198:	8a e4       	ldi	r24, 0x4A	; 74
    b19a:	97 e0       	ldi	r25, 0x07	; 7
    b19c:	0c 94 48 4e 	jmp	0x9c90	; 0x9c90 <main+0x38e>
				while (*ptr == ' ') ptr++;
    b1a0:	01 96       	adiw	r24, 0x01	; 1
    b1a2:	c7 56       	subi	r28, 0x67	; 103
    b1a4:	df 4f       	sbci	r29, 0xFF	; 255
    b1a6:	99 83       	std	Y+1, r25	; 0x01
    b1a8:	88 83       	st	Y, r24
    b1aa:	c9 59       	subi	r28, 0x99	; 153
    b1ac:	d0 40       	sbci	r29, 0x00	; 0
    b1ae:	c7 56       	subi	r28, 0x67	; 103
    b1b0:	df 4f       	sbci	r29, 0xFF	; 255
    b1b2:	88 81       	ld	r24, Y
    b1b4:	99 81       	ldd	r25, Y+1	; 0x01
    b1b6:	c9 59       	subi	r28, 0x99	; 153
    b1b8:	d0 40       	sbci	r29, 0x00	; 0
    b1ba:	fc 01       	movw	r30, r24
    b1bc:	20 81       	ld	r18, Z
    b1be:	20 32       	cpi	r18, 0x20	; 32
    b1c0:	79 f3       	breq	.-34     	; 0xb1a0 <main+0x189e>
				put_rc(f_setlabel(ptr));
    b1c2:	0e 94 1a 48 	call	0x9034	; 0x9034 <f_setlabel>
    b1c6:	86 c9       	rjmp	.-3316   	; 0xa4d4 <main+0xbd2>
					xprintf(PSTR("%4u File(s),%10lu bytes total\n%4u Dir(s)"), s1, p1, s2);
    b1c8:	ca 56       	subi	r28, 0x6A	; 106
    b1ca:	df 4f       	sbci	r29, 0xFF	; 255
    b1cc:	88 81       	ld	r24, Y
    b1ce:	c6 59       	subi	r28, 0x96	; 150
    b1d0:	d0 40       	sbci	r29, 0x00	; 0
    b1d2:	8f 93       	push	r24
    b1d4:	cb 56       	subi	r28, 0x6B	; 107
    b1d6:	df 4f       	sbci	r29, 0xFF	; 255
    b1d8:	88 81       	ld	r24, Y
    b1da:	c5 59       	subi	r28, 0x95	; 149
    b1dc:	d0 40       	sbci	r29, 0x00	; 0
    b1de:	8f 93       	push	r24
    b1e0:	c0 57       	subi	r28, 0x70	; 112
    b1e2:	df 4f       	sbci	r29, 0xFF	; 255
    b1e4:	88 81       	ld	r24, Y
    b1e6:	c0 59       	subi	r28, 0x90	; 144
    b1e8:	d0 40       	sbci	r29, 0x00	; 0
    b1ea:	8f 93       	push	r24
    b1ec:	c1 57       	subi	r28, 0x71	; 113
    b1ee:	df 4f       	sbci	r29, 0xFF	; 255
    b1f0:	88 81       	ld	r24, Y
    b1f2:	cf 58       	subi	r28, 0x8F	; 143
    b1f4:	d0 40       	sbci	r29, 0x00	; 0
    b1f6:	8f 93       	push	r24
    b1f8:	c2 57       	subi	r28, 0x72	; 114
    b1fa:	df 4f       	sbci	r29, 0xFF	; 255
    b1fc:	88 81       	ld	r24, Y
    b1fe:	ce 58       	subi	r28, 0x8E	; 142
    b200:	d0 40       	sbci	r29, 0x00	; 0
    b202:	8f 93       	push	r24
    b204:	c3 57       	subi	r28, 0x73	; 115
    b206:	df 4f       	sbci	r29, 0xFF	; 255
    b208:	88 81       	ld	r24, Y
    b20a:	cd 58       	subi	r28, 0x8D	; 141
    b20c:	d0 40       	sbci	r29, 0x00	; 0
    b20e:	8f 93       	push	r24
    b210:	c8 56       	subi	r28, 0x68	; 104
    b212:	df 4f       	sbci	r29, 0xFF	; 255
    b214:	88 81       	ld	r24, Y
    b216:	c8 59       	subi	r28, 0x98	; 152
    b218:	d0 40       	sbci	r29, 0x00	; 0
    b21a:	8f 93       	push	r24
    b21c:	c9 56       	subi	r28, 0x69	; 105
    b21e:	df 4f       	sbci	r29, 0xFF	; 255
    b220:	88 81       	ld	r24, Y
    b222:	c7 59       	subi	r28, 0x97	; 151
    b224:	d0 40       	sbci	r29, 0x00	; 0
    b226:	8f 93       	push	r24
    b228:	86 e0       	ldi	r24, 0x06	; 6
    b22a:	98 e0       	ldi	r25, 0x08	; 8
    b22c:	9f 93       	push	r25
    b22e:	8f 93       	push	r24
    b230:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
					if (f_getfree(ptr, (DWORD*)&p1, &fs) == FR_OK) {
    b234:	ae 01       	movw	r20, r28
    b236:	4f 56       	subi	r20, 0x6F	; 111
    b238:	5f 4f       	sbci	r21, 0xFF	; 255
    b23a:	be 01       	movw	r22, r28
    b23c:	63 57       	subi	r22, 0x73	; 115
    b23e:	7f 4f       	sbci	r23, 0xFF	; 255
    b240:	c7 56       	subi	r28, 0x67	; 103
    b242:	df 4f       	sbci	r29, 0xFF	; 255
    b244:	88 81       	ld	r24, Y
    b246:	99 81       	ldd	r25, Y+1	; 0x01
    b248:	c9 59       	subi	r28, 0x99	; 153
    b24a:	d0 40       	sbci	r29, 0x00	; 0
    b24c:	0e 94 06 41 	call	0x820c	; 0x820c <f_getfree>
    b250:	0f b6       	in	r0, 0x3f	; 63
    b252:	f8 94       	cli
    b254:	de bf       	out	0x3e, r29	; 62
    b256:	0f be       	out	0x3f, r0	; 63
    b258:	cd bf       	out	0x3d, r28	; 61
    b25a:	89 2b       	or	r24, r25
    b25c:	11 f0       	breq	.+4      	; 0xb262 <main+0x1960>
    b25e:	0c 94 06 4d 	jmp	0x9a0c	; 0x9a0c <main+0x10a>
						xprintf(PSTR(", %10luKiB free\n"), p1 * fs->csize / 2);
    b262:	cf 56       	subi	r28, 0x6F	; 111
    b264:	df 4f       	sbci	r29, 0xFF	; 255
    b266:	e8 81       	ld	r30, Y
    b268:	f9 81       	ldd	r31, Y+1	; 0x01
    b26a:	c1 59       	subi	r28, 0x91	; 145
    b26c:	d0 40       	sbci	r29, 0x00	; 0
    b26e:	a1 85       	ldd	r26, Z+9	; 0x09
    b270:	b2 85       	ldd	r27, Z+10	; 0x0a
    b272:	c3 57       	subi	r28, 0x73	; 115
    b274:	df 4f       	sbci	r29, 0xFF	; 255
    b276:	28 81       	ld	r18, Y
    b278:	39 81       	ldd	r19, Y+1	; 0x01
    b27a:	4a 81       	ldd	r20, Y+2	; 0x02
    b27c:	5b 81       	ldd	r21, Y+3	; 0x03
    b27e:	cd 58       	subi	r28, 0x8D	; 141
    b280:	d0 40       	sbci	r29, 0x00	; 0
    b282:	0e 94 ca 59 	call	0xb394	; 0xb394 <__muluhisi3>
    b286:	c4 56       	subi	r28, 0x64	; 100
    b288:	df 4f       	sbci	r29, 0xFF	; 255
    b28a:	68 83       	st	Y, r22
    b28c:	79 83       	std	Y+1, r23	; 0x01
    b28e:	8a 83       	std	Y+2, r24	; 0x02
    b290:	9b 83       	std	Y+3, r25	; 0x03
    b292:	cc 59       	subi	r28, 0x9C	; 156
    b294:	d0 40       	sbci	r29, 0x00	; 0
    b296:	22 e0       	ldi	r18, 0x02	; 2
    b298:	30 e0       	ldi	r19, 0x00	; 0
    b29a:	40 e0       	ldi	r20, 0x00	; 0
    b29c:	50 e0       	ldi	r21, 0x00	; 0
    b29e:	0e 94 a2 59 	call	0xb344	; 0xb344 <__divmodsi4>
    b2a2:	5f 93       	push	r21
    b2a4:	4f 93       	push	r20
    b2a6:	3f 93       	push	r19
    b2a8:	2f 93       	push	r18
    b2aa:	85 ef       	ldi	r24, 0xF5	; 245
    b2ac:	97 e0       	ldi	r25, 0x07	; 7
    b2ae:	9f 93       	push	r25
    b2b0:	8f 93       	push	r24
    b2b2:	0e 94 28 08 	call	0x1050	; 0x1050 <xprintf>
    b2b6:	ea c8       	rjmp	.-3628   	; 0xa48c <main+0xb8a>
				if (fr) put_rc(fr);
    b2b8:	c9 01       	movw	r24, r18
    b2ba:	0e 94 b3 08 	call	0x1166	; 0x1166 <put_rc>
    b2be:	fd ce       	rjmp	.-518    	; 0xb0ba <main+0x17b8>

0000b2c0 <__udivmodqi4>:
	sub	r_rem,r_rem	; clear remainder and carry
    b2c0:	99 1b       	sub	r25, r25
	ldi	r_cnt,9		; init loop counter
    b2c2:	79 e0       	ldi	r23, 0x09	; 9
	rjmp	__udivmodqi4_ep	; jump to entry point
    b2c4:	04 c0       	rjmp	.+8      	; 0xb2ce <__udivmodqi4_ep>

0000b2c6 <__udivmodqi4_loop>:
	rol	r_rem		; shift dividend into remainder
    b2c6:	99 1f       	adc	r25, r25
	cp	r_rem,r_arg2	; compare remainder & divisor
    b2c8:	96 17       	cp	r25, r22
	brcs	__udivmodqi4_ep	; remainder <= divisor
    b2ca:	08 f0       	brcs	.+2      	; 0xb2ce <__udivmodqi4_ep>
	sub	r_rem,r_arg2	; restore remainder
    b2cc:	96 1b       	sub	r25, r22

0000b2ce <__udivmodqi4_ep>:
	rol	r_arg1		; shift dividend (with CARRY)
    b2ce:	88 1f       	adc	r24, r24
	dec	r_cnt		; decrement loop counter
    b2d0:	7a 95       	dec	r23
	brne	__udivmodqi4_loop
    b2d2:	c9 f7       	brne	.-14     	; 0xb2c6 <__udivmodqi4_loop>
	com	r_arg1		; complement result
    b2d4:	80 95       	com	r24
	ret
    b2d6:	08 95       	ret

0000b2d8 <__udivmodhi4>:
	sub	r_remL,r_remL
    b2d8:	aa 1b       	sub	r26, r26
	sub	r_remH,r_remH	; clear remainder and carry
    b2da:	bb 1b       	sub	r27, r27
	ldi	r_cnt,17	; init loop counter
    b2dc:	51 e1       	ldi	r21, 0x11	; 17
	rjmp	__udivmodhi4_ep	; jump to entry point
    b2de:	07 c0       	rjmp	.+14     	; 0xb2ee <__udivmodhi4_ep>

0000b2e0 <__udivmodhi4_loop>:
        rol	r_remL		; shift dividend into remainder
    b2e0:	aa 1f       	adc	r26, r26
	rol	r_remH
    b2e2:	bb 1f       	adc	r27, r27
        cp	r_remL,r_arg2L	; compare remainder & divisor
    b2e4:	a6 17       	cp	r26, r22
	cpc	r_remH,r_arg2H
    b2e6:	b7 07       	cpc	r27, r23
        brcs	__udivmodhi4_ep	; remainder < divisor
    b2e8:	10 f0       	brcs	.+4      	; 0xb2ee <__udivmodhi4_ep>
        sub	r_remL,r_arg2L	; restore remainder
    b2ea:	a6 1b       	sub	r26, r22
        sbc	r_remH,r_arg2H
    b2ec:	b7 0b       	sbc	r27, r23

0000b2ee <__udivmodhi4_ep>:
        rol	r_arg1L		; shift dividend (with CARRY)
    b2ee:	88 1f       	adc	r24, r24
        rol	r_arg1H
    b2f0:	99 1f       	adc	r25, r25
        dec	r_cnt		; decrement loop counter
    b2f2:	5a 95       	dec	r21
        brne	__udivmodhi4_loop
    b2f4:	a9 f7       	brne	.-22     	; 0xb2e0 <__udivmodhi4_loop>
	com	r_arg1L
    b2f6:	80 95       	com	r24
	com	r_arg1H
    b2f8:	90 95       	com	r25
	mov_l	r_arg2L, r_arg1L	; quotient
    b2fa:	bc 01       	movw	r22, r24
	mov_l	r_arg1L, r_remL		; remainder
    b2fc:	cd 01       	movw	r24, r26
	ret
    b2fe:	08 95       	ret

0000b300 <__udivmodsi4>:
	ldi	r_remL, 33	; init loop counter
    b300:	a1 e2       	ldi	r26, 0x21	; 33
	mov	r_cnt, r_remL
    b302:	1a 2e       	mov	r1, r26
	sub	r_remL,r_remL
    b304:	aa 1b       	sub	r26, r26
	sub	r_remH,r_remH	; clear remainder and carry
    b306:	bb 1b       	sub	r27, r27
	mov_l	r_remHL, r_remL
    b308:	fd 01       	movw	r30, r26
	rjmp	__udivmodsi4_ep	; jump to entry point
    b30a:	0d c0       	rjmp	.+26     	; 0xb326 <__udivmodsi4_ep>

0000b30c <__udivmodsi4_loop>:
        rol	r_remL		; shift dividend into remainder
    b30c:	aa 1f       	adc	r26, r26
	rol	r_remH
    b30e:	bb 1f       	adc	r27, r27
	rol	r_remHL
    b310:	ee 1f       	adc	r30, r30
	rol	r_remHH
    b312:	ff 1f       	adc	r31, r31
        cp	r_remL,r_arg2L	; compare remainder & divisor
    b314:	a2 17       	cp	r26, r18
	cpc	r_remH,r_arg2H
    b316:	b3 07       	cpc	r27, r19
	cpc	r_remHL,r_arg2HL
    b318:	e4 07       	cpc	r30, r20
	cpc	r_remHH,r_arg2HH
    b31a:	f5 07       	cpc	r31, r21
	brcs	__udivmodsi4_ep	; remainder <= divisor
    b31c:	20 f0       	brcs	.+8      	; 0xb326 <__udivmodsi4_ep>
        sub	r_remL,r_arg2L	; restore remainder
    b31e:	a2 1b       	sub	r26, r18
        sbc	r_remH,r_arg2H
    b320:	b3 0b       	sbc	r27, r19
        sbc	r_remHL,r_arg2HL
    b322:	e4 0b       	sbc	r30, r20
        sbc	r_remHH,r_arg2HH
    b324:	f5 0b       	sbc	r31, r21

0000b326 <__udivmodsi4_ep>:
        rol	r_arg1L		; shift dividend (with CARRY)
    b326:	66 1f       	adc	r22, r22
        rol	r_arg1H
    b328:	77 1f       	adc	r23, r23
        rol	r_arg1HL
    b32a:	88 1f       	adc	r24, r24
        rol	r_arg1HH
    b32c:	99 1f       	adc	r25, r25
        dec	r_cnt		; decrement loop counter
    b32e:	1a 94       	dec	r1
        brne	__udivmodsi4_loop
    b330:	69 f7       	brne	.-38     	; 0xb30c <__udivmodsi4_loop>
	com	r_arg1L
    b332:	60 95       	com	r22
	com	r_arg1H
    b334:	70 95       	com	r23
	com	r_arg1HL
    b336:	80 95       	com	r24
	com	r_arg1HH
    b338:	90 95       	com	r25
	mov_l	r_arg2L,  r_arg1L	; quotient
    b33a:	9b 01       	movw	r18, r22
	mov_l	r_arg2HL, r_arg1HL
    b33c:	ac 01       	movw	r20, r24
	mov_l	r_arg1L,  r_remL	; remainder
    b33e:	bd 01       	movw	r22, r26
	mov_l	r_arg1HL, r_remHL
    b340:	cf 01       	movw	r24, r30
	ret
    b342:	08 95       	ret

0000b344 <__divmodsi4>:
    mov     __tmp_reg__,r_arg2HH
    b344:	05 2e       	mov	r0, r21
    bst     r_arg1HH,7          ; store sign of dividend
    b346:	97 fb       	bst	r25, 7
    brtc    0f
    b348:	1e f4       	brtc	.+6      	; 0xb350 <__divmodsi4+0xc>
    com     __tmp_reg__         ; r0.7 is sign of result
    b34a:	00 94       	com	r0
    XCALL   __negsi2            ; dividend negative: negate
    b34c:	0e 94 b9 59 	call	0xb372	; 0xb372 <__negsi2>
    sbrc    r_arg2HH,7
    b350:	57 fd       	sbrc	r21, 7
    rcall   __divmodsi4_neg2    ; divisor negative: negate
    b352:	07 d0       	rcall	.+14     	; 0xb362 <__divmodsi4_neg2>
    XCALL   __udivmodsi4        ; do the unsigned div/mod
    b354:	0e 94 80 59 	call	0xb300	; 0xb300 <__udivmodsi4>
    sbrc    __tmp_reg__, 7      ; correct quotient sign
    b358:	07 fc       	sbrc	r0, 7
    rcall   __divmodsi4_neg2
    b35a:	03 d0       	rcall	.+6      	; 0xb362 <__divmodsi4_neg2>
    brtc    __divmodsi4_exit    ; correct remainder sign
    b35c:	4e f4       	brtc	.+18     	; 0xb370 <__divmodsi4_exit>
    XJMP    __negsi2
    b35e:	0c 94 b9 59 	jmp	0xb372	; 0xb372 <__negsi2>

0000b362 <__divmodsi4_neg2>:
    com     r_arg2HH
    b362:	50 95       	com	r21
    com     r_arg2HL
    b364:	40 95       	com	r20
    com     r_arg2H
    b366:	30 95       	com	r19
    neg     r_arg2L
    b368:	21 95       	neg	r18
    sbci    r_arg2H,0xff
    b36a:	3f 4f       	sbci	r19, 0xFF	; 255
    sbci    r_arg2HL,0xff
    b36c:	4f 4f       	sbci	r20, 0xFF	; 255
    sbci    r_arg2HH,0xff
    b36e:	5f 4f       	sbci	r21, 0xFF	; 255

0000b370 <__divmodsi4_exit>:
    ret
    b370:	08 95       	ret

0000b372 <__negsi2>:
    NEG4    22
    b372:	90 95       	com	r25
    b374:	80 95       	com	r24
    b376:	70 95       	com	r23
    b378:	61 95       	neg	r22
    b37a:	7f 4f       	sbci	r23, 0xFF	; 255
    b37c:	8f 4f       	sbci	r24, 0xFF	; 255
    b37e:	9f 4f       	sbci	r25, 0xFF	; 255
    ret
    b380:	08 95       	ret

0000b382 <__tablejump2__>:
    lsl     r30
    b382:	ee 0f       	add	r30, r30
    rol     r31
    b384:	ff 1f       	adc	r31, r31
    clr     __tmp_reg__
    b386:	00 24       	eor	r0, r0
    rol     __tmp_reg__
    b388:	00 1c       	adc	r0, r0
    out     __RAMPZ__, __tmp_reg__
    b38a:	0b be       	out	0x3b, r0	; 59
    elpm    __tmp_reg__, Z+
    b38c:	07 90       	elpm	r0, Z+
    elpm    r31, Z
    b38e:	f6 91       	elpm	r31, Z
    mov     r30, __tmp_reg__
    b390:	e0 2d       	mov	r30, r0
    XIJMP
    b392:	09 94       	ijmp

0000b394 <__muluhisi3>:
    XCALL   __umulhisi3
    b394:	0e 94 bb 5a 	call	0xb576	; 0xb576 <__umulhisi3>
    mul     A0, B3
    b398:	a5 9f       	mul	r26, r21
    add     C3, r0
    b39a:	90 0d       	add	r25, r0
    mul     A1, B2
    b39c:	b4 9f       	mul	r27, r20
    add     C3, r0
    b39e:	90 0d       	add	r25, r0
    mul     A0, B2
    b3a0:	a4 9f       	mul	r26, r20
    add     C2, r0
    b3a2:	80 0d       	add	r24, r0
    adc     C3, r1
    b3a4:	91 1d       	adc	r25, r1
    clr     __zero_reg__
    b3a6:	11 24       	eor	r1, r1
    ret
    b3a8:	08 95       	ret

0000b3aa <__umoddi3>:
    set
    b3aa:	68 94       	set
    rjmp __udivdi3_umoddi3
    b3ac:	01 c0       	rjmp	.+2      	; 0xb3b0 <__udivdi3_umoddi3>

0000b3ae <__udivdi3>:
    clt
    b3ae:	e8 94       	clt

0000b3b0 <__udivdi3_umoddi3>:
    push    C0
    b3b0:	8f 92       	push	r8
    push    C1
    b3b2:	9f 92       	push	r9
    push    C4
    b3b4:	cf 93       	push	r28
    push    C5
    b3b6:	df 93       	push	r29
    XCALL   __udivmod64
    b3b8:	0e 94 e3 59 	call	0xb3c6	; 0xb3c6 <__udivmod64>
    pop     C5
    b3bc:	df 91       	pop	r29
    pop     C4
    b3be:	cf 91       	pop	r28
    pop     C1
    b3c0:	9f 90       	pop	r9
    pop     C0
    b3c2:	8f 90       	pop	r8
    ret
    b3c4:	08 95       	ret

0000b3c6 <__udivmod64>:
    clr     C0
    b3c6:	88 24       	eor	r8, r8
    clr     C1
    b3c8:	99 24       	eor	r9, r9
    wmov    C2, C0
    b3ca:	f4 01       	movw	r30, r8
    wmov    C4, C0
    b3cc:	e4 01       	movw	r28, r8
    ldi     C7, 64
    b3ce:	b0 e4       	ldi	r27, 0x40	; 64
    push    A7
    b3d0:	9f 93       	push	r25
    clr     C6
    b3d2:	aa 27       	eor	r26, r26
    CP  A7,B0  $  cpc C0,B1  $  cpc C1,B2  $  cpc C2,B3
    b3d4:	9a 15       	cp	r25, r10
    b3d6:	8b 04       	cpc	r8, r11
    b3d8:	9c 04       	cpc	r9, r12
    b3da:	ed 05       	cpc	r30, r13
    cpc C3,B4  $  cpc C4,B5  $  cpc C5,B6  $  cpc C6,B7
    b3dc:	fe 05       	cpc	r31, r14
    b3de:	cf 05       	cpc	r28, r15
    b3e0:	d0 07       	cpc	r29, r16
    b3e2:	a1 07       	cpc	r26, r17
    brcc    2f
    b3e4:	98 f4       	brcc	.+38     	; 0xb40c <__udivmod64+0x46>
               $  mov C6,C5  $  mov C5,C4  $  mov C4,C3
    b3e6:	ad 2f       	mov	r26, r29
    b3e8:	dc 2f       	mov	r29, r28
    b3ea:	cf 2f       	mov	r28, r31
    mov C3,C2  $  mov C2,C1  $  mov C1,C0  $  mov C0,A7
    b3ec:	fe 2f       	mov	r31, r30
    b3ee:	e9 2d       	mov	r30, r9
    b3f0:	98 2c       	mov	r9, r8
    b3f2:	89 2e       	mov	r8, r25
    mov A7,A6  $  mov A6,A5  $  mov A5,A4  $  mov A4,A3
    b3f4:	98 2f       	mov	r25, r24
    b3f6:	87 2f       	mov	r24, r23
    b3f8:	76 2f       	mov	r23, r22
    b3fa:	65 2f       	mov	r22, r21
    mov A3,A2  $  mov A2,A1  $  mov A1,A0  $  clr A0
    b3fc:	54 2f       	mov	r21, r20
    b3fe:	43 2f       	mov	r20, r19
    b400:	32 2f       	mov	r19, r18
    b402:	22 27       	eor	r18, r18
    subi    C7, 8
    b404:	b8 50       	subi	r27, 0x08	; 8
    brne    1b
    b406:	31 f7       	brne	.-52     	; 0xb3d4 <__udivmod64+0xe>
    pop     C7
    b408:	bf 91       	pop	r27
    rjmp    5f
    b40a:	27 c0       	rjmp	.+78     	; 0xb45a <__udivmod64+0x94>
    mov     R_cnt, C7
    b40c:	1b 2e       	mov	r1, r27
    pop     C7
    b40e:	bf 91       	pop	r27
    clr     C7
    b410:	bb 27       	eor	r27, r27
    lsl A0     $  rol A1     $  rol A2     $  rol A3
    b412:	22 0f       	add	r18, r18
    b414:	33 1f       	adc	r19, r19
    b416:	44 1f       	adc	r20, r20
    b418:	55 1f       	adc	r21, r21
    rol A4     $  rol A5     $  rol A6     $  rol A7
    b41a:	66 1f       	adc	r22, r22
    b41c:	77 1f       	adc	r23, r23
    b41e:	88 1f       	adc	r24, r24
    b420:	99 1f       	adc	r25, r25
    rol C0     $  rol C1     $  rol C2     $  rol C3
    b422:	88 1c       	adc	r8, r8
    b424:	99 1c       	adc	r9, r9
    b426:	ee 1f       	adc	r30, r30
    b428:	ff 1f       	adc	r31, r31
    rol C4     $  rol C5     $  rol C6     $  rol C7
    b42a:	cc 1f       	adc	r28, r28
    b42c:	dd 1f       	adc	r29, r29
    b42e:	aa 1f       	adc	r26, r26
    b430:	bb 1f       	adc	r27, r27
    CP  C0,B0  $  cpc C1,B1  $  cpc C2,B2  $  cpc C3,B3
    b432:	8a 14       	cp	r8, r10
    b434:	9b 04       	cpc	r9, r11
    b436:	ec 05       	cpc	r30, r12
    b438:	fd 05       	cpc	r31, r13
    cpc C4,B4  $  cpc C5,B5  $  cpc C6,B6  $  cpc C7,B7
    b43a:	ce 05       	cpc	r28, r14
    b43c:	df 05       	cpc	r29, r15
    b43e:	a0 07       	cpc	r26, r16
    b440:	b1 07       	cpc	r27, r17
    brcs 4f
    b442:	48 f0       	brcs	.+18     	; 0xb456 <__udivmod64+0x90>
    SUB C0,B0  $  sbc C1,B1  $  sbc C2,B2  $  sbc C3,B3
    b444:	8a 18       	sub	r8, r10
    b446:	9b 08       	sbc	r9, r11
    b448:	ec 09       	sbc	r30, r12
    b44a:	fd 09       	sbc	r31, r13
    sbc C4,B4  $  sbc C5,B5  $  sbc C6,B6  $  sbc C7,B7
    b44c:	ce 09       	sbc	r28, r14
    b44e:	df 09       	sbc	r29, r15
    b450:	a0 0b       	sbc	r26, r16
    b452:	b1 0b       	sbc	r27, r17
    ori A0, 1
    b454:	21 60       	ori	r18, 0x01	; 1
    dec     R_cnt
    b456:	1a 94       	dec	r1
    brne    3b
    b458:	e1 f6       	brne	.-72     	; 0xb412 <__udivmod64+0x4c>
5:  brtc    6f
    b45a:	2e f4       	brtc	.+10     	; 0xb466 <__udivmod64+0xa0>
    wmov    A0, C0
    b45c:	94 01       	movw	r18, r8
    wmov    A2, C2
    b45e:	af 01       	movw	r20, r30
    wmov    A4, C4
    b460:	be 01       	movw	r22, r28
    wmov    A6, C6
    b462:	cd 01       	movw	r24, r26
    lsl     SS
    b464:	00 0c       	add	r0, r0
6:  ret
    b466:	08 95       	ret

0000b468 <__prologue_saves__>:
	push r2
    b468:	2f 92       	push	r2
	push r3
    b46a:	3f 92       	push	r3
	push r4
    b46c:	4f 92       	push	r4
	push r5
    b46e:	5f 92       	push	r5
	push r6
    b470:	6f 92       	push	r6
	push r7
    b472:	7f 92       	push	r7
	push r8
    b474:	8f 92       	push	r8
	push r9
    b476:	9f 92       	push	r9
	push r10
    b478:	af 92       	push	r10
	push r11
    b47a:	bf 92       	push	r11
	push r12
    b47c:	cf 92       	push	r12
	push r13
    b47e:	df 92       	push	r13
	push r14
    b480:	ef 92       	push	r14
	push r15
    b482:	ff 92       	push	r15
	push r16
    b484:	0f 93       	push	r16
	push r17
    b486:	1f 93       	push	r17
	push r28
    b488:	cf 93       	push	r28
	push r29
    b48a:	df 93       	push	r29
	in	r28,__SP_L__
    b48c:	cd b7       	in	r28, 0x3d	; 61
	in	r29,__SP_H__
    b48e:	de b7       	in	r29, 0x3e	; 62
	sub	r28,r26
    b490:	ca 1b       	sub	r28, r26
	sbc	r29,r27
    b492:	db 0b       	sbc	r29, r27
	in	__tmp_reg__,__SREG__
    b494:	0f b6       	in	r0, 0x3f	; 63
	cli
    b496:	f8 94       	cli
	out	__SP_H__,r29
    b498:	de bf       	out	0x3e, r29	; 62
	out	__SREG__,__tmp_reg__
    b49a:	0f be       	out	0x3f, r0	; 63
	out	__SP_L__,r28
    b49c:	cd bf       	out	0x3d, r28	; 61
	XIJMP
    b49e:	09 94       	ijmp

0000b4a0 <__epilogue_restores__>:
	ldd	r2,Y+18
    b4a0:	2a 88       	ldd	r2, Y+18	; 0x12
	ldd	r3,Y+17
    b4a2:	39 88       	ldd	r3, Y+17	; 0x11
	ldd	r4,Y+16
    b4a4:	48 88       	ldd	r4, Y+16	; 0x10
	ldd	r5,Y+15
    b4a6:	5f 84       	ldd	r5, Y+15	; 0x0f
	ldd	r6,Y+14
    b4a8:	6e 84       	ldd	r6, Y+14	; 0x0e
	ldd	r7,Y+13
    b4aa:	7d 84       	ldd	r7, Y+13	; 0x0d
	ldd	r8,Y+12
    b4ac:	8c 84       	ldd	r8, Y+12	; 0x0c
	ldd	r9,Y+11
    b4ae:	9b 84       	ldd	r9, Y+11	; 0x0b
	ldd	r10,Y+10
    b4b0:	aa 84       	ldd	r10, Y+10	; 0x0a
	ldd	r11,Y+9
    b4b2:	b9 84       	ldd	r11, Y+9	; 0x09
	ldd	r12,Y+8
    b4b4:	c8 84       	ldd	r12, Y+8	; 0x08
	ldd	r13,Y+7
    b4b6:	df 80       	ldd	r13, Y+7	; 0x07
	ldd	r14,Y+6
    b4b8:	ee 80       	ldd	r14, Y+6	; 0x06
	ldd	r15,Y+5
    b4ba:	fd 80       	ldd	r15, Y+5	; 0x05
	ldd	r16,Y+4
    b4bc:	0c 81       	ldd	r16, Y+4	; 0x04
	ldd	r17,Y+3
    b4be:	1b 81       	ldd	r17, Y+3	; 0x03
	ldd	r26,Y+2
    b4c0:	aa 81       	ldd	r26, Y+2	; 0x02
	ldd	r27,Y+1
    b4c2:	b9 81       	ldd	r27, Y+1	; 0x01
	add	r28,r30
    b4c4:	ce 0f       	add	r28, r30
	adc	r29,__zero_reg__
    b4c6:	d1 1d       	adc	r29, r1
	in	__tmp_reg__,__SREG__
    b4c8:	0f b6       	in	r0, 0x3f	; 63
	cli
    b4ca:	f8 94       	cli
	out	__SP_H__,r29
    b4cc:	de bf       	out	0x3e, r29	; 62
	out	__SREG__,__tmp_reg__
    b4ce:	0f be       	out	0x3f, r0	; 63
	out	__SP_L__,r28
    b4d0:	cd bf       	out	0x3d, r28	; 61
	mov_l	r28, r26
    b4d2:	ed 01       	movw	r28, r26
	ret
    b4d4:	08 95       	ret

0000b4d6 <__ashrdi3>:
#define SS __zero_reg__

;; Arithmetic shift right
;; r25:r18 = ashr64 (r25:r18, r17:r16)
DEFUN __ashrdi3
    sbrc    r25, 7
    b4d6:	97 fd       	sbrc	r25, 7
    com     SS
    b4d8:	10 94       	com	r1

0000b4da <__lshrdi3>:

;; Logic shift right
;; r25:r18 = lshr64 (r25:r18, r17:r16)
DEFUN __lshrdi3
    ;; Signs are in SS (zero_reg)
    mov     __tmp_reg__, r16
    b4da:	00 2e       	mov	r0, r16
0:  cpi     r16, 8
    b4dc:	08 30       	cpi	r16, 0x08	; 8
    brlo 2f
    b4de:	98 f0       	brcs	.+38     	; 0xb506 <__lshrdi3+0x2c>
    subi    r16, 8
    b4e0:	08 50       	subi	r16, 0x08	; 8
    mov     r18, r19
    b4e2:	23 2f       	mov	r18, r19
    mov     r19, r20
    b4e4:	34 2f       	mov	r19, r20
    mov     r20, r21
    b4e6:	45 2f       	mov	r20, r21
    mov     r21, r22
    b4e8:	56 2f       	mov	r21, r22
    mov     r22, r23
    b4ea:	67 2f       	mov	r22, r23
    mov     r23, r24
    b4ec:	78 2f       	mov	r23, r24
    mov     r24, r25
    b4ee:	89 2f       	mov	r24, r25
    mov     r25, SS
    b4f0:	91 2d       	mov	r25, r1
    rjmp 0b
    b4f2:	f4 cf       	rjmp	.-24     	; 0xb4dc <__lshrdi3+0x2>
1:  asr     SS
    b4f4:	15 94       	asr	r1
    ror     r25
    b4f6:	97 95       	ror	r25
    ror     r24
    b4f8:	87 95       	ror	r24
    ror     r23
    b4fa:	77 95       	ror	r23
    ror     r22
    b4fc:	67 95       	ror	r22
    ror     r21
    b4fe:	57 95       	ror	r21
    ror     r20
    b500:	47 95       	ror	r20
    ror     r19
    b502:	37 95       	ror	r19
    ror     r18
    b504:	27 95       	ror	r18
2:  dec     r16
    b506:	0a 95       	dec	r16
    brpl 1b
    b508:	aa f7       	brpl	.-22     	; 0xb4f4 <__lshrdi3+0x1a>
    clr     __zero_reg__
    b50a:	11 24       	eor	r1, r1
    mov     r16, __tmp_reg__
    b50c:	00 2d       	mov	r16, r0
    ret
    b50e:	08 95       	ret

0000b510 <__adddi3>:
    ADD A0,B0  $  adc A1,B1  $  adc A2,B2  $  adc A3,B3
    b510:	2a 0d       	add	r18, r10
    b512:	3b 1d       	adc	r19, r11
    b514:	4c 1d       	adc	r20, r12
    b516:	5d 1d       	adc	r21, r13
    adc A4,B4  $  adc A5,B5  $  adc A6,B6  $  adc A7,B7
    b518:	6e 1d       	adc	r22, r14
    b51a:	7f 1d       	adc	r23, r15
    b51c:	80 1f       	adc	r24, r16
    b51e:	91 1f       	adc	r25, r17
    ret
    b520:	08 95       	ret

0000b522 <__adddi3_s8>:
    clr     TT
    b522:	00 24       	eor	r0, r0
    sbrc    r26, 7
    b524:	a7 fd       	sbrc	r26, 7
    com     TT
    b526:	00 94       	com	r0
    ADD A0,r26 $  adc A1,TT  $  adc A2,TT  $  adc A3,TT
    b528:	2a 0f       	add	r18, r26
    b52a:	30 1d       	adc	r19, r0
    b52c:	40 1d       	adc	r20, r0
    b52e:	50 1d       	adc	r21, r0
    adc A4,TT  $  adc A5,TT  $  adc A6,TT  $  adc A7,TT
    b530:	60 1d       	adc	r22, r0
    b532:	70 1d       	adc	r23, r0
    b534:	80 1d       	adc	r24, r0
    b536:	90 1d       	adc	r25, r0
    ret
    b538:	08 95       	ret

0000b53a <__subdi3>:
    SUB A0,B0  $  sbc A1,B1  $  sbc A2,B2  $  sbc A3,B3
    b53a:	2a 19       	sub	r18, r10
    b53c:	3b 09       	sbc	r19, r11
    b53e:	4c 09       	sbc	r20, r12
    b540:	5d 09       	sbc	r21, r13
    sbc A4,B4  $  sbc A5,B5  $  sbc A6,B6  $  sbc A7,B7
    b542:	6e 09       	sbc	r22, r14
    b544:	7f 09       	sbc	r23, r15
    b546:	80 0b       	sbc	r24, r16
    b548:	91 0b       	sbc	r25, r17
    ret
    b54a:	08 95       	ret

0000b54c <__cmpdi2>:
    CP  A0,B0  $  cpc A1,B1  $  cpc A2,B2  $  cpc A3,B3
    b54c:	2a 15       	cp	r18, r10
    b54e:	3b 05       	cpc	r19, r11
    b550:	4c 05       	cpc	r20, r12
    b552:	5d 05       	cpc	r21, r13
    cpc A4,B4  $  cpc A5,B5  $  cpc A6,B6  $  cpc A7,B7
    b554:	6e 05       	cpc	r22, r14
    b556:	7f 05       	cpc	r23, r15
    b558:	80 07       	cpc	r24, r16
    b55a:	91 07       	cpc	r25, r17
    ret
    b55c:	08 95       	ret

0000b55e <__cmpdi2_s8>:
    clr     TT
    b55e:	00 24       	eor	r0, r0
    sbrc    r26, 7
    b560:	a7 fd       	sbrc	r26, 7
    com     TT
    b562:	00 94       	com	r0
    CP  A0,r26 $  cpc A1,TT  $  cpc A2,TT  $  cpc A3,TT
    b564:	2a 17       	cp	r18, r26
    b566:	30 05       	cpc	r19, r0
    b568:	40 05       	cpc	r20, r0
    b56a:	50 05       	cpc	r21, r0
    cpc A4,TT  $  cpc A5,TT  $  cpc A6,TT  $  cpc A7,TT
    b56c:	60 05       	cpc	r22, r0
    b56e:	70 05       	cpc	r23, r0
    b570:	80 05       	cpc	r24, r0
    b572:	90 05       	cpc	r25, r0
    ret
    b574:	08 95       	ret

0000b576 <__umulhisi3>:
    mul     A0, B0
    b576:	a2 9f       	mul	r26, r18
    movw    C0, r0
    b578:	b0 01       	movw	r22, r0
    mul     A1, B1
    b57a:	b3 9f       	mul	r27, r19
    movw    C2, r0
    b57c:	c0 01       	movw	r24, r0
    mul     A0, B1
    b57e:	a3 9f       	mul	r26, r19
    add     C1, r0
    b580:	70 0d       	add	r23, r0
    adc     C2, r1
    b582:	81 1d       	adc	r24, r1
    clr     __zero_reg__
    b584:	11 24       	eor	r1, r1
    adc     C3, __zero_reg__
    b586:	91 1d       	adc	r25, r1
    mul     A1, B0
    b588:	b2 9f       	mul	r27, r18
1:  add     C1, r0
    b58a:	70 0d       	add	r23, r0
    adc     C2, r1
    b58c:	81 1d       	adc	r24, r1
    clr     __zero_reg__
    b58e:	11 24       	eor	r1, r1
    adc     C3, __zero_reg__
    b590:	91 1d       	adc	r25, r1
    ret
    b592:	08 95       	ret

0000b594 <memset>:
    b594:	dc 01       	movw	r26, r24
    b596:	01 c0       	rjmp	.+2      	; 0xb59a <memset+0x6>
    b598:	6d 93       	st	X+, r22
    b59a:	41 50       	subi	r20, 0x01	; 1
    b59c:	50 40       	sbci	r21, 0x00	; 0
    b59e:	e0 f7       	brcc	.-8      	; 0xb598 <memset+0x4>
    b5a0:	08 95       	ret

0000b5a2 <strchr>:
    b5a2:	fc 01       	movw	r30, r24
    b5a4:	81 91       	ld	r24, Z+
    b5a6:	86 17       	cp	r24, r22
    b5a8:	21 f0       	breq	.+8      	; 0xb5b2 <strchr+0x10>
    b5aa:	88 23       	and	r24, r24
    b5ac:	d9 f7       	brne	.-10     	; 0xb5a4 <strchr+0x2>
    b5ae:	99 27       	eor	r25, r25
    b5b0:	08 95       	ret
    b5b2:	31 97       	sbiw	r30, 0x01	; 1
    b5b4:	cf 01       	movw	r24, r30
    b5b6:	08 95       	ret

0000b5b8 <strcpy>:
    b5b8:	fb 01       	movw	r30, r22
    b5ba:	dc 01       	movw	r26, r24
    b5bc:	01 90       	ld	r0, Z+
    b5be:	0d 92       	st	X+, r0
    b5c0:	00 20       	and	r0, r0
    b5c2:	e1 f7       	brne	.-8      	; 0xb5bc <strcpy+0x4>
    b5c4:	08 95       	ret

0000b5c6 <_exit>:
	cli
    b5c6:	f8 94       	cli

0000b5c8 <__stop_program>:
	rjmp	__stop_program
    b5c8:	ff cf       	rjmp	.-2      	; 0xb5c8 <__stop_program>
    b5ca:	d7 58       	subi	r29, 0x87	; 135
    b5cc:	92 54       	subi	r25, 0x42	; 66
    b5ce:	b1 55       	subi	r27, 0x51	; 81
    b5d0:	97 54       	subi	r25, 0x47	; 71
    b5d2:	06 4d       	sbci	r16, 0xD6	; 214
    b5d4:	b5 58       	subi	r27, 0x85	; 133
    b5d6:	6c 57       	subi	r22, 0x7C	; 124
    b5d8:	f1 51       	subi	r31, 0x11	; 17
    b5da:	06 4d       	sbci	r16, 0xD6	; 214
    b5dc:	5f 57       	subi	r21, 0x7F	; 127
    b5de:	93 53       	subi	r25, 0x33	; 51
    b5e0:	06 4d       	sbci	r16, 0xD6	; 214
    b5e2:	21 57       	subi	r18, 0x71	; 113
    b5e4:	6a 54       	subi	r22, 0x4A	; 74
    b5e6:	06 4d       	sbci	r16, 0xD6	; 214
    b5e8:	c2 58       	subi	r28, 0x82	; 130
    b5ea:	d7 54       	subi	r29, 0x47	; 71
    b5ec:	55 52       	subi	r21, 0x25	; 37
    b5ee:	06 4d       	sbci	r16, 0xD6	; 214
    b5f0:	4b 57       	subi	r20, 0x7B	; 123
    b5f2:	15 57       	subi	r17, 0x75	; 117
    b5f4:	23 56       	subi	r18, 0x63	; 99
    b5f6:	a3 57       	subi	r26, 0x73	; 115
    b5f8:	82 0f       	add	r24, r18
    b5fa:	90 0f       	add	r25, r16
    b5fc:	95 0f       	add	r25, r21
    b5fe:	ad 0f       	add	r26, r29
    b600:	bb 0f       	add	r27, r27
    b602:	1a 10       	cpse	r1, r10
    b604:	77 10       	cpse	r7, r7
    b606:	49 4c       	sbci	r20, 0xC9	; 201
    b608:	61 4c       	sbci	r22, 0xC1	; 193
    b60a:	69 4c       	sbci	r22, 0xC9	; 201
    b60c:	6b 4c       	sbci	r22, 0xCB	; 203
    b60e:	6d 4c       	sbci	r22, 0xCD	; 205
    b610:	6f 4c       	sbci	r22, 0xCF	; 207
    b612:	71 4c       	sbci	r23, 0xC1	; 193
    b614:	73 4c       	sbci	r23, 0xC3	; 195
    b616:	76 4c       	sbci	r23, 0xC6	; 198
